
SensorControllerFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800da80  0800da80  0001da80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dee4  0800dee4  000202d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dee4  0800dee4  0001dee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800deec  0800deec  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800deec  0800deec  0001deec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800def0  0800def0  0001def0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0800def4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202d4  2**0
                  CONTENTS
 10 .bss          00001e58  200002d4  200002d4  000202d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000212c  2000212c  000202d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bcf1  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039a1  00000000  00000000  0003bff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001828  00000000  00000000  0003f998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016c8  00000000  00000000  000411c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002405a  00000000  00000000  00042888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001df3c  00000000  00000000  000668e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca141  00000000  00000000  0008481e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014e95f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007a38  00000000  00000000  0014e9b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800da68 	.word	0x0800da68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	0800da68 	.word	0x0800da68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	0000      	movs	r0, r0
	...

08000f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f50:	b5b0      	push	{r4, r5, r7, lr}
 8000f52:	b09c      	sub	sp, #112	; 0x70
 8000f54:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f56:	f000 ffbb 	bl	8001ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5a:	f000 f947 	bl	80011ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5e:	f000 fbd9 	bl	8001714 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f62:	f000 f9ad 	bl	80012c0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000f66:	f000 fbab 	bl	80016c0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000f6a:	f008 ff2d 	bl	8009dc8 <MX_USB_DEVICE_Init>
  MX_I2C2_Init();
 8000f6e:	f000 f9d5 	bl	800131c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000f72:	f000 fb7b 	bl	800166c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000f76:	f000 fa35 	bl	80013e4 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000f7a:	f000 facb 	bl	8001514 <MX_TIM8_Init>
  MX_SPI1_Init();
 8000f7e:	f000 f9fb 	bl	8001378 <MX_SPI1_Init>
  uint8_t regData;
  HAL_StatusTypeDef imuStatus;

  uint8_t logBuf[32];
  uint8_t bufLen;
  uint8_t pwrMgmtData = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	75fb      	strb	r3, [r7, #23]
  uint8_t smplRateData = 0x07;
 8000f86:	2307      	movs	r3, #7
 8000f88:	75bb      	strb	r3, [r7, #22]
  uint8_t configData = 0x00;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	757b      	strb	r3, [r7, #21]

  uint8_t accelData[6];
  uint8_t gyroData[6];

  int16_t Accel_X_RAW = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  int16_t Accel_Y_RAW = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  int16_t Accel_Z_RAW = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

  int16_t Gyro_X_RAW = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  int16_t Gyro_Y_RAW = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  int16_t Gyro_Z_RAW = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

  float Ax, Ay, Az, Gx, Gy, Gz;
  imuStatus = HAL_I2C_Mem_Read(&hi2c1, (0x68 << 1), 0x75, I2C_MEMADD_SIZE_8BIT, &regData, 1, 100);
 8000fb2:	2364      	movs	r3, #100	; 0x64
 8000fb4:	9302      	str	r3, [sp, #8]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	9301      	str	r3, [sp, #4]
 8000fba:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	2275      	movs	r2, #117	; 0x75
 8000fc4:	21d0      	movs	r1, #208	; 0xd0
 8000fc6:	4884      	ldr	r0, [pc, #528]	; (80011d8 <main+0x288>)
 8000fc8:	f001 fd1e 	bl	8002a08 <HAL_I2C_Mem_Read>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

  HAL_I2C_Mem_Write(&hi2c1, (0x68 << 1), 0x6B, I2C_MEMADD_SIZE_8BIT, &pwrMgmtData, 1, 1000);
 8000fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	f107 0317 	add.w	r3, r7, #23
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	226b      	movs	r2, #107	; 0x6b
 8000fe6:	21d0      	movs	r1, #208	; 0xd0
 8000fe8:	487b      	ldr	r0, [pc, #492]	; (80011d8 <main+0x288>)
 8000fea:	f001 fc13 	bl	8002814 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(&hi2c1, (0x68 << 1), 0x19, I2C_MEMADD_SIZE_8BIT, &smplRateData, 1, 1000);
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	9302      	str	r3, [sp, #8]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	f107 0316 	add.w	r3, r7, #22
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2301      	movs	r3, #1
 8001000:	2219      	movs	r2, #25
 8001002:	21d0      	movs	r1, #208	; 0xd0
 8001004:	4874      	ldr	r0, [pc, #464]	; (80011d8 <main+0x288>)
 8001006:	f001 fc05 	bl	8002814 <HAL_I2C_Mem_Write>

  HAL_I2C_Mem_Write(&hi2c1, (0x68 << 1), 0x1C, I2C_MEMADD_SIZE_8BIT, &configData, 1, 1000);
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	9302      	str	r3, [sp, #8]
 8001010:	2301      	movs	r3, #1
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	f107 0315 	add.w	r3, r7, #21
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2301      	movs	r3, #1
 800101c:	221c      	movs	r2, #28
 800101e:	21d0      	movs	r1, #208	; 0xd0
 8001020:	486d      	ldr	r0, [pc, #436]	; (80011d8 <main+0x288>)
 8001022:	f001 fbf7 	bl	8002814 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(&hi2c1, (0x68 << 1), 0x1B, I2C_MEMADD_SIZE_8BIT, &configData, 1, 1000);
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	9302      	str	r3, [sp, #8]
 800102c:	2301      	movs	r3, #1
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	f107 0315 	add.w	r3, r7, #21
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2301      	movs	r3, #1
 8001038:	221b      	movs	r2, #27
 800103a:	21d0      	movs	r1, #208	; 0xd0
 800103c:	4866      	ldr	r0, [pc, #408]	; (80011d8 <main+0x288>)
 800103e:	f001 fbe9 	bl	8002814 <HAL_I2C_Mem_Write>

  float phiHat_deg = 0.0f;
 8001042:	f04f 0300 	mov.w	r3, #0
 8001046:	64fb      	str	r3, [r7, #76]	; 0x4c
  float thetaHat_deg = 0.0f;
 8001048:	f04f 0300 	mov.w	r3, #0
 800104c:	64bb      	str	r3, [r7, #72]	; 0x48
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_I2C_Mem_Read (&hi2c1, (0x68 << 1), 0x3B, 1, accelData, 6, 1000);
 800104e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	2306      	movs	r3, #6
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2301      	movs	r3, #1
 8001060:	223b      	movs	r2, #59	; 0x3b
 8001062:	21d0      	movs	r1, #208	; 0xd0
 8001064:	485c      	ldr	r0, [pc, #368]	; (80011d8 <main+0x288>)
 8001066:	f001 fccf 	bl	8002a08 <HAL_I2C_Mem_Read>

	  Accel_X_RAW = (int16_t)(accelData[0] << 8 | accelData [1]);
 800106a:	7b3b      	ldrb	r3, [r7, #12]
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	b21a      	sxth	r2, r3
 8001070:	7b7b      	ldrb	r3, [r7, #13]
 8001072:	b21b      	sxth	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	  Accel_Y_RAW = (int16_t)(accelData[2] << 8 | accelData [3]);
 800107a:	7bbb      	ldrb	r3, [r7, #14]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21a      	sxth	r2, r3
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	b21b      	sxth	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	  Accel_Z_RAW = (int16_t)(accelData[4] << 8 | accelData [5]);
 800108a:	7c3b      	ldrb	r3, [r7, #16]
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	b21a      	sxth	r2, r3
 8001090:	7c7b      	ldrb	r3, [r7, #17]
 8001092:	b21b      	sxth	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

	  //Get approximate acceleration in m/s^2
	  Ax = Accel_X_RAW/16384.0 * G_MS2;
 800109a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fa40 	bl	8000524 <__aeabi_i2d>
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	4b4c      	ldr	r3, [pc, #304]	; (80011dc <main+0x28c>)
 80010aa:	f7ff fbcf 	bl	800084c <__aeabi_ddiv>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	a346      	add	r3, pc, #280	; (adr r3, 80011d0 <main+0x280>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff fa9c 	bl	80005f8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fd6e 	bl	8000ba8 <__aeabi_d2f>
 80010cc:	4603      	mov	r3, r0
 80010ce:	647b      	str	r3, [r7, #68]	; 0x44
	  Ay = Accel_Y_RAW/16384.0 * G_MS2;
 80010d0:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fa25 	bl	8000524 <__aeabi_i2d>
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <main+0x28c>)
 80010e0:	f7ff fbb4 	bl	800084c <__aeabi_ddiv>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	a338      	add	r3, pc, #224	; (adr r3, 80011d0 <main+0x280>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff fa81 	bl	80005f8 <__aeabi_dmul>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f7ff fd53 	bl	8000ba8 <__aeabi_d2f>
 8001102:	4603      	mov	r3, r0
 8001104:	643b      	str	r3, [r7, #64]	; 0x40
	  Az = Accel_Z_RAW/16384.0 * G_MS2;
 8001106:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fa0a 	bl	8000524 <__aeabi_i2d>
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b31      	ldr	r3, [pc, #196]	; (80011dc <main+0x28c>)
 8001116:	f7ff fb99 	bl	800084c <__aeabi_ddiv>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	a32b      	add	r3, pc, #172	; (adr r3, 80011d0 <main+0x280>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	f7ff fa66 	bl	80005f8 <__aeabi_dmul>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fd38 	bl	8000ba8 <__aeabi_d2f>
 8001138:	4603      	mov	r3, r0
 800113a:	63fb      	str	r3, [r7, #60]	; 0x3c

	  phiHat_deg = atanf(Ay / Az) * RAD_TO_DEG;
 800113c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001140:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001144:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001148:	eeb0 0a66 	vmov.f32	s0, s13
 800114c:	f00c fa94 	bl	800d678 <atanf>
 8001150:	eef0 7a40 	vmov.f32	s15, s0
 8001154:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80011e0 <main+0x290>
 8001158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800115c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	  thetaHat_deg = asinf(Ax / G_MS2) * RAD_TO_DEG;
 8001160:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001164:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80011e4 <main+0x294>
 8001168:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800116c:	eeb0 0a47 	vmov.f32	s0, s14
 8001170:	f00c fb5e 	bl	800d830 <asinf>
 8001174:	eef0 7a40 	vmov.f32	s15, s0
 8001178:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80011e0 <main+0x290>
 800117c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001180:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

	  bufLen = snprintf(logBuf, 32, "%.3f,%.3f\r\n", phiHat_deg, thetaHat_deg);
 8001184:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001186:	f7ff f9df 	bl	8000548 <__aeabi_f2d>
 800118a:	4604      	mov	r4, r0
 800118c:	460d      	mov	r5, r1
 800118e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001190:	f7ff f9da 	bl	8000548 <__aeabi_f2d>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	f107 0018 	add.w	r0, r7, #24
 800119c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011a0:	e9cd 4500 	strd	r4, r5, [sp]
 80011a4:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <main+0x298>)
 80011a6:	2120      	movs	r1, #32
 80011a8:	f009 ffd8 	bl	800b15c <sniprintf>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	  CDC_Transmit_FS((uint8_t *) logBuf, bufLen);
 80011b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	f107 0318 	add.w	r3, r7, #24
 80011bc:	4611      	mov	r1, r2
 80011be:	4618      	mov	r0, r3
 80011c0:	f008 fed4 	bl	8009f6c <CDC_Transmit_FS>

	  HAL_Delay(10);
 80011c4:	200a      	movs	r0, #10
 80011c6:	f000 fef5 	bl	8001fb4 <HAL_Delay>
	  HAL_I2C_Mem_Read (&hi2c1, (0x68 << 1), 0x3B, 1, accelData, 6, 1000);
 80011ca:	e740      	b.n	800104e <main+0xfe>
 80011cc:	f3af 8000 	nop.w
 80011d0:	60000000 	.word	0x60000000
 80011d4:	40239eb8 	.word	0x40239eb8
 80011d8:	200002f0 	.word	0x200002f0
 80011dc:	40d00000 	.word	0x40d00000
 80011e0:	42652ee1 	.word	0x42652ee1
 80011e4:	411cf5c3 	.word	0x411cf5c3
 80011e8:	0800da80 	.word	0x0800da80

080011ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b094      	sub	sp, #80	; 0x50
 80011f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f2:	f107 0320 	add.w	r3, r7, #32
 80011f6:	2230      	movs	r2, #48	; 0x30
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f009 fb3c 	bl	800a878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <SystemClock_Config+0xcc>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	4a27      	ldr	r2, [pc, #156]	; (80012b8 <SystemClock_Config+0xcc>)
 800121a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121e:	6413      	str	r3, [r2, #64]	; 0x40
 8001220:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <SystemClock_Config+0xcc>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <SystemClock_Config+0xd0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a21      	ldr	r2, [pc, #132]	; (80012bc <SystemClock_Config+0xd0>)
 8001236:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <SystemClock_Config+0xd0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001248:	2301      	movs	r3, #1
 800124a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800124c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001252:	2302      	movs	r3, #2
 8001254:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001256:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800125a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800125c:	2308      	movs	r3, #8
 800125e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001260:	2360      	movs	r3, #96	; 0x60
 8001262:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001264:	2302      	movs	r3, #2
 8001266:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001268:	2304      	movs	r3, #4
 800126a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126c:	f107 0320 	add.w	r3, r7, #32
 8001270:	4618      	mov	r0, r3
 8001272:	f003 fbc7 	bl	8004a04 <HAL_RCC_OscConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800127c:	f000 faaa 	bl	80017d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001280:	230f      	movs	r3, #15
 8001282:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001284:	2302      	movs	r3, #2
 8001286:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800128c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001290:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001296:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	2103      	movs	r1, #3
 800129e:	4618      	mov	r0, r3
 80012a0:	f003 fe28 	bl	8004ef4 <HAL_RCC_ClockConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012aa:	f000 fa93 	bl	80017d4 <Error_Handler>
  }
}
 80012ae:	bf00      	nop
 80012b0:	3750      	adds	r7, #80	; 0x50
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40007000 	.word	0x40007000

080012c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <MX_I2C1_Init+0x50>)
 80012c6:	4a13      	ldr	r2, [pc, #76]	; (8001314 <MX_I2C1_Init+0x54>)
 80012c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_I2C1_Init+0x50>)
 80012cc:	4a12      	ldr	r2, [pc, #72]	; (8001318 <MX_I2C1_Init+0x58>)
 80012ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <MX_I2C1_Init+0x50>)
 80012de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <MX_I2C1_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <MX_I2C1_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <MX_I2C1_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <MX_I2C1_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <MX_I2C1_Init+0x50>)
 80012fe:	f001 f945 	bl	800258c <HAL_I2C_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001308:	f000 fa64 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200002f0 	.word	0x200002f0
 8001314:	40005400 	.word	0x40005400
 8001318:	00061a80 	.word	0x00061a80

0800131c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <MX_I2C2_Init+0x50>)
 8001322:	4a13      	ldr	r2, [pc, #76]	; (8001370 <MX_I2C2_Init+0x54>)
 8001324:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_I2C2_Init+0x50>)
 8001328:	4a12      	ldr	r2, [pc, #72]	; (8001374 <MX_I2C2_Init+0x58>)
 800132a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_I2C2_Init+0x50>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_I2C2_Init+0x50>)
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_I2C2_Init+0x50>)
 800133a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800133e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <MX_I2C2_Init+0x50>)
 8001342:	2200      	movs	r2, #0
 8001344:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_I2C2_Init+0x50>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <MX_I2C2_Init+0x50>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_I2C2_Init+0x50>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001358:	4804      	ldr	r0, [pc, #16]	; (800136c <MX_I2C2_Init+0x50>)
 800135a:	f001 f917 	bl	800258c <HAL_I2C_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001364:	f000 fa36 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000344 	.word	0x20000344
 8001370:	40005800 	.word	0x40005800
 8001374:	000186a0 	.word	0x000186a0

08001378 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <MX_SPI1_Init+0x64>)
 800137e:	4a18      	ldr	r2, [pc, #96]	; (80013e0 <MX_SPI1_Init+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_SPI1_Init+0x64>)
 8001384:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001388:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <MX_SPI1_Init+0x64>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <MX_SPI1_Init+0x64>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_SPI1_Init+0x64>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <MX_SPI1_Init+0x64>)
 800139e:	2200      	movs	r2, #0
 80013a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_SPI1_Init+0x64>)
 80013a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_SPI1_Init+0x64>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <MX_SPI1_Init+0x64>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_SPI1_Init+0x64>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <MX_SPI1_Init+0x64>)
 80013be:	2200      	movs	r2, #0
 80013c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_SPI1_Init+0x64>)
 80013c4:	220a      	movs	r2, #10
 80013c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013c8:	4804      	ldr	r0, [pc, #16]	; (80013dc <MX_SPI1_Init+0x64>)
 80013ca:	f003 ffb1 	bl	8005330 <HAL_SPI_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013d4:	f000 f9fe 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000398 	.word	0x20000398
 80013e0:	40013000 	.word	0x40013000

080013e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08e      	sub	sp, #56	; 0x38
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	f107 0320 	add.w	r3, r7, #32
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001414:	4b3d      	ldr	r3, [pc, #244]	; (800150c <MX_TIM3_Init+0x128>)
 8001416:	4a3e      	ldr	r2, [pc, #248]	; (8001510 <MX_TIM3_Init+0x12c>)
 8001418:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800141a:	4b3c      	ldr	r3, [pc, #240]	; (800150c <MX_TIM3_Init+0x128>)
 800141c:	2200      	movs	r2, #0
 800141e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001420:	4b3a      	ldr	r3, [pc, #232]	; (800150c <MX_TIM3_Init+0x128>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001426:	4b39      	ldr	r3, [pc, #228]	; (800150c <MX_TIM3_Init+0x128>)
 8001428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800142c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142e:	4b37      	ldr	r3, [pc, #220]	; (800150c <MX_TIM3_Init+0x128>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b35      	ldr	r3, [pc, #212]	; (800150c <MX_TIM3_Init+0x128>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800143a:	4834      	ldr	r0, [pc, #208]	; (800150c <MX_TIM3_Init+0x128>)
 800143c:	f004 f801 	bl	8005442 <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001446:	f000 f9c5 	bl	80017d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001450:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001454:	4619      	mov	r1, r3
 8001456:	482d      	ldr	r0, [pc, #180]	; (800150c <MX_TIM3_Init+0x128>)
 8001458:	f004 f95e 	bl	8005718 <HAL_TIM_ConfigClockSource>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001462:	f000 f9b7 	bl	80017d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001466:	4829      	ldr	r0, [pc, #164]	; (800150c <MX_TIM3_Init+0x128>)
 8001468:	f004 f83a 	bl	80054e0 <HAL_TIM_PWM_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001472:	f000 f9af 	bl	80017d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	4619      	mov	r1, r3
 8001484:	4821      	ldr	r0, [pc, #132]	; (800150c <MX_TIM3_Init+0x128>)
 8001486:	f004 fcf9 	bl	8005e7c <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001490:	f000 f9a0 	bl	80017d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001494:	2360      	movs	r3, #96	; 0x60
 8001496:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	2200      	movs	r2, #0
 80014a8:	4619      	mov	r1, r3
 80014aa:	4818      	ldr	r0, [pc, #96]	; (800150c <MX_TIM3_Init+0x128>)
 80014ac:	f004 f872 	bl	8005594 <HAL_TIM_PWM_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014b6:	f000 f98d 	bl	80017d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2204      	movs	r2, #4
 80014be:	4619      	mov	r1, r3
 80014c0:	4812      	ldr	r0, [pc, #72]	; (800150c <MX_TIM3_Init+0x128>)
 80014c2:	f004 f867 	bl	8005594 <HAL_TIM_PWM_ConfigChannel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80014cc:	f000 f982 	bl	80017d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	2208      	movs	r2, #8
 80014d4:	4619      	mov	r1, r3
 80014d6:	480d      	ldr	r0, [pc, #52]	; (800150c <MX_TIM3_Init+0x128>)
 80014d8:	f004 f85c 	bl	8005594 <HAL_TIM_PWM_ConfigChannel>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80014e2:	f000 f977 	bl	80017d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	220c      	movs	r2, #12
 80014ea:	4619      	mov	r1, r3
 80014ec:	4807      	ldr	r0, [pc, #28]	; (800150c <MX_TIM3_Init+0x128>)
 80014ee:	f004 f851 	bl	8005594 <HAL_TIM_PWM_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80014f8:	f000 f96c 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014fc:	4803      	ldr	r0, [pc, #12]	; (800150c <MX_TIM3_Init+0x128>)
 80014fe:	f000 fab3 	bl	8001a68 <HAL_TIM_MspPostInit>

}
 8001502:	bf00      	nop
 8001504:	3738      	adds	r7, #56	; 0x38
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200003f0 	.word	0x200003f0
 8001510:	40000400 	.word	0x40000400

08001514 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b096      	sub	sp, #88	; 0x58
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001528:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]
 8001542:	615a      	str	r2, [r3, #20]
 8001544:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2220      	movs	r2, #32
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f009 f993 	bl	800a878 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001552:	4b44      	ldr	r3, [pc, #272]	; (8001664 <MX_TIM8_Init+0x150>)
 8001554:	4a44      	ldr	r2, [pc, #272]	; (8001668 <MX_TIM8_Init+0x154>)
 8001556:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001558:	4b42      	ldr	r3, [pc, #264]	; (8001664 <MX_TIM8_Init+0x150>)
 800155a:	2200      	movs	r2, #0
 800155c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155e:	4b41      	ldr	r3, [pc, #260]	; (8001664 <MX_TIM8_Init+0x150>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001564:	4b3f      	ldr	r3, [pc, #252]	; (8001664 <MX_TIM8_Init+0x150>)
 8001566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800156a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156c:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <MX_TIM8_Init+0x150>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001572:	4b3c      	ldr	r3, [pc, #240]	; (8001664 <MX_TIM8_Init+0x150>)
 8001574:	2200      	movs	r2, #0
 8001576:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001578:	4b3a      	ldr	r3, [pc, #232]	; (8001664 <MX_TIM8_Init+0x150>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800157e:	4839      	ldr	r0, [pc, #228]	; (8001664 <MX_TIM8_Init+0x150>)
 8001580:	f003 ff5f 	bl	8005442 <HAL_TIM_Base_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800158a:	f000 f923 	bl	80017d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800158e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001592:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001594:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001598:	4619      	mov	r1, r3
 800159a:	4832      	ldr	r0, [pc, #200]	; (8001664 <MX_TIM8_Init+0x150>)
 800159c:	f004 f8bc 	bl	8005718 <HAL_TIM_ConfigClockSource>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80015a6:	f000 f915 	bl	80017d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80015aa:	482e      	ldr	r0, [pc, #184]	; (8001664 <MX_TIM8_Init+0x150>)
 80015ac:	f003 ff98 	bl	80054e0 <HAL_TIM_PWM_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80015b6:	f000 f90d 	bl	80017d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015c6:	4619      	mov	r1, r3
 80015c8:	4826      	ldr	r0, [pc, #152]	; (8001664 <MX_TIM8_Init+0x150>)
 80015ca:	f004 fc57 	bl	8005e7c <HAL_TIMEx_MasterConfigSynchronization>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80015d4:	f000 f8fe 	bl	80017d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d8:	2360      	movs	r3, #96	; 0x60
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015e4:	2300      	movs	r3, #0
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f8:	2200      	movs	r2, #0
 80015fa:	4619      	mov	r1, r3
 80015fc:	4819      	ldr	r0, [pc, #100]	; (8001664 <MX_TIM8_Init+0x150>)
 80015fe:	f003 ffc9 	bl	8005594 <HAL_TIM_PWM_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001608:	f000 f8e4 	bl	80017d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800160c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001610:	2204      	movs	r2, #4
 8001612:	4619      	mov	r1, r3
 8001614:	4813      	ldr	r0, [pc, #76]	; (8001664 <MX_TIM8_Init+0x150>)
 8001616:	f003 ffbd 	bl	8005594 <HAL_TIM_PWM_ConfigChannel>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001620:	f000 f8d8 	bl	80017d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800163c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	4619      	mov	r1, r3
 8001646:	4807      	ldr	r0, [pc, #28]	; (8001664 <MX_TIM8_Init+0x150>)
 8001648:	f004 fc94 	bl	8005f74 <HAL_TIMEx_ConfigBreakDeadTime>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001652:	f000 f8bf 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001656:	4803      	ldr	r0, [pc, #12]	; (8001664 <MX_TIM8_Init+0x150>)
 8001658:	f000 fa06 	bl	8001a68 <HAL_TIM_MspPostInit>

}
 800165c:	bf00      	nop
 800165e:	3758      	adds	r7, #88	; 0x58
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000438 	.word	0x20000438
 8001668:	40010400 	.word	0x40010400

0800166c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001672:	4a12      	ldr	r2, [pc, #72]	; (80016bc <MX_USART1_UART_Init+0x50>)
 8001674:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800167c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <MX_USART1_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_USART1_UART_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_USART1_UART_Init+0x4c>)
 80016a4:	f004 fcb8 	bl	8006018 <HAL_UART_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016ae:	f000 f891 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000480 	.word	0x20000480
 80016bc:	40011000 	.word	0x40011000

080016c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	; (8001710 <MX_USART2_UART_Init+0x50>)
 80016c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016e6:	220c      	movs	r2, #12
 80016e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016f8:	f004 fc8e 	bl	8006018 <HAL_UART_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001702:	f000 f867 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200004c4 	.word	0x200004c4
 8001710:	40004400 	.word	0x40004400

08001714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	4b27      	ldr	r3, [pc, #156]	; (80017cc <MX_GPIO_Init+0xb8>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a26      	ldr	r2, [pc, #152]	; (80017cc <MX_GPIO_Init+0xb8>)
 8001734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b24      	ldr	r3, [pc, #144]	; (80017cc <MX_GPIO_Init+0xb8>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <MX_GPIO_Init+0xb8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a1f      	ldr	r2, [pc, #124]	; (80017cc <MX_GPIO_Init+0xb8>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <MX_GPIO_Init+0xb8>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	4b19      	ldr	r3, [pc, #100]	; (80017cc <MX_GPIO_Init+0xb8>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a18      	ldr	r2, [pc, #96]	; (80017cc <MX_GPIO_Init+0xb8>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <MX_GPIO_Init+0xb8>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <MX_GPIO_Init+0xb8>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a11      	ldr	r2, [pc, #68]	; (80017cc <MX_GPIO_Init+0xb8>)
 8001788:	f043 0304 	orr.w	r3, r3, #4
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <MX_GPIO_Init+0xb8>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a0:	480b      	ldr	r0, [pc, #44]	; (80017d0 <MX_GPIO_Init+0xbc>)
 80017a2:	f000 fed9 	bl	8002558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EEPROM_CS_Pin */
  GPIO_InitStruct.Pin = EEPROM_CS_Pin;
 80017a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ac:	2301      	movs	r3, #1
 80017ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EEPROM_CS_GPIO_Port, &GPIO_InitStruct);
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4619      	mov	r1, r3
 80017be:	4804      	ldr	r0, [pc, #16]	; (80017d0 <MX_GPIO_Init+0xbc>)
 80017c0:	f000 fd2e 	bl	8002220 <HAL_GPIO_Init>

}
 80017c4:	bf00      	nop
 80017c6:	3728      	adds	r7, #40	; 0x28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020400 	.word	0x40020400

080017d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d8:	b672      	cpsid	i
}
 80017da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017dc:	e7fe      	b.n	80017dc <Error_Handler+0x8>
	...

080017e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <HAL_MspInit+0x4c>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	4a0f      	ldr	r2, [pc, #60]	; (800182c <HAL_MspInit+0x4c>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f4:	6453      	str	r3, [r2, #68]	; 0x44
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <HAL_MspInit+0x4c>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_MspInit+0x4c>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a08      	ldr	r2, [pc, #32]	; (800182c <HAL_MspInit+0x4c>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_MspInit+0x4c>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800

08001830 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08c      	sub	sp, #48	; 0x30
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 031c 	add.w	r3, r7, #28
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a32      	ldr	r2, [pc, #200]	; (8001918 <HAL_I2C_MspInit+0xe8>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d12c      	bne.n	80018ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	4b31      	ldr	r3, [pc, #196]	; (800191c <HAL_I2C_MspInit+0xec>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a30      	ldr	r2, [pc, #192]	; (800191c <HAL_I2C_MspInit+0xec>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b2e      	ldr	r3, [pc, #184]	; (800191c <HAL_I2C_MspInit+0xec>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800186e:	23c0      	movs	r3, #192	; 0xc0
 8001870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001872:	2312      	movs	r3, #18
 8001874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187a:	2303      	movs	r3, #3
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800187e:	2304      	movs	r3, #4
 8001880:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	4619      	mov	r1, r3
 8001888:	4825      	ldr	r0, [pc, #148]	; (8001920 <HAL_I2C_MspInit+0xf0>)
 800188a:	f000 fcc9 	bl	8002220 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	4b22      	ldr	r3, [pc, #136]	; (800191c <HAL_I2C_MspInit+0xec>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a21      	ldr	r2, [pc, #132]	; (800191c <HAL_I2C_MspInit+0xec>)
 8001898:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b1f      	ldr	r3, [pc, #124]	; (800191c <HAL_I2C_MspInit+0xec>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018aa:	e031      	b.n	8001910 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a1c      	ldr	r2, [pc, #112]	; (8001924 <HAL_I2C_MspInit+0xf4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d12c      	bne.n	8001910 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	4b18      	ldr	r3, [pc, #96]	; (800191c <HAL_I2C_MspInit+0xec>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a17      	ldr	r2, [pc, #92]	; (800191c <HAL_I2C_MspInit+0xec>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_I2C_MspInit+0xec>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d8:	2312      	movs	r3, #18
 80018da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e0:	2303      	movs	r3, #3
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018e4:	2304      	movs	r3, #4
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	4619      	mov	r1, r3
 80018ee:	480c      	ldr	r0, [pc, #48]	; (8001920 <HAL_I2C_MspInit+0xf0>)
 80018f0:	f000 fc96 	bl	8002220 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <HAL_I2C_MspInit+0xec>)
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	4a07      	ldr	r2, [pc, #28]	; (800191c <HAL_I2C_MspInit+0xec>)
 80018fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001902:	6413      	str	r3, [r2, #64]	; 0x40
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_I2C_MspInit+0xec>)
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	bf00      	nop
 8001912:	3730      	adds	r7, #48	; 0x30
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40005400 	.word	0x40005400
 800191c:	40023800 	.word	0x40023800
 8001920:	40020400 	.word	0x40020400
 8001924:	40005800 	.word	0x40005800

08001928 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a28      	ldr	r2, [pc, #160]	; (80019e8 <HAL_SPI_MspInit+0xc0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d149      	bne.n	80019de <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	4b27      	ldr	r3, [pc, #156]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	4a26      	ldr	r2, [pc, #152]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 8001954:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001958:	6453      	str	r3, [r2, #68]	; 0x44
 800195a:	4b24      	ldr	r3, [pc, #144]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b20      	ldr	r3, [pc, #128]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a1f      	ldr	r2, [pc, #124]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a18      	ldr	r2, [pc, #96]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800199e:	2320      	movs	r3, #32
 80019a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ae:	2305      	movs	r3, #5
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	480d      	ldr	r0, [pc, #52]	; (80019f0 <HAL_SPI_MspInit+0xc8>)
 80019ba:	f000 fc31 	bl	8002220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80019be:	2330      	movs	r3, #48	; 0x30
 80019c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ca:	2303      	movs	r3, #3
 80019cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ce:	2305      	movs	r3, #5
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	4806      	ldr	r0, [pc, #24]	; (80019f4 <HAL_SPI_MspInit+0xcc>)
 80019da:	f000 fc21 	bl	8002220 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019de:	bf00      	nop
 80019e0:	3728      	adds	r7, #40	; 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40013000 	.word	0x40013000
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020000 	.word	0x40020000
 80019f4:	40020400 	.word	0x40020400

080019f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a15      	ldr	r2, [pc, #84]	; (8001a5c <HAL_TIM_Base_MspInit+0x64>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d10e      	bne.n	8001a28 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_TIM_Base_MspInit+0x68>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a13      	ldr	r2, [pc, #76]	; (8001a60 <HAL_TIM_Base_MspInit+0x68>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_TIM_Base_MspInit+0x68>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001a26:	e012      	b.n	8001a4e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <HAL_TIM_Base_MspInit+0x6c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d10d      	bne.n	8001a4e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <HAL_TIM_Base_MspInit+0x68>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a09      	ldr	r2, [pc, #36]	; (8001a60 <HAL_TIM_Base_MspInit+0x68>)
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <HAL_TIM_Base_MspInit+0x68>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40000400 	.word	0x40000400
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40010400 	.word	0x40010400

08001a68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	; 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a33      	ldr	r2, [pc, #204]	; (8001b54 <HAL_TIM_MspPostInit+0xec>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d13c      	bne.n	8001b04 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <HAL_TIM_MspPostInit+0xf0>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a31      	ldr	r2, [pc, #196]	; (8001b58 <HAL_TIM_MspPostInit+0xf0>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b2f      	ldr	r3, [pc, #188]	; (8001b58 <HAL_TIM_MspPostInit+0xf0>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <HAL_TIM_MspPostInit+0xf0>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a2a      	ldr	r2, [pc, #168]	; (8001b58 <HAL_TIM_MspPostInit+0xf0>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <HAL_TIM_MspPostInit+0xf0>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ac2:	23c0      	movs	r3, #192	; 0xc0
 8001ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	481f      	ldr	r0, [pc, #124]	; (8001b5c <HAL_TIM_MspPostInit+0xf4>)
 8001ade:	f000 fb9f 	bl	8002220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2300      	movs	r3, #0
 8001af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001af2:	2302      	movs	r3, #2
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	4818      	ldr	r0, [pc, #96]	; (8001b60 <HAL_TIM_MspPostInit+0xf8>)
 8001afe:	f000 fb8f 	bl	8002220 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001b02:	e022      	b.n	8001b4a <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM8)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a16      	ldr	r2, [pc, #88]	; (8001b64 <HAL_TIM_MspPostInit+0xfc>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d11d      	bne.n	8001b4a <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_TIM_MspPostInit+0xf0>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a10      	ldr	r2, [pc, #64]	; (8001b58 <HAL_TIM_MspPostInit+0xf0>)
 8001b18:	f043 0304 	orr.w	r3, r3, #4
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_TIM_MspPostInit+0xf0>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b2a:	23c0      	movs	r3, #192	; 0xc0
 8001b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	4808      	ldr	r0, [pc, #32]	; (8001b68 <HAL_TIM_MspPostInit+0x100>)
 8001b46:	f000 fb6b 	bl	8002220 <HAL_GPIO_Init>
}
 8001b4a:	bf00      	nop
 8001b4c:	3728      	adds	r7, #40	; 0x28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40000400 	.word	0x40000400
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40020000 	.word	0x40020000
 8001b60:	40020400 	.word	0x40020400
 8001b64:	40010400 	.word	0x40010400
 8001b68:	40020800 	.word	0x40020800

08001b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08c      	sub	sp, #48	; 0x30
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 031c 	add.w	r3, r7, #28
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a32      	ldr	r2, [pc, #200]	; (8001c54 <HAL_UART_MspInit+0xe8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d12d      	bne.n	8001bea <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
 8001b92:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <HAL_UART_MspInit+0xec>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	4a30      	ldr	r2, [pc, #192]	; (8001c58 <HAL_UART_MspInit+0xec>)
 8001b98:	f043 0310 	orr.w	r3, r3, #16
 8001b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9e:	4b2e      	ldr	r3, [pc, #184]	; (8001c58 <HAL_UART_MspInit+0xec>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	61bb      	str	r3, [r7, #24]
 8001ba8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <HAL_UART_MspInit+0xec>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a29      	ldr	r2, [pc, #164]	; (8001c58 <HAL_UART_MspInit+0xec>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <HAL_UART_MspInit+0xec>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bc6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bd8:	2307      	movs	r3, #7
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	481e      	ldr	r0, [pc, #120]	; (8001c5c <HAL_UART_MspInit+0xf0>)
 8001be4:	f000 fb1c 	bl	8002220 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001be8:	e030      	b.n	8001c4c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1c      	ldr	r2, [pc, #112]	; (8001c60 <HAL_UART_MspInit+0xf4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d12b      	bne.n	8001c4c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_UART_MspInit+0xec>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	4a16      	ldr	r2, [pc, #88]	; (8001c58 <HAL_UART_MspInit+0xec>)
 8001bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c02:	6413      	str	r3, [r2, #64]	; 0x40
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <HAL_UART_MspInit+0xec>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_UART_MspInit+0xec>)
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	4a0f      	ldr	r2, [pc, #60]	; (8001c58 <HAL_UART_MspInit+0xec>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c20:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <HAL_UART_MspInit+0xec>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c2c:	230c      	movs	r3, #12
 8001c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c3c:	2307      	movs	r3, #7
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	4619      	mov	r1, r3
 8001c46:	4805      	ldr	r0, [pc, #20]	; (8001c5c <HAL_UART_MspInit+0xf0>)
 8001c48:	f000 faea 	bl	8002220 <HAL_GPIO_Init>
}
 8001c4c:	bf00      	nop
 8001c4e:	3730      	adds	r7, #48	; 0x30
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40011000 	.word	0x40011000
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020000 	.word	0x40020000
 8001c60:	40004400 	.word	0x40004400

08001c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <NMI_Handler+0x4>

08001c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c6e:	e7fe      	b.n	8001c6e <HardFault_Handler+0x4>

08001c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <MemManage_Handler+0x4>

08001c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <BusFault_Handler+0x4>

08001c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <UsageFault_Handler+0x4>

08001c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb0:	f000 f960 	bl	8001f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <OTG_FS_IRQHandler+0x10>)
 8001cbe:	f001 fd74 	bl	80037aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200019f0 	.word	0x200019f0

08001ccc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
	return 1;
 8001cd0:	2301      	movs	r3, #1
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <_kill>:

int _kill(int pid, int sig)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ce6:	f008 fd9d 	bl	800a824 <__errno>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2216      	movs	r2, #22
 8001cee:	601a      	str	r2, [r3, #0]
	return -1;
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <_exit>:

void _exit (int status)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ffe7 	bl	8001cdc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d0e:	e7fe      	b.n	8001d0e <_exit+0x12>

08001d10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	e00a      	b.n	8001d38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d22:	f3af 8000 	nop.w
 8001d26:	4601      	mov	r1, r0
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	60ba      	str	r2, [r7, #8]
 8001d2e:	b2ca      	uxtb	r2, r1
 8001d30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3301      	adds	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	dbf0      	blt.n	8001d22 <_read+0x12>
	}

return len;
 8001d40:	687b      	ldr	r3, [r7, #4]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	e009      	b.n	8001d70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	60ba      	str	r2, [r7, #8]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	dbf1      	blt.n	8001d5c <_write+0x12>
	}
	return len;
 8001d78:	687b      	ldr	r3, [r7, #4]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <_close>:

int _close(int file)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
	return -1;
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001daa:	605a      	str	r2, [r3, #4]
	return 0;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <_isatty>:

int _isatty(int file)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
	return 1;
 8001dc2:	2301      	movs	r3, #1
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
	return 0;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df4:	4a14      	ldr	r2, [pc, #80]	; (8001e48 <_sbrk+0x5c>)
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <_sbrk+0x60>)
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <_sbrk+0x64>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d102      	bne.n	8001e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <_sbrk+0x64>)
 8001e0a:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <_sbrk+0x68>)
 8001e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <_sbrk+0x64>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d207      	bcs.n	8001e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e1c:	f008 fd02 	bl	800a824 <__errno>
 8001e20:	4603      	mov	r3, r0
 8001e22:	220c      	movs	r2, #12
 8001e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2a:	e009      	b.n	8001e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e32:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <_sbrk+0x64>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <_sbrk+0x64>)
 8001e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20020000 	.word	0x20020000
 8001e4c:	00000400 	.word	0x00000400
 8001e50:	20000508 	.word	0x20000508
 8001e54:	20002130 	.word	0x20002130

08001e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <SystemInit+0x20>)
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e62:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <SystemInit+0x20>)
 8001e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e80:	480d      	ldr	r0, [pc, #52]	; (8001eb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e82:	490e      	ldr	r1, [pc, #56]	; (8001ebc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e84:	4a0e      	ldr	r2, [pc, #56]	; (8001ec0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e88:	e002      	b.n	8001e90 <LoopCopyDataInit>

08001e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e8e:	3304      	adds	r3, #4

08001e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e94:	d3f9      	bcc.n	8001e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e96:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e98:	4c0b      	ldr	r4, [pc, #44]	; (8001ec8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e9c:	e001      	b.n	8001ea2 <LoopFillZerobss>

08001e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea0:	3204      	adds	r2, #4

08001ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea4:	d3fb      	bcc.n	8001e9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ea6:	f7ff ffd7 	bl	8001e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eaa:	f008 fcc1 	bl	800a830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eae:	f7ff f84f 	bl	8000f50 <main>
  bx  lr    
 8001eb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001eb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ebc:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8001ec0:	0800def4 	.word	0x0800def4
  ldr r2, =_sbss
 8001ec4:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8001ec8:	2000212c 	.word	0x2000212c

08001ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ecc:	e7fe      	b.n	8001ecc <ADC_IRQHandler>
	...

08001ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <HAL_Init+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0d      	ldr	r2, [pc, #52]	; (8001f10 <HAL_Init+0x40>)
 8001eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_Init+0x40>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <HAL_Init+0x40>)
 8001ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <HAL_Init+0x40>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <HAL_Init+0x40>)
 8001ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef8:	2003      	movs	r0, #3
 8001efa:	f000 f94f 	bl	800219c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001efe:	200f      	movs	r0, #15
 8001f00:	f000 f808 	bl	8001f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f04:	f7ff fc6c 	bl	80017e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023c00 	.word	0x40023c00

08001f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_InitTick+0x54>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_InitTick+0x58>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4619      	mov	r1, r3
 8001f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 f967 	bl	8002206 <HAL_SYSTICK_Config>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e00e      	b.n	8001f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b0f      	cmp	r3, #15
 8001f46:	d80a      	bhi.n	8001f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f50:	f000 f92f 	bl	80021b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f54:	4a06      	ldr	r2, [pc, #24]	; (8001f70 <HAL_InitTick+0x5c>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e000      	b.n	8001f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	20000008 	.word	0x20000008
 8001f70:	20000004 	.word	0x20000004

08001f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_IncTick+0x20>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_IncTick+0x24>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <HAL_IncTick+0x24>)
 8001f86:	6013      	str	r3, [r2, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	20000008 	.word	0x20000008
 8001f98:	2000050c 	.word	0x2000050c

08001f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <HAL_GetTick+0x14>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	2000050c 	.word	0x2000050c

08001fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fbc:	f7ff ffee 	bl	8001f9c <HAL_GetTick>
 8001fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fcc:	d005      	beq.n	8001fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <HAL_Delay+0x44>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fda:	bf00      	nop
 8001fdc:	f7ff ffde 	bl	8001f9c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d8f7      	bhi.n	8001fdc <HAL_Delay+0x28>
  {
  }
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000008 	.word	0x20000008

08001ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002018:	4013      	ands	r3, r2
 800201a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202e:	4a04      	ldr	r2, [pc, #16]	; (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	60d3      	str	r3, [r2, #12]
}
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <__NVIC_GetPriorityGrouping+0x18>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	f003 0307 	and.w	r3, r3, #7
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	2b00      	cmp	r3, #0
 8002070:	db0b      	blt.n	800208a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	f003 021f 	and.w	r2, r3, #31
 8002078:	4907      	ldr	r1, [pc, #28]	; (8002098 <__NVIC_EnableIRQ+0x38>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	2001      	movs	r0, #1
 8002082:	fa00 f202 	lsl.w	r2, r0, r2
 8002086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e000e100 	.word	0xe000e100

0800209c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	6039      	str	r1, [r7, #0]
 80020a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	db0a      	blt.n	80020c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	490c      	ldr	r1, [pc, #48]	; (80020e8 <__NVIC_SetPriority+0x4c>)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	0112      	lsls	r2, r2, #4
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	440b      	add	r3, r1
 80020c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c4:	e00a      	b.n	80020dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4908      	ldr	r1, [pc, #32]	; (80020ec <__NVIC_SetPriority+0x50>)
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	3b04      	subs	r3, #4
 80020d4:	0112      	lsls	r2, r2, #4
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	440b      	add	r3, r1
 80020da:	761a      	strb	r2, [r3, #24]
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000e100 	.word	0xe000e100
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	; 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f1c3 0307 	rsb	r3, r3, #7
 800210a:	2b04      	cmp	r3, #4
 800210c:	bf28      	it	cs
 800210e:	2304      	movcs	r3, #4
 8002110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3304      	adds	r3, #4
 8002116:	2b06      	cmp	r3, #6
 8002118:	d902      	bls.n	8002120 <NVIC_EncodePriority+0x30>
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3b03      	subs	r3, #3
 800211e:	e000      	b.n	8002122 <NVIC_EncodePriority+0x32>
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002124:	f04f 32ff 	mov.w	r2, #4294967295
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43da      	mvns	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	401a      	ands	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002138:	f04f 31ff 	mov.w	r1, #4294967295
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	43d9      	mvns	r1, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	4313      	orrs	r3, r2
         );
}
 800214a:	4618      	mov	r0, r3
 800214c:	3724      	adds	r7, #36	; 0x24
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002168:	d301      	bcc.n	800216e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800216a:	2301      	movs	r3, #1
 800216c:	e00f      	b.n	800218e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800216e:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <SysTick_Config+0x40>)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002176:	210f      	movs	r1, #15
 8002178:	f04f 30ff 	mov.w	r0, #4294967295
 800217c:	f7ff ff8e 	bl	800209c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <SysTick_Config+0x40>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002186:	4b04      	ldr	r3, [pc, #16]	; (8002198 <SysTick_Config+0x40>)
 8002188:	2207      	movs	r2, #7
 800218a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	e000e010 	.word	0xe000e010

0800219c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff ff29 	bl	8001ffc <__NVIC_SetPriorityGrouping>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b086      	sub	sp, #24
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c4:	f7ff ff3e 	bl	8002044 <__NVIC_GetPriorityGrouping>
 80021c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	6978      	ldr	r0, [r7, #20]
 80021d0:	f7ff ff8e 	bl	80020f0 <NVIC_EncodePriority>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff5d 	bl	800209c <__NVIC_SetPriority>
}
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff31 	bl	8002060 <__NVIC_EnableIRQ>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ffa2 	bl	8002158 <SysTick_Config>
 8002214:	4603      	mov	r3, r0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002220:	b480      	push	{r7}
 8002222:	b089      	sub	sp, #36	; 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	e16b      	b.n	8002514 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800223c:	2201      	movs	r2, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	429a      	cmp	r2, r3
 8002256:	f040 815a 	bne.w	800250e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d005      	beq.n	8002272 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800226e:	2b02      	cmp	r3, #2
 8002270:	d130      	bne.n	80022d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	2203      	movs	r2, #3
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a8:	2201      	movs	r2, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 0201 	and.w	r2, r3, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d017      	beq.n	8002310 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d123      	bne.n	8002364 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	08da      	lsrs	r2, r3, #3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3208      	adds	r2, #8
 8002324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	220f      	movs	r2, #15
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	08da      	lsrs	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3208      	adds	r2, #8
 800235e:	69b9      	ldr	r1, [r7, #24]
 8002360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0203 	and.w	r2, r3, #3
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80b4 	beq.w	800250e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	4b60      	ldr	r3, [pc, #384]	; (800252c <HAL_GPIO_Init+0x30c>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	4a5f      	ldr	r2, [pc, #380]	; (800252c <HAL_GPIO_Init+0x30c>)
 80023b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b4:	6453      	str	r3, [r2, #68]	; 0x44
 80023b6:	4b5d      	ldr	r3, [pc, #372]	; (800252c <HAL_GPIO_Init+0x30c>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023c2:	4a5b      	ldr	r2, [pc, #364]	; (8002530 <HAL_GPIO_Init+0x310>)
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	089b      	lsrs	r3, r3, #2
 80023c8:	3302      	adds	r3, #2
 80023ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	220f      	movs	r2, #15
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a52      	ldr	r2, [pc, #328]	; (8002534 <HAL_GPIO_Init+0x314>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d02b      	beq.n	8002446 <HAL_GPIO_Init+0x226>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a51      	ldr	r2, [pc, #324]	; (8002538 <HAL_GPIO_Init+0x318>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d025      	beq.n	8002442 <HAL_GPIO_Init+0x222>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a50      	ldr	r2, [pc, #320]	; (800253c <HAL_GPIO_Init+0x31c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01f      	beq.n	800243e <HAL_GPIO_Init+0x21e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4f      	ldr	r2, [pc, #316]	; (8002540 <HAL_GPIO_Init+0x320>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d019      	beq.n	800243a <HAL_GPIO_Init+0x21a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4e      	ldr	r2, [pc, #312]	; (8002544 <HAL_GPIO_Init+0x324>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <HAL_GPIO_Init+0x216>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a4d      	ldr	r2, [pc, #308]	; (8002548 <HAL_GPIO_Init+0x328>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00d      	beq.n	8002432 <HAL_GPIO_Init+0x212>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a4c      	ldr	r2, [pc, #304]	; (800254c <HAL_GPIO_Init+0x32c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d007      	beq.n	800242e <HAL_GPIO_Init+0x20e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4b      	ldr	r2, [pc, #300]	; (8002550 <HAL_GPIO_Init+0x330>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <HAL_GPIO_Init+0x20a>
 8002426:	2307      	movs	r3, #7
 8002428:	e00e      	b.n	8002448 <HAL_GPIO_Init+0x228>
 800242a:	2308      	movs	r3, #8
 800242c:	e00c      	b.n	8002448 <HAL_GPIO_Init+0x228>
 800242e:	2306      	movs	r3, #6
 8002430:	e00a      	b.n	8002448 <HAL_GPIO_Init+0x228>
 8002432:	2305      	movs	r3, #5
 8002434:	e008      	b.n	8002448 <HAL_GPIO_Init+0x228>
 8002436:	2304      	movs	r3, #4
 8002438:	e006      	b.n	8002448 <HAL_GPIO_Init+0x228>
 800243a:	2303      	movs	r3, #3
 800243c:	e004      	b.n	8002448 <HAL_GPIO_Init+0x228>
 800243e:	2302      	movs	r3, #2
 8002440:	e002      	b.n	8002448 <HAL_GPIO_Init+0x228>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_GPIO_Init+0x228>
 8002446:	2300      	movs	r3, #0
 8002448:	69fa      	ldr	r2, [r7, #28]
 800244a:	f002 0203 	and.w	r2, r2, #3
 800244e:	0092      	lsls	r2, r2, #2
 8002450:	4093      	lsls	r3, r2
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002458:	4935      	ldr	r1, [pc, #212]	; (8002530 <HAL_GPIO_Init+0x310>)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	3302      	adds	r3, #2
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002466:	4b3b      	ldr	r3, [pc, #236]	; (8002554 <HAL_GPIO_Init+0x334>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800248a:	4a32      	ldr	r2, [pc, #200]	; (8002554 <HAL_GPIO_Init+0x334>)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002490:	4b30      	ldr	r3, [pc, #192]	; (8002554 <HAL_GPIO_Init+0x334>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024b4:	4a27      	ldr	r2, [pc, #156]	; (8002554 <HAL_GPIO_Init+0x334>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ba:	4b26      	ldr	r3, [pc, #152]	; (8002554 <HAL_GPIO_Init+0x334>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024de:	4a1d      	ldr	r2, [pc, #116]	; (8002554 <HAL_GPIO_Init+0x334>)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e4:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <HAL_GPIO_Init+0x334>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002508:	4a12      	ldr	r2, [pc, #72]	; (8002554 <HAL_GPIO_Init+0x334>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3301      	adds	r3, #1
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	2b0f      	cmp	r3, #15
 8002518:	f67f ae90 	bls.w	800223c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800251c:	bf00      	nop
 800251e:	bf00      	nop
 8002520:	3724      	adds	r7, #36	; 0x24
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40023800 	.word	0x40023800
 8002530:	40013800 	.word	0x40013800
 8002534:	40020000 	.word	0x40020000
 8002538:	40020400 	.word	0x40020400
 800253c:	40020800 	.word	0x40020800
 8002540:	40020c00 	.word	0x40020c00
 8002544:	40021000 	.word	0x40021000
 8002548:	40021400 	.word	0x40021400
 800254c:	40021800 	.word	0x40021800
 8002550:	40021c00 	.word	0x40021c00
 8002554:	40013c00 	.word	0x40013c00

08002558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	807b      	strh	r3, [r7, #2]
 8002564:	4613      	mov	r3, r2
 8002566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002568:	787b      	ldrb	r3, [r7, #1]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800256e:	887a      	ldrh	r2, [r7, #2]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002574:	e003      	b.n	800257e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002576:	887b      	ldrh	r3, [r7, #2]
 8002578:	041a      	lsls	r2, r3, #16
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	619a      	str	r2, [r3, #24]
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e12b      	b.n	80027f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d106      	bne.n	80025b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff f93c 	bl	8001830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2224      	movs	r2, #36	; 0x24
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0201 	bic.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025f0:	f002 fe76 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 80025f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	4a81      	ldr	r2, [pc, #516]	; (8002800 <HAL_I2C_Init+0x274>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d807      	bhi.n	8002610 <HAL_I2C_Init+0x84>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4a80      	ldr	r2, [pc, #512]	; (8002804 <HAL_I2C_Init+0x278>)
 8002604:	4293      	cmp	r3, r2
 8002606:	bf94      	ite	ls
 8002608:	2301      	movls	r3, #1
 800260a:	2300      	movhi	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	e006      	b.n	800261e <HAL_I2C_Init+0x92>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4a7d      	ldr	r2, [pc, #500]	; (8002808 <HAL_I2C_Init+0x27c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	bf94      	ite	ls
 8002618:	2301      	movls	r3, #1
 800261a:	2300      	movhi	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e0e7      	b.n	80027f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4a78      	ldr	r2, [pc, #480]	; (800280c <HAL_I2C_Init+0x280>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	0c9b      	lsrs	r3, r3, #18
 8002630:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4a6a      	ldr	r2, [pc, #424]	; (8002800 <HAL_I2C_Init+0x274>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d802      	bhi.n	8002660 <HAL_I2C_Init+0xd4>
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	3301      	adds	r3, #1
 800265e:	e009      	b.n	8002674 <HAL_I2C_Init+0xe8>
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002666:	fb02 f303 	mul.w	r3, r2, r3
 800266a:	4a69      	ldr	r2, [pc, #420]	; (8002810 <HAL_I2C_Init+0x284>)
 800266c:	fba2 2303 	umull	r2, r3, r2, r3
 8002670:	099b      	lsrs	r3, r3, #6
 8002672:	3301      	adds	r3, #1
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	430b      	orrs	r3, r1
 800267a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002686:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	495c      	ldr	r1, [pc, #368]	; (8002800 <HAL_I2C_Init+0x274>)
 8002690:	428b      	cmp	r3, r1
 8002692:	d819      	bhi.n	80026c8 <HAL_I2C_Init+0x13c>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	1e59      	subs	r1, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	fbb1 f3f3 	udiv	r3, r1, r3
 80026a2:	1c59      	adds	r1, r3, #1
 80026a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026a8:	400b      	ands	r3, r1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_I2C_Init+0x138>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1e59      	subs	r1, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80026bc:	3301      	adds	r3, #1
 80026be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c2:	e051      	b.n	8002768 <HAL_I2C_Init+0x1dc>
 80026c4:	2304      	movs	r3, #4
 80026c6:	e04f      	b.n	8002768 <HAL_I2C_Init+0x1dc>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d111      	bne.n	80026f4 <HAL_I2C_Init+0x168>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1e58      	subs	r0, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	440b      	add	r3, r1
 80026de:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e2:	3301      	adds	r3, #1
 80026e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	e012      	b.n	800271a <HAL_I2C_Init+0x18e>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1e58      	subs	r0, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6859      	ldr	r1, [r3, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	0099      	lsls	r1, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	fbb0 f3f3 	udiv	r3, r0, r3
 800270a:	3301      	adds	r3, #1
 800270c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002710:	2b00      	cmp	r3, #0
 8002712:	bf0c      	ite	eq
 8002714:	2301      	moveq	r3, #1
 8002716:	2300      	movne	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_I2C_Init+0x196>
 800271e:	2301      	movs	r3, #1
 8002720:	e022      	b.n	8002768 <HAL_I2C_Init+0x1dc>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10e      	bne.n	8002748 <HAL_I2C_Init+0x1bc>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1e58      	subs	r0, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6859      	ldr	r1, [r3, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	440b      	add	r3, r1
 8002738:	fbb0 f3f3 	udiv	r3, r0, r3
 800273c:	3301      	adds	r3, #1
 800273e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002746:	e00f      	b.n	8002768 <HAL_I2C_Init+0x1dc>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1e58      	subs	r0, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6859      	ldr	r1, [r3, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	0099      	lsls	r1, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	fbb0 f3f3 	udiv	r3, r0, r3
 800275e:	3301      	adds	r3, #1
 8002760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002764:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	6809      	ldr	r1, [r1, #0]
 800276c:	4313      	orrs	r3, r2
 800276e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69da      	ldr	r2, [r3, #28]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002796:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6911      	ldr	r1, [r2, #16]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68d2      	ldr	r2, [r2, #12]
 80027a2:	4311      	orrs	r1, r2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	430b      	orrs	r3, r1
 80027aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	000186a0 	.word	0x000186a0
 8002804:	001e847f 	.word	0x001e847f
 8002808:	003d08ff 	.word	0x003d08ff
 800280c:	431bde83 	.word	0x431bde83
 8002810:	10624dd3 	.word	0x10624dd3

08002814 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af02      	add	r7, sp, #8
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	4608      	mov	r0, r1
 800281e:	4611      	mov	r1, r2
 8002820:	461a      	mov	r2, r3
 8002822:	4603      	mov	r3, r0
 8002824:	817b      	strh	r3, [r7, #10]
 8002826:	460b      	mov	r3, r1
 8002828:	813b      	strh	r3, [r7, #8]
 800282a:	4613      	mov	r3, r2
 800282c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800282e:	f7ff fbb5 	bl	8001f9c <HAL_GetTick>
 8002832:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b20      	cmp	r3, #32
 800283e:	f040 80d9 	bne.w	80029f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	2319      	movs	r3, #25
 8002848:	2201      	movs	r2, #1
 800284a:	496d      	ldr	r1, [pc, #436]	; (8002a00 <HAL_I2C_Mem_Write+0x1ec>)
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 fc7f 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002858:	2302      	movs	r3, #2
 800285a:	e0cc      	b.n	80029f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_I2C_Mem_Write+0x56>
 8002866:	2302      	movs	r3, #2
 8002868:	e0c5      	b.n	80029f6 <HAL_I2C_Mem_Write+0x1e2>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b01      	cmp	r3, #1
 800287e:	d007      	beq.n	8002890 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800289e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2221      	movs	r2, #33	; 0x21
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2240      	movs	r2, #64	; 0x40
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a3a      	ldr	r2, [r7, #32]
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4a4d      	ldr	r2, [pc, #308]	; (8002a04 <HAL_I2C_Mem_Write+0x1f0>)
 80028d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028d2:	88f8      	ldrh	r0, [r7, #6]
 80028d4:	893a      	ldrh	r2, [r7, #8]
 80028d6:	8979      	ldrh	r1, [r7, #10]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	4603      	mov	r3, r0
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 fab6 	bl	8002e54 <I2C_RequestMemoryWrite>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d052      	beq.n	8002994 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e081      	b.n	80029f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fd00 	bl	80032fc <I2C_WaitOnTXEFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00d      	beq.n	800291e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	2b04      	cmp	r3, #4
 8002908:	d107      	bne.n	800291a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002918:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e06b      	b.n	80029f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	781a      	ldrb	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b04      	cmp	r3, #4
 800295a:	d11b      	bne.n	8002994 <HAL_I2C_Mem_Write+0x180>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002960:	2b00      	cmp	r3, #0
 8002962:	d017      	beq.n	8002994 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	781a      	ldrb	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1aa      	bne.n	80028f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 fcec 	bl	800337e <I2C_WaitOnBTFFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00d      	beq.n	80029c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d107      	bne.n	80029c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e016      	b.n	80029f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	e000      	b.n	80029f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029f4:	2302      	movs	r3, #2
  }
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	00100002 	.word	0x00100002
 8002a04:	ffff0000 	.word	0xffff0000

08002a08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08c      	sub	sp, #48	; 0x30
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	4608      	mov	r0, r1
 8002a12:	4611      	mov	r1, r2
 8002a14:	461a      	mov	r2, r3
 8002a16:	4603      	mov	r3, r0
 8002a18:	817b      	strh	r3, [r7, #10]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	813b      	strh	r3, [r7, #8]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a22:	f7ff fabb 	bl	8001f9c <HAL_GetTick>
 8002a26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	f040 8208 	bne.w	8002e46 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	2319      	movs	r3, #25
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	497b      	ldr	r1, [pc, #492]	; (8002c2c <HAL_I2C_Mem_Read+0x224>)
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 fb85 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e1fb      	b.n	8002e48 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_I2C_Mem_Read+0x56>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e1f4      	b.n	8002e48 <HAL_I2C_Mem_Read+0x440>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d007      	beq.n	8002a84 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2222      	movs	r2, #34	; 0x22
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2240      	movs	r2, #64	; 0x40
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4a5b      	ldr	r2, [pc, #364]	; (8002c30 <HAL_I2C_Mem_Read+0x228>)
 8002ac4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ac6:	88f8      	ldrh	r0, [r7, #6]
 8002ac8:	893a      	ldrh	r2, [r7, #8]
 8002aca:	8979      	ldrh	r1, [r7, #10]
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	9301      	str	r3, [sp, #4]
 8002ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 fa52 	bl	8002f80 <I2C_RequestMemoryRead>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e1b0      	b.n	8002e48 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d113      	bne.n	8002b16 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aee:	2300      	movs	r3, #0
 8002af0:	623b      	str	r3, [r7, #32]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	623b      	str	r3, [r7, #32]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	623b      	str	r3, [r7, #32]
 8002b02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	e184      	b.n	8002e20 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d11b      	bne.n	8002b56 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	61fb      	str	r3, [r7, #28]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	61fb      	str	r3, [r7, #28]
 8002b42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	e164      	b.n	8002e20 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d11b      	bne.n	8002b96 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	e144      	b.n	8002e20 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002bac:	e138      	b.n	8002e20 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	f200 80f1 	bhi.w	8002d9a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d123      	bne.n	8002c08 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 fc1b 	bl	8003400 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e139      	b.n	8002e48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c06:	e10b      	b.n	8002e20 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d14e      	bne.n	8002cae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c16:	2200      	movs	r2, #0
 8002c18:	4906      	ldr	r1, [pc, #24]	; (8002c34 <HAL_I2C_Mem_Read+0x22c>)
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 fa98 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e10e      	b.n	8002e48 <HAL_I2C_Mem_Read+0x440>
 8002c2a:	bf00      	nop
 8002c2c:	00100002 	.word	0x00100002
 8002c30:	ffff0000 	.word	0xffff0000
 8002c34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691a      	ldr	r2, [r3, #16]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cac:	e0b8      	b.n	8002e20 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	4966      	ldr	r1, [pc, #408]	; (8002e50 <HAL_I2C_Mem_Read+0x448>)
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fa49 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0bf      	b.n	8002e48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d10:	2200      	movs	r2, #0
 8002d12:	494f      	ldr	r1, [pc, #316]	; (8002e50 <HAL_I2C_Mem_Read+0x448>)
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 fa1b 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e091      	b.n	8002e48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691a      	ldr	r2, [r3, #16]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d98:	e042      	b.n	8002e20 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 fb2e 	bl	8003400 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e04c      	b.n	8002e48 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d118      	bne.n	8002e20 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f47f aec2 	bne.w	8002bae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	e000      	b.n	8002e48 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e46:	2302      	movs	r3, #2
  }
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3728      	adds	r7, #40	; 0x28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	00010004 	.word	0x00010004

08002e54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	4608      	mov	r0, r1
 8002e5e:	4611      	mov	r1, r2
 8002e60:	461a      	mov	r2, r3
 8002e62:	4603      	mov	r3, r0
 8002e64:	817b      	strh	r3, [r7, #10]
 8002e66:	460b      	mov	r3, r1
 8002e68:	813b      	strh	r3, [r7, #8]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f960 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00d      	beq.n	8002eb2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea4:	d103      	bne.n	8002eae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e05f      	b.n	8002f72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eb2:	897b      	ldrh	r3, [r7, #10]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ec0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	6a3a      	ldr	r2, [r7, #32]
 8002ec6:	492d      	ldr	r1, [pc, #180]	; (8002f7c <I2C_RequestMemoryWrite+0x128>)
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f998 	bl	80031fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e04c      	b.n	8002f72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef0:	6a39      	ldr	r1, [r7, #32]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 fa02 	bl	80032fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00d      	beq.n	8002f1a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d107      	bne.n	8002f16 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e02b      	b.n	8002f72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d105      	bne.n	8002f2c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f20:	893b      	ldrh	r3, [r7, #8]
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	611a      	str	r2, [r3, #16]
 8002f2a:	e021      	b.n	8002f70 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f2c:	893b      	ldrh	r3, [r7, #8]
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3c:	6a39      	ldr	r1, [r7, #32]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f9dc 	bl	80032fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00d      	beq.n	8002f66 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d107      	bne.n	8002f62 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e005      	b.n	8002f72 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f66:	893b      	ldrh	r3, [r7, #8]
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	00010002 	.word	0x00010002

08002f80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	4608      	mov	r0, r1
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4603      	mov	r3, r0
 8002f90:	817b      	strh	r3, [r7, #10]
 8002f92:	460b      	mov	r3, r1
 8002f94:	813b      	strh	r3, [r7, #8]
 8002f96:	4613      	mov	r3, r2
 8002f98:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fa8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f8c2 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00d      	beq.n	8002fee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe0:	d103      	bne.n	8002fea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e0aa      	b.n	8003144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fee:	897b      	ldrh	r3, [r7, #10]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ffc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	6a3a      	ldr	r2, [r7, #32]
 8003002:	4952      	ldr	r1, [pc, #328]	; (800314c <I2C_RequestMemoryRead+0x1cc>)
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f8fa 	bl	80031fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e097      	b.n	8003144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800302a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302c:	6a39      	ldr	r1, [r7, #32]
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f964 	bl	80032fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00d      	beq.n	8003056 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	2b04      	cmp	r3, #4
 8003040:	d107      	bne.n	8003052 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003050:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e076      	b.n	8003144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003056:	88fb      	ldrh	r3, [r7, #6]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d105      	bne.n	8003068 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800305c:	893b      	ldrh	r3, [r7, #8]
 800305e:	b2da      	uxtb	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	611a      	str	r2, [r3, #16]
 8003066:	e021      	b.n	80030ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003068:	893b      	ldrh	r3, [r7, #8]
 800306a:	0a1b      	lsrs	r3, r3, #8
 800306c:	b29b      	uxth	r3, r3
 800306e:	b2da      	uxtb	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003078:	6a39      	ldr	r1, [r7, #32]
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f93e 	bl	80032fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00d      	beq.n	80030a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	2b04      	cmp	r3, #4
 800308c:	d107      	bne.n	800309e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800309c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e050      	b.n	8003144 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030a2:	893b      	ldrh	r3, [r7, #8]
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ae:	6a39      	ldr	r1, [r7, #32]
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f923 	bl	80032fc <I2C_WaitOnTXEFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00d      	beq.n	80030d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d107      	bne.n	80030d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e035      	b.n	8003144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f82b 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00d      	beq.n	800311c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800310e:	d103      	bne.n	8003118 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003116:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e013      	b.n	8003144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800311c:	897b      	ldrh	r3, [r7, #10]
 800311e:	b2db      	uxtb	r3, r3
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	b2da      	uxtb	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	6a3a      	ldr	r2, [r7, #32]
 8003130:	4906      	ldr	r1, [pc, #24]	; (800314c <I2C_RequestMemoryRead+0x1cc>)
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f863 	bl	80031fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	00010002 	.word	0x00010002

08003150 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	4613      	mov	r3, r2
 800315e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003160:	e025      	b.n	80031ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003168:	d021      	beq.n	80031ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316a:	f7fe ff17 	bl	8001f9c <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d302      	bcc.n	8003180 <I2C_WaitOnFlagUntilTimeout+0x30>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d116      	bne.n	80031ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f043 0220 	orr.w	r2, r3, #32
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e023      	b.n	80031f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	0c1b      	lsrs	r3, r3, #16
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d10d      	bne.n	80031d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	43da      	mvns	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4013      	ands	r3, r2
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	bf0c      	ite	eq
 80031ca:	2301      	moveq	r3, #1
 80031cc:	2300      	movne	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	461a      	mov	r2, r3
 80031d2:	e00c      	b.n	80031ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	43da      	mvns	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4013      	ands	r3, r2
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf0c      	ite	eq
 80031e6:	2301      	moveq	r3, #1
 80031e8:	2300      	movne	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d0b6      	beq.n	8003162 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800320c:	e051      	b.n	80032b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800321c:	d123      	bne.n	8003266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800322c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003236:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f043 0204 	orr.w	r2, r3, #4
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e046      	b.n	80032f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326c:	d021      	beq.n	80032b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326e:	f7fe fe95 	bl	8001f9c <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	429a      	cmp	r2, r3
 800327c:	d302      	bcc.n	8003284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d116      	bne.n	80032b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f043 0220 	orr.w	r2, r3, #32
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e020      	b.n	80032f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	0c1b      	lsrs	r3, r3, #16
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d10c      	bne.n	80032d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	43da      	mvns	r2, r3
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4013      	ands	r3, r2
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	bf14      	ite	ne
 80032ce:	2301      	movne	r3, #1
 80032d0:	2300      	moveq	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	e00b      	b.n	80032ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	43da      	mvns	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	4013      	ands	r3, r2
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d18d      	bne.n	800320e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003308:	e02d      	b.n	8003366 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f8ce 	bl	80034ac <I2C_IsAcknowledgeFailed>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e02d      	b.n	8003376 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003320:	d021      	beq.n	8003366 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003322:	f7fe fe3b 	bl	8001f9c <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	429a      	cmp	r2, r3
 8003330:	d302      	bcc.n	8003338 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d116      	bne.n	8003366 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2220      	movs	r2, #32
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f043 0220 	orr.w	r2, r3, #32
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e007      	b.n	8003376 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003370:	2b80      	cmp	r3, #128	; 0x80
 8003372:	d1ca      	bne.n	800330a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b084      	sub	sp, #16
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800338a:	e02d      	b.n	80033e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 f88d 	bl	80034ac <I2C_IsAcknowledgeFailed>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e02d      	b.n	80033f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a2:	d021      	beq.n	80033e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a4:	f7fe fdfa 	bl	8001f9c <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d302      	bcc.n	80033ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d116      	bne.n	80033e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	f043 0220 	orr.w	r2, r3, #32
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e007      	b.n	80033f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d1ca      	bne.n	800338c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800340c:	e042      	b.n	8003494 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b10      	cmp	r3, #16
 800341a:	d119      	bne.n	8003450 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0210 	mvn.w	r2, #16
 8003424:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e029      	b.n	80034a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003450:	f7fe fda4 	bl	8001f9c <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	429a      	cmp	r2, r3
 800345e:	d302      	bcc.n	8003466 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d116      	bne.n	8003494 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	f043 0220 	orr.w	r2, r3, #32
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e007      	b.n	80034a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b40      	cmp	r3, #64	; 0x40
 80034a0:	d1b5      	bne.n	800340e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c2:	d11b      	bne.n	80034fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	f043 0204 	orr.w	r2, r3, #4
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e000      	b.n	80034fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800350a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800350c:	b08f      	sub	sp, #60	; 0x3c
 800350e:	af0a      	add	r7, sp, #40	; 0x28
 8003510:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e10f      	b.n	800373c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d106      	bne.n	800353c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f006 fe60 	bl	800a1fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2203      	movs	r2, #3
 8003540:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354c:	2b00      	cmp	r3, #0
 800354e:	d102      	bne.n	8003556 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f003 f933 	bl	80067c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	603b      	str	r3, [r7, #0]
 8003566:	687e      	ldr	r6, [r7, #4]
 8003568:	466d      	mov	r5, sp
 800356a:	f106 0410 	add.w	r4, r6, #16
 800356e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003570:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003576:	e894 0003 	ldmia.w	r4, {r0, r1}
 800357a:	e885 0003 	stmia.w	r5, {r0, r1}
 800357e:	1d33      	adds	r3, r6, #4
 8003580:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003582:	6838      	ldr	r0, [r7, #0]
 8003584:	f003 f80a 	bl	800659c <USB_CoreInit>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e0d0      	b.n	800373c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f003 f921 	bl	80067e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a6:	2300      	movs	r3, #0
 80035a8:	73fb      	strb	r3, [r7, #15]
 80035aa:	e04a      	b.n	8003642 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035ac:	7bfa      	ldrb	r2, [r7, #15]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	333d      	adds	r3, #61	; 0x3d
 80035bc:	2201      	movs	r2, #1
 80035be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035c0:	7bfa      	ldrb	r2, [r7, #15]
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	333c      	adds	r3, #60	; 0x3c
 80035d0:	7bfa      	ldrb	r2, [r7, #15]
 80035d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035d4:	7bfa      	ldrb	r2, [r7, #15]
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	b298      	uxth	r0, r3
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	3344      	adds	r3, #68	; 0x44
 80035e8:	4602      	mov	r2, r0
 80035ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035ec:	7bfa      	ldrb	r2, [r7, #15]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	3340      	adds	r3, #64	; 0x40
 80035fc:	2200      	movs	r2, #0
 80035fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003600:	7bfa      	ldrb	r2, [r7, #15]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4413      	add	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	3348      	adds	r3, #72	; 0x48
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003614:	7bfa      	ldrb	r2, [r7, #15]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	334c      	adds	r3, #76	; 0x4c
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003628:	7bfa      	ldrb	r2, [r7, #15]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	3354      	adds	r3, #84	; 0x54
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800363c:	7bfb      	ldrb	r3, [r7, #15]
 800363e:	3301      	adds	r3, #1
 8003640:	73fb      	strb	r3, [r7, #15]
 8003642:	7bfa      	ldrb	r2, [r7, #15]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	429a      	cmp	r2, r3
 800364a:	d3af      	bcc.n	80035ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800364c:	2300      	movs	r3, #0
 800364e:	73fb      	strb	r3, [r7, #15]
 8003650:	e044      	b.n	80036dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003652:	7bfa      	ldrb	r2, [r7, #15]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003664:	2200      	movs	r2, #0
 8003666:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003668:	7bfa      	ldrb	r2, [r7, #15]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800367a:	7bfa      	ldrb	r2, [r7, #15]
 800367c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800367e:	7bfa      	ldrb	r2, [r7, #15]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003690:	2200      	movs	r2, #0
 8003692:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003694:	7bfa      	ldrb	r2, [r7, #15]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036aa:	7bfa      	ldrb	r2, [r7, #15]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036c0:	7bfa      	ldrb	r2, [r7, #15]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
 80036d8:	3301      	adds	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
 80036dc:	7bfa      	ldrb	r2, [r7, #15]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d3b5      	bcc.n	8003652 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	687e      	ldr	r6, [r7, #4]
 80036ee:	466d      	mov	r5, sp
 80036f0:	f106 0410 	add.w	r4, r6, #16
 80036f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003700:	e885 0003 	stmia.w	r5, {r0, r1}
 8003704:	1d33      	adds	r3, r6, #4
 8003706:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003708:	6838      	ldr	r0, [r7, #0]
 800370a:	f003 f8b9 	bl	8006880 <USB_DevInit>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e00d      	b.n	800373c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f004 fa08 	bl	8007b4a <USB_DevDisconnect>

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003744 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_PCD_Start+0x1c>
 800375c:	2302      	movs	r3, #2
 800375e:	e020      	b.n	80037a2 <HAL_PCD_Start+0x5e>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	2b01      	cmp	r3, #1
 800376e:	d109      	bne.n	8003784 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003774:	2b01      	cmp	r3, #1
 8003776:	d005      	beq.n	8003784 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f003 f80b 	bl	80067a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f004 f9b8 	bl	8007b08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037aa:	b590      	push	{r4, r7, lr}
 80037ac:	b08d      	sub	sp, #52	; 0x34
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f004 fa76 	bl	8007cb2 <USB_GetMode>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f040 848a 	bne.w	80040e2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f004 f9da 	bl	8007b8c <USB_ReadInterrupts>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 8480 	beq.w	80040e0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f004 f9c7 	bl	8007b8c <USB_ReadInterrupts>
 80037fe:	4603      	mov	r3, r0
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b02      	cmp	r3, #2
 8003806:	d107      	bne.n	8003818 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f002 0202 	and.w	r2, r2, #2
 8003816:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f004 f9b5 	bl	8007b8c <USB_ReadInterrupts>
 8003822:	4603      	mov	r3, r0
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b10      	cmp	r3, #16
 800382a:	d161      	bne.n	80038f0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0210 	bic.w	r2, r2, #16
 800383a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	f003 020f 	and.w	r2, r3, #15
 8003848:	4613      	mov	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	4413      	add	r3, r2
 8003858:	3304      	adds	r3, #4
 800385a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	0c5b      	lsrs	r3, r3, #17
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	2b02      	cmp	r3, #2
 8003866:	d124      	bne.n	80038b2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800386e:	4013      	ands	r3, r2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d035      	beq.n	80038e0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	091b      	lsrs	r3, r3, #4
 800387c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800387e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003882:	b29b      	uxth	r3, r3
 8003884:	461a      	mov	r2, r3
 8003886:	6a38      	ldr	r0, [r7, #32]
 8003888:	f003 ffec 	bl	8007864 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	091b      	lsrs	r3, r3, #4
 8003894:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003898:	441a      	add	r2, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	6a1a      	ldr	r2, [r3, #32]
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038aa:	441a      	add	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	621a      	str	r2, [r3, #32]
 80038b0:	e016      	b.n	80038e0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	0c5b      	lsrs	r3, r3, #17
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	2b06      	cmp	r3, #6
 80038bc:	d110      	bne.n	80038e0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038c4:	2208      	movs	r2, #8
 80038c6:	4619      	mov	r1, r3
 80038c8:	6a38      	ldr	r0, [r7, #32]
 80038ca:	f003 ffcb 	bl	8007864 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	6a1a      	ldr	r2, [r3, #32]
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	091b      	lsrs	r3, r3, #4
 80038d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038da:	441a      	add	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	699a      	ldr	r2, [r3, #24]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0210 	orr.w	r2, r2, #16
 80038ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f004 f949 	bl	8007b8c <USB_ReadInterrupts>
 80038fa:	4603      	mov	r3, r0
 80038fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003900:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003904:	f040 80a7 	bne.w	8003a56 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f004 f94e 	bl	8007bb2 <USB_ReadDevAllOutEpInterrupt>
 8003916:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003918:	e099      	b.n	8003a4e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 808e 	beq.w	8003a42 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	4611      	mov	r1, r2
 8003930:	4618      	mov	r0, r3
 8003932:	f004 f972 	bl	8007c1a <USB_ReadDevOutEPInterrupt>
 8003936:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00c      	beq.n	800395c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394e:	461a      	mov	r2, r3
 8003950:	2301      	movs	r3, #1
 8003952:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fec2 	bl	80046e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00c      	beq.n	8003980 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	4413      	add	r3, r2
 800396e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003972:	461a      	mov	r2, r3
 8003974:	2308      	movs	r3, #8
 8003976:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 ff98 	bl	80048b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f003 0310 	and.w	r3, r3, #16
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003996:	461a      	mov	r2, r3
 8003998:	2310      	movs	r3, #16
 800399a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d030      	beq.n	8003a08 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ae:	2b80      	cmp	r3, #128	; 0x80
 80039b0:	d109      	bne.n	80039c6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	69fa      	ldr	r2, [r7, #28]
 80039bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039c4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80039c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	4413      	add	r3, r2
 80039d8:	3304      	adds	r3, #4
 80039da:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	78db      	ldrb	r3, [r3, #3]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d108      	bne.n	80039f6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2200      	movs	r2, #0
 80039e8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	4619      	mov	r1, r3
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f006 fd09 	bl	800a408 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a02:	461a      	mov	r2, r3
 8003a04:	2302      	movs	r3, #2
 8003a06:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d008      	beq.n	8003a24 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2320      	movs	r3, #32
 8003a22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a40:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	3301      	adds	r3, #1
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4a:	085b      	lsrs	r3, r3, #1
 8003a4c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f47f af62 	bne.w	800391a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f004 f896 	bl	8007b8c <USB_ReadInterrupts>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a6a:	f040 80db 	bne.w	8003c24 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f004 f8b7 	bl	8007be6 <USB_ReadDevAllInEpInterrupt>
 8003a78:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003a7e:	e0cd      	b.n	8003c1c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80c2 	beq.w	8003c10 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	4611      	mov	r1, r2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f004 f8dd 	bl	8007c56 <USB_ReadDevInEPInterrupt>
 8003a9c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d057      	beq.n	8003b58 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	2201      	movs	r2, #1
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	69f9      	ldr	r1, [r7, #28]
 8003ac4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ac8:	4013      	ands	r3, r2
 8003aca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2301      	movs	r3, #1
 8003adc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d132      	bne.n	8003b4c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aea:	4613      	mov	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	334c      	adds	r3, #76	; 0x4c
 8003af6:	6819      	ldr	r1, [r3, #0]
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4403      	add	r3, r0
 8003b06:	3348      	adds	r3, #72	; 0x48
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4419      	add	r1, r3
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b10:	4613      	mov	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4403      	add	r3, r0
 8003b1a:	334c      	adds	r3, #76	; 0x4c
 8003b1c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d113      	bne.n	8003b4c <HAL_PCD_IRQHandler+0x3a2>
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b28:	4613      	mov	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	3354      	adds	r3, #84	; 0x54
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d108      	bne.n	8003b4c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b44:	461a      	mov	r2, r3
 8003b46:	2101      	movs	r1, #1
 8003b48:	f004 f8e4 	bl	8007d14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	4619      	mov	r1, r3
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f006 fbd3 	bl	800a2fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6e:	461a      	mov	r2, r3
 8003b70:	2308      	movs	r3, #8
 8003b72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f003 0310 	and.w	r3, r3, #16
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d008      	beq.n	8003b90 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	2310      	movs	r3, #16
 8003b8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d008      	beq.n	8003bac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	2340      	movs	r3, #64	; 0x40
 8003baa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d023      	beq.n	8003bfe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003bb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bb8:	6a38      	ldr	r0, [r7, #32]
 8003bba:	f002 ffc5 	bl	8006b48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	3338      	adds	r3, #56	; 0x38
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	3304      	adds	r3, #4
 8003bd0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	78db      	ldrb	r3, [r3, #3]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d108      	bne.n	8003bec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	4619      	mov	r1, r3
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f006 fc20 	bl	800a42c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fcdb 	bl	80045c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	3301      	adds	r3, #1
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c18:	085b      	lsrs	r3, r3, #1
 8003c1a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f47f af2e 	bne.w	8003a80 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f003 ffaf 	bl	8007b8c <USB_ReadInterrupts>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c38:	d122      	bne.n	8003c80 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d108      	bne.n	8003c6a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c60:	2100      	movs	r1, #0
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fec2 	bl	80049ec <HAL_PCDEx_LPM_Callback>
 8003c68:	e002      	b.n	8003c70 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f006 fbbe 	bl	800a3ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003c7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f003 ff81 	bl	8007b8c <USB_ReadInterrupts>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c94:	d112      	bne.n	8003cbc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d102      	bne.n	8003cac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f006 fb7a 	bl	800a3a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695a      	ldr	r2, [r3, #20]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003cba:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f003 ff63 	bl	8007b8c <USB_ReadInterrupts>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd0:	f040 80b7 	bne.w	8003e42 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2110      	movs	r1, #16
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f002 ff2a 	bl	8006b48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cf8:	e046      	b.n	8003d88 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d06:	461a      	mov	r2, r3
 8003d08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d0c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d1e:	0151      	lsls	r1, r2, #5
 8003d20:	69fa      	ldr	r2, [r7, #28]
 8003d22:	440a      	add	r2, r1
 8003d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d40:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d52:	0151      	lsls	r1, r2, #5
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	440a      	add	r2, r1
 8003d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d72:	0151      	lsls	r1, r2, #5
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	440a      	add	r2, r1
 8003d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d80:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d84:	3301      	adds	r3, #1
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d3b3      	bcc.n	8003cfa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003da0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003da4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d016      	beq.n	8003ddc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dbe:	f043 030b 	orr.w	r3, r3, #11
 8003dc2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	69fa      	ldr	r2, [r7, #28]
 8003dd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dd4:	f043 030b 	orr.w	r3, r3, #11
 8003dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dda:	e015      	b.n	8003e08 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	69fa      	ldr	r2, [r7, #28]
 8003de6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003dee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003df2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	69fa      	ldr	r2, [r7, #28]
 8003dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e02:	f043 030b 	orr.w	r3, r3, #11
 8003e06:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003e1a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	f003 ff71 	bl	8007d14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003e40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f003 fea0 	bl	8007b8c <USB_ReadInterrupts>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e56:	d124      	bne.n	8003ea2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f003 ff36 	bl	8007cce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f002 feeb 	bl	8006c42 <USB_GetDevSpeed>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	461a      	mov	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681c      	ldr	r4, [r3, #0]
 8003e78:	f001 fa26 	bl	80052c8 <HAL_RCC_GetHCLKFreq>
 8003e7c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	461a      	mov	r2, r3
 8003e86:	4620      	mov	r0, r4
 8003e88:	f002 fbea 	bl	8006660 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f006 fa5e 	bl	800a34e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ea0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f003 fe70 	bl	8007b8c <USB_ReadInterrupts>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d10a      	bne.n	8003ecc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f006 fa3b 	bl	800a332 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695a      	ldr	r2, [r3, #20]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f002 0208 	and.w	r2, r2, #8
 8003eca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f003 fe5b 	bl	8007b8c <USB_ReadInterrupts>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003edc:	2b80      	cmp	r3, #128	; 0x80
 8003ede:	d122      	bne.n	8003f26 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eec:	2301      	movs	r3, #1
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef0:	e014      	b.n	8003f1c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	4413      	add	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	440b      	add	r3, r1
 8003f00:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d105      	bne.n	8003f16 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	4619      	mov	r1, r3
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fb27 	bl	8004564 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	3301      	adds	r3, #1
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d3e5      	bcc.n	8003ef2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f003 fe2e 	bl	8007b8c <USB_ReadInterrupts>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f3a:	d13b      	bne.n	8003fb4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f40:	e02b      	b.n	8003f9a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f56:	4613      	mov	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	3340      	adds	r3, #64	; 0x40
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d115      	bne.n	8003f94 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003f68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	da12      	bge.n	8003f94 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f72:	4613      	mov	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	333f      	adds	r3, #63	; 0x3f
 8003f7e:	2201      	movs	r2, #1
 8003f80:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fae8 	bl	8004564 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	3301      	adds	r3, #1
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d3ce      	bcc.n	8003f42 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695a      	ldr	r2, [r3, #20]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003fb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f003 fde7 	bl	8007b8c <USB_ReadInterrupts>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fc8:	d155      	bne.n	8004076 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fca:	2301      	movs	r3, #1
 8003fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fce:	e045      	b.n	800405c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	4413      	add	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d12e      	bne.n	8004056 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ff8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	da2b      	bge.n	8004056 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800400a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800400e:	429a      	cmp	r2, r3
 8004010:	d121      	bne.n	8004056 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004016:	4613      	mov	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004024:	2201      	movs	r2, #1
 8004026:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	69fa      	ldr	r2, [r7, #28]
 800404a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800404e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004052:	6053      	str	r3, [r2, #4]
            break;
 8004054:	e007      	b.n	8004066 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	3301      	adds	r3, #1
 800405a:	627b      	str	r3, [r7, #36]	; 0x24
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004062:	429a      	cmp	r2, r3
 8004064:	d3b4      	bcc.n	8003fd0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695a      	ldr	r2, [r3, #20]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004074:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f003 fd86 	bl	8007b8c <USB_ReadInterrupts>
 8004080:	4603      	mov	r3, r0
 8004082:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408a:	d10a      	bne.n	80040a2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f006 f9df 	bl	800a450 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695a      	ldr	r2, [r3, #20]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80040a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f003 fd70 	bl	8007b8c <USB_ReadInterrupts>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d115      	bne.n	80040e2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f006 f9cf 	bl	800a46c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6859      	ldr	r1, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	e000      	b.n	80040e2 <HAL_PCD_IRQHandler+0x938>
      return;
 80040e0:	bf00      	nop
    }
  }
}
 80040e2:	3734      	adds	r7, #52	; 0x34
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd90      	pop	{r4, r7, pc}

080040e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <HAL_PCD_SetAddress+0x1a>
 80040fe:	2302      	movs	r3, #2
 8004100:	e013      	b.n	800412a <HAL_PCD_SetAddress+0x42>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	78fa      	ldrb	r2, [r7, #3]
 800410e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	78fa      	ldrb	r2, [r7, #3]
 8004118:	4611      	mov	r1, r2
 800411a:	4618      	mov	r0, r3
 800411c:	f003 fcce 	bl	8007abc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	4608      	mov	r0, r1
 800413c:	4611      	mov	r1, r2
 800413e:	461a      	mov	r2, r3
 8004140:	4603      	mov	r3, r0
 8004142:	70fb      	strb	r3, [r7, #3]
 8004144:	460b      	mov	r3, r1
 8004146:	803b      	strh	r3, [r7, #0]
 8004148:	4613      	mov	r3, r2
 800414a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004154:	2b00      	cmp	r3, #0
 8004156:	da0f      	bge.n	8004178 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	f003 020f 	and.w	r2, r3, #15
 800415e:	4613      	mov	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	4413      	add	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	3338      	adds	r3, #56	; 0x38
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	4413      	add	r3, r2
 800416c:	3304      	adds	r3, #4
 800416e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	705a      	strb	r2, [r3, #1]
 8004176:	e00f      	b.n	8004198 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	f003 020f 	and.w	r2, r3, #15
 800417e:	4613      	mov	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	4413      	add	r3, r2
 800418e:	3304      	adds	r3, #4
 8004190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80041a4:	883a      	ldrh	r2, [r7, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	78ba      	ldrb	r2, [r7, #2]
 80041ae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	785b      	ldrb	r3, [r3, #1]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d004      	beq.n	80041c2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80041c2:	78bb      	ldrb	r3, [r7, #2]
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d102      	bne.n	80041ce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_PCD_EP_Open+0xaa>
 80041d8:	2302      	movs	r3, #2
 80041da:	e00e      	b.n	80041fa <HAL_PCD_EP_Open+0xc8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68f9      	ldr	r1, [r7, #12]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f002 fd4e 	bl	8006c8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80041f8:	7afb      	ldrb	r3, [r7, #11]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	460b      	mov	r3, r1
 800420c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800420e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004212:	2b00      	cmp	r3, #0
 8004214:	da0f      	bge.n	8004236 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004216:	78fb      	ldrb	r3, [r7, #3]
 8004218:	f003 020f 	and.w	r2, r3, #15
 800421c:	4613      	mov	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	3338      	adds	r3, #56	; 0x38
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	4413      	add	r3, r2
 800422a:	3304      	adds	r3, #4
 800422c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2201      	movs	r2, #1
 8004232:	705a      	strb	r2, [r3, #1]
 8004234:	e00f      	b.n	8004256 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	f003 020f 	and.w	r2, r3, #15
 800423c:	4613      	mov	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	4413      	add	r3, r2
 800424c:	3304      	adds	r3, #4
 800424e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004256:	78fb      	ldrb	r3, [r7, #3]
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	b2da      	uxtb	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_PCD_EP_Close+0x6e>
 800426c:	2302      	movs	r3, #2
 800426e:	e00e      	b.n	800428e <HAL_PCD_EP_Close+0x8c>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68f9      	ldr	r1, [r7, #12]
 800427e:	4618      	mov	r0, r3
 8004280:	f002 fd8c 	bl	8006d9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b086      	sub	sp, #24
 800429a:	af00      	add	r7, sp, #0
 800429c:	60f8      	str	r0, [r7, #12]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
 80042a2:	460b      	mov	r3, r1
 80042a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042a6:	7afb      	ldrb	r3, [r7, #11]
 80042a8:	f003 020f 	and.w	r2, r3, #15
 80042ac:	4613      	mov	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4413      	add	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4413      	add	r3, r2
 80042bc:	3304      	adds	r3, #4
 80042be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2200      	movs	r2, #0
 80042d0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2200      	movs	r2, #0
 80042d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042d8:	7afb      	ldrb	r3, [r7, #11]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d102      	bne.n	80042f2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042f2:	7afb      	ldrb	r3, [r7, #11]
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d109      	bne.n	8004310 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	6979      	ldr	r1, [r7, #20]
 800430a:	f003 f86b 	bl	80073e4 <USB_EP0StartXfer>
 800430e:	e008      	b.n	8004322 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6818      	ldr	r0, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	461a      	mov	r2, r3
 800431c:	6979      	ldr	r1, [r7, #20]
 800431e:	f002 fe19 	bl	8006f54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	f003 020f 	and.w	r2, r3, #15
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4613      	mov	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800434e:	681b      	ldr	r3, [r3, #0]
}
 8004350:	4618      	mov	r0, r3
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	607a      	str	r2, [r7, #4]
 8004366:	603b      	str	r3, [r7, #0]
 8004368:	460b      	mov	r3, r1
 800436a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800436c:	7afb      	ldrb	r3, [r7, #11]
 800436e:	f003 020f 	and.w	r2, r3, #15
 8004372:	4613      	mov	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4413      	add	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	3338      	adds	r3, #56	; 0x38
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	4413      	add	r3, r2
 8004380:	3304      	adds	r3, #4
 8004382:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2200      	movs	r2, #0
 8004394:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2201      	movs	r2, #1
 800439a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800439c:	7afb      	ldrb	r3, [r7, #11]
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d102      	bne.n	80043b6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043b6:	7afb      	ldrb	r3, [r7, #11]
 80043b8:	f003 030f 	and.w	r3, r3, #15
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d109      	bne.n	80043d4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	461a      	mov	r2, r3
 80043cc:	6979      	ldr	r1, [r7, #20]
 80043ce:	f003 f809 	bl	80073e4 <USB_EP0StartXfer>
 80043d2:	e008      	b.n	80043e6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	461a      	mov	r2, r3
 80043e0:	6979      	ldr	r1, [r7, #20]
 80043e2:	f002 fdb7 	bl	8006f54 <USB_EPStartXfer>
  }

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	f003 020f 	and.w	r2, r3, #15
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	429a      	cmp	r2, r3
 8004408:	d901      	bls.n	800440e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e050      	b.n	80044b0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800440e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004412:	2b00      	cmp	r3, #0
 8004414:	da0f      	bge.n	8004436 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004416:	78fb      	ldrb	r3, [r7, #3]
 8004418:	f003 020f 	and.w	r2, r3, #15
 800441c:	4613      	mov	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	3338      	adds	r3, #56	; 0x38
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	4413      	add	r3, r2
 800442a:	3304      	adds	r3, #4
 800442c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2201      	movs	r2, #1
 8004432:	705a      	strb	r2, [r3, #1]
 8004434:	e00d      	b.n	8004452 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004436:	78fa      	ldrb	r2, [r7, #3]
 8004438:	4613      	mov	r3, r2
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	4413      	add	r3, r2
 8004448:	3304      	adds	r3, #4
 800444a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	b2da      	uxtb	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <HAL_PCD_EP_SetStall+0x82>
 800446e:	2302      	movs	r3, #2
 8004470:	e01e      	b.n	80044b0 <HAL_PCD_EP_SetStall+0xc0>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68f9      	ldr	r1, [r7, #12]
 8004480:	4618      	mov	r0, r3
 8004482:	f003 fa47 	bl	8007914 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	f003 030f 	and.w	r3, r3, #15
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10a      	bne.n	80044a6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	b2d9      	uxtb	r1, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044a0:	461a      	mov	r2, r3
 80044a2:	f003 fc37 	bl	8007d14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	f003 020f 	and.w	r2, r3, #15
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d901      	bls.n	80044d6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e042      	b.n	800455c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	da0f      	bge.n	80044fe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044de:	78fb      	ldrb	r3, [r7, #3]
 80044e0:	f003 020f 	and.w	r2, r3, #15
 80044e4:	4613      	mov	r3, r2
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	4413      	add	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	3338      	adds	r3, #56	; 0x38
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	4413      	add	r3, r2
 80044f2:	3304      	adds	r3, #4
 80044f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2201      	movs	r2, #1
 80044fa:	705a      	strb	r2, [r3, #1]
 80044fc:	e00f      	b.n	800451e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044fe:	78fb      	ldrb	r3, [r7, #3]
 8004500:	f003 020f 	and.w	r2, r3, #15
 8004504:	4613      	mov	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	4413      	add	r3, r2
 8004514:	3304      	adds	r3, #4
 8004516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	b2da      	uxtb	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_PCD_EP_ClrStall+0x86>
 800453a:	2302      	movs	r3, #2
 800453c:	e00e      	b.n	800455c <HAL_PCD_EP_ClrStall+0xa4>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68f9      	ldr	r1, [r7, #12]
 800454c:	4618      	mov	r0, r3
 800454e:	f003 fa4f 	bl	80079f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004570:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004574:	2b00      	cmp	r3, #0
 8004576:	da0c      	bge.n	8004592 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	f003 020f 	and.w	r2, r3, #15
 800457e:	4613      	mov	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	3338      	adds	r3, #56	; 0x38
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	4413      	add	r3, r2
 800458c:	3304      	adds	r3, #4
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	e00c      	b.n	80045ac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004592:	78fb      	ldrb	r3, [r7, #3]
 8004594:	f003 020f 	and.w	r2, r3, #15
 8004598:	4613      	mov	r3, r2
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	4413      	add	r3, r2
 80045a8:	3304      	adds	r3, #4
 80045aa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68f9      	ldr	r1, [r7, #12]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f003 f86e 	bl	8007694 <USB_EPStopXfer>
 80045b8:	4603      	mov	r3, r0
 80045ba:	72fb      	strb	r3, [r7, #11]

  return ret;
 80045bc:	7afb      	ldrb	r3, [r7, #11]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b08a      	sub	sp, #40	; 0x28
 80045ca:	af02      	add	r7, sp, #8
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	4613      	mov	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	4413      	add	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	3338      	adds	r3, #56	; 0x38
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	4413      	add	r3, r2
 80045ea:	3304      	adds	r3, #4
 80045ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a1a      	ldr	r2, [r3, #32]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d901      	bls.n	80045fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e06c      	b.n	80046d8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	699a      	ldr	r2, [r3, #24]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	429a      	cmp	r2, r3
 8004612:	d902      	bls.n	800461a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	3303      	adds	r3, #3
 800461e:	089b      	lsrs	r3, r3, #2
 8004620:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004622:	e02b      	b.n	800467c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	699a      	ldr	r2, [r3, #24]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	429a      	cmp	r2, r3
 8004638:	d902      	bls.n	8004640 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	3303      	adds	r3, #3
 8004644:	089b      	lsrs	r3, r3, #2
 8004646:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6919      	ldr	r1, [r3, #16]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	b2da      	uxtb	r2, r3
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004658:	b2db      	uxtb	r3, r3
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	4603      	mov	r3, r0
 800465e:	6978      	ldr	r0, [r7, #20]
 8004660:	f003 f8c2 	bl	80077e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	441a      	add	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a1a      	ldr	r2, [r3, #32]
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	441a      	add	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	b29b      	uxth	r3, r3
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	429a      	cmp	r2, r3
 8004690:	d809      	bhi.n	80046a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6a1a      	ldr	r2, [r3, #32]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800469a:	429a      	cmp	r2, r3
 800469c:	d203      	bcs.n	80046a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1be      	bne.n	8004624 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	699a      	ldr	r2, [r3, #24]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d811      	bhi.n	80046d6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	f003 030f 	and.w	r3, r3, #15
 80046b8:	2201      	movs	r2, #1
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	43db      	mvns	r3, r3
 80046cc:	6939      	ldr	r1, [r7, #16]
 80046ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046d2:	4013      	ands	r3, r2
 80046d4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3720      	adds	r7, #32
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	333c      	adds	r3, #60	; 0x3c
 80046f8:	3304      	adds	r3, #4
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d17b      	bne.n	800480e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d015      	beq.n	800474c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	4a61      	ldr	r2, [pc, #388]	; (80048a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	f240 80b9 	bls.w	800489c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 80b3 	beq.w	800489c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004742:	461a      	mov	r2, r3
 8004744:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004748:	6093      	str	r3, [r2, #8]
 800474a:	e0a7      	b.n	800489c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d009      	beq.n	800476a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004762:	461a      	mov	r2, r3
 8004764:	2320      	movs	r3, #32
 8004766:	6093      	str	r3, [r2, #8]
 8004768:	e098      	b.n	800489c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004770:	2b00      	cmp	r3, #0
 8004772:	f040 8093 	bne.w	800489c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	4a4b      	ldr	r2, [pc, #300]	; (80048a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d90f      	bls.n	800479e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004794:	461a      	mov	r2, r3
 8004796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800479a:	6093      	str	r3, [r2, #8]
 800479c:	e07e      	b.n	800489c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	4613      	mov	r3, r2
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	4413      	add	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	4413      	add	r3, r2
 80047b0:	3304      	adds	r3, #4
 80047b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	0159      	lsls	r1, r3, #5
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	440b      	add	r3, r1
 80047c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ca:	1ad2      	subs	r2, r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d114      	bne.n	8004800 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d109      	bne.n	80047f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047e8:	461a      	mov	r2, r3
 80047ea:	2101      	movs	r1, #1
 80047ec:	f003 fa92 	bl	8007d14 <USB_EP0_OutStart>
 80047f0:	e006      	b.n	8004800 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	441a      	add	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	4619      	mov	r1, r3
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f005 fd5e 	bl	800a2c8 <HAL_PCD_DataOutStageCallback>
 800480c:	e046      	b.n	800489c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	4a26      	ldr	r2, [pc, #152]	; (80048ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d124      	bne.n	8004860 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482c:	461a      	mov	r2, r3
 800482e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004832:	6093      	str	r3, [r2, #8]
 8004834:	e032      	b.n	800489c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484c:	461a      	mov	r2, r3
 800484e:	2320      	movs	r3, #32
 8004850:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	b2db      	uxtb	r3, r3
 8004856:	4619      	mov	r1, r3
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f005 fd35 	bl	800a2c8 <HAL_PCD_DataOutStageCallback>
 800485e:	e01d      	b.n	800489c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d114      	bne.n	8004890 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	4613      	mov	r3, r2
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	440b      	add	r3, r1
 8004874:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d108      	bne.n	8004890 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004888:	461a      	mov	r2, r3
 800488a:	2100      	movs	r1, #0
 800488c:	f003 fa42 	bl	8007d14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	4619      	mov	r1, r3
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f005 fd16 	bl	800a2c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3720      	adds	r7, #32
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	4f54300a 	.word	0x4f54300a
 80048ac:	4f54310a 	.word	0x4f54310a

080048b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	333c      	adds	r3, #60	; 0x3c
 80048c8:	3304      	adds	r3, #4
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4a15      	ldr	r2, [pc, #84]	; (8004938 <PCD_EP_OutSetupPacket_int+0x88>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d90e      	bls.n	8004904 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d009      	beq.n	8004904 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fc:	461a      	mov	r2, r3
 80048fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004902:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f005 fccd 	bl	800a2a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4a0a      	ldr	r2, [pc, #40]	; (8004938 <PCD_EP_OutSetupPacket_int+0x88>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d90c      	bls.n	800492c <PCD_EP_OutSetupPacket_int+0x7c>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d108      	bne.n	800492c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6818      	ldr	r0, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004924:	461a      	mov	r2, r3
 8004926:	2101      	movs	r1, #1
 8004928:	f003 f9f4 	bl	8007d14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	4f54300a 	.word	0x4f54300a

0800493c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	70fb      	strb	r3, [r7, #3]
 8004948:	4613      	mov	r3, r2
 800494a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004954:	78fb      	ldrb	r3, [r7, #3]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d107      	bne.n	800496a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800495a:	883b      	ldrh	r3, [r7, #0]
 800495c:	0419      	lsls	r1, r3, #16
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	430a      	orrs	r2, r1
 8004966:	629a      	str	r2, [r3, #40]	; 0x28
 8004968:	e028      	b.n	80049bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004970:	0c1b      	lsrs	r3, r3, #16
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	4413      	add	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004978:	2300      	movs	r3, #0
 800497a:	73fb      	strb	r3, [r7, #15]
 800497c:	e00d      	b.n	800499a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	3340      	adds	r3, #64	; 0x40
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	0c1b      	lsrs	r3, r3, #16
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	4413      	add	r3, r2
 8004992:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	3301      	adds	r3, #1
 8004998:	73fb      	strb	r3, [r7, #15]
 800499a:	7bfa      	ldrb	r2, [r7, #15]
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	3b01      	subs	r3, #1
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d3ec      	bcc.n	800497e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80049a4:	883b      	ldrh	r3, [r7, #0]
 80049a6:	0418      	lsls	r0, r3, #16
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6819      	ldr	r1, [r3, #0]
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	4302      	orrs	r2, r0
 80049b4:	3340      	adds	r3, #64	; 0x40
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	460b      	mov	r3, r1
 80049d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	887a      	ldrh	r2, [r7, #2]
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e267      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d075      	beq.n	8004b0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a22:	4b88      	ldr	r3, [pc, #544]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d00c      	beq.n	8004a48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a2e:	4b85      	ldr	r3, [pc, #532]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d112      	bne.n	8004a60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a3a:	4b82      	ldr	r3, [pc, #520]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a46:	d10b      	bne.n	8004a60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a48:	4b7e      	ldr	r3, [pc, #504]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d05b      	beq.n	8004b0c <HAL_RCC_OscConfig+0x108>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d157      	bne.n	8004b0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e242      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a68:	d106      	bne.n	8004a78 <HAL_RCC_OscConfig+0x74>
 8004a6a:	4b76      	ldr	r3, [pc, #472]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a75      	ldr	r2, [pc, #468]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	e01d      	b.n	8004ab4 <HAL_RCC_OscConfig+0xb0>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a80:	d10c      	bne.n	8004a9c <HAL_RCC_OscConfig+0x98>
 8004a82:	4b70      	ldr	r3, [pc, #448]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a6f      	ldr	r2, [pc, #444]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	4b6d      	ldr	r3, [pc, #436]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a6c      	ldr	r2, [pc, #432]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	e00b      	b.n	8004ab4 <HAL_RCC_OscConfig+0xb0>
 8004a9c:	4b69      	ldr	r3, [pc, #420]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a68      	ldr	r2, [pc, #416]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	4b66      	ldr	r3, [pc, #408]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a65      	ldr	r2, [pc, #404]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d013      	beq.n	8004ae4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004abc:	f7fd fa6e 	bl	8001f9c <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ac4:	f7fd fa6a 	bl	8001f9c <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b64      	cmp	r3, #100	; 0x64
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e207      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad6:	4b5b      	ldr	r3, [pc, #364]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f0      	beq.n	8004ac4 <HAL_RCC_OscConfig+0xc0>
 8004ae2:	e014      	b.n	8004b0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae4:	f7fd fa5a 	bl	8001f9c <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aec:	f7fd fa56 	bl	8001f9c <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b64      	cmp	r3, #100	; 0x64
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e1f3      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004afe:	4b51      	ldr	r3, [pc, #324]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <HAL_RCC_OscConfig+0xe8>
 8004b0a:	e000      	b.n	8004b0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d063      	beq.n	8004be2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b1a:	4b4a      	ldr	r3, [pc, #296]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00b      	beq.n	8004b3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b26:	4b47      	ldr	r3, [pc, #284]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b2e:	2b08      	cmp	r3, #8
 8004b30:	d11c      	bne.n	8004b6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b32:	4b44      	ldr	r3, [pc, #272]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d116      	bne.n	8004b6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b3e:	4b41      	ldr	r3, [pc, #260]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <HAL_RCC_OscConfig+0x152>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d001      	beq.n	8004b56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e1c7      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b56:	4b3b      	ldr	r3, [pc, #236]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	4937      	ldr	r1, [pc, #220]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b6a:	e03a      	b.n	8004be2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d020      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b74:	4b34      	ldr	r3, [pc, #208]	; (8004c48 <HAL_RCC_OscConfig+0x244>)
 8004b76:	2201      	movs	r2, #1
 8004b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7a:	f7fd fa0f 	bl	8001f9c <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b82:	f7fd fa0b 	bl	8001f9c <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e1a8      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b94:	4b2b      	ldr	r3, [pc, #172]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0f0      	beq.n	8004b82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba0:	4b28      	ldr	r3, [pc, #160]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	4925      	ldr	r1, [pc, #148]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	600b      	str	r3, [r1, #0]
 8004bb4:	e015      	b.n	8004be2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bb6:	4b24      	ldr	r3, [pc, #144]	; (8004c48 <HAL_RCC_OscConfig+0x244>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbc:	f7fd f9ee 	bl	8001f9c <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bc4:	f7fd f9ea 	bl	8001f9c <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e187      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bd6:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f0      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d036      	beq.n	8004c5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d016      	beq.n	8004c24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bf6:	4b15      	ldr	r3, [pc, #84]	; (8004c4c <HAL_RCC_OscConfig+0x248>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfc:	f7fd f9ce 	bl	8001f9c <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c04:	f7fd f9ca 	bl	8001f9c <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e167      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c16:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <HAL_RCC_OscConfig+0x200>
 8004c22:	e01b      	b.n	8004c5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c24:	4b09      	ldr	r3, [pc, #36]	; (8004c4c <HAL_RCC_OscConfig+0x248>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c2a:	f7fd f9b7 	bl	8001f9c <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c30:	e00e      	b.n	8004c50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c32:	f7fd f9b3 	bl	8001f9c <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d907      	bls.n	8004c50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e150      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
 8004c44:	40023800 	.word	0x40023800
 8004c48:	42470000 	.word	0x42470000
 8004c4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c50:	4b88      	ldr	r3, [pc, #544]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1ea      	bne.n	8004c32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 8097 	beq.w	8004d98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c6e:	4b81      	ldr	r3, [pc, #516]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10f      	bne.n	8004c9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60bb      	str	r3, [r7, #8]
 8004c7e:	4b7d      	ldr	r3, [pc, #500]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	4a7c      	ldr	r2, [pc, #496]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c88:	6413      	str	r3, [r2, #64]	; 0x40
 8004c8a:	4b7a      	ldr	r3, [pc, #488]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c92:	60bb      	str	r3, [r7, #8]
 8004c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c96:	2301      	movs	r3, #1
 8004c98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9a:	4b77      	ldr	r3, [pc, #476]	; (8004e78 <HAL_RCC_OscConfig+0x474>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d118      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ca6:	4b74      	ldr	r3, [pc, #464]	; (8004e78 <HAL_RCC_OscConfig+0x474>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a73      	ldr	r2, [pc, #460]	; (8004e78 <HAL_RCC_OscConfig+0x474>)
 8004cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cb2:	f7fd f973 	bl	8001f9c <HAL_GetTick>
 8004cb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb8:	e008      	b.n	8004ccc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cba:	f7fd f96f 	bl	8001f9c <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e10c      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ccc:	4b6a      	ldr	r3, [pc, #424]	; (8004e78 <HAL_RCC_OscConfig+0x474>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0f0      	beq.n	8004cba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d106      	bne.n	8004cee <HAL_RCC_OscConfig+0x2ea>
 8004ce0:	4b64      	ldr	r3, [pc, #400]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce4:	4a63      	ldr	r2, [pc, #396]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	6713      	str	r3, [r2, #112]	; 0x70
 8004cec:	e01c      	b.n	8004d28 <HAL_RCC_OscConfig+0x324>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	2b05      	cmp	r3, #5
 8004cf4:	d10c      	bne.n	8004d10 <HAL_RCC_OscConfig+0x30c>
 8004cf6:	4b5f      	ldr	r3, [pc, #380]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfa:	4a5e      	ldr	r2, [pc, #376]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004cfc:	f043 0304 	orr.w	r3, r3, #4
 8004d00:	6713      	str	r3, [r2, #112]	; 0x70
 8004d02:	4b5c      	ldr	r3, [pc, #368]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d06:	4a5b      	ldr	r2, [pc, #364]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004d08:	f043 0301 	orr.w	r3, r3, #1
 8004d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d0e:	e00b      	b.n	8004d28 <HAL_RCC_OscConfig+0x324>
 8004d10:	4b58      	ldr	r3, [pc, #352]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d14:	4a57      	ldr	r2, [pc, #348]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004d16:	f023 0301 	bic.w	r3, r3, #1
 8004d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d1c:	4b55      	ldr	r3, [pc, #340]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d20:	4a54      	ldr	r2, [pc, #336]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004d22:	f023 0304 	bic.w	r3, r3, #4
 8004d26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d015      	beq.n	8004d5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d30:	f7fd f934 	bl	8001f9c <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d36:	e00a      	b.n	8004d4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d38:	f7fd f930 	bl	8001f9c <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e0cb      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4e:	4b49      	ldr	r3, [pc, #292]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0ee      	beq.n	8004d38 <HAL_RCC_OscConfig+0x334>
 8004d5a:	e014      	b.n	8004d86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d5c:	f7fd f91e 	bl	8001f9c <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d62:	e00a      	b.n	8004d7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d64:	f7fd f91a 	bl	8001f9c <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e0b5      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d7a:	4b3e      	ldr	r3, [pc, #248]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1ee      	bne.n	8004d64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d86:	7dfb      	ldrb	r3, [r7, #23]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d105      	bne.n	8004d98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d8c:	4b39      	ldr	r3, [pc, #228]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	4a38      	ldr	r2, [pc, #224]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 80a1 	beq.w	8004ee4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004da2:	4b34      	ldr	r3, [pc, #208]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
 8004daa:	2b08      	cmp	r3, #8
 8004dac:	d05c      	beq.n	8004e68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d141      	bne.n	8004e3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db6:	4b31      	ldr	r3, [pc, #196]	; (8004e7c <HAL_RCC_OscConfig+0x478>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dbc:	f7fd f8ee 	bl	8001f9c <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dc4:	f7fd f8ea 	bl	8001f9c <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e087      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd6:	4b27      	ldr	r3, [pc, #156]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f0      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69da      	ldr	r2, [r3, #28]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	019b      	lsls	r3, r3, #6
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df8:	085b      	lsrs	r3, r3, #1
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	041b      	lsls	r3, r3, #16
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	061b      	lsls	r3, r3, #24
 8004e06:	491b      	ldr	r1, [pc, #108]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <HAL_RCC_OscConfig+0x478>)
 8004e0e:	2201      	movs	r2, #1
 8004e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e12:	f7fd f8c3 	bl	8001f9c <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e1a:	f7fd f8bf 	bl	8001f9c <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e05c      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2c:	4b11      	ldr	r3, [pc, #68]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0x416>
 8004e38:	e054      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e3a:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <HAL_RCC_OscConfig+0x478>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e40:	f7fd f8ac 	bl	8001f9c <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e48:	f7fd f8a8 	bl	8001f9c <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e045      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e5a:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0x444>
 8004e66:	e03d      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d107      	bne.n	8004e80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e038      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
 8004e74:	40023800 	.word	0x40023800
 8004e78:	40007000 	.word	0x40007000
 8004e7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e80:	4b1b      	ldr	r3, [pc, #108]	; (8004ef0 <HAL_RCC_OscConfig+0x4ec>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d028      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d121      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d11a      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004eb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d111      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec6:	085b      	lsrs	r3, r3, #1
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d107      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40023800 	.word	0x40023800

08004ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0cc      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f08:	4b68      	ldr	r3, [pc, #416]	; (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d90c      	bls.n	8004f30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f16:	4b65      	ldr	r3, [pc, #404]	; (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	b2d2      	uxtb	r2, r2
 8004f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f1e:	4b63      	ldr	r3, [pc, #396]	; (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d001      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e0b8      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d020      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f48:	4b59      	ldr	r3, [pc, #356]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	4a58      	ldr	r2, [pc, #352]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0308 	and.w	r3, r3, #8
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d005      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f60:	4b53      	ldr	r3, [pc, #332]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	4a52      	ldr	r2, [pc, #328]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f6c:	4b50      	ldr	r3, [pc, #320]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	494d      	ldr	r1, [pc, #308]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d044      	beq.n	8005014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d107      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f92:	4b47      	ldr	r3, [pc, #284]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d119      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e07f      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d003      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d107      	bne.n	8004fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb2:	4b3f      	ldr	r3, [pc, #252]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d109      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e06f      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc2:	4b3b      	ldr	r3, [pc, #236]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e067      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fd2:	4b37      	ldr	r3, [pc, #220]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f023 0203 	bic.w	r2, r3, #3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	4934      	ldr	r1, [pc, #208]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fe4:	f7fc ffda 	bl	8001f9c <HAL_GetTick>
 8004fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fea:	e00a      	b.n	8005002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fec:	f7fc ffd6 	bl	8001f9c <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e04f      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005002:	4b2b      	ldr	r3, [pc, #172]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 020c 	and.w	r2, r3, #12
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	429a      	cmp	r2, r3
 8005012:	d1eb      	bne.n	8004fec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005014:	4b25      	ldr	r3, [pc, #148]	; (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d20c      	bcs.n	800503c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005022:	4b22      	ldr	r3, [pc, #136]	; (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800502a:	4b20      	ldr	r3, [pc, #128]	; (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d001      	beq.n	800503c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e032      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d008      	beq.n	800505a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005048:	4b19      	ldr	r3, [pc, #100]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	4916      	ldr	r1, [pc, #88]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	4313      	orrs	r3, r2
 8005058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d009      	beq.n	800507a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005066:	4b12      	ldr	r3, [pc, #72]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	490e      	ldr	r1, [pc, #56]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	4313      	orrs	r3, r2
 8005078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800507a:	f000 f821 	bl	80050c0 <HAL_RCC_GetSysClockFreq>
 800507e:	4602      	mov	r2, r0
 8005080:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	091b      	lsrs	r3, r3, #4
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	490a      	ldr	r1, [pc, #40]	; (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 800508c:	5ccb      	ldrb	r3, [r1, r3]
 800508e:	fa22 f303 	lsr.w	r3, r2, r3
 8005092:	4a09      	ldr	r2, [pc, #36]	; (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005096:	4b09      	ldr	r3, [pc, #36]	; (80050bc <HAL_RCC_ClockConfig+0x1c8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f7fc ff3a 	bl	8001f14 <HAL_InitTick>

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	40023c00 	.word	0x40023c00
 80050b0:	40023800 	.word	0x40023800
 80050b4:	0800dad4 	.word	0x0800dad4
 80050b8:	20000000 	.word	0x20000000
 80050bc:	20000004 	.word	0x20000004

080050c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050c4:	b094      	sub	sp, #80	; 0x50
 80050c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	647b      	str	r3, [r7, #68]	; 0x44
 80050cc:	2300      	movs	r3, #0
 80050ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d0:	2300      	movs	r3, #0
 80050d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050d8:	4b79      	ldr	r3, [pc, #484]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f003 030c 	and.w	r3, r3, #12
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d00d      	beq.n	8005100 <HAL_RCC_GetSysClockFreq+0x40>
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	f200 80e1 	bhi.w	80052ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <HAL_RCC_GetSysClockFreq+0x34>
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d003      	beq.n	80050fa <HAL_RCC_GetSysClockFreq+0x3a>
 80050f2:	e0db      	b.n	80052ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050f4:	4b73      	ldr	r3, [pc, #460]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80050f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80050f8:	e0db      	b.n	80052b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050fa:	4b72      	ldr	r3, [pc, #456]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80050fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050fe:	e0d8      	b.n	80052b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005100:	4b6f      	ldr	r3, [pc, #444]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005108:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800510a:	4b6d      	ldr	r3, [pc, #436]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d063      	beq.n	80051de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005116:	4b6a      	ldr	r3, [pc, #424]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	099b      	lsrs	r3, r3, #6
 800511c:	2200      	movs	r2, #0
 800511e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005120:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005128:	633b      	str	r3, [r7, #48]	; 0x30
 800512a:	2300      	movs	r3, #0
 800512c:	637b      	str	r3, [r7, #52]	; 0x34
 800512e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005132:	4622      	mov	r2, r4
 8005134:	462b      	mov	r3, r5
 8005136:	f04f 0000 	mov.w	r0, #0
 800513a:	f04f 0100 	mov.w	r1, #0
 800513e:	0159      	lsls	r1, r3, #5
 8005140:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005144:	0150      	lsls	r0, r2, #5
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	4621      	mov	r1, r4
 800514c:	1a51      	subs	r1, r2, r1
 800514e:	6139      	str	r1, [r7, #16]
 8005150:	4629      	mov	r1, r5
 8005152:	eb63 0301 	sbc.w	r3, r3, r1
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005164:	4659      	mov	r1, fp
 8005166:	018b      	lsls	r3, r1, #6
 8005168:	4651      	mov	r1, sl
 800516a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800516e:	4651      	mov	r1, sl
 8005170:	018a      	lsls	r2, r1, #6
 8005172:	4651      	mov	r1, sl
 8005174:	ebb2 0801 	subs.w	r8, r2, r1
 8005178:	4659      	mov	r1, fp
 800517a:	eb63 0901 	sbc.w	r9, r3, r1
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800518a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800518e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005192:	4690      	mov	r8, r2
 8005194:	4699      	mov	r9, r3
 8005196:	4623      	mov	r3, r4
 8005198:	eb18 0303 	adds.w	r3, r8, r3
 800519c:	60bb      	str	r3, [r7, #8]
 800519e:	462b      	mov	r3, r5
 80051a0:	eb49 0303 	adc.w	r3, r9, r3
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	f04f 0300 	mov.w	r3, #0
 80051ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051b2:	4629      	mov	r1, r5
 80051b4:	028b      	lsls	r3, r1, #10
 80051b6:	4621      	mov	r1, r4
 80051b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051bc:	4621      	mov	r1, r4
 80051be:	028a      	lsls	r2, r1, #10
 80051c0:	4610      	mov	r0, r2
 80051c2:	4619      	mov	r1, r3
 80051c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051c6:	2200      	movs	r2, #0
 80051c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051d0:	f7fb fd3a 	bl	8000c48 <__aeabi_uldivmod>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4613      	mov	r3, r2
 80051da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051dc:	e058      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051de:	4b38      	ldr	r3, [pc, #224]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	099b      	lsrs	r3, r3, #6
 80051e4:	2200      	movs	r2, #0
 80051e6:	4618      	mov	r0, r3
 80051e8:	4611      	mov	r1, r2
 80051ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051ee:	623b      	str	r3, [r7, #32]
 80051f0:	2300      	movs	r3, #0
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
 80051f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051f8:	4642      	mov	r2, r8
 80051fa:	464b      	mov	r3, r9
 80051fc:	f04f 0000 	mov.w	r0, #0
 8005200:	f04f 0100 	mov.w	r1, #0
 8005204:	0159      	lsls	r1, r3, #5
 8005206:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800520a:	0150      	lsls	r0, r2, #5
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4641      	mov	r1, r8
 8005212:	ebb2 0a01 	subs.w	sl, r2, r1
 8005216:	4649      	mov	r1, r9
 8005218:	eb63 0b01 	sbc.w	fp, r3, r1
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005228:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800522c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005230:	ebb2 040a 	subs.w	r4, r2, sl
 8005234:	eb63 050b 	sbc.w	r5, r3, fp
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	f04f 0300 	mov.w	r3, #0
 8005240:	00eb      	lsls	r3, r5, #3
 8005242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005246:	00e2      	lsls	r2, r4, #3
 8005248:	4614      	mov	r4, r2
 800524a:	461d      	mov	r5, r3
 800524c:	4643      	mov	r3, r8
 800524e:	18e3      	adds	r3, r4, r3
 8005250:	603b      	str	r3, [r7, #0]
 8005252:	464b      	mov	r3, r9
 8005254:	eb45 0303 	adc.w	r3, r5, r3
 8005258:	607b      	str	r3, [r7, #4]
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005266:	4629      	mov	r1, r5
 8005268:	028b      	lsls	r3, r1, #10
 800526a:	4621      	mov	r1, r4
 800526c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005270:	4621      	mov	r1, r4
 8005272:	028a      	lsls	r2, r1, #10
 8005274:	4610      	mov	r0, r2
 8005276:	4619      	mov	r1, r3
 8005278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800527a:	2200      	movs	r2, #0
 800527c:	61bb      	str	r3, [r7, #24]
 800527e:	61fa      	str	r2, [r7, #28]
 8005280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005284:	f7fb fce0 	bl	8000c48 <__aeabi_uldivmod>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4613      	mov	r3, r2
 800528e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	0c1b      	lsrs	r3, r3, #16
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	3301      	adds	r3, #1
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80052a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052aa:	e002      	b.n	80052b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052ac:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80052ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3750      	adds	r7, #80	; 0x50
 80052b8:	46bd      	mov	sp, r7
 80052ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052be:	bf00      	nop
 80052c0:	40023800 	.word	0x40023800
 80052c4:	00f42400 	.word	0x00f42400

080052c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052cc:	4b03      	ldr	r3, [pc, #12]	; (80052dc <HAL_RCC_GetHCLKFreq+0x14>)
 80052ce:	681b      	ldr	r3, [r3, #0]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	20000000 	.word	0x20000000

080052e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052e4:	f7ff fff0 	bl	80052c8 <HAL_RCC_GetHCLKFreq>
 80052e8:	4602      	mov	r2, r0
 80052ea:	4b05      	ldr	r3, [pc, #20]	; (8005300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	0a9b      	lsrs	r3, r3, #10
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	4903      	ldr	r1, [pc, #12]	; (8005304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052f6:	5ccb      	ldrb	r3, [r1, r3]
 80052f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40023800 	.word	0x40023800
 8005304:	0800dae4 	.word	0x0800dae4

08005308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800530c:	f7ff ffdc 	bl	80052c8 <HAL_RCC_GetHCLKFreq>
 8005310:	4602      	mov	r2, r0
 8005312:	4b05      	ldr	r3, [pc, #20]	; (8005328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	0b5b      	lsrs	r3, r3, #13
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	4903      	ldr	r1, [pc, #12]	; (800532c <HAL_RCC_GetPCLK2Freq+0x24>)
 800531e:	5ccb      	ldrb	r3, [r1, r3]
 8005320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005324:	4618      	mov	r0, r3
 8005326:	bd80      	pop	{r7, pc}
 8005328:	40023800 	.word	0x40023800
 800532c:	0800dae4 	.word	0x0800dae4

08005330 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e07b      	b.n	800543a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	2b00      	cmp	r3, #0
 8005348:	d108      	bne.n	800535c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005352:	d009      	beq.n	8005368 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	61da      	str	r2, [r3, #28]
 800535a:	e005      	b.n	8005368 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d106      	bne.n	8005388 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7fc fad0 	bl	8001928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800539e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ec:	ea42 0103 	orr.w	r1, r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	0c1b      	lsrs	r3, r3, #16
 8005406:	f003 0104 	and.w	r1, r3, #4
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	f003 0210 	and.w	r2, r3, #16
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69da      	ldr	r2, [r3, #28]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005428:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b082      	sub	sp, #8
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e041      	b.n	80054d8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d106      	bne.n	800546e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7fc fac5 	bl	80019f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2202      	movs	r2, #2
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3304      	adds	r3, #4
 800547e:	4619      	mov	r1, r3
 8005480:	4610      	mov	r0, r2
 8005482:	f000 fa11 	bl	80058a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e041      	b.n	8005576 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d106      	bne.n	800550c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f839 	bl	800557e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2202      	movs	r2, #2
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3304      	adds	r3, #4
 800551c:	4619      	mov	r1, r3
 800551e:	4610      	mov	r0, r2
 8005520:	f000 f9c2 	bl	80058a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
	...

08005594 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d101      	bne.n	80055b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055ae:	2302      	movs	r3, #2
 80055b0:	e0ae      	b.n	8005710 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b0c      	cmp	r3, #12
 80055be:	f200 809f 	bhi.w	8005700 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055c2:	a201      	add	r2, pc, #4	; (adr r2, 80055c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c8:	080055fd 	.word	0x080055fd
 80055cc:	08005701 	.word	0x08005701
 80055d0:	08005701 	.word	0x08005701
 80055d4:	08005701 	.word	0x08005701
 80055d8:	0800563d 	.word	0x0800563d
 80055dc:	08005701 	.word	0x08005701
 80055e0:	08005701 	.word	0x08005701
 80055e4:	08005701 	.word	0x08005701
 80055e8:	0800567f 	.word	0x0800567f
 80055ec:	08005701 	.word	0x08005701
 80055f0:	08005701 	.word	0x08005701
 80055f4:	08005701 	.word	0x08005701
 80055f8:	080056bf 	.word	0x080056bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	4618      	mov	r0, r3
 8005604:	f000 f9f0 	bl	80059e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699a      	ldr	r2, [r3, #24]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0208 	orr.w	r2, r2, #8
 8005616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0204 	bic.w	r2, r2, #4
 8005626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6999      	ldr	r1, [r3, #24]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	691a      	ldr	r2, [r3, #16]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	619a      	str	r2, [r3, #24]
      break;
 800563a:	e064      	b.n	8005706 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68b9      	ldr	r1, [r7, #8]
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fa40 	bl	8005ac8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699a      	ldr	r2, [r3, #24]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699a      	ldr	r2, [r3, #24]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6999      	ldr	r1, [r3, #24]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	021a      	lsls	r2, r3, #8
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	619a      	str	r2, [r3, #24]
      break;
 800567c:	e043      	b.n	8005706 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68b9      	ldr	r1, [r7, #8]
 8005684:	4618      	mov	r0, r3
 8005686:	f000 fa95 	bl	8005bb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69da      	ldr	r2, [r3, #28]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f042 0208 	orr.w	r2, r2, #8
 8005698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69da      	ldr	r2, [r3, #28]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0204 	bic.w	r2, r2, #4
 80056a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69d9      	ldr	r1, [r3, #28]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	691a      	ldr	r2, [r3, #16]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	61da      	str	r2, [r3, #28]
      break;
 80056bc:	e023      	b.n	8005706 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68b9      	ldr	r1, [r7, #8]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 fae9 	bl	8005c9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69da      	ldr	r2, [r3, #28]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	69da      	ldr	r2, [r3, #28]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69d9      	ldr	r1, [r3, #28]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	021a      	lsls	r2, r3, #8
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	61da      	str	r2, [r3, #28]
      break;
 80056fe:	e002      	b.n	8005706 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	75fb      	strb	r3, [r7, #23]
      break;
 8005704:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800570e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_TIM_ConfigClockSource+0x1c>
 8005730:	2302      	movs	r3, #2
 8005732:	e0b4      	b.n	800589e <HAL_TIM_ConfigClockSource+0x186>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800575a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800576c:	d03e      	beq.n	80057ec <HAL_TIM_ConfigClockSource+0xd4>
 800576e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005772:	f200 8087 	bhi.w	8005884 <HAL_TIM_ConfigClockSource+0x16c>
 8005776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800577a:	f000 8086 	beq.w	800588a <HAL_TIM_ConfigClockSource+0x172>
 800577e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005782:	d87f      	bhi.n	8005884 <HAL_TIM_ConfigClockSource+0x16c>
 8005784:	2b70      	cmp	r3, #112	; 0x70
 8005786:	d01a      	beq.n	80057be <HAL_TIM_ConfigClockSource+0xa6>
 8005788:	2b70      	cmp	r3, #112	; 0x70
 800578a:	d87b      	bhi.n	8005884 <HAL_TIM_ConfigClockSource+0x16c>
 800578c:	2b60      	cmp	r3, #96	; 0x60
 800578e:	d050      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0x11a>
 8005790:	2b60      	cmp	r3, #96	; 0x60
 8005792:	d877      	bhi.n	8005884 <HAL_TIM_ConfigClockSource+0x16c>
 8005794:	2b50      	cmp	r3, #80	; 0x50
 8005796:	d03c      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0xfa>
 8005798:	2b50      	cmp	r3, #80	; 0x50
 800579a:	d873      	bhi.n	8005884 <HAL_TIM_ConfigClockSource+0x16c>
 800579c:	2b40      	cmp	r3, #64	; 0x40
 800579e:	d058      	beq.n	8005852 <HAL_TIM_ConfigClockSource+0x13a>
 80057a0:	2b40      	cmp	r3, #64	; 0x40
 80057a2:	d86f      	bhi.n	8005884 <HAL_TIM_ConfigClockSource+0x16c>
 80057a4:	2b30      	cmp	r3, #48	; 0x30
 80057a6:	d064      	beq.n	8005872 <HAL_TIM_ConfigClockSource+0x15a>
 80057a8:	2b30      	cmp	r3, #48	; 0x30
 80057aa:	d86b      	bhi.n	8005884 <HAL_TIM_ConfigClockSource+0x16c>
 80057ac:	2b20      	cmp	r3, #32
 80057ae:	d060      	beq.n	8005872 <HAL_TIM_ConfigClockSource+0x15a>
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	d867      	bhi.n	8005884 <HAL_TIM_ConfigClockSource+0x16c>
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d05c      	beq.n	8005872 <HAL_TIM_ConfigClockSource+0x15a>
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	d05a      	beq.n	8005872 <HAL_TIM_ConfigClockSource+0x15a>
 80057bc:	e062      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6818      	ldr	r0, [r3, #0]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	6899      	ldr	r1, [r3, #8]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f000 fb35 	bl	8005e3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	609a      	str	r2, [r3, #8]
      break;
 80057ea:	e04f      	b.n	800588c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6818      	ldr	r0, [r3, #0]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	6899      	ldr	r1, [r3, #8]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f000 fb1e 	bl	8005e3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689a      	ldr	r2, [r3, #8]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800580e:	609a      	str	r2, [r3, #8]
      break;
 8005810:	e03c      	b.n	800588c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	6859      	ldr	r1, [r3, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	461a      	mov	r2, r3
 8005820:	f000 fa92 	bl	8005d48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2150      	movs	r1, #80	; 0x50
 800582a:	4618      	mov	r0, r3
 800582c:	f000 faeb 	bl	8005e06 <TIM_ITRx_SetConfig>
      break;
 8005830:	e02c      	b.n	800588c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6818      	ldr	r0, [r3, #0]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	6859      	ldr	r1, [r3, #4]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	461a      	mov	r2, r3
 8005840:	f000 fab1 	bl	8005da6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2160      	movs	r1, #96	; 0x60
 800584a:	4618      	mov	r0, r3
 800584c:	f000 fadb 	bl	8005e06 <TIM_ITRx_SetConfig>
      break;
 8005850:	e01c      	b.n	800588c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6818      	ldr	r0, [r3, #0]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	6859      	ldr	r1, [r3, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	461a      	mov	r2, r3
 8005860:	f000 fa72 	bl	8005d48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2140      	movs	r1, #64	; 0x40
 800586a:	4618      	mov	r0, r3
 800586c:	f000 facb 	bl	8005e06 <TIM_ITRx_SetConfig>
      break;
 8005870:	e00c      	b.n	800588c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4619      	mov	r1, r3
 800587c:	4610      	mov	r0, r2
 800587e:	f000 fac2 	bl	8005e06 <TIM_ITRx_SetConfig>
      break;
 8005882:	e003      	b.n	800588c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	73fb      	strb	r3, [r7, #15]
      break;
 8005888:	e000      	b.n	800588c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800588a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800589c:	7bfb      	ldrb	r3, [r7, #15]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a40      	ldr	r2, [pc, #256]	; (80059bc <TIM_Base_SetConfig+0x114>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d013      	beq.n	80058e8 <TIM_Base_SetConfig+0x40>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c6:	d00f      	beq.n	80058e8 <TIM_Base_SetConfig+0x40>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a3d      	ldr	r2, [pc, #244]	; (80059c0 <TIM_Base_SetConfig+0x118>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00b      	beq.n	80058e8 <TIM_Base_SetConfig+0x40>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a3c      	ldr	r2, [pc, #240]	; (80059c4 <TIM_Base_SetConfig+0x11c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d007      	beq.n	80058e8 <TIM_Base_SetConfig+0x40>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a3b      	ldr	r2, [pc, #236]	; (80059c8 <TIM_Base_SetConfig+0x120>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d003      	beq.n	80058e8 <TIM_Base_SetConfig+0x40>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a3a      	ldr	r2, [pc, #232]	; (80059cc <TIM_Base_SetConfig+0x124>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d108      	bne.n	80058fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a2f      	ldr	r2, [pc, #188]	; (80059bc <TIM_Base_SetConfig+0x114>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d02b      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005908:	d027      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a2c      	ldr	r2, [pc, #176]	; (80059c0 <TIM_Base_SetConfig+0x118>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d023      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a2b      	ldr	r2, [pc, #172]	; (80059c4 <TIM_Base_SetConfig+0x11c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d01f      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a2a      	ldr	r2, [pc, #168]	; (80059c8 <TIM_Base_SetConfig+0x120>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d01b      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a29      	ldr	r2, [pc, #164]	; (80059cc <TIM_Base_SetConfig+0x124>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d017      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a28      	ldr	r2, [pc, #160]	; (80059d0 <TIM_Base_SetConfig+0x128>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d013      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a27      	ldr	r2, [pc, #156]	; (80059d4 <TIM_Base_SetConfig+0x12c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00f      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a26      	ldr	r2, [pc, #152]	; (80059d8 <TIM_Base_SetConfig+0x130>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00b      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a25      	ldr	r2, [pc, #148]	; (80059dc <TIM_Base_SetConfig+0x134>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d007      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a24      	ldr	r2, [pc, #144]	; (80059e0 <TIM_Base_SetConfig+0x138>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d003      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a23      	ldr	r2, [pc, #140]	; (80059e4 <TIM_Base_SetConfig+0x13c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d108      	bne.n	800596c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a0a      	ldr	r2, [pc, #40]	; (80059bc <TIM_Base_SetConfig+0x114>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d003      	beq.n	80059a0 <TIM_Base_SetConfig+0xf8>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a0c      	ldr	r2, [pc, #48]	; (80059cc <TIM_Base_SetConfig+0x124>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d103      	bne.n	80059a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	615a      	str	r2, [r3, #20]
}
 80059ae:	bf00      	nop
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40010000 	.word	0x40010000
 80059c0:	40000400 	.word	0x40000400
 80059c4:	40000800 	.word	0x40000800
 80059c8:	40000c00 	.word	0x40000c00
 80059cc:	40010400 	.word	0x40010400
 80059d0:	40014000 	.word	0x40014000
 80059d4:	40014400 	.word	0x40014400
 80059d8:	40014800 	.word	0x40014800
 80059dc:	40001800 	.word	0x40001800
 80059e0:	40001c00 	.word	0x40001c00
 80059e4:	40002000 	.word	0x40002000

080059e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	f023 0201 	bic.w	r2, r3, #1
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 0303 	bic.w	r3, r3, #3
 8005a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f023 0302 	bic.w	r3, r3, #2
 8005a30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a20      	ldr	r2, [pc, #128]	; (8005ac0 <TIM_OC1_SetConfig+0xd8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d003      	beq.n	8005a4c <TIM_OC1_SetConfig+0x64>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a1f      	ldr	r2, [pc, #124]	; (8005ac4 <TIM_OC1_SetConfig+0xdc>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d10c      	bne.n	8005a66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f023 0308 	bic.w	r3, r3, #8
 8005a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f023 0304 	bic.w	r3, r3, #4
 8005a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a15      	ldr	r2, [pc, #84]	; (8005ac0 <TIM_OC1_SetConfig+0xd8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d003      	beq.n	8005a76 <TIM_OC1_SetConfig+0x8e>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a14      	ldr	r2, [pc, #80]	; (8005ac4 <TIM_OC1_SetConfig+0xdc>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d111      	bne.n	8005a9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	621a      	str	r2, [r3, #32]
}
 8005ab4:	bf00      	nop
 8005ab6:	371c      	adds	r7, #28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	40010000 	.word	0x40010000
 8005ac4:	40010400 	.word	0x40010400

08005ac8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	f023 0210 	bic.w	r2, r3, #16
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	021b      	lsls	r3, r3, #8
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f023 0320 	bic.w	r3, r3, #32
 8005b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a22      	ldr	r2, [pc, #136]	; (8005bac <TIM_OC2_SetConfig+0xe4>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d003      	beq.n	8005b30 <TIM_OC2_SetConfig+0x68>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a21      	ldr	r2, [pc, #132]	; (8005bb0 <TIM_OC2_SetConfig+0xe8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d10d      	bne.n	8005b4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	011b      	lsls	r3, r3, #4
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a17      	ldr	r2, [pc, #92]	; (8005bac <TIM_OC2_SetConfig+0xe4>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d003      	beq.n	8005b5c <TIM_OC2_SetConfig+0x94>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a16      	ldr	r2, [pc, #88]	; (8005bb0 <TIM_OC2_SetConfig+0xe8>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d113      	bne.n	8005b84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	621a      	str	r2, [r3, #32]
}
 8005b9e:	bf00      	nop
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40010000 	.word	0x40010000
 8005bb0:	40010400 	.word	0x40010400

08005bb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0303 	bic.w	r3, r3, #3
 8005bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	021b      	lsls	r3, r3, #8
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a21      	ldr	r2, [pc, #132]	; (8005c94 <TIM_OC3_SetConfig+0xe0>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d003      	beq.n	8005c1a <TIM_OC3_SetConfig+0x66>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a20      	ldr	r2, [pc, #128]	; (8005c98 <TIM_OC3_SetConfig+0xe4>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d10d      	bne.n	8005c36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	021b      	lsls	r3, r3, #8
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a16      	ldr	r2, [pc, #88]	; (8005c94 <TIM_OC3_SetConfig+0xe0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d003      	beq.n	8005c46 <TIM_OC3_SetConfig+0x92>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a15      	ldr	r2, [pc, #84]	; (8005c98 <TIM_OC3_SetConfig+0xe4>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d113      	bne.n	8005c6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	621a      	str	r2, [r3, #32]
}
 8005c88:	bf00      	nop
 8005c8a:	371c      	adds	r7, #28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	40010000 	.word	0x40010000
 8005c98:	40010400 	.word	0x40010400

08005c9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	021b      	lsls	r3, r3, #8
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	031b      	lsls	r3, r3, #12
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a12      	ldr	r2, [pc, #72]	; (8005d40 <TIM_OC4_SetConfig+0xa4>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d003      	beq.n	8005d04 <TIM_OC4_SetConfig+0x68>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a11      	ldr	r2, [pc, #68]	; (8005d44 <TIM_OC4_SetConfig+0xa8>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d109      	bne.n	8005d18 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	019b      	lsls	r3, r3, #6
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	621a      	str	r2, [r3, #32]
}
 8005d32:	bf00      	nop
 8005d34:	371c      	adds	r7, #28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40010000 	.word	0x40010000
 8005d44:	40010400 	.word	0x40010400

08005d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	f023 0201 	bic.w	r2, r3, #1
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	011b      	lsls	r3, r3, #4
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f023 030a 	bic.w	r3, r3, #10
 8005d84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	621a      	str	r2, [r3, #32]
}
 8005d9a:	bf00      	nop
 8005d9c:	371c      	adds	r7, #28
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b087      	sub	sp, #28
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	f023 0210 	bic.w	r2, r3, #16
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	031b      	lsls	r3, r3, #12
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005de2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	621a      	str	r2, [r3, #32]
}
 8005dfa:	bf00      	nop
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b085      	sub	sp, #20
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	f043 0307 	orr.w	r3, r3, #7
 8005e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	609a      	str	r2, [r3, #8]
}
 8005e30:	bf00      	nop
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	021a      	lsls	r2, r3, #8
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	609a      	str	r2, [r3, #8]
}
 8005e70:	bf00      	nop
 8005e72:	371c      	adds	r7, #28
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d101      	bne.n	8005e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e90:	2302      	movs	r3, #2
 8005e92:	e05a      	b.n	8005f4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a21      	ldr	r2, [pc, #132]	; (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d022      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee0:	d01d      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a1d      	ldr	r2, [pc, #116]	; (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d018      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a1b      	ldr	r2, [pc, #108]	; (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d013      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a1a      	ldr	r2, [pc, #104]	; (8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d00e      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a18      	ldr	r2, [pc, #96]	; (8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d009      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a17      	ldr	r2, [pc, #92]	; (8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d004      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a15      	ldr	r2, [pc, #84]	; (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d10c      	bne.n	8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40010000 	.word	0x40010000
 8005f5c:	40000400 	.word	0x40000400
 8005f60:	40000800 	.word	0x40000800
 8005f64:	40000c00 	.word	0x40000c00
 8005f68:	40010400 	.word	0x40010400
 8005f6c:	40014000 	.word	0x40014000
 8005f70:	40001800 	.word	0x40001800

08005f74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d101      	bne.n	8005f90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	e03d      	b.n	800600c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3714      	adds	r7, #20
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e03f      	b.n	80060aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d106      	bne.n	8006044 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7fb fd94 	bl	8001b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2224      	movs	r2, #36	; 0x24
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800605a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f829 	bl	80060b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	691a      	ldr	r2, [r3, #16]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006070:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	695a      	ldr	r2, [r3, #20]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006080:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006090:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2220      	movs	r2, #32
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060b8:	b0c0      	sub	sp, #256	; 0x100
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80060cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d0:	68d9      	ldr	r1, [r3, #12]
 80060d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	ea40 0301 	orr.w	r3, r0, r1
 80060dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f8:	69db      	ldr	r3, [r3, #28]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800610c:	f021 010c 	bic.w	r1, r1, #12
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800611a:	430b      	orrs	r3, r1
 800611c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800611e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800612a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612e:	6999      	ldr	r1, [r3, #24]
 8006130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	ea40 0301 	orr.w	r3, r0, r1
 800613a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800613c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	4b8f      	ldr	r3, [pc, #572]	; (8006380 <UART_SetConfig+0x2cc>)
 8006144:	429a      	cmp	r2, r3
 8006146:	d005      	beq.n	8006154 <UART_SetConfig+0xa0>
 8006148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	4b8d      	ldr	r3, [pc, #564]	; (8006384 <UART_SetConfig+0x2d0>)
 8006150:	429a      	cmp	r2, r3
 8006152:	d104      	bne.n	800615e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006154:	f7ff f8d8 	bl	8005308 <HAL_RCC_GetPCLK2Freq>
 8006158:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800615c:	e003      	b.n	8006166 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800615e:	f7ff f8bf 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 8006162:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006170:	f040 810c 	bne.w	800638c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006178:	2200      	movs	r2, #0
 800617a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800617e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006182:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006186:	4622      	mov	r2, r4
 8006188:	462b      	mov	r3, r5
 800618a:	1891      	adds	r1, r2, r2
 800618c:	65b9      	str	r1, [r7, #88]	; 0x58
 800618e:	415b      	adcs	r3, r3
 8006190:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006192:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006196:	4621      	mov	r1, r4
 8006198:	eb12 0801 	adds.w	r8, r2, r1
 800619c:	4629      	mov	r1, r5
 800619e:	eb43 0901 	adc.w	r9, r3, r1
 80061a2:	f04f 0200 	mov.w	r2, #0
 80061a6:	f04f 0300 	mov.w	r3, #0
 80061aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061b6:	4690      	mov	r8, r2
 80061b8:	4699      	mov	r9, r3
 80061ba:	4623      	mov	r3, r4
 80061bc:	eb18 0303 	adds.w	r3, r8, r3
 80061c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061c4:	462b      	mov	r3, r5
 80061c6:	eb49 0303 	adc.w	r3, r9, r3
 80061ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80061de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80061e2:	460b      	mov	r3, r1
 80061e4:	18db      	adds	r3, r3, r3
 80061e6:	653b      	str	r3, [r7, #80]	; 0x50
 80061e8:	4613      	mov	r3, r2
 80061ea:	eb42 0303 	adc.w	r3, r2, r3
 80061ee:	657b      	str	r3, [r7, #84]	; 0x54
 80061f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80061f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80061f8:	f7fa fd26 	bl	8000c48 <__aeabi_uldivmod>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4b61      	ldr	r3, [pc, #388]	; (8006388 <UART_SetConfig+0x2d4>)
 8006202:	fba3 2302 	umull	r2, r3, r3, r2
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	011c      	lsls	r4, r3, #4
 800620a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800620e:	2200      	movs	r2, #0
 8006210:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006214:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006218:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800621c:	4642      	mov	r2, r8
 800621e:	464b      	mov	r3, r9
 8006220:	1891      	adds	r1, r2, r2
 8006222:	64b9      	str	r1, [r7, #72]	; 0x48
 8006224:	415b      	adcs	r3, r3
 8006226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006228:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800622c:	4641      	mov	r1, r8
 800622e:	eb12 0a01 	adds.w	sl, r2, r1
 8006232:	4649      	mov	r1, r9
 8006234:	eb43 0b01 	adc.w	fp, r3, r1
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006244:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006248:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800624c:	4692      	mov	sl, r2
 800624e:	469b      	mov	fp, r3
 8006250:	4643      	mov	r3, r8
 8006252:	eb1a 0303 	adds.w	r3, sl, r3
 8006256:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800625a:	464b      	mov	r3, r9
 800625c:	eb4b 0303 	adc.w	r3, fp, r3
 8006260:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006270:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006274:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006278:	460b      	mov	r3, r1
 800627a:	18db      	adds	r3, r3, r3
 800627c:	643b      	str	r3, [r7, #64]	; 0x40
 800627e:	4613      	mov	r3, r2
 8006280:	eb42 0303 	adc.w	r3, r2, r3
 8006284:	647b      	str	r3, [r7, #68]	; 0x44
 8006286:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800628a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800628e:	f7fa fcdb 	bl	8000c48 <__aeabi_uldivmod>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4611      	mov	r1, r2
 8006298:	4b3b      	ldr	r3, [pc, #236]	; (8006388 <UART_SetConfig+0x2d4>)
 800629a:	fba3 2301 	umull	r2, r3, r3, r1
 800629e:	095b      	lsrs	r3, r3, #5
 80062a0:	2264      	movs	r2, #100	; 0x64
 80062a2:	fb02 f303 	mul.w	r3, r2, r3
 80062a6:	1acb      	subs	r3, r1, r3
 80062a8:	00db      	lsls	r3, r3, #3
 80062aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80062ae:	4b36      	ldr	r3, [pc, #216]	; (8006388 <UART_SetConfig+0x2d4>)
 80062b0:	fba3 2302 	umull	r2, r3, r3, r2
 80062b4:	095b      	lsrs	r3, r3, #5
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062bc:	441c      	add	r4, r3
 80062be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062c2:	2200      	movs	r2, #0
 80062c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80062cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80062d0:	4642      	mov	r2, r8
 80062d2:	464b      	mov	r3, r9
 80062d4:	1891      	adds	r1, r2, r2
 80062d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80062d8:	415b      	adcs	r3, r3
 80062da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80062e0:	4641      	mov	r1, r8
 80062e2:	1851      	adds	r1, r2, r1
 80062e4:	6339      	str	r1, [r7, #48]	; 0x30
 80062e6:	4649      	mov	r1, r9
 80062e8:	414b      	adcs	r3, r1
 80062ea:	637b      	str	r3, [r7, #52]	; 0x34
 80062ec:	f04f 0200 	mov.w	r2, #0
 80062f0:	f04f 0300 	mov.w	r3, #0
 80062f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80062f8:	4659      	mov	r1, fp
 80062fa:	00cb      	lsls	r3, r1, #3
 80062fc:	4651      	mov	r1, sl
 80062fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006302:	4651      	mov	r1, sl
 8006304:	00ca      	lsls	r2, r1, #3
 8006306:	4610      	mov	r0, r2
 8006308:	4619      	mov	r1, r3
 800630a:	4603      	mov	r3, r0
 800630c:	4642      	mov	r2, r8
 800630e:	189b      	adds	r3, r3, r2
 8006310:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006314:	464b      	mov	r3, r9
 8006316:	460a      	mov	r2, r1
 8006318:	eb42 0303 	adc.w	r3, r2, r3
 800631c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800632c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006330:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006334:	460b      	mov	r3, r1
 8006336:	18db      	adds	r3, r3, r3
 8006338:	62bb      	str	r3, [r7, #40]	; 0x28
 800633a:	4613      	mov	r3, r2
 800633c:	eb42 0303 	adc.w	r3, r2, r3
 8006340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006342:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006346:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800634a:	f7fa fc7d 	bl	8000c48 <__aeabi_uldivmod>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	4b0d      	ldr	r3, [pc, #52]	; (8006388 <UART_SetConfig+0x2d4>)
 8006354:	fba3 1302 	umull	r1, r3, r3, r2
 8006358:	095b      	lsrs	r3, r3, #5
 800635a:	2164      	movs	r1, #100	; 0x64
 800635c:	fb01 f303 	mul.w	r3, r1, r3
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	3332      	adds	r3, #50	; 0x32
 8006366:	4a08      	ldr	r2, [pc, #32]	; (8006388 <UART_SetConfig+0x2d4>)
 8006368:	fba2 2303 	umull	r2, r3, r2, r3
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	f003 0207 	and.w	r2, r3, #7
 8006372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4422      	add	r2, r4
 800637a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800637c:	e105      	b.n	800658a <UART_SetConfig+0x4d6>
 800637e:	bf00      	nop
 8006380:	40011000 	.word	0x40011000
 8006384:	40011400 	.word	0x40011400
 8006388:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800638c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006390:	2200      	movs	r2, #0
 8006392:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006396:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800639a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800639e:	4642      	mov	r2, r8
 80063a0:	464b      	mov	r3, r9
 80063a2:	1891      	adds	r1, r2, r2
 80063a4:	6239      	str	r1, [r7, #32]
 80063a6:	415b      	adcs	r3, r3
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
 80063aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063ae:	4641      	mov	r1, r8
 80063b0:	1854      	adds	r4, r2, r1
 80063b2:	4649      	mov	r1, r9
 80063b4:	eb43 0501 	adc.w	r5, r3, r1
 80063b8:	f04f 0200 	mov.w	r2, #0
 80063bc:	f04f 0300 	mov.w	r3, #0
 80063c0:	00eb      	lsls	r3, r5, #3
 80063c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063c6:	00e2      	lsls	r2, r4, #3
 80063c8:	4614      	mov	r4, r2
 80063ca:	461d      	mov	r5, r3
 80063cc:	4643      	mov	r3, r8
 80063ce:	18e3      	adds	r3, r4, r3
 80063d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063d4:	464b      	mov	r3, r9
 80063d6:	eb45 0303 	adc.w	r3, r5, r3
 80063da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063ee:	f04f 0200 	mov.w	r2, #0
 80063f2:	f04f 0300 	mov.w	r3, #0
 80063f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80063fa:	4629      	mov	r1, r5
 80063fc:	008b      	lsls	r3, r1, #2
 80063fe:	4621      	mov	r1, r4
 8006400:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006404:	4621      	mov	r1, r4
 8006406:	008a      	lsls	r2, r1, #2
 8006408:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800640c:	f7fa fc1c 	bl	8000c48 <__aeabi_uldivmod>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	4b60      	ldr	r3, [pc, #384]	; (8006598 <UART_SetConfig+0x4e4>)
 8006416:	fba3 2302 	umull	r2, r3, r3, r2
 800641a:	095b      	lsrs	r3, r3, #5
 800641c:	011c      	lsls	r4, r3, #4
 800641e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006422:	2200      	movs	r2, #0
 8006424:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006428:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800642c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006430:	4642      	mov	r2, r8
 8006432:	464b      	mov	r3, r9
 8006434:	1891      	adds	r1, r2, r2
 8006436:	61b9      	str	r1, [r7, #24]
 8006438:	415b      	adcs	r3, r3
 800643a:	61fb      	str	r3, [r7, #28]
 800643c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006440:	4641      	mov	r1, r8
 8006442:	1851      	adds	r1, r2, r1
 8006444:	6139      	str	r1, [r7, #16]
 8006446:	4649      	mov	r1, r9
 8006448:	414b      	adcs	r3, r1
 800644a:	617b      	str	r3, [r7, #20]
 800644c:	f04f 0200 	mov.w	r2, #0
 8006450:	f04f 0300 	mov.w	r3, #0
 8006454:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006458:	4659      	mov	r1, fp
 800645a:	00cb      	lsls	r3, r1, #3
 800645c:	4651      	mov	r1, sl
 800645e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006462:	4651      	mov	r1, sl
 8006464:	00ca      	lsls	r2, r1, #3
 8006466:	4610      	mov	r0, r2
 8006468:	4619      	mov	r1, r3
 800646a:	4603      	mov	r3, r0
 800646c:	4642      	mov	r2, r8
 800646e:	189b      	adds	r3, r3, r2
 8006470:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006474:	464b      	mov	r3, r9
 8006476:	460a      	mov	r2, r1
 8006478:	eb42 0303 	adc.w	r3, r2, r3
 800647c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	67bb      	str	r3, [r7, #120]	; 0x78
 800648a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800648c:	f04f 0200 	mov.w	r2, #0
 8006490:	f04f 0300 	mov.w	r3, #0
 8006494:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006498:	4649      	mov	r1, r9
 800649a:	008b      	lsls	r3, r1, #2
 800649c:	4641      	mov	r1, r8
 800649e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064a2:	4641      	mov	r1, r8
 80064a4:	008a      	lsls	r2, r1, #2
 80064a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80064aa:	f7fa fbcd 	bl	8000c48 <__aeabi_uldivmod>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	4b39      	ldr	r3, [pc, #228]	; (8006598 <UART_SetConfig+0x4e4>)
 80064b4:	fba3 1302 	umull	r1, r3, r3, r2
 80064b8:	095b      	lsrs	r3, r3, #5
 80064ba:	2164      	movs	r1, #100	; 0x64
 80064bc:	fb01 f303 	mul.w	r3, r1, r3
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	3332      	adds	r3, #50	; 0x32
 80064c6:	4a34      	ldr	r2, [pc, #208]	; (8006598 <UART_SetConfig+0x4e4>)
 80064c8:	fba2 2303 	umull	r2, r3, r2, r3
 80064cc:	095b      	lsrs	r3, r3, #5
 80064ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064d2:	441c      	add	r4, r3
 80064d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064d8:	2200      	movs	r2, #0
 80064da:	673b      	str	r3, [r7, #112]	; 0x70
 80064dc:	677a      	str	r2, [r7, #116]	; 0x74
 80064de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80064e2:	4642      	mov	r2, r8
 80064e4:	464b      	mov	r3, r9
 80064e6:	1891      	adds	r1, r2, r2
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	415b      	adcs	r3, r3
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064f2:	4641      	mov	r1, r8
 80064f4:	1851      	adds	r1, r2, r1
 80064f6:	6039      	str	r1, [r7, #0]
 80064f8:	4649      	mov	r1, r9
 80064fa:	414b      	adcs	r3, r1
 80064fc:	607b      	str	r3, [r7, #4]
 80064fe:	f04f 0200 	mov.w	r2, #0
 8006502:	f04f 0300 	mov.w	r3, #0
 8006506:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800650a:	4659      	mov	r1, fp
 800650c:	00cb      	lsls	r3, r1, #3
 800650e:	4651      	mov	r1, sl
 8006510:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006514:	4651      	mov	r1, sl
 8006516:	00ca      	lsls	r2, r1, #3
 8006518:	4610      	mov	r0, r2
 800651a:	4619      	mov	r1, r3
 800651c:	4603      	mov	r3, r0
 800651e:	4642      	mov	r2, r8
 8006520:	189b      	adds	r3, r3, r2
 8006522:	66bb      	str	r3, [r7, #104]	; 0x68
 8006524:	464b      	mov	r3, r9
 8006526:	460a      	mov	r2, r1
 8006528:	eb42 0303 	adc.w	r3, r2, r3
 800652c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800652e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	663b      	str	r3, [r7, #96]	; 0x60
 8006538:	667a      	str	r2, [r7, #100]	; 0x64
 800653a:	f04f 0200 	mov.w	r2, #0
 800653e:	f04f 0300 	mov.w	r3, #0
 8006542:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006546:	4649      	mov	r1, r9
 8006548:	008b      	lsls	r3, r1, #2
 800654a:	4641      	mov	r1, r8
 800654c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006550:	4641      	mov	r1, r8
 8006552:	008a      	lsls	r2, r1, #2
 8006554:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006558:	f7fa fb76 	bl	8000c48 <__aeabi_uldivmod>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	4b0d      	ldr	r3, [pc, #52]	; (8006598 <UART_SetConfig+0x4e4>)
 8006562:	fba3 1302 	umull	r1, r3, r3, r2
 8006566:	095b      	lsrs	r3, r3, #5
 8006568:	2164      	movs	r1, #100	; 0x64
 800656a:	fb01 f303 	mul.w	r3, r1, r3
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	011b      	lsls	r3, r3, #4
 8006572:	3332      	adds	r3, #50	; 0x32
 8006574:	4a08      	ldr	r2, [pc, #32]	; (8006598 <UART_SetConfig+0x4e4>)
 8006576:	fba2 2303 	umull	r2, r3, r2, r3
 800657a:	095b      	lsrs	r3, r3, #5
 800657c:	f003 020f 	and.w	r2, r3, #15
 8006580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4422      	add	r2, r4
 8006588:	609a      	str	r2, [r3, #8]
}
 800658a:	bf00      	nop
 800658c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006590:	46bd      	mov	sp, r7
 8006592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006596:	bf00      	nop
 8006598:	51eb851f 	.word	0x51eb851f

0800659c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800659c:	b084      	sub	sp, #16
 800659e:	b580      	push	{r7, lr}
 80065a0:	b084      	sub	sp, #16
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	f107 001c 	add.w	r0, r7, #28
 80065aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d122      	bne.n	80065fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80065c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d105      	bne.n	80065ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f001 fbee 	bl	8007dd0 <USB_CoreReset>
 80065f4:	4603      	mov	r3, r0
 80065f6:	73fb      	strb	r3, [r7, #15]
 80065f8:	e01a      	b.n	8006630 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f001 fbe2 	bl	8007dd0 <USB_CoreReset>
 800660c:	4603      	mov	r3, r0
 800660e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006612:	2b00      	cmp	r3, #0
 8006614:	d106      	bne.n	8006624 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	639a      	str	r2, [r3, #56]	; 0x38
 8006622:	e005      	b.n	8006630 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006628:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006632:	2b01      	cmp	r3, #1
 8006634:	d10b      	bne.n	800664e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f043 0206 	orr.w	r2, r3, #6
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f043 0220 	orr.w	r2, r3, #32
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800664e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800665a:	b004      	add	sp, #16
 800665c:	4770      	bx	lr
	...

08006660 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006660:	b480      	push	{r7}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	4613      	mov	r3, r2
 800666c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800666e:	79fb      	ldrb	r3, [r7, #7]
 8006670:	2b02      	cmp	r3, #2
 8006672:	d165      	bne.n	8006740 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	4a41      	ldr	r2, [pc, #260]	; (800677c <USB_SetTurnaroundTime+0x11c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d906      	bls.n	800668a <USB_SetTurnaroundTime+0x2a>
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	4a40      	ldr	r2, [pc, #256]	; (8006780 <USB_SetTurnaroundTime+0x120>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d202      	bcs.n	800668a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006684:	230f      	movs	r3, #15
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	e062      	b.n	8006750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	4a3c      	ldr	r2, [pc, #240]	; (8006780 <USB_SetTurnaroundTime+0x120>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d306      	bcc.n	80066a0 <USB_SetTurnaroundTime+0x40>
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	4a3b      	ldr	r2, [pc, #236]	; (8006784 <USB_SetTurnaroundTime+0x124>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d202      	bcs.n	80066a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800669a:	230e      	movs	r3, #14
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	e057      	b.n	8006750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	4a38      	ldr	r2, [pc, #224]	; (8006784 <USB_SetTurnaroundTime+0x124>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d306      	bcc.n	80066b6 <USB_SetTurnaroundTime+0x56>
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	4a37      	ldr	r2, [pc, #220]	; (8006788 <USB_SetTurnaroundTime+0x128>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d202      	bcs.n	80066b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80066b0:	230d      	movs	r3, #13
 80066b2:	617b      	str	r3, [r7, #20]
 80066b4:	e04c      	b.n	8006750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	4a33      	ldr	r2, [pc, #204]	; (8006788 <USB_SetTurnaroundTime+0x128>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d306      	bcc.n	80066cc <USB_SetTurnaroundTime+0x6c>
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	4a32      	ldr	r2, [pc, #200]	; (800678c <USB_SetTurnaroundTime+0x12c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d802      	bhi.n	80066cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80066c6:	230c      	movs	r3, #12
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	e041      	b.n	8006750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	4a2f      	ldr	r2, [pc, #188]	; (800678c <USB_SetTurnaroundTime+0x12c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d906      	bls.n	80066e2 <USB_SetTurnaroundTime+0x82>
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	4a2e      	ldr	r2, [pc, #184]	; (8006790 <USB_SetTurnaroundTime+0x130>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d802      	bhi.n	80066e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80066dc:	230b      	movs	r3, #11
 80066de:	617b      	str	r3, [r7, #20]
 80066e0:	e036      	b.n	8006750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	4a2a      	ldr	r2, [pc, #168]	; (8006790 <USB_SetTurnaroundTime+0x130>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d906      	bls.n	80066f8 <USB_SetTurnaroundTime+0x98>
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	4a29      	ldr	r2, [pc, #164]	; (8006794 <USB_SetTurnaroundTime+0x134>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d802      	bhi.n	80066f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80066f2:	230a      	movs	r3, #10
 80066f4:	617b      	str	r3, [r7, #20]
 80066f6:	e02b      	b.n	8006750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	4a26      	ldr	r2, [pc, #152]	; (8006794 <USB_SetTurnaroundTime+0x134>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d906      	bls.n	800670e <USB_SetTurnaroundTime+0xae>
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	4a25      	ldr	r2, [pc, #148]	; (8006798 <USB_SetTurnaroundTime+0x138>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d202      	bcs.n	800670e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006708:	2309      	movs	r3, #9
 800670a:	617b      	str	r3, [r7, #20]
 800670c:	e020      	b.n	8006750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	4a21      	ldr	r2, [pc, #132]	; (8006798 <USB_SetTurnaroundTime+0x138>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d306      	bcc.n	8006724 <USB_SetTurnaroundTime+0xc4>
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	4a20      	ldr	r2, [pc, #128]	; (800679c <USB_SetTurnaroundTime+0x13c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d802      	bhi.n	8006724 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800671e:	2308      	movs	r3, #8
 8006720:	617b      	str	r3, [r7, #20]
 8006722:	e015      	b.n	8006750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	4a1d      	ldr	r2, [pc, #116]	; (800679c <USB_SetTurnaroundTime+0x13c>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d906      	bls.n	800673a <USB_SetTurnaroundTime+0xda>
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	4a1c      	ldr	r2, [pc, #112]	; (80067a0 <USB_SetTurnaroundTime+0x140>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d202      	bcs.n	800673a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006734:	2307      	movs	r3, #7
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	e00a      	b.n	8006750 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800673a:	2306      	movs	r3, #6
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	e007      	b.n	8006750 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006740:	79fb      	ldrb	r3, [r7, #7]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d102      	bne.n	800674c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006746:	2309      	movs	r3, #9
 8006748:	617b      	str	r3, [r7, #20]
 800674a:	e001      	b.n	8006750 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800674c:	2309      	movs	r3, #9
 800674e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	68da      	ldr	r2, [r3, #12]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	029b      	lsls	r3, r3, #10
 8006764:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006768:	431a      	orrs	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	371c      	adds	r7, #28
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	00d8acbf 	.word	0x00d8acbf
 8006780:	00e4e1c0 	.word	0x00e4e1c0
 8006784:	00f42400 	.word	0x00f42400
 8006788:	01067380 	.word	0x01067380
 800678c:	011a499f 	.word	0x011a499f
 8006790:	01312cff 	.word	0x01312cff
 8006794:	014ca43f 	.word	0x014ca43f
 8006798:	016e3600 	.word	0x016e3600
 800679c:	01a6ab1f 	.word	0x01a6ab1f
 80067a0:	01e84800 	.word	0x01e84800

080067a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f043 0201 	orr.w	r2, r3, #1
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f023 0201 	bic.w	r2, r3, #1
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006804:	78fb      	ldrb	r3, [r7, #3]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d115      	bne.n	8006836 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006816:	2001      	movs	r0, #1
 8006818:	f7fb fbcc 	bl	8001fb4 <HAL_Delay>
      ms++;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	3301      	adds	r3, #1
 8006820:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 fa45 	bl	8007cb2 <USB_GetMode>
 8006828:	4603      	mov	r3, r0
 800682a:	2b01      	cmp	r3, #1
 800682c:	d01e      	beq.n	800686c <USB_SetCurrentMode+0x84>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b31      	cmp	r3, #49	; 0x31
 8006832:	d9f0      	bls.n	8006816 <USB_SetCurrentMode+0x2e>
 8006834:	e01a      	b.n	800686c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006836:	78fb      	ldrb	r3, [r7, #3]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d115      	bne.n	8006868 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006848:	2001      	movs	r0, #1
 800684a:	f7fb fbb3 	bl	8001fb4 <HAL_Delay>
      ms++;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3301      	adds	r3, #1
 8006852:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f001 fa2c 	bl	8007cb2 <USB_GetMode>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d005      	beq.n	800686c <USB_SetCurrentMode+0x84>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b31      	cmp	r3, #49	; 0x31
 8006864:	d9f0      	bls.n	8006848 <USB_SetCurrentMode+0x60>
 8006866:	e001      	b.n	800686c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e005      	b.n	8006878 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b32      	cmp	r3, #50	; 0x32
 8006870:	d101      	bne.n	8006876 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e000      	b.n	8006878 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006880:	b084      	sub	sp, #16
 8006882:	b580      	push	{r7, lr}
 8006884:	b086      	sub	sp, #24
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800688e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800689a:	2300      	movs	r3, #0
 800689c:	613b      	str	r3, [r7, #16]
 800689e:	e009      	b.n	80068b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	3340      	adds	r3, #64	; 0x40
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	2200      	movs	r2, #0
 80068ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	3301      	adds	r3, #1
 80068b2:	613b      	str	r3, [r7, #16]
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	2b0e      	cmp	r3, #14
 80068b8:	d9f2      	bls.n	80068a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d11c      	bne.n	80068fa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068ce:	f043 0302 	orr.w	r3, r3, #2
 80068d2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	639a      	str	r2, [r3, #56]	; 0x38
 80068f8:	e00b      	b.n	8006912 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006918:	461a      	mov	r2, r3
 800691a:	2300      	movs	r3, #0
 800691c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006924:	4619      	mov	r1, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692c:	461a      	mov	r2, r3
 800692e:	680b      	ldr	r3, [r1, #0]
 8006930:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006934:	2b01      	cmp	r3, #1
 8006936:	d10c      	bne.n	8006952 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693a:	2b00      	cmp	r3, #0
 800693c:	d104      	bne.n	8006948 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800693e:	2100      	movs	r1, #0
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f965 	bl	8006c10 <USB_SetDevSpeed>
 8006946:	e008      	b.n	800695a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006948:	2101      	movs	r1, #1
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f960 	bl	8006c10 <USB_SetDevSpeed>
 8006950:	e003      	b.n	800695a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006952:	2103      	movs	r1, #3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f95b 	bl	8006c10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800695a:	2110      	movs	r1, #16
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f8f3 	bl	8006b48 <USB_FlushTxFifo>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f91f 	bl	8006bb0 <USB_FlushRxFifo>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006982:	461a      	mov	r2, r3
 8006984:	2300      	movs	r3, #0
 8006986:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698e:	461a      	mov	r2, r3
 8006990:	2300      	movs	r3, #0
 8006992:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800699a:	461a      	mov	r2, r3
 800699c:	2300      	movs	r3, #0
 800699e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069a0:	2300      	movs	r3, #0
 80069a2:	613b      	str	r3, [r7, #16]
 80069a4:	e043      	b.n	8006a2e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069bc:	d118      	bne.n	80069f0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10a      	bne.n	80069da <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d0:	461a      	mov	r2, r3
 80069d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069d6:	6013      	str	r3, [r2, #0]
 80069d8:	e013      	b.n	8006a02 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e6:	461a      	mov	r2, r3
 80069e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	e008      	b.n	8006a02 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fc:	461a      	mov	r2, r3
 80069fe:	2300      	movs	r3, #0
 8006a00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0e:	461a      	mov	r2, r3
 8006a10:	2300      	movs	r3, #0
 8006a12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a20:	461a      	mov	r2, r3
 8006a22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	613b      	str	r3, [r7, #16]
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d3b7      	bcc.n	80069a6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a36:	2300      	movs	r3, #0
 8006a38:	613b      	str	r3, [r7, #16]
 8006a3a:	e043      	b.n	8006ac4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a52:	d118      	bne.n	8006a86 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10a      	bne.n	8006a70 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	015a      	lsls	r2, r3, #5
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a66:	461a      	mov	r2, r3
 8006a68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a6c:	6013      	str	r3, [r2, #0]
 8006a6e:	e013      	b.n	8006a98 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a82:	6013      	str	r3, [r2, #0]
 8006a84:	e008      	b.n	8006a98 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	015a      	lsls	r2, r3, #5
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a92:	461a      	mov	r2, r3
 8006a94:	2300      	movs	r3, #0
 8006a96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006abc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	613b      	str	r3, [r7, #16]
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d3b7      	bcc.n	8006a3c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ade:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006aec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d105      	bne.n	8006b00 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	f043 0210 	orr.w	r2, r3, #16
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	699a      	ldr	r2, [r3, #24]
 8006b04:	4b0f      	ldr	r3, [pc, #60]	; (8006b44 <USB_DevInit+0x2c4>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d005      	beq.n	8006b1e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	f043 0208 	orr.w	r2, r3, #8
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d107      	bne.n	8006b34 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b2c:	f043 0304 	orr.w	r3, r3, #4
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3718      	adds	r7, #24
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b40:	b004      	add	sp, #16
 8006b42:	4770      	bx	lr
 8006b44:	803c3800 	.word	0x803c3800

08006b48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4a13      	ldr	r2, [pc, #76]	; (8006bac <USB_FlushTxFifo+0x64>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d901      	bls.n	8006b68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e01b      	b.n	8006ba0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	daf2      	bge.n	8006b56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	019b      	lsls	r3, r3, #6
 8006b78:	f043 0220 	orr.w	r2, r3, #32
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	3301      	adds	r3, #1
 8006b84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4a08      	ldr	r2, [pc, #32]	; (8006bac <USB_FlushTxFifo+0x64>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d901      	bls.n	8006b92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e006      	b.n	8006ba0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b20      	cmp	r3, #32
 8006b9c:	d0f0      	beq.n	8006b80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3714      	adds	r7, #20
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	00030d40 	.word	0x00030d40

08006bb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	4a11      	ldr	r2, [pc, #68]	; (8006c0c <USB_FlushRxFifo+0x5c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d901      	bls.n	8006bce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e018      	b.n	8006c00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	daf2      	bge.n	8006bbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2210      	movs	r2, #16
 8006bde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3301      	adds	r3, #1
 8006be4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	4a08      	ldr	r2, [pc, #32]	; (8006c0c <USB_FlushRxFifo+0x5c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d901      	bls.n	8006bf2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e006      	b.n	8006c00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f003 0310 	and.w	r3, r3, #16
 8006bfa:	2b10      	cmp	r3, #16
 8006bfc:	d0f0      	beq.n	8006be0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	00030d40 	.word	0x00030d40

08006c10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	78fb      	ldrb	r3, [r7, #3]
 8006c2a:	68f9      	ldr	r1, [r7, #12]
 8006c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c30:	4313      	orrs	r3, r2
 8006c32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b087      	sub	sp, #28
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f003 0306 	and.w	r3, r3, #6
 8006c5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d102      	bne.n	8006c68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006c62:	2300      	movs	r3, #0
 8006c64:	75fb      	strb	r3, [r7, #23]
 8006c66:	e00a      	b.n	8006c7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d002      	beq.n	8006c74 <USB_GetDevSpeed+0x32>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2b06      	cmp	r3, #6
 8006c72:	d102      	bne.n	8006c7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006c74:	2302      	movs	r3, #2
 8006c76:	75fb      	strb	r3, [r7, #23]
 8006c78:	e001      	b.n	8006c7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006c7a:	230f      	movs	r3, #15
 8006c7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	371c      	adds	r7, #28
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	785b      	ldrb	r3, [r3, #1]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d13a      	bne.n	8006d1e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cae:	69da      	ldr	r2, [r3, #28]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	f003 030f 	and.w	r3, r3, #15
 8006cb8:	2101      	movs	r1, #1
 8006cba:	fa01 f303 	lsl.w	r3, r1, r3
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	68f9      	ldr	r1, [r7, #12]
 8006cc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d155      	bne.n	8006d8c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	791b      	ldrb	r3, [r3, #4]
 8006cfa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cfc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	059b      	lsls	r3, r3, #22
 8006d02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d04:	4313      	orrs	r3, r2
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	0151      	lsls	r1, r2, #5
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	440a      	add	r2, r1
 8006d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	e036      	b.n	8006d8c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d24:	69da      	ldr	r2, [r3, #28]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	2101      	movs	r1, #1
 8006d30:	fa01 f303 	lsl.w	r3, r1, r3
 8006d34:	041b      	lsls	r3, r3, #16
 8006d36:	68f9      	ldr	r1, [r7, #12]
 8006d38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d11a      	bne.n	8006d8c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	015a      	lsls	r2, r3, #5
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	791b      	ldrb	r3, [r3, #4]
 8006d70:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d72:	430b      	orrs	r3, r1
 8006d74:	4313      	orrs	r3, r2
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	0151      	lsls	r1, r2, #5
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	440a      	add	r2, r1
 8006d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d8a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
	...

08006d9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	785b      	ldrb	r3, [r3, #1]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d161      	bne.n	8006e7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dce:	d11f      	bne.n	8006e10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	0151      	lsls	r1, r2, #5
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	440a      	add	r2, r1
 8006de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006dee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	0151      	lsls	r1, r2, #5
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	440a      	add	r2, r1
 8006e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	f003 030f 	and.w	r3, r3, #15
 8006e20:	2101      	movs	r1, #1
 8006e22:	fa01 f303 	lsl.w	r3, r1, r3
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	68f9      	ldr	r1, [r7, #12]
 8006e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e30:	4013      	ands	r3, r2
 8006e32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e3a:	69da      	ldr	r2, [r3, #28]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	f003 030f 	and.w	r3, r3, #15
 8006e44:	2101      	movs	r1, #1
 8006e46:	fa01 f303 	lsl.w	r3, r1, r3
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	43db      	mvns	r3, r3
 8006e4e:	68f9      	ldr	r1, [r7, #12]
 8006e50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e54:	4013      	ands	r3, r2
 8006e56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	0159      	lsls	r1, r3, #5
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	440b      	add	r3, r1
 8006e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e72:	4619      	mov	r1, r3
 8006e74:	4b35      	ldr	r3, [pc, #212]	; (8006f4c <USB_DeactivateEndpoint+0x1b0>)
 8006e76:	4013      	ands	r3, r2
 8006e78:	600b      	str	r3, [r1, #0]
 8006e7a:	e060      	b.n	8006f3e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e92:	d11f      	bne.n	8006ed4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	0151      	lsls	r1, r2, #5
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	440a      	add	r2, r1
 8006eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006eb2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	0151      	lsls	r1, r2, #5
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	440a      	add	r2, r1
 8006eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ece:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ed2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	f003 030f 	and.w	r3, r3, #15
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eea:	041b      	lsls	r3, r3, #16
 8006eec:	43db      	mvns	r3, r3
 8006eee:	68f9      	ldr	r1, [r7, #12]
 8006ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efe:	69da      	ldr	r2, [r3, #28]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	f003 030f 	and.w	r3, r3, #15
 8006f08:	2101      	movs	r1, #1
 8006f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f0e:	041b      	lsls	r3, r3, #16
 8006f10:	43db      	mvns	r3, r3
 8006f12:	68f9      	ldr	r1, [r7, #12]
 8006f14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f18:	4013      	ands	r3, r2
 8006f1a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	0159      	lsls	r1, r3, #5
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	440b      	add	r3, r1
 8006f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f36:	4619      	mov	r1, r3
 8006f38:	4b05      	ldr	r3, [pc, #20]	; (8006f50 <USB_DeactivateEndpoint+0x1b4>)
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	ec337800 	.word	0xec337800
 8006f50:	eff37800 	.word	0xeff37800

08006f54 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b08a      	sub	sp, #40	; 0x28
 8006f58:	af02      	add	r7, sp, #8
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	785b      	ldrb	r3, [r3, #1]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	f040 815c 	bne.w	800722e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d132      	bne.n	8006fe4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	0151      	lsls	r1, r2, #5
 8006f90:	69fa      	ldr	r2, [r7, #28]
 8006f92:	440a      	add	r2, r1
 8006f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006fa0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	69ba      	ldr	r2, [r7, #24]
 8006fb2:	0151      	lsls	r1, r2, #5
 8006fb4:	69fa      	ldr	r2, [r7, #28]
 8006fb6:	440a      	add	r2, r1
 8006fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	0151      	lsls	r1, r2, #5
 8006fd4:	69fa      	ldr	r2, [r7, #28]
 8006fd6:	440a      	add	r2, r1
 8006fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fdc:	0cdb      	lsrs	r3, r3, #19
 8006fde:	04db      	lsls	r3, r3, #19
 8006fe0:	6113      	str	r3, [r2, #16]
 8006fe2:	e074      	b.n	80070ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	69ba      	ldr	r2, [r7, #24]
 8006ff4:	0151      	lsls	r1, r2, #5
 8006ff6:	69fa      	ldr	r2, [r7, #28]
 8006ff8:	440a      	add	r2, r1
 8006ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ffe:	0cdb      	lsrs	r3, r3, #19
 8007000:	04db      	lsls	r3, r3, #19
 8007002:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	69ba      	ldr	r2, [r7, #24]
 8007014:	0151      	lsls	r1, r2, #5
 8007016:	69fa      	ldr	r2, [r7, #28]
 8007018:	440a      	add	r2, r1
 800701a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800701e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007022:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007026:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007034:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	6999      	ldr	r1, [r3, #24]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	440b      	add	r3, r1
 8007040:	1e59      	subs	r1, r3, #1
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	fbb1 f3f3 	udiv	r3, r1, r3
 800704a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800704c:	4b9d      	ldr	r3, [pc, #628]	; (80072c4 <USB_EPStartXfer+0x370>)
 800704e:	400b      	ands	r3, r1
 8007050:	69b9      	ldr	r1, [r7, #24]
 8007052:	0148      	lsls	r0, r1, #5
 8007054:	69f9      	ldr	r1, [r7, #28]
 8007056:	4401      	add	r1, r0
 8007058:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800705c:	4313      	orrs	r3, r2
 800705e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	4413      	add	r3, r2
 8007068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800706c:	691a      	ldr	r2, [r3, #16]
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007076:	69b9      	ldr	r1, [r7, #24]
 8007078:	0148      	lsls	r0, r1, #5
 800707a:	69f9      	ldr	r1, [r7, #28]
 800707c:	4401      	add	r1, r0
 800707e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007082:	4313      	orrs	r3, r2
 8007084:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	791b      	ldrb	r3, [r3, #4]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d11f      	bne.n	80070ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	0151      	lsls	r1, r2, #5
 80070a0:	69fa      	ldr	r2, [r7, #28]
 80070a2:	440a      	add	r2, r1
 80070a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80070ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	0151      	lsls	r1, r2, #5
 80070c0:	69fa      	ldr	r2, [r7, #28]
 80070c2:	440a      	add	r2, r1
 80070c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80070ce:	79fb      	ldrb	r3, [r7, #7]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d14b      	bne.n	800716c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	695b      	ldr	r3, [r3, #20]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d009      	beq.n	80070f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e8:	461a      	mov	r2, r3
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	791b      	ldrb	r3, [r3, #4]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d128      	bne.n	800714a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007104:	2b00      	cmp	r3, #0
 8007106:	d110      	bne.n	800712a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	69ba      	ldr	r2, [r7, #24]
 8007118:	0151      	lsls	r1, r2, #5
 800711a:	69fa      	ldr	r2, [r7, #28]
 800711c:	440a      	add	r2, r1
 800711e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007122:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007126:	6013      	str	r3, [r2, #0]
 8007128:	e00f      	b.n	800714a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	4413      	add	r3, r2
 8007132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	69ba      	ldr	r2, [r7, #24]
 800713a:	0151      	lsls	r1, r2, #5
 800713c:	69fa      	ldr	r2, [r7, #28]
 800713e:	440a      	add	r2, r1
 8007140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007148:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	0151      	lsls	r1, r2, #5
 800715c:	69fa      	ldr	r2, [r7, #28]
 800715e:	440a      	add	r2, r1
 8007160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007164:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	e133      	b.n	80073d4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	0151      	lsls	r1, r2, #5
 800717e:	69fa      	ldr	r2, [r7, #28]
 8007180:	440a      	add	r2, r1
 8007182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007186:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800718a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	791b      	ldrb	r3, [r3, #4]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d015      	beq.n	80071c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 811b 	beq.w	80073d4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	f003 030f 	and.w	r3, r3, #15
 80071ae:	2101      	movs	r1, #1
 80071b0:	fa01 f303 	lsl.w	r3, r1, r3
 80071b4:	69f9      	ldr	r1, [r7, #28]
 80071b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071ba:	4313      	orrs	r3, r2
 80071bc:	634b      	str	r3, [r1, #52]	; 0x34
 80071be:	e109      	b.n	80073d4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d110      	bne.n	80071f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	0151      	lsls	r1, r2, #5
 80071e2:	69fa      	ldr	r2, [r7, #28]
 80071e4:	440a      	add	r2, r1
 80071e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071ee:	6013      	str	r3, [r2, #0]
 80071f0:	e00f      	b.n	8007212 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	015a      	lsls	r2, r3, #5
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	4413      	add	r3, r2
 80071fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	0151      	lsls	r1, r2, #5
 8007204:	69fa      	ldr	r2, [r7, #28]
 8007206:	440a      	add	r2, r1
 8007208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800720c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007210:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	6919      	ldr	r1, [r3, #16]
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	781a      	ldrb	r2, [r3, #0]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	b298      	uxth	r0, r3
 8007220:	79fb      	ldrb	r3, [r7, #7]
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	4603      	mov	r3, r0
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f000 fade 	bl	80077e8 <USB_WritePacket>
 800722c:	e0d2      	b.n	80073d4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	4413      	add	r3, r2
 8007236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	0151      	lsls	r1, r2, #5
 8007240:	69fa      	ldr	r2, [r7, #28]
 8007242:	440a      	add	r2, r1
 8007244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007248:	0cdb      	lsrs	r3, r3, #19
 800724a:	04db      	lsls	r3, r3, #19
 800724c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	4413      	add	r3, r2
 8007256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	0151      	lsls	r1, r2, #5
 8007260:	69fa      	ldr	r2, [r7, #28]
 8007262:	440a      	add	r2, r1
 8007264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007268:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800726c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007270:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d126      	bne.n	80072c8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007286:	691a      	ldr	r2, [r3, #16]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007290:	69b9      	ldr	r1, [r7, #24]
 8007292:	0148      	lsls	r0, r1, #5
 8007294:	69f9      	ldr	r1, [r7, #28]
 8007296:	4401      	add	r1, r0
 8007298:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800729c:	4313      	orrs	r3, r2
 800729e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	69ba      	ldr	r2, [r7, #24]
 80072b0:	0151      	lsls	r1, r2, #5
 80072b2:	69fa      	ldr	r2, [r7, #28]
 80072b4:	440a      	add	r2, r1
 80072b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072be:	6113      	str	r3, [r2, #16]
 80072c0:	e03a      	b.n	8007338 <USB_EPStartXfer+0x3e4>
 80072c2:	bf00      	nop
 80072c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	699a      	ldr	r2, [r3, #24]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	4413      	add	r3, r2
 80072d2:	1e5a      	subs	r2, r3, #1
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072dc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	8afa      	ldrh	r2, [r7, #22]
 80072e4:	fb03 f202 	mul.w	r2, r3, r2
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f8:	691a      	ldr	r2, [r3, #16]
 80072fa:	8afb      	ldrh	r3, [r7, #22]
 80072fc:	04d9      	lsls	r1, r3, #19
 80072fe:	4b38      	ldr	r3, [pc, #224]	; (80073e0 <USB_EPStartXfer+0x48c>)
 8007300:	400b      	ands	r3, r1
 8007302:	69b9      	ldr	r1, [r7, #24]
 8007304:	0148      	lsls	r0, r1, #5
 8007306:	69f9      	ldr	r1, [r7, #28]
 8007308:	4401      	add	r1, r0
 800730a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800730e:	4313      	orrs	r3, r2
 8007310:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	4413      	add	r3, r2
 800731a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731e:	691a      	ldr	r2, [r3, #16]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	69db      	ldr	r3, [r3, #28]
 8007324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007328:	69b9      	ldr	r1, [r7, #24]
 800732a:	0148      	lsls	r0, r1, #5
 800732c:	69f9      	ldr	r1, [r7, #28]
 800732e:	4401      	add	r1, r0
 8007330:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007334:	4313      	orrs	r3, r2
 8007336:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007338:	79fb      	ldrb	r3, [r7, #7]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d10d      	bne.n	800735a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d009      	beq.n	800735a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	6919      	ldr	r1, [r3, #16]
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	4413      	add	r3, r2
 8007352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007356:	460a      	mov	r2, r1
 8007358:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	791b      	ldrb	r3, [r3, #4]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d128      	bne.n	80073b4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800736e:	2b00      	cmp	r3, #0
 8007370:	d110      	bne.n	8007394 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	0151      	lsls	r1, r2, #5
 8007384:	69fa      	ldr	r2, [r7, #28]
 8007386:	440a      	add	r2, r1
 8007388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800738c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007390:	6013      	str	r3, [r2, #0]
 8007392:	e00f      	b.n	80073b4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	69ba      	ldr	r2, [r7, #24]
 80073a4:	0151      	lsls	r1, r2, #5
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	440a      	add	r2, r1
 80073aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	0151      	lsls	r1, r2, #5
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	440a      	add	r2, r1
 80073ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3720      	adds	r7, #32
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	1ff80000 	.word	0x1ff80000

080073e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	4613      	mov	r3, r2
 80073f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	785b      	ldrb	r3, [r3, #1]
 8007400:	2b01      	cmp	r3, #1
 8007402:	f040 80ce 	bne.w	80075a2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d132      	bne.n	8007474 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	4413      	add	r3, r2
 8007416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	0151      	lsls	r1, r2, #5
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	440a      	add	r2, r1
 8007424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007428:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800742c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007430:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	015a      	lsls	r2, r3, #5
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	4413      	add	r3, r2
 800743a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	0151      	lsls	r1, r2, #5
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	440a      	add	r2, r1
 8007448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800744c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007450:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	4413      	add	r3, r2
 800745a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	0151      	lsls	r1, r2, #5
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	440a      	add	r2, r1
 8007468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800746c:	0cdb      	lsrs	r3, r3, #19
 800746e:	04db      	lsls	r3, r3, #19
 8007470:	6113      	str	r3, [r2, #16]
 8007472:	e04e      	b.n	8007512 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	0151      	lsls	r1, r2, #5
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	440a      	add	r2, r1
 800748a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800748e:	0cdb      	lsrs	r3, r3, #19
 8007490:	04db      	lsls	r3, r3, #19
 8007492:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	4413      	add	r3, r2
 800749c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	0151      	lsls	r1, r2, #5
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	440a      	add	r2, r1
 80074aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074b6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	699a      	ldr	r2, [r3, #24]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d903      	bls.n	80074cc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	68da      	ldr	r2, [r3, #12]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	0151      	lsls	r1, r2, #5
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	440a      	add	r2, r1
 80074e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f8:	691a      	ldr	r2, [r3, #16]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007502:	6939      	ldr	r1, [r7, #16]
 8007504:	0148      	lsls	r0, r1, #5
 8007506:	6979      	ldr	r1, [r7, #20]
 8007508:	4401      	add	r1, r0
 800750a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800750e:	4313      	orrs	r3, r2
 8007510:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007512:	79fb      	ldrb	r3, [r7, #7]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d11e      	bne.n	8007556 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d009      	beq.n	8007534 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	015a      	lsls	r2, r3, #5
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	4413      	add	r3, r2
 8007528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800752c:	461a      	mov	r2, r3
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	0151      	lsls	r1, r2, #5
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	440a      	add	r2, r1
 800754a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800754e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	e097      	b.n	8007686 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	0151      	lsls	r1, r2, #5
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	440a      	add	r2, r1
 800756c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007570:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007574:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 8083 	beq.w	8007686 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	f003 030f 	and.w	r3, r3, #15
 8007590:	2101      	movs	r1, #1
 8007592:	fa01 f303 	lsl.w	r3, r1, r3
 8007596:	6979      	ldr	r1, [r7, #20]
 8007598:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800759c:	4313      	orrs	r3, r2
 800759e:	634b      	str	r3, [r1, #52]	; 0x34
 80075a0:	e071      	b.n	8007686 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	0151      	lsls	r1, r2, #5
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	440a      	add	r2, r1
 80075b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075bc:	0cdb      	lsrs	r3, r3, #19
 80075be:	04db      	lsls	r3, r3, #19
 80075c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	0151      	lsls	r1, r2, #5
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	440a      	add	r2, r1
 80075d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	68da      	ldr	r2, [r3, #12]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	015a      	lsls	r2, r3, #5
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	4413      	add	r3, r2
 8007606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	0151      	lsls	r1, r2, #5
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	440a      	add	r2, r1
 8007614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007618:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800761c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	015a      	lsls	r2, r3, #5
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	4413      	add	r3, r2
 8007626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762a:	691a      	ldr	r2, [r3, #16]
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	69db      	ldr	r3, [r3, #28]
 8007630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007634:	6939      	ldr	r1, [r7, #16]
 8007636:	0148      	lsls	r0, r1, #5
 8007638:	6979      	ldr	r1, [r7, #20]
 800763a:	4401      	add	r1, r0
 800763c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007640:	4313      	orrs	r3, r2
 8007642:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007644:	79fb      	ldrb	r3, [r7, #7]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d10d      	bne.n	8007666 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d009      	beq.n	8007666 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	6919      	ldr	r1, [r3, #16]
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007662:	460a      	mov	r2, r1
 8007664:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	015a      	lsls	r2, r3, #5
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	4413      	add	r3, r2
 800766e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	0151      	lsls	r1, r2, #5
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	440a      	add	r2, r1
 800767c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007680:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007684:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	371c      	adds	r7, #28
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007694:	b480      	push	{r7}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800769e:	2300      	movs	r3, #0
 80076a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	785b      	ldrb	r3, [r3, #1]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d14a      	bne.n	8007748 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	015a      	lsls	r2, r3, #5
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	4413      	add	r3, r2
 80076bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076ca:	f040 8086 	bne.w	80077da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	7812      	ldrb	r2, [r2, #0]
 80076e2:	0151      	lsls	r1, r2, #5
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	440a      	add	r2, r1
 80076e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	7812      	ldrb	r2, [r2, #0]
 8007706:	0151      	lsls	r1, r2, #5
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	440a      	add	r2, r1
 800770c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007710:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007714:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	3301      	adds	r3, #1
 800771a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007722:	4293      	cmp	r3, r2
 8007724:	d902      	bls.n	800772c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	75fb      	strb	r3, [r7, #23]
          break;
 800772a:	e056      	b.n	80077da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	4413      	add	r3, r2
 8007736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007744:	d0e7      	beq.n	8007716 <USB_EPStopXfer+0x82>
 8007746:	e048      	b.n	80077da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	015a      	lsls	r2, r3, #5
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	4413      	add	r3, r2
 8007752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800775c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007760:	d13b      	bne.n	80077da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	7812      	ldrb	r2, [r2, #0]
 8007776:	0151      	lsls	r1, r2, #5
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	440a      	add	r2, r1
 800777c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007780:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007784:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	015a      	lsls	r2, r3, #5
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	4413      	add	r3, r2
 8007790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	7812      	ldrb	r2, [r2, #0]
 800779a:	0151      	lsls	r1, r2, #5
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	440a      	add	r2, r1
 80077a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	3301      	adds	r3, #1
 80077ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d902      	bls.n	80077c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	75fb      	strb	r3, [r7, #23]
          break;
 80077be:	e00c      	b.n	80077da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	015a      	lsls	r2, r3, #5
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	4413      	add	r3, r2
 80077ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077d8:	d0e7      	beq.n	80077aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80077da:	7dfb      	ldrb	r3, [r7, #23]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	371c      	adds	r7, #28
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b089      	sub	sp, #36	; 0x24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	4611      	mov	r1, r2
 80077f4:	461a      	mov	r2, r3
 80077f6:	460b      	mov	r3, r1
 80077f8:	71fb      	strb	r3, [r7, #7]
 80077fa:	4613      	mov	r3, r2
 80077fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007806:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800780a:	2b00      	cmp	r3, #0
 800780c:	d123      	bne.n	8007856 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800780e:	88bb      	ldrh	r3, [r7, #4]
 8007810:	3303      	adds	r3, #3
 8007812:	089b      	lsrs	r3, r3, #2
 8007814:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007816:	2300      	movs	r3, #0
 8007818:	61bb      	str	r3, [r7, #24]
 800781a:	e018      	b.n	800784e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800781c:	79fb      	ldrb	r3, [r7, #7]
 800781e:	031a      	lsls	r2, r3, #12
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	4413      	add	r3, r2
 8007824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007828:	461a      	mov	r2, r3
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	3301      	adds	r3, #1
 8007834:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	3301      	adds	r3, #1
 800783a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	3301      	adds	r3, #1
 8007840:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	3301      	adds	r3, #1
 8007846:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	3301      	adds	r3, #1
 800784c:	61bb      	str	r3, [r7, #24]
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	429a      	cmp	r2, r3
 8007854:	d3e2      	bcc.n	800781c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3724      	adds	r7, #36	; 0x24
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007864:	b480      	push	{r7}
 8007866:	b08b      	sub	sp, #44	; 0x2c
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	4613      	mov	r3, r2
 8007870:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800787a:	88fb      	ldrh	r3, [r7, #6]
 800787c:	089b      	lsrs	r3, r3, #2
 800787e:	b29b      	uxth	r3, r3
 8007880:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007882:	88fb      	ldrh	r3, [r7, #6]
 8007884:	f003 0303 	and.w	r3, r3, #3
 8007888:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800788a:	2300      	movs	r3, #0
 800788c:	623b      	str	r3, [r7, #32]
 800788e:	e014      	b.n	80078ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	601a      	str	r2, [r3, #0]
    pDest++;
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789e:	3301      	adds	r3, #1
 80078a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	3301      	adds	r3, #1
 80078a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	3301      	adds	r3, #1
 80078ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	3301      	adds	r3, #1
 80078b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80078b4:	6a3b      	ldr	r3, [r7, #32]
 80078b6:	3301      	adds	r3, #1
 80078b8:	623b      	str	r3, [r7, #32]
 80078ba:	6a3a      	ldr	r2, [r7, #32]
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d3e6      	bcc.n	8007890 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80078c2:	8bfb      	ldrh	r3, [r7, #30]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d01e      	beq.n	8007906 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078d2:	461a      	mov	r2, r3
 80078d4:	f107 0310 	add.w	r3, r7, #16
 80078d8:	6812      	ldr	r2, [r2, #0]
 80078da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	00db      	lsls	r3, r3, #3
 80078e4:	fa22 f303 	lsr.w	r3, r2, r3
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	701a      	strb	r2, [r3, #0]
      i++;
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	3301      	adds	r3, #1
 80078f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	3301      	adds	r3, #1
 80078f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80078fa:	8bfb      	ldrh	r3, [r7, #30]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007900:	8bfb      	ldrh	r3, [r7, #30]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1ea      	bne.n	80078dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007908:	4618      	mov	r0, r3
 800790a:	372c      	adds	r7, #44	; 0x2c
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	785b      	ldrb	r3, [r3, #1]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d12c      	bne.n	800798a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4413      	add	r3, r2
 8007938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	db12      	blt.n	8007968 <USB_EPSetStall+0x54>
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00f      	beq.n	8007968 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	015a      	lsls	r2, r3, #5
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	4413      	add	r3, r2
 8007950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	0151      	lsls	r1, r2, #5
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	440a      	add	r2, r1
 800795e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007962:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007966:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	4413      	add	r3, r2
 8007970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	0151      	lsls	r1, r2, #5
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	440a      	add	r2, r1
 800797e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007982:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007986:	6013      	str	r3, [r2, #0]
 8007988:	e02b      	b.n	80079e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	4413      	add	r3, r2
 8007992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	db12      	blt.n	80079c2 <USB_EPSetStall+0xae>
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00f      	beq.n	80079c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	0151      	lsls	r1, r2, #5
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	440a      	add	r2, r1
 80079b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	015a      	lsls	r2, r3, #5
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	4413      	add	r3, r2
 80079ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68ba      	ldr	r2, [r7, #8]
 80079d2:	0151      	lsls	r1, r2, #5
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	440a      	add	r2, r1
 80079d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	785b      	ldrb	r3, [r3, #1]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d128      	bne.n	8007a5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	0151      	lsls	r1, r2, #5
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	440a      	add	r2, r1
 8007a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	791b      	ldrb	r3, [r3, #4]
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d003      	beq.n	8007a3c <USB_EPClearStall+0x4c>
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	791b      	ldrb	r3, [r3, #4]
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d138      	bne.n	8007aae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	015a      	lsls	r2, r3, #5
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	4413      	add	r3, r2
 8007a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	0151      	lsls	r1, r2, #5
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	440a      	add	r2, r1
 8007a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a5a:	6013      	str	r3, [r2, #0]
 8007a5c:	e027      	b.n	8007aae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	015a      	lsls	r2, r3, #5
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	4413      	add	r3, r2
 8007a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	0151      	lsls	r1, r2, #5
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	440a      	add	r2, r1
 8007a74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	791b      	ldrb	r3, [r3, #4]
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d003      	beq.n	8007a8e <USB_EPClearStall+0x9e>
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	791b      	ldrb	r3, [r3, #4]
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d10f      	bne.n	8007aae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	015a      	lsls	r2, r3, #5
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	0151      	lsls	r1, r2, #5
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	440a      	add	r2, r1
 8007aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ada:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007ade:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	78fb      	ldrb	r3, [r7, #3]
 8007aea:	011b      	lsls	r3, r3, #4
 8007aec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007af0:	68f9      	ldr	r1, [r7, #12]
 8007af2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007af6:	4313      	orrs	r3, r2
 8007af8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b22:	f023 0303 	bic.w	r3, r3, #3
 8007b26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b36:	f023 0302 	bic.w	r3, r3, #2
 8007b3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b085      	sub	sp, #20
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b64:	f023 0303 	bic.w	r3, r3, #3
 8007b68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b78:	f043 0302 	orr.w	r3, r3, #2
 8007b7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	695b      	ldr	r3, [r3, #20]
 8007b98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b085      	sub	sp, #20
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bce:	69db      	ldr	r3, [r3, #28]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	0c1b      	lsrs	r3, r3, #16
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007be6:	b480      	push	{r7}
 8007be8:	b085      	sub	sp, #20
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c02:	69db      	ldr	r3, [r3, #28]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	4013      	ands	r3, r2
 8007c08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	b29b      	uxth	r3, r3
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b085      	sub	sp, #20
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	460b      	mov	r3, r1
 8007c24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007c2a:	78fb      	ldrb	r3, [r7, #3]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	4013      	ands	r3, r2
 8007c46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c48:	68bb      	ldr	r3, [r7, #8]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b087      	sub	sp, #28
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	460b      	mov	r3, r1
 8007c60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007c7a:	78fb      	ldrb	r3, [r7, #3]
 8007c7c:	f003 030f 	and.w	r3, r3, #15
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	fa22 f303 	lsr.w	r3, r2, r3
 8007c86:	01db      	lsls	r3, r3, #7
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	693a      	ldr	r2, [r7, #16]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007c90:	78fb      	ldrb	r3, [r7, #3]
 8007c92:	015a      	lsls	r2, r3, #5
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	4413      	add	r3, r2
 8007c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	693a      	ldr	r2, [r7, #16]
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ca4:	68bb      	ldr	r3, [r7, #8]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	371c      	adds	r7, #28
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	f003 0301 	and.w	r3, r3, #1
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b085      	sub	sp, #20
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ce8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007cec:	f023 0307 	bic.w	r3, r3, #7
 8007cf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3714      	adds	r7, #20
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	607a      	str	r2, [r7, #4]
 8007d20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	333c      	adds	r3, #60	; 0x3c
 8007d2a:	3304      	adds	r3, #4
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	4a26      	ldr	r2, [pc, #152]	; (8007dcc <USB_EP0_OutStart+0xb8>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d90a      	bls.n	8007d4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d48:	d101      	bne.n	8007d4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	e037      	b.n	8007dbe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d54:	461a      	mov	r2, r3
 8007d56:	2300      	movs	r3, #0
 8007d58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d7c:	f043 0318 	orr.w	r3, r3, #24
 8007d80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d90:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007d94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007d96:	7afb      	ldrb	r3, [r7, #11]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d10f      	bne.n	8007dbc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da2:	461a      	mov	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007db6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007dba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	371c      	adds	r7, #28
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	4f54300a 	.word	0x4f54300a

08007dd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	3301      	adds	r3, #1
 8007de0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	4a13      	ldr	r2, [pc, #76]	; (8007e34 <USB_CoreReset+0x64>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d901      	bls.n	8007dee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e01b      	b.n	8007e26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	daf2      	bge.n	8007ddc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007df6:	2300      	movs	r3, #0
 8007df8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	f043 0201 	orr.w	r2, r3, #1
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	4a09      	ldr	r2, [pc, #36]	; (8007e34 <USB_CoreReset+0x64>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d901      	bls.n	8007e18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e006      	b.n	8007e26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d0f0      	beq.n	8007e06 <USB_CoreReset+0x36>

  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3714      	adds	r7, #20
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	00030d40 	.word	0x00030d40

08007e38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007e44:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007e48:	f002 fca8 	bl	800a79c <USBD_static_malloc>
 8007e4c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d109      	bne.n	8007e68 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	32b0      	adds	r2, #176	; 0xb0
 8007e5e:	2100      	movs	r1, #0
 8007e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007e64:	2302      	movs	r3, #2
 8007e66:	e0d4      	b.n	8008012 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007e68:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f002 fd02 	bl	800a878 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	32b0      	adds	r2, #176	; 0xb0
 8007e7e:	68f9      	ldr	r1, [r7, #12]
 8007e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	32b0      	adds	r2, #176	; 0xb0
 8007e8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	7c1b      	ldrb	r3, [r3, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d138      	bne.n	8007f12 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007ea0:	4b5e      	ldr	r3, [pc, #376]	; (800801c <USBD_CDC_Init+0x1e4>)
 8007ea2:	7819      	ldrb	r1, [r3, #0]
 8007ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ea8:	2202      	movs	r2, #2
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f002 fb53 	bl	800a556 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007eb0:	4b5a      	ldr	r3, [pc, #360]	; (800801c <USBD_CDC_Init+0x1e4>)
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	f003 020f 	and.w	r2, r3, #15
 8007eb8:	6879      	ldr	r1, [r7, #4]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4413      	add	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	440b      	add	r3, r1
 8007ec4:	3324      	adds	r3, #36	; 0x24
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007eca:	4b55      	ldr	r3, [pc, #340]	; (8008020 <USBD_CDC_Init+0x1e8>)
 8007ecc:	7819      	ldrb	r1, [r3, #0]
 8007ece:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f002 fb3e 	bl	800a556 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007eda:	4b51      	ldr	r3, [pc, #324]	; (8008020 <USBD_CDC_Init+0x1e8>)
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	f003 020f 	and.w	r2, r3, #15
 8007ee2:	6879      	ldr	r1, [r7, #4]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4413      	add	r3, r2
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	440b      	add	r3, r1
 8007eee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007ef6:	4b4b      	ldr	r3, [pc, #300]	; (8008024 <USBD_CDC_Init+0x1ec>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	f003 020f 	and.w	r2, r3, #15
 8007efe:	6879      	ldr	r1, [r7, #4]
 8007f00:	4613      	mov	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	440b      	add	r3, r1
 8007f0a:	3326      	adds	r3, #38	; 0x26
 8007f0c:	2210      	movs	r2, #16
 8007f0e:	801a      	strh	r2, [r3, #0]
 8007f10:	e035      	b.n	8007f7e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f12:	4b42      	ldr	r3, [pc, #264]	; (800801c <USBD_CDC_Init+0x1e4>)
 8007f14:	7819      	ldrb	r1, [r3, #0]
 8007f16:	2340      	movs	r3, #64	; 0x40
 8007f18:	2202      	movs	r2, #2
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f002 fb1b 	bl	800a556 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007f20:	4b3e      	ldr	r3, [pc, #248]	; (800801c <USBD_CDC_Init+0x1e4>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	f003 020f 	and.w	r2, r3, #15
 8007f28:	6879      	ldr	r1, [r7, #4]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	440b      	add	r3, r1
 8007f34:	3324      	adds	r3, #36	; 0x24
 8007f36:	2201      	movs	r2, #1
 8007f38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007f3a:	4b39      	ldr	r3, [pc, #228]	; (8008020 <USBD_CDC_Init+0x1e8>)
 8007f3c:	7819      	ldrb	r1, [r3, #0]
 8007f3e:	2340      	movs	r3, #64	; 0x40
 8007f40:	2202      	movs	r2, #2
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f002 fb07 	bl	800a556 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007f48:	4b35      	ldr	r3, [pc, #212]	; (8008020 <USBD_CDC_Init+0x1e8>)
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	f003 020f 	and.w	r2, r3, #15
 8007f50:	6879      	ldr	r1, [r7, #4]
 8007f52:	4613      	mov	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	440b      	add	r3, r1
 8007f5c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f60:	2201      	movs	r2, #1
 8007f62:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007f64:	4b2f      	ldr	r3, [pc, #188]	; (8008024 <USBD_CDC_Init+0x1ec>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	f003 020f 	and.w	r2, r3, #15
 8007f6c:	6879      	ldr	r1, [r7, #4]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4413      	add	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	440b      	add	r3, r1
 8007f78:	3326      	adds	r3, #38	; 0x26
 8007f7a:	2210      	movs	r2, #16
 8007f7c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f7e:	4b29      	ldr	r3, [pc, #164]	; (8008024 <USBD_CDC_Init+0x1ec>)
 8007f80:	7819      	ldrb	r1, [r3, #0]
 8007f82:	2308      	movs	r3, #8
 8007f84:	2203      	movs	r2, #3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f002 fae5 	bl	800a556 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007f8c:	4b25      	ldr	r3, [pc, #148]	; (8008024 <USBD_CDC_Init+0x1ec>)
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	f003 020f 	and.w	r2, r3, #15
 8007f94:	6879      	ldr	r1, [r7, #4]
 8007f96:	4613      	mov	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4413      	add	r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	440b      	add	r3, r1
 8007fa0:	3324      	adds	r3, #36	; 0x24
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	33b0      	adds	r3, #176	; 0xb0
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007fdc:	2302      	movs	r3, #2
 8007fde:	e018      	b.n	8008012 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	7c1b      	ldrb	r3, [r3, #16]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10a      	bne.n	8007ffe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007fe8:	4b0d      	ldr	r3, [pc, #52]	; (8008020 <USBD_CDC_Init+0x1e8>)
 8007fea:	7819      	ldrb	r1, [r3, #0]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ff2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f002 fb9c 	bl	800a734 <USBD_LL_PrepareReceive>
 8007ffc:	e008      	b.n	8008010 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ffe:	4b08      	ldr	r3, [pc, #32]	; (8008020 <USBD_CDC_Init+0x1e8>)
 8008000:	7819      	ldrb	r1, [r3, #0]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008008:	2340      	movs	r3, #64	; 0x40
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f002 fb92 	bl	800a734 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	20000093 	.word	0x20000093
 8008020:	20000094 	.word	0x20000094
 8008024:	20000095 	.word	0x20000095

08008028 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008034:	4b3a      	ldr	r3, [pc, #232]	; (8008120 <USBD_CDC_DeInit+0xf8>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f002 fab1 	bl	800a5a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008040:	4b37      	ldr	r3, [pc, #220]	; (8008120 <USBD_CDC_DeInit+0xf8>)
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	f003 020f 	and.w	r2, r3, #15
 8008048:	6879      	ldr	r1, [r7, #4]
 800804a:	4613      	mov	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4413      	add	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	440b      	add	r3, r1
 8008054:	3324      	adds	r3, #36	; 0x24
 8008056:	2200      	movs	r2, #0
 8008058:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800805a:	4b32      	ldr	r3, [pc, #200]	; (8008124 <USBD_CDC_DeInit+0xfc>)
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	4619      	mov	r1, r3
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f002 fa9e 	bl	800a5a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008066:	4b2f      	ldr	r3, [pc, #188]	; (8008124 <USBD_CDC_DeInit+0xfc>)
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	f003 020f 	and.w	r2, r3, #15
 800806e:	6879      	ldr	r1, [r7, #4]
 8008070:	4613      	mov	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	440b      	add	r3, r1
 800807a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800807e:	2200      	movs	r2, #0
 8008080:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008082:	4b29      	ldr	r3, [pc, #164]	; (8008128 <USBD_CDC_DeInit+0x100>)
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	4619      	mov	r1, r3
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f002 fa8a 	bl	800a5a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800808e:	4b26      	ldr	r3, [pc, #152]	; (8008128 <USBD_CDC_DeInit+0x100>)
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	f003 020f 	and.w	r2, r3, #15
 8008096:	6879      	ldr	r1, [r7, #4]
 8008098:	4613      	mov	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	4413      	add	r3, r2
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	440b      	add	r3, r1
 80080a2:	3324      	adds	r3, #36	; 0x24
 80080a4:	2200      	movs	r2, #0
 80080a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80080a8:	4b1f      	ldr	r3, [pc, #124]	; (8008128 <USBD_CDC_DeInit+0x100>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	f003 020f 	and.w	r2, r3, #15
 80080b0:	6879      	ldr	r1, [r7, #4]
 80080b2:	4613      	mov	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	440b      	add	r3, r1
 80080bc:	3326      	adds	r3, #38	; 0x26
 80080be:	2200      	movs	r2, #0
 80080c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	32b0      	adds	r2, #176	; 0xb0
 80080cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d01f      	beq.n	8008114 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	33b0      	adds	r3, #176	; 0xb0
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4413      	add	r3, r2
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	32b0      	adds	r2, #176	; 0xb0
 80080f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f002 fb5e 	bl	800a7b8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	32b0      	adds	r2, #176	; 0xb0
 8008106:	2100      	movs	r1, #0
 8008108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	20000093 	.word	0x20000093
 8008124:	20000094 	.word	0x20000094
 8008128:	20000095 	.word	0x20000095

0800812c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	32b0      	adds	r2, #176	; 0xb0
 8008140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008144:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008146:	2300      	movs	r3, #0
 8008148:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800814a:	2300      	movs	r3, #0
 800814c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d101      	bne.n	800815c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008158:	2303      	movs	r3, #3
 800815a:	e0bf      	b.n	80082dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008164:	2b00      	cmp	r3, #0
 8008166:	d050      	beq.n	800820a <USBD_CDC_Setup+0xde>
 8008168:	2b20      	cmp	r3, #32
 800816a:	f040 80af 	bne.w	80082cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	88db      	ldrh	r3, [r3, #6]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d03a      	beq.n	80081ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	b25b      	sxtb	r3, r3
 800817c:	2b00      	cmp	r3, #0
 800817e:	da1b      	bge.n	80081b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	33b0      	adds	r3, #176	; 0xb0
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008196:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	88d2      	ldrh	r2, [r2, #6]
 800819c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	88db      	ldrh	r3, [r3, #6]
 80081a2:	2b07      	cmp	r3, #7
 80081a4:	bf28      	it	cs
 80081a6:	2307      	movcs	r3, #7
 80081a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	89fa      	ldrh	r2, [r7, #14]
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f001 fd89 	bl	8009cc8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80081b6:	e090      	b.n	80082da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	785a      	ldrb	r2, [r3, #1]
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	88db      	ldrh	r3, [r3, #6]
 80081c6:	2b3f      	cmp	r3, #63	; 0x3f
 80081c8:	d803      	bhi.n	80081d2 <USBD_CDC_Setup+0xa6>
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	88db      	ldrh	r3, [r3, #6]
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	e000      	b.n	80081d4 <USBD_CDC_Setup+0xa8>
 80081d2:	2240      	movs	r2, #64	; 0x40
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80081da:	6939      	ldr	r1, [r7, #16]
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80081e2:	461a      	mov	r2, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f001 fd9b 	bl	8009d20 <USBD_CtlPrepareRx>
      break;
 80081ea:	e076      	b.n	80082da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	33b0      	adds	r3, #176	; 0xb0
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	7850      	ldrb	r0, [r2, #1]
 8008202:	2200      	movs	r2, #0
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	4798      	blx	r3
      break;
 8008208:	e067      	b.n	80082da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	785b      	ldrb	r3, [r3, #1]
 800820e:	2b0b      	cmp	r3, #11
 8008210:	d851      	bhi.n	80082b6 <USBD_CDC_Setup+0x18a>
 8008212:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <USBD_CDC_Setup+0xec>)
 8008214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008218:	08008249 	.word	0x08008249
 800821c:	080082c5 	.word	0x080082c5
 8008220:	080082b7 	.word	0x080082b7
 8008224:	080082b7 	.word	0x080082b7
 8008228:	080082b7 	.word	0x080082b7
 800822c:	080082b7 	.word	0x080082b7
 8008230:	080082b7 	.word	0x080082b7
 8008234:	080082b7 	.word	0x080082b7
 8008238:	080082b7 	.word	0x080082b7
 800823c:	080082b7 	.word	0x080082b7
 8008240:	08008273 	.word	0x08008273
 8008244:	0800829d 	.word	0x0800829d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b03      	cmp	r3, #3
 8008252:	d107      	bne.n	8008264 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008254:	f107 030a 	add.w	r3, r7, #10
 8008258:	2202      	movs	r2, #2
 800825a:	4619      	mov	r1, r3
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f001 fd33 	bl	8009cc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008262:	e032      	b.n	80082ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f001 fcbd 	bl	8009be6 <USBD_CtlError>
            ret = USBD_FAIL;
 800826c:	2303      	movs	r3, #3
 800826e:	75fb      	strb	r3, [r7, #23]
          break;
 8008270:	e02b      	b.n	80082ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b03      	cmp	r3, #3
 800827c:	d107      	bne.n	800828e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800827e:	f107 030d 	add.w	r3, r7, #13
 8008282:	2201      	movs	r2, #1
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 fd1e 	bl	8009cc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800828c:	e01d      	b.n	80082ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f001 fca8 	bl	8009be6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008296:	2303      	movs	r3, #3
 8008298:	75fb      	strb	r3, [r7, #23]
          break;
 800829a:	e016      	b.n	80082ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b03      	cmp	r3, #3
 80082a6:	d00f      	beq.n	80082c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f001 fc9b 	bl	8009be6 <USBD_CtlError>
            ret = USBD_FAIL;
 80082b0:	2303      	movs	r3, #3
 80082b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80082b4:	e008      	b.n	80082c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f001 fc94 	bl	8009be6 <USBD_CtlError>
          ret = USBD_FAIL;
 80082be:	2303      	movs	r3, #3
 80082c0:	75fb      	strb	r3, [r7, #23]
          break;
 80082c2:	e002      	b.n	80082ca <USBD_CDC_Setup+0x19e>
          break;
 80082c4:	bf00      	nop
 80082c6:	e008      	b.n	80082da <USBD_CDC_Setup+0x1ae>
          break;
 80082c8:	bf00      	nop
      }
      break;
 80082ca:	e006      	b.n	80082da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f001 fc89 	bl	8009be6 <USBD_CtlError>
      ret = USBD_FAIL;
 80082d4:	2303      	movs	r3, #3
 80082d6:	75fb      	strb	r3, [r7, #23]
      break;
 80082d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80082da:	7dfb      	ldrb	r3, [r7, #23]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80082f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	32b0      	adds	r2, #176	; 0xb0
 8008302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d101      	bne.n	800830e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800830a:	2303      	movs	r3, #3
 800830c:	e065      	b.n	80083da <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	32b0      	adds	r2, #176	; 0xb0
 8008318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800831e:	78fb      	ldrb	r3, [r7, #3]
 8008320:	f003 020f 	and.w	r2, r3, #15
 8008324:	6879      	ldr	r1, [r7, #4]
 8008326:	4613      	mov	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4413      	add	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	440b      	add	r3, r1
 8008330:	3318      	adds	r3, #24
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d02f      	beq.n	8008398 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008338:	78fb      	ldrb	r3, [r7, #3]
 800833a:	f003 020f 	and.w	r2, r3, #15
 800833e:	6879      	ldr	r1, [r7, #4]
 8008340:	4613      	mov	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4413      	add	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	440b      	add	r3, r1
 800834a:	3318      	adds	r3, #24
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	78fb      	ldrb	r3, [r7, #3]
 8008350:	f003 010f 	and.w	r1, r3, #15
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	460b      	mov	r3, r1
 8008358:	00db      	lsls	r3, r3, #3
 800835a:	440b      	add	r3, r1
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4403      	add	r3, r0
 8008360:	3348      	adds	r3, #72	; 0x48
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	fbb2 f1f3 	udiv	r1, r2, r3
 8008368:	fb01 f303 	mul.w	r3, r1, r3
 800836c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800836e:	2b00      	cmp	r3, #0
 8008370:	d112      	bne.n	8008398 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008372:	78fb      	ldrb	r3, [r7, #3]
 8008374:	f003 020f 	and.w	r2, r3, #15
 8008378:	6879      	ldr	r1, [r7, #4]
 800837a:	4613      	mov	r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4413      	add	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	440b      	add	r3, r1
 8008384:	3318      	adds	r3, #24
 8008386:	2200      	movs	r2, #0
 8008388:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800838a:	78f9      	ldrb	r1, [r7, #3]
 800838c:	2300      	movs	r3, #0
 800838e:	2200      	movs	r2, #0
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f002 f9ae 	bl	800a6f2 <USBD_LL_Transmit>
 8008396:	e01f      	b.n	80083d8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2200      	movs	r2, #0
 800839c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	33b0      	adds	r3, #176	; 0xb0
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d010      	beq.n	80083d8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	33b0      	adds	r3, #176	; 0xb0
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80083d4:	78fa      	ldrb	r2, [r7, #3]
 80083d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b084      	sub	sp, #16
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	460b      	mov	r3, r1
 80083ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	32b0      	adds	r2, #176	; 0xb0
 80083f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	32b0      	adds	r2, #176	; 0xb0
 8008408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008410:	2303      	movs	r3, #3
 8008412:	e01a      	b.n	800844a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008414:	78fb      	ldrb	r3, [r7, #3]
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f002 f9ac 	bl	800a776 <USBD_LL_GetRxDataSize>
 800841e:	4602      	mov	r2, r0
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	33b0      	adds	r3, #176	; 0xb0
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4413      	add	r3, r2
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008444:	4611      	mov	r1, r2
 8008446:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b084      	sub	sp, #16
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	32b0      	adds	r2, #176	; 0xb0
 8008464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008468:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008470:	2303      	movs	r3, #3
 8008472:	e025      	b.n	80084c0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	33b0      	adds	r3, #176	; 0xb0
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4413      	add	r3, r2
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d01a      	beq.n	80084be <USBD_CDC_EP0_RxReady+0x6c>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800848e:	2bff      	cmp	r3, #255	; 0xff
 8008490:	d015      	beq.n	80084be <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	33b0      	adds	r3, #176	; 0xb0
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4413      	add	r3, r2
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80084aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80084b2:	b292      	uxth	r2, r2
 80084b4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	22ff      	movs	r2, #255	; 0xff
 80084ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80084d0:	2182      	movs	r1, #130	; 0x82
 80084d2:	4818      	ldr	r0, [pc, #96]	; (8008534 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80084d4:	f000 fd4f 	bl	8008f76 <USBD_GetEpDesc>
 80084d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80084da:	2101      	movs	r1, #1
 80084dc:	4815      	ldr	r0, [pc, #84]	; (8008534 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80084de:	f000 fd4a 	bl	8008f76 <USBD_GetEpDesc>
 80084e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80084e4:	2181      	movs	r1, #129	; 0x81
 80084e6:	4813      	ldr	r0, [pc, #76]	; (8008534 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80084e8:	f000 fd45 	bl	8008f76 <USBD_GetEpDesc>
 80084ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d002      	beq.n	80084fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	2210      	movs	r2, #16
 80084f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d006      	beq.n	800850e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	2200      	movs	r2, #0
 8008504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008508:	711a      	strb	r2, [r3, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d006      	beq.n	8008522 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800851c:	711a      	strb	r2, [r3, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2243      	movs	r2, #67	; 0x43
 8008526:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008528:	4b02      	ldr	r3, [pc, #8]	; (8008534 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800852a:	4618      	mov	r0, r3
 800852c:	3718      	adds	r7, #24
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	20000050 	.word	0x20000050

08008538 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008540:	2182      	movs	r1, #130	; 0x82
 8008542:	4818      	ldr	r0, [pc, #96]	; (80085a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008544:	f000 fd17 	bl	8008f76 <USBD_GetEpDesc>
 8008548:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800854a:	2101      	movs	r1, #1
 800854c:	4815      	ldr	r0, [pc, #84]	; (80085a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800854e:	f000 fd12 	bl	8008f76 <USBD_GetEpDesc>
 8008552:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008554:	2181      	movs	r1, #129	; 0x81
 8008556:	4813      	ldr	r0, [pc, #76]	; (80085a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008558:	f000 fd0d 	bl	8008f76 <USBD_GetEpDesc>
 800855c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	2210      	movs	r2, #16
 8008568:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d006      	beq.n	800857e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	2200      	movs	r2, #0
 8008574:	711a      	strb	r2, [r3, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f042 0202 	orr.w	r2, r2, #2
 800857c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d006      	beq.n	8008592 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	711a      	strb	r2, [r3, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	f042 0202 	orr.w	r2, r2, #2
 8008590:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2243      	movs	r2, #67	; 0x43
 8008596:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008598:	4b02      	ldr	r3, [pc, #8]	; (80085a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800859a:	4618      	mov	r0, r3
 800859c:	3718      	adds	r7, #24
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	20000050 	.word	0x20000050

080085a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80085b0:	2182      	movs	r1, #130	; 0x82
 80085b2:	4818      	ldr	r0, [pc, #96]	; (8008614 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80085b4:	f000 fcdf 	bl	8008f76 <USBD_GetEpDesc>
 80085b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80085ba:	2101      	movs	r1, #1
 80085bc:	4815      	ldr	r0, [pc, #84]	; (8008614 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80085be:	f000 fcda 	bl	8008f76 <USBD_GetEpDesc>
 80085c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80085c4:	2181      	movs	r1, #129	; 0x81
 80085c6:	4813      	ldr	r0, [pc, #76]	; (8008614 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80085c8:	f000 fcd5 	bl	8008f76 <USBD_GetEpDesc>
 80085cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d002      	beq.n	80085da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2210      	movs	r2, #16
 80085d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d006      	beq.n	80085ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085e8:	711a      	strb	r2, [r3, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d006      	beq.n	8008602 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085fc:	711a      	strb	r2, [r3, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2243      	movs	r2, #67	; 0x43
 8008606:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008608:	4b02      	ldr	r3, [pc, #8]	; (8008614 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800860a:	4618      	mov	r0, r3
 800860c:	3718      	adds	r7, #24
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	20000050 	.word	0x20000050

08008618 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	220a      	movs	r2, #10
 8008624:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008626:	4b03      	ldr	r3, [pc, #12]	; (8008634 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008628:	4618      	mov	r0, r3
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr
 8008634:	2000000c 	.word	0x2000000c

08008638 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d101      	bne.n	800864c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008648:	2303      	movs	r3, #3
 800864a:	e009      	b.n	8008660 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	33b0      	adds	r3, #176	; 0xb0
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4413      	add	r3, r2
 800865a:	683a      	ldr	r2, [r7, #0]
 800865c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800866c:	b480      	push	{r7}
 800866e:	b087      	sub	sp, #28
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	32b0      	adds	r2, #176	; 0xb0
 8008682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008686:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d101      	bne.n	8008692 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800868e:	2303      	movs	r3, #3
 8008690:	e008      	b.n	80086a4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	371c      	adds	r7, #28
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	32b0      	adds	r2, #176	; 0xb0
 80086c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e004      	b.n	80086de <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	683a      	ldr	r2, [r7, #0]
 80086d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3714      	adds	r7, #20
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
	...

080086ec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	32b0      	adds	r2, #176	; 0xb0
 80086fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008702:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008704:	2301      	movs	r3, #1
 8008706:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	32b0      	adds	r2, #176	; 0xb0
 8008712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d101      	bne.n	800871e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800871a:	2303      	movs	r3, #3
 800871c:	e025      	b.n	800876a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008724:	2b00      	cmp	r3, #0
 8008726:	d11f      	bne.n	8008768 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2201      	movs	r2, #1
 800872c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008730:	4b10      	ldr	r3, [pc, #64]	; (8008774 <USBD_CDC_TransmitPacket+0x88>)
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	f003 020f 	and.w	r2, r3, #15
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	4613      	mov	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4403      	add	r3, r0
 800874a:	3318      	adds	r3, #24
 800874c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800874e:	4b09      	ldr	r3, [pc, #36]	; (8008774 <USBD_CDC_TransmitPacket+0x88>)
 8008750:	7819      	ldrb	r1, [r3, #0]
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f001 ffc7 	bl	800a6f2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008768:	7bfb      	ldrb	r3, [r7, #15]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	20000093 	.word	0x20000093

08008778 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	32b0      	adds	r2, #176	; 0xb0
 800878a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800878e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	32b0      	adds	r2, #176	; 0xb0
 800879a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80087a2:	2303      	movs	r3, #3
 80087a4:	e018      	b.n	80087d8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	7c1b      	ldrb	r3, [r3, #16]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10a      	bne.n	80087c4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087ae:	4b0c      	ldr	r3, [pc, #48]	; (80087e0 <USBD_CDC_ReceivePacket+0x68>)
 80087b0:	7819      	ldrb	r1, [r3, #0]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f001 ffb9 	bl	800a734 <USBD_LL_PrepareReceive>
 80087c2:	e008      	b.n	80087d6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087c4:	4b06      	ldr	r3, [pc, #24]	; (80087e0 <USBD_CDC_ReceivePacket+0x68>)
 80087c6:	7819      	ldrb	r1, [r3, #0]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087ce:	2340      	movs	r3, #64	; 0x40
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f001 ffaf 	bl	800a734 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	20000094 	.word	0x20000094

080087e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	4613      	mov	r3, r2
 80087f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d101      	bne.n	80087fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80087f8:	2303      	movs	r3, #3
 80087fa:	e01f      	b.n	800883c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2200      	movs	r2, #0
 8008800:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d003      	beq.n	8008822 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2201      	movs	r2, #1
 8008826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	79fa      	ldrb	r2, [r7, #7]
 800882e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f001 fe29 	bl	800a488 <USBD_LL_Init>
 8008836:	4603      	mov	r3, r0
 8008838:	75fb      	strb	r3, [r7, #23]

  return ret;
 800883a:	7dfb      	ldrb	r3, [r7, #23]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3718      	adds	r7, #24
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800884e:	2300      	movs	r3, #0
 8008850:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d101      	bne.n	800885c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008858:	2303      	movs	r3, #3
 800885a:	e025      	b.n	80088a8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	32ae      	adds	r2, #174	; 0xae
 800886e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00f      	beq.n	8008898 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	32ae      	adds	r2, #174	; 0xae
 8008882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008888:	f107 020e 	add.w	r2, r7, #14
 800888c:	4610      	mov	r0, r2
 800888e:	4798      	blx	r3
 8008890:	4602      	mov	r2, r0
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f001 fe31 	bl	800a520 <USBD_LL_Start>
 80088be:	4603      	mov	r3, r0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088d0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b084      	sub	sp, #16
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
 80088e6:	460b      	mov	r3, r1
 80088e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d009      	beq.n	800890c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	78fa      	ldrb	r2, [r7, #3]
 8008902:	4611      	mov	r1, r2
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	4798      	blx	r3
 8008908:	4603      	mov	r3, r0
 800890a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800890c:	7bfb      	ldrb	r3, [r7, #15]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b084      	sub	sp, #16
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	460b      	mov	r3, r1
 8008920:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	78fa      	ldrb	r2, [r7, #3]
 8008930:	4611      	mov	r1, r2
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	4798      	blx	r3
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800893c:	2303      	movs	r3, #3
 800893e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008940:	7bfb      	ldrb	r3, [r7, #15]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	4618      	mov	r0, r3
 800895e:	f001 f908 	bl	8009b72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2201      	movs	r2, #1
 8008966:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008970:	461a      	mov	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800897e:	f003 031f 	and.w	r3, r3, #31
 8008982:	2b02      	cmp	r3, #2
 8008984:	d01a      	beq.n	80089bc <USBD_LL_SetupStage+0x72>
 8008986:	2b02      	cmp	r3, #2
 8008988:	d822      	bhi.n	80089d0 <USBD_LL_SetupStage+0x86>
 800898a:	2b00      	cmp	r3, #0
 800898c:	d002      	beq.n	8008994 <USBD_LL_SetupStage+0x4a>
 800898e:	2b01      	cmp	r3, #1
 8008990:	d00a      	beq.n	80089a8 <USBD_LL_SetupStage+0x5e>
 8008992:	e01d      	b.n	80089d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800899a:	4619      	mov	r1, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fb5f 	bl	8009060 <USBD_StdDevReq>
 80089a2:	4603      	mov	r3, r0
 80089a4:	73fb      	strb	r3, [r7, #15]
      break;
 80089a6:	e020      	b.n	80089ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fbc7 	bl	8009144 <USBD_StdItfReq>
 80089b6:	4603      	mov	r3, r0
 80089b8:	73fb      	strb	r3, [r7, #15]
      break;
 80089ba:	e016      	b.n	80089ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 fc29 	bl	800921c <USBD_StdEPReq>
 80089ca:	4603      	mov	r3, r0
 80089cc:	73fb      	strb	r3, [r7, #15]
      break;
 80089ce:	e00c      	b.n	80089ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80089d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	4619      	mov	r1, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f001 fdfe 	bl	800a5e0 <USBD_LL_StallEP>
 80089e4:	4603      	mov	r3, r0
 80089e6:	73fb      	strb	r3, [r7, #15]
      break;
 80089e8:	bf00      	nop
  }

  return ret;
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	460b      	mov	r3, r1
 80089fe:	607a      	str	r2, [r7, #4]
 8008a00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008a06:	7afb      	ldrb	r3, [r7, #11]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d16e      	bne.n	8008aea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008a12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	f040 8098 	bne.w	8008b50 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	689a      	ldr	r2, [r3, #8]
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d913      	bls.n	8008a54 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	689a      	ldr	r2, [r3, #8]
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	1ad2      	subs	r2, r2, r3
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	68da      	ldr	r2, [r3, #12]
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	4293      	cmp	r3, r2
 8008a44:	bf28      	it	cs
 8008a46:	4613      	movcs	r3, r2
 8008a48:	461a      	mov	r2, r3
 8008a4a:	6879      	ldr	r1, [r7, #4]
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f001 f984 	bl	8009d5a <USBD_CtlContinueRx>
 8008a52:	e07d      	b.n	8008b50 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a5a:	f003 031f 	and.w	r3, r3, #31
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d014      	beq.n	8008a8c <USBD_LL_DataOutStage+0x98>
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d81d      	bhi.n	8008aa2 <USBD_LL_DataOutStage+0xae>
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d002      	beq.n	8008a70 <USBD_LL_DataOutStage+0x7c>
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d003      	beq.n	8008a76 <USBD_LL_DataOutStage+0x82>
 8008a6e:	e018      	b.n	8008aa2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008a70:	2300      	movs	r3, #0
 8008a72:	75bb      	strb	r3, [r7, #22]
            break;
 8008a74:	e018      	b.n	8008aa8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	4619      	mov	r1, r3
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f000 fa5e 	bl	8008f42 <USBD_CoreFindIF>
 8008a86:	4603      	mov	r3, r0
 8008a88:	75bb      	strb	r3, [r7, #22]
            break;
 8008a8a:	e00d      	b.n	8008aa8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	4619      	mov	r1, r3
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f000 fa60 	bl	8008f5c <USBD_CoreFindEP>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	75bb      	strb	r3, [r7, #22]
            break;
 8008aa0:	e002      	b.n	8008aa8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	75bb      	strb	r3, [r7, #22]
            break;
 8008aa6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008aa8:	7dbb      	ldrb	r3, [r7, #22]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d119      	bne.n	8008ae2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	2b03      	cmp	r3, #3
 8008ab8:	d113      	bne.n	8008ae2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008aba:	7dba      	ldrb	r2, [r7, #22]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	32ae      	adds	r2, #174	; 0xae
 8008ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00b      	beq.n	8008ae2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008aca:	7dba      	ldrb	r2, [r7, #22]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008ad2:	7dba      	ldrb	r2, [r7, #22]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	32ae      	adds	r2, #174	; 0xae
 8008ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f001 f94a 	bl	8009d7c <USBD_CtlSendStatus>
 8008ae8:	e032      	b.n	8008b50 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008aea:	7afb      	ldrb	r3, [r7, #11]
 8008aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	4619      	mov	r1, r3
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f000 fa31 	bl	8008f5c <USBD_CoreFindEP>
 8008afa:	4603      	mov	r3, r0
 8008afc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008afe:	7dbb      	ldrb	r3, [r7, #22]
 8008b00:	2bff      	cmp	r3, #255	; 0xff
 8008b02:	d025      	beq.n	8008b50 <USBD_LL_DataOutStage+0x15c>
 8008b04:	7dbb      	ldrb	r3, [r7, #22]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d122      	bne.n	8008b50 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b03      	cmp	r3, #3
 8008b14:	d117      	bne.n	8008b46 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008b16:	7dba      	ldrb	r2, [r7, #22]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	32ae      	adds	r2, #174	; 0xae
 8008b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00f      	beq.n	8008b46 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008b26:	7dba      	ldrb	r2, [r7, #22]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008b2e:	7dba      	ldrb	r2, [r7, #22]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	32ae      	adds	r2, #174	; 0xae
 8008b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	7afa      	ldrb	r2, [r7, #11]
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	4798      	blx	r3
 8008b42:	4603      	mov	r3, r0
 8008b44:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d001      	beq.n	8008b50 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008b4c:	7dfb      	ldrb	r3, [r7, #23]
 8008b4e:	e000      	b.n	8008b52 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3718      	adds	r7, #24
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b086      	sub	sp, #24
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	60f8      	str	r0, [r7, #12]
 8008b62:	460b      	mov	r3, r1
 8008b64:	607a      	str	r2, [r7, #4]
 8008b66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008b68:	7afb      	ldrb	r3, [r7, #11]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d16f      	bne.n	8008c4e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	3314      	adds	r3, #20
 8008b72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d15a      	bne.n	8008c34 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	689a      	ldr	r2, [r3, #8]
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d914      	bls.n	8008bb4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	689a      	ldr	r2, [r3, #8]
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	1ad2      	subs	r2, r2, r3
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	6879      	ldr	r1, [r7, #4]
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f001 f8ac 	bl	8009cfe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	2200      	movs	r2, #0
 8008baa:	2100      	movs	r1, #0
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f001 fdc1 	bl	800a734 <USBD_LL_PrepareReceive>
 8008bb2:	e03f      	b.n	8008c34 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	68da      	ldr	r2, [r3, #12]
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d11c      	bne.n	8008bfa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d316      	bcc.n	8008bfa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d20f      	bcs.n	8008bfa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008bda:	2200      	movs	r2, #0
 8008bdc:	2100      	movs	r1, #0
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f001 f88d 	bl	8009cfe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bec:	2300      	movs	r3, #0
 8008bee:	2200      	movs	r2, #0
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f001 fd9e 	bl	800a734 <USBD_LL_PrepareReceive>
 8008bf8:	e01c      	b.n	8008c34 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d10f      	bne.n	8008c26 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d009      	beq.n	8008c26 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c26:	2180      	movs	r1, #128	; 0x80
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f001 fcd9 	bl	800a5e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f001 f8b7 	bl	8009da2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d03a      	beq.n	8008cb4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f7ff fe42 	bl	80088c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008c4c:	e032      	b.n	8008cb4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008c4e:	7afb      	ldrb	r3, [r7, #11]
 8008c50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	4619      	mov	r1, r3
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f000 f97f 	bl	8008f5c <USBD_CoreFindEP>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c62:	7dfb      	ldrb	r3, [r7, #23]
 8008c64:	2bff      	cmp	r3, #255	; 0xff
 8008c66:	d025      	beq.n	8008cb4 <USBD_LL_DataInStage+0x15a>
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d122      	bne.n	8008cb4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	d11c      	bne.n	8008cb4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008c7a:	7dfa      	ldrb	r2, [r7, #23]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	32ae      	adds	r2, #174	; 0xae
 8008c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d014      	beq.n	8008cb4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008c8a:	7dfa      	ldrb	r2, [r7, #23]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008c92:	7dfa      	ldrb	r2, [r7, #23]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	32ae      	adds	r2, #174	; 0xae
 8008c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	7afa      	ldrb	r2, [r7, #11]
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	4798      	blx	r3
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008caa:	7dbb      	ldrb	r3, [r7, #22]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d001      	beq.n	8008cb4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008cb0:	7dbb      	ldrb	r3, [r7, #22]
 8008cb2:	e000      	b.n	8008cb6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3718      	adds	r7, #24
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b084      	sub	sp, #16
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d014      	beq.n	8008d24 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00e      	beq.n	8008d24 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6852      	ldr	r2, [r2, #4]
 8008d12:	b2d2      	uxtb	r2, r2
 8008d14:	4611      	mov	r1, r2
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	4798      	blx	r3
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d001      	beq.n	8008d24 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008d20:	2303      	movs	r3, #3
 8008d22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d24:	2340      	movs	r3, #64	; 0x40
 8008d26:	2200      	movs	r2, #0
 8008d28:	2100      	movs	r1, #0
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f001 fc13 	bl	800a556 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2240      	movs	r2, #64	; 0x40
 8008d3c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d40:	2340      	movs	r3, #64	; 0x40
 8008d42:	2200      	movs	r2, #0
 8008d44:	2180      	movs	r1, #128	; 0x80
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f001 fc05 	bl	800a556 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2240      	movs	r2, #64	; 0x40
 8008d56:	621a      	str	r2, [r3, #32]

  return ret;
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b083      	sub	sp, #12
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	78fa      	ldrb	r2, [r7, #3]
 8008d72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	370c      	adds	r7, #12
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr

08008d82 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008d82:	b480      	push	{r7}
 8008d84:	b083      	sub	sp, #12
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d90:	b2da      	uxtb	r2, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2204      	movs	r2, #4
 8008d9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	370c      	adds	r7, #12
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b083      	sub	sp, #12
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	2b04      	cmp	r3, #4
 8008dc0:	d106      	bne.n	8008dd0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b082      	sub	sp, #8
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d110      	bne.n	8008e14 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00b      	beq.n	8008e14 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e02:	69db      	ldr	r3, [r3, #28]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d005      	beq.n	8008e14 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e0e:	69db      	ldr	r3, [r3, #28]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b082      	sub	sp, #8
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	460b      	mov	r3, r1
 8008e28:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	32ae      	adds	r2, #174	; 0xae
 8008e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d101      	bne.n	8008e40 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e01c      	b.n	8008e7a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	2b03      	cmp	r3, #3
 8008e4a:	d115      	bne.n	8008e78 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	32ae      	adds	r2, #174	; 0xae
 8008e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e5a:	6a1b      	ldr	r3, [r3, #32]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00b      	beq.n	8008e78 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	32ae      	adds	r2, #174	; 0xae
 8008e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e6e:	6a1b      	ldr	r3, [r3, #32]
 8008e70:	78fa      	ldrb	r2, [r7, #3]
 8008e72:	4611      	mov	r1, r2
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b082      	sub	sp, #8
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	32ae      	adds	r2, #174	; 0xae
 8008e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d101      	bne.n	8008ea4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	e01c      	b.n	8008ede <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	d115      	bne.n	8008edc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	32ae      	adds	r2, #174	; 0xae
 8008eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00b      	beq.n	8008edc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	32ae      	adds	r2, #174	; 0xae
 8008ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	78fa      	ldrb	r2, [r7, #3]
 8008ed6:	4611      	mov	r1, r2
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b083      	sub	sp, #12
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00e      	beq.n	8008f38 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	6852      	ldr	r2, [r2, #4]
 8008f26:	b2d2      	uxtb	r2, r2
 8008f28:	4611      	mov	r1, r2
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	4798      	blx	r3
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d001      	beq.n	8008f38 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008f34:	2303      	movs	r3, #3
 8008f36:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b083      	sub	sp, #12
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008f4e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	460b      	mov	r3, r1
 8008f66:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008f68:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	370c      	adds	r7, #12
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr

08008f76 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b086      	sub	sp, #24
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	460b      	mov	r3, r1
 8008f80:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	885b      	ldrh	r3, [r3, #2]
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d920      	bls.n	8008fe0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008fa6:	e013      	b.n	8008fd0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008fa8:	f107 030a 	add.w	r3, r7, #10
 8008fac:	4619      	mov	r1, r3
 8008fae:	6978      	ldr	r0, [r7, #20]
 8008fb0:	f000 f81b 	bl	8008fea <USBD_GetNextDesc>
 8008fb4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	785b      	ldrb	r3, [r3, #1]
 8008fba:	2b05      	cmp	r3, #5
 8008fbc:	d108      	bne.n	8008fd0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	789b      	ldrb	r3, [r3, #2]
 8008fc6:	78fa      	ldrb	r2, [r7, #3]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d008      	beq.n	8008fde <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	885b      	ldrh	r3, [r3, #2]
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	897b      	ldrh	r3, [r7, #10]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d8e5      	bhi.n	8008fa8 <USBD_GetEpDesc+0x32>
 8008fdc:	e000      	b.n	8008fe0 <USBD_GetEpDesc+0x6a>
          break;
 8008fde:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008fe0:	693b      	ldr	r3, [r7, #16]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3718      	adds	r7, #24
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b085      	sub	sp, #20
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
 8008ff2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	881a      	ldrh	r2, [r3, #0]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	b29b      	uxth	r3, r3
 8009002:	4413      	add	r3, r2
 8009004:	b29a      	uxth	r2, r3
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	461a      	mov	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4413      	add	r3, r2
 8009014:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009016:	68fb      	ldr	r3, [r7, #12]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3714      	adds	r7, #20
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009024:	b480      	push	{r7}
 8009026:	b087      	sub	sp, #28
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	3301      	adds	r3, #1
 800903a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009042:	8a3b      	ldrh	r3, [r7, #16]
 8009044:	021b      	lsls	r3, r3, #8
 8009046:	b21a      	sxth	r2, r3
 8009048:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800904c:	4313      	orrs	r3, r2
 800904e:	b21b      	sxth	r3, r3
 8009050:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009052:	89fb      	ldrh	r3, [r7, #14]
}
 8009054:	4618      	mov	r0, r3
 8009056:	371c      	adds	r7, #28
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009076:	2b40      	cmp	r3, #64	; 0x40
 8009078:	d005      	beq.n	8009086 <USBD_StdDevReq+0x26>
 800907a:	2b40      	cmp	r3, #64	; 0x40
 800907c:	d857      	bhi.n	800912e <USBD_StdDevReq+0xce>
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00f      	beq.n	80090a2 <USBD_StdDevReq+0x42>
 8009082:	2b20      	cmp	r3, #32
 8009084:	d153      	bne.n	800912e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	32ae      	adds	r2, #174	; 0xae
 8009090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	4798      	blx	r3
 800909c:	4603      	mov	r3, r0
 800909e:	73fb      	strb	r3, [r7, #15]
      break;
 80090a0:	e04a      	b.n	8009138 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	785b      	ldrb	r3, [r3, #1]
 80090a6:	2b09      	cmp	r3, #9
 80090a8:	d83b      	bhi.n	8009122 <USBD_StdDevReq+0xc2>
 80090aa:	a201      	add	r2, pc, #4	; (adr r2, 80090b0 <USBD_StdDevReq+0x50>)
 80090ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b0:	08009105 	.word	0x08009105
 80090b4:	08009119 	.word	0x08009119
 80090b8:	08009123 	.word	0x08009123
 80090bc:	0800910f 	.word	0x0800910f
 80090c0:	08009123 	.word	0x08009123
 80090c4:	080090e3 	.word	0x080090e3
 80090c8:	080090d9 	.word	0x080090d9
 80090cc:	08009123 	.word	0x08009123
 80090d0:	080090fb 	.word	0x080090fb
 80090d4:	080090ed 	.word	0x080090ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80090d8:	6839      	ldr	r1, [r7, #0]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fa3c 	bl	8009558 <USBD_GetDescriptor>
          break;
 80090e0:	e024      	b.n	800912c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80090e2:	6839      	ldr	r1, [r7, #0]
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fba1 	bl	800982c <USBD_SetAddress>
          break;
 80090ea:	e01f      	b.n	800912c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fbe0 	bl	80098b4 <USBD_SetConfig>
 80090f4:	4603      	mov	r3, r0
 80090f6:	73fb      	strb	r3, [r7, #15]
          break;
 80090f8:	e018      	b.n	800912c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80090fa:	6839      	ldr	r1, [r7, #0]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fc83 	bl	8009a08 <USBD_GetConfig>
          break;
 8009102:	e013      	b.n	800912c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fcb4 	bl	8009a74 <USBD_GetStatus>
          break;
 800910c:	e00e      	b.n	800912c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800910e:	6839      	ldr	r1, [r7, #0]
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fce3 	bl	8009adc <USBD_SetFeature>
          break;
 8009116:	e009      	b.n	800912c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009118:	6839      	ldr	r1, [r7, #0]
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 fd07 	bl	8009b2e <USBD_ClrFeature>
          break;
 8009120:	e004      	b.n	800912c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fd5e 	bl	8009be6 <USBD_CtlError>
          break;
 800912a:	bf00      	nop
      }
      break;
 800912c:	e004      	b.n	8009138 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800912e:	6839      	ldr	r1, [r7, #0]
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 fd58 	bl	8009be6 <USBD_CtlError>
      break;
 8009136:	bf00      	nop
  }

  return ret;
 8009138:	7bfb      	ldrb	r3, [r7, #15]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop

08009144 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800914e:	2300      	movs	r3, #0
 8009150:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800915a:	2b40      	cmp	r3, #64	; 0x40
 800915c:	d005      	beq.n	800916a <USBD_StdItfReq+0x26>
 800915e:	2b40      	cmp	r3, #64	; 0x40
 8009160:	d852      	bhi.n	8009208 <USBD_StdItfReq+0xc4>
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <USBD_StdItfReq+0x26>
 8009166:	2b20      	cmp	r3, #32
 8009168:	d14e      	bne.n	8009208 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009170:	b2db      	uxtb	r3, r3
 8009172:	3b01      	subs	r3, #1
 8009174:	2b02      	cmp	r3, #2
 8009176:	d840      	bhi.n	80091fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	889b      	ldrh	r3, [r3, #4]
 800917c:	b2db      	uxtb	r3, r3
 800917e:	2b01      	cmp	r3, #1
 8009180:	d836      	bhi.n	80091f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	889b      	ldrh	r3, [r3, #4]
 8009186:	b2db      	uxtb	r3, r3
 8009188:	4619      	mov	r1, r3
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7ff fed9 	bl	8008f42 <USBD_CoreFindIF>
 8009190:	4603      	mov	r3, r0
 8009192:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009194:	7bbb      	ldrb	r3, [r7, #14]
 8009196:	2bff      	cmp	r3, #255	; 0xff
 8009198:	d01d      	beq.n	80091d6 <USBD_StdItfReq+0x92>
 800919a:	7bbb      	ldrb	r3, [r7, #14]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d11a      	bne.n	80091d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80091a0:	7bba      	ldrb	r2, [r7, #14]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	32ae      	adds	r2, #174	; 0xae
 80091a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00f      	beq.n	80091d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80091b0:	7bba      	ldrb	r2, [r7, #14]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80091b8:	7bba      	ldrb	r2, [r7, #14]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	32ae      	adds	r2, #174	; 0xae
 80091be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	6839      	ldr	r1, [r7, #0]
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	4798      	blx	r3
 80091ca:	4603      	mov	r3, r0
 80091cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80091ce:	e004      	b.n	80091da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80091d0:	2303      	movs	r3, #3
 80091d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80091d4:	e001      	b.n	80091da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80091d6:	2303      	movs	r3, #3
 80091d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	88db      	ldrh	r3, [r3, #6]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d110      	bne.n	8009204 <USBD_StdItfReq+0xc0>
 80091e2:	7bfb      	ldrb	r3, [r7, #15]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10d      	bne.n	8009204 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 fdc7 	bl	8009d7c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80091ee:	e009      	b.n	8009204 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80091f0:	6839      	ldr	r1, [r7, #0]
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fcf7 	bl	8009be6 <USBD_CtlError>
          break;
 80091f8:	e004      	b.n	8009204 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 fcf2 	bl	8009be6 <USBD_CtlError>
          break;
 8009202:	e000      	b.n	8009206 <USBD_StdItfReq+0xc2>
          break;
 8009204:	bf00      	nop
      }
      break;
 8009206:	e004      	b.n	8009212 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009208:	6839      	ldr	r1, [r7, #0]
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fceb 	bl	8009be6 <USBD_CtlError>
      break;
 8009210:	bf00      	nop
  }

  return ret;
 8009212:	7bfb      	ldrb	r3, [r7, #15]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	889b      	ldrh	r3, [r3, #4]
 800922e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009238:	2b40      	cmp	r3, #64	; 0x40
 800923a:	d007      	beq.n	800924c <USBD_StdEPReq+0x30>
 800923c:	2b40      	cmp	r3, #64	; 0x40
 800923e:	f200 817f 	bhi.w	8009540 <USBD_StdEPReq+0x324>
 8009242:	2b00      	cmp	r3, #0
 8009244:	d02a      	beq.n	800929c <USBD_StdEPReq+0x80>
 8009246:	2b20      	cmp	r3, #32
 8009248:	f040 817a 	bne.w	8009540 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800924c:	7bbb      	ldrb	r3, [r7, #14]
 800924e:	4619      	mov	r1, r3
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7ff fe83 	bl	8008f5c <USBD_CoreFindEP>
 8009256:	4603      	mov	r3, r0
 8009258:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800925a:	7b7b      	ldrb	r3, [r7, #13]
 800925c:	2bff      	cmp	r3, #255	; 0xff
 800925e:	f000 8174 	beq.w	800954a <USBD_StdEPReq+0x32e>
 8009262:	7b7b      	ldrb	r3, [r7, #13]
 8009264:	2b00      	cmp	r3, #0
 8009266:	f040 8170 	bne.w	800954a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800926a:	7b7a      	ldrb	r2, [r7, #13]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009272:	7b7a      	ldrb	r2, [r7, #13]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	32ae      	adds	r2, #174	; 0xae
 8009278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	2b00      	cmp	r3, #0
 8009280:	f000 8163 	beq.w	800954a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009284:	7b7a      	ldrb	r2, [r7, #13]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	32ae      	adds	r2, #174	; 0xae
 800928a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	6839      	ldr	r1, [r7, #0]
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	4798      	blx	r3
 8009296:	4603      	mov	r3, r0
 8009298:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800929a:	e156      	b.n	800954a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	785b      	ldrb	r3, [r3, #1]
 80092a0:	2b03      	cmp	r3, #3
 80092a2:	d008      	beq.n	80092b6 <USBD_StdEPReq+0x9a>
 80092a4:	2b03      	cmp	r3, #3
 80092a6:	f300 8145 	bgt.w	8009534 <USBD_StdEPReq+0x318>
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f000 809b 	beq.w	80093e6 <USBD_StdEPReq+0x1ca>
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d03c      	beq.n	800932e <USBD_StdEPReq+0x112>
 80092b4:	e13e      	b.n	8009534 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d002      	beq.n	80092c8 <USBD_StdEPReq+0xac>
 80092c2:	2b03      	cmp	r3, #3
 80092c4:	d016      	beq.n	80092f4 <USBD_StdEPReq+0xd8>
 80092c6:	e02c      	b.n	8009322 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092c8:	7bbb      	ldrb	r3, [r7, #14]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00d      	beq.n	80092ea <USBD_StdEPReq+0xce>
 80092ce:	7bbb      	ldrb	r3, [r7, #14]
 80092d0:	2b80      	cmp	r3, #128	; 0x80
 80092d2:	d00a      	beq.n	80092ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80092d4:	7bbb      	ldrb	r3, [r7, #14]
 80092d6:	4619      	mov	r1, r3
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f001 f981 	bl	800a5e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80092de:	2180      	movs	r1, #128	; 0x80
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f001 f97d 	bl	800a5e0 <USBD_LL_StallEP>
 80092e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092e8:	e020      	b.n	800932c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80092ea:	6839      	ldr	r1, [r7, #0]
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fc7a 	bl	8009be6 <USBD_CtlError>
              break;
 80092f2:	e01b      	b.n	800932c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	885b      	ldrh	r3, [r3, #2]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d10e      	bne.n	800931a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80092fc:	7bbb      	ldrb	r3, [r7, #14]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00b      	beq.n	800931a <USBD_StdEPReq+0xfe>
 8009302:	7bbb      	ldrb	r3, [r7, #14]
 8009304:	2b80      	cmp	r3, #128	; 0x80
 8009306:	d008      	beq.n	800931a <USBD_StdEPReq+0xfe>
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	88db      	ldrh	r3, [r3, #6]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d104      	bne.n	800931a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009310:	7bbb      	ldrb	r3, [r7, #14]
 8009312:	4619      	mov	r1, r3
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f001 f963 	bl	800a5e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fd2e 	bl	8009d7c <USBD_CtlSendStatus>

              break;
 8009320:	e004      	b.n	800932c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fc5e 	bl	8009be6 <USBD_CtlError>
              break;
 800932a:	bf00      	nop
          }
          break;
 800932c:	e107      	b.n	800953e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009334:	b2db      	uxtb	r3, r3
 8009336:	2b02      	cmp	r3, #2
 8009338:	d002      	beq.n	8009340 <USBD_StdEPReq+0x124>
 800933a:	2b03      	cmp	r3, #3
 800933c:	d016      	beq.n	800936c <USBD_StdEPReq+0x150>
 800933e:	e04b      	b.n	80093d8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00d      	beq.n	8009362 <USBD_StdEPReq+0x146>
 8009346:	7bbb      	ldrb	r3, [r7, #14]
 8009348:	2b80      	cmp	r3, #128	; 0x80
 800934a:	d00a      	beq.n	8009362 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800934c:	7bbb      	ldrb	r3, [r7, #14]
 800934e:	4619      	mov	r1, r3
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f001 f945 	bl	800a5e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009356:	2180      	movs	r1, #128	; 0x80
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f001 f941 	bl	800a5e0 <USBD_LL_StallEP>
 800935e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009360:	e040      	b.n	80093e4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009362:	6839      	ldr	r1, [r7, #0]
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 fc3e 	bl	8009be6 <USBD_CtlError>
              break;
 800936a:	e03b      	b.n	80093e4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	885b      	ldrh	r3, [r3, #2]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d136      	bne.n	80093e2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009374:	7bbb      	ldrb	r3, [r7, #14]
 8009376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800937a:	2b00      	cmp	r3, #0
 800937c:	d004      	beq.n	8009388 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800937e:	7bbb      	ldrb	r3, [r7, #14]
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f001 f94b 	bl	800a61e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fcf7 	bl	8009d7c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800938e:	7bbb      	ldrb	r3, [r7, #14]
 8009390:	4619      	mov	r1, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7ff fde2 	bl	8008f5c <USBD_CoreFindEP>
 8009398:	4603      	mov	r3, r0
 800939a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800939c:	7b7b      	ldrb	r3, [r7, #13]
 800939e:	2bff      	cmp	r3, #255	; 0xff
 80093a0:	d01f      	beq.n	80093e2 <USBD_StdEPReq+0x1c6>
 80093a2:	7b7b      	ldrb	r3, [r7, #13]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d11c      	bne.n	80093e2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80093a8:	7b7a      	ldrb	r2, [r7, #13]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80093b0:	7b7a      	ldrb	r2, [r7, #13]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	32ae      	adds	r2, #174	; 0xae
 80093b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d010      	beq.n	80093e2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80093c0:	7b7a      	ldrb	r2, [r7, #13]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	32ae      	adds	r2, #174	; 0xae
 80093c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	6839      	ldr	r1, [r7, #0]
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	4798      	blx	r3
 80093d2:	4603      	mov	r3, r0
 80093d4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80093d6:	e004      	b.n	80093e2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80093d8:	6839      	ldr	r1, [r7, #0]
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 fc03 	bl	8009be6 <USBD_CtlError>
              break;
 80093e0:	e000      	b.n	80093e4 <USBD_StdEPReq+0x1c8>
              break;
 80093e2:	bf00      	nop
          }
          break;
 80093e4:	e0ab      	b.n	800953e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d002      	beq.n	80093f8 <USBD_StdEPReq+0x1dc>
 80093f2:	2b03      	cmp	r3, #3
 80093f4:	d032      	beq.n	800945c <USBD_StdEPReq+0x240>
 80093f6:	e097      	b.n	8009528 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093f8:	7bbb      	ldrb	r3, [r7, #14]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d007      	beq.n	800940e <USBD_StdEPReq+0x1f2>
 80093fe:	7bbb      	ldrb	r3, [r7, #14]
 8009400:	2b80      	cmp	r3, #128	; 0x80
 8009402:	d004      	beq.n	800940e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009404:	6839      	ldr	r1, [r7, #0]
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fbed 	bl	8009be6 <USBD_CtlError>
                break;
 800940c:	e091      	b.n	8009532 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800940e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009412:	2b00      	cmp	r3, #0
 8009414:	da0b      	bge.n	800942e <USBD_StdEPReq+0x212>
 8009416:	7bbb      	ldrb	r3, [r7, #14]
 8009418:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800941c:	4613      	mov	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4413      	add	r3, r2
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	3310      	adds	r3, #16
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	4413      	add	r3, r2
 800942a:	3304      	adds	r3, #4
 800942c:	e00b      	b.n	8009446 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800942e:	7bbb      	ldrb	r3, [r7, #14]
 8009430:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009434:	4613      	mov	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4413      	add	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	4413      	add	r3, r2
 8009444:	3304      	adds	r3, #4
 8009446:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	2200      	movs	r2, #0
 800944c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	2202      	movs	r2, #2
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fc37 	bl	8009cc8 <USBD_CtlSendData>
              break;
 800945a:	e06a      	b.n	8009532 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800945c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009460:	2b00      	cmp	r3, #0
 8009462:	da11      	bge.n	8009488 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009464:	7bbb      	ldrb	r3, [r7, #14]
 8009466:	f003 020f 	and.w	r2, r3, #15
 800946a:	6879      	ldr	r1, [r7, #4]
 800946c:	4613      	mov	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	440b      	add	r3, r1
 8009476:	3324      	adds	r3, #36	; 0x24
 8009478:	881b      	ldrh	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d117      	bne.n	80094ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fbb0 	bl	8009be6 <USBD_CtlError>
                  break;
 8009486:	e054      	b.n	8009532 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009488:	7bbb      	ldrb	r3, [r7, #14]
 800948a:	f003 020f 	and.w	r2, r3, #15
 800948e:	6879      	ldr	r1, [r7, #4]
 8009490:	4613      	mov	r3, r2
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	4413      	add	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	440b      	add	r3, r1
 800949a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d104      	bne.n	80094ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80094a4:	6839      	ldr	r1, [r7, #0]
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 fb9d 	bl	8009be6 <USBD_CtlError>
                  break;
 80094ac:	e041      	b.n	8009532 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	da0b      	bge.n	80094ce <USBD_StdEPReq+0x2b2>
 80094b6:	7bbb      	ldrb	r3, [r7, #14]
 80094b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094bc:	4613      	mov	r3, r2
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	4413      	add	r3, r2
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	3310      	adds	r3, #16
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	4413      	add	r3, r2
 80094ca:	3304      	adds	r3, #4
 80094cc:	e00b      	b.n	80094e6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094ce:	7bbb      	ldrb	r3, [r7, #14]
 80094d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094d4:	4613      	mov	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	4413      	add	r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	4413      	add	r3, r2
 80094e4:	3304      	adds	r3, #4
 80094e6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094e8:	7bbb      	ldrb	r3, [r7, #14]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d002      	beq.n	80094f4 <USBD_StdEPReq+0x2d8>
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
 80094f0:	2b80      	cmp	r3, #128	; 0x80
 80094f2:	d103      	bne.n	80094fc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	2200      	movs	r2, #0
 80094f8:	601a      	str	r2, [r3, #0]
 80094fa:	e00e      	b.n	800951a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80094fc:	7bbb      	ldrb	r3, [r7, #14]
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f001 f8ab 	bl	800a65c <USBD_LL_IsStallEP>
 8009506:	4603      	mov	r3, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d003      	beq.n	8009514 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	2201      	movs	r2, #1
 8009510:	601a      	str	r2, [r3, #0]
 8009512:	e002      	b.n	800951a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	2200      	movs	r2, #0
 8009518:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	2202      	movs	r2, #2
 800951e:	4619      	mov	r1, r3
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 fbd1 	bl	8009cc8 <USBD_CtlSendData>
              break;
 8009526:	e004      	b.n	8009532 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009528:	6839      	ldr	r1, [r7, #0]
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fb5b 	bl	8009be6 <USBD_CtlError>
              break;
 8009530:	bf00      	nop
          }
          break;
 8009532:	e004      	b.n	800953e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 fb55 	bl	8009be6 <USBD_CtlError>
          break;
 800953c:	bf00      	nop
      }
      break;
 800953e:	e005      	b.n	800954c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009540:	6839      	ldr	r1, [r7, #0]
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 fb4f 	bl	8009be6 <USBD_CtlError>
      break;
 8009548:	e000      	b.n	800954c <USBD_StdEPReq+0x330>
      break;
 800954a:	bf00      	nop
  }

  return ret;
 800954c:	7bfb      	ldrb	r3, [r7, #15]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
	...

08009558 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009562:	2300      	movs	r3, #0
 8009564:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009566:	2300      	movs	r3, #0
 8009568:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800956a:	2300      	movs	r3, #0
 800956c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	885b      	ldrh	r3, [r3, #2]
 8009572:	0a1b      	lsrs	r3, r3, #8
 8009574:	b29b      	uxth	r3, r3
 8009576:	3b01      	subs	r3, #1
 8009578:	2b06      	cmp	r3, #6
 800957a:	f200 8128 	bhi.w	80097ce <USBD_GetDescriptor+0x276>
 800957e:	a201      	add	r2, pc, #4	; (adr r2, 8009584 <USBD_GetDescriptor+0x2c>)
 8009580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009584:	080095a1 	.word	0x080095a1
 8009588:	080095b9 	.word	0x080095b9
 800958c:	080095f9 	.word	0x080095f9
 8009590:	080097cf 	.word	0x080097cf
 8009594:	080097cf 	.word	0x080097cf
 8009598:	0800976f 	.word	0x0800976f
 800959c:	0800979b 	.word	0x0800979b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	7c12      	ldrb	r2, [r2, #16]
 80095ac:	f107 0108 	add.w	r1, r7, #8
 80095b0:	4610      	mov	r0, r2
 80095b2:	4798      	blx	r3
 80095b4:	60f8      	str	r0, [r7, #12]
      break;
 80095b6:	e112      	b.n	80097de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	7c1b      	ldrb	r3, [r3, #16]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10d      	bne.n	80095dc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c8:	f107 0208 	add.w	r2, r7, #8
 80095cc:	4610      	mov	r0, r2
 80095ce:	4798      	blx	r3
 80095d0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3301      	adds	r3, #1
 80095d6:	2202      	movs	r2, #2
 80095d8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80095da:	e100      	b.n	80097de <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e4:	f107 0208 	add.w	r2, r7, #8
 80095e8:	4610      	mov	r0, r2
 80095ea:	4798      	blx	r3
 80095ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3301      	adds	r3, #1
 80095f2:	2202      	movs	r2, #2
 80095f4:	701a      	strb	r2, [r3, #0]
      break;
 80095f6:	e0f2      	b.n	80097de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	885b      	ldrh	r3, [r3, #2]
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b05      	cmp	r3, #5
 8009600:	f200 80ac 	bhi.w	800975c <USBD_GetDescriptor+0x204>
 8009604:	a201      	add	r2, pc, #4	; (adr r2, 800960c <USBD_GetDescriptor+0xb4>)
 8009606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960a:	bf00      	nop
 800960c:	08009625 	.word	0x08009625
 8009610:	08009659 	.word	0x08009659
 8009614:	0800968d 	.word	0x0800968d
 8009618:	080096c1 	.word	0x080096c1
 800961c:	080096f5 	.word	0x080096f5
 8009620:	08009729 	.word	0x08009729
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00b      	beq.n	8009648 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	7c12      	ldrb	r2, [r2, #16]
 800963c:	f107 0108 	add.w	r1, r7, #8
 8009640:	4610      	mov	r0, r2
 8009642:	4798      	blx	r3
 8009644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009646:	e091      	b.n	800976c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 facb 	bl	8009be6 <USBD_CtlError>
            err++;
 8009650:	7afb      	ldrb	r3, [r7, #11]
 8009652:	3301      	adds	r3, #1
 8009654:	72fb      	strb	r3, [r7, #11]
          break;
 8009656:	e089      	b.n	800976c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00b      	beq.n	800967c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	7c12      	ldrb	r2, [r2, #16]
 8009670:	f107 0108 	add.w	r1, r7, #8
 8009674:	4610      	mov	r0, r2
 8009676:	4798      	blx	r3
 8009678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800967a:	e077      	b.n	800976c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800967c:	6839      	ldr	r1, [r7, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fab1 	bl	8009be6 <USBD_CtlError>
            err++;
 8009684:	7afb      	ldrb	r3, [r7, #11]
 8009686:	3301      	adds	r3, #1
 8009688:	72fb      	strb	r3, [r7, #11]
          break;
 800968a:	e06f      	b.n	800976c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00b      	beq.n	80096b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	7c12      	ldrb	r2, [r2, #16]
 80096a4:	f107 0108 	add.w	r1, r7, #8
 80096a8:	4610      	mov	r0, r2
 80096aa:	4798      	blx	r3
 80096ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096ae:	e05d      	b.n	800976c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fa97 	bl	8009be6 <USBD_CtlError>
            err++;
 80096b8:	7afb      	ldrb	r3, [r7, #11]
 80096ba:	3301      	adds	r3, #1
 80096bc:	72fb      	strb	r3, [r7, #11]
          break;
 80096be:	e055      	b.n	800976c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00b      	beq.n	80096e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	7c12      	ldrb	r2, [r2, #16]
 80096d8:	f107 0108 	add.w	r1, r7, #8
 80096dc:	4610      	mov	r0, r2
 80096de:	4798      	blx	r3
 80096e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096e2:	e043      	b.n	800976c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fa7d 	bl	8009be6 <USBD_CtlError>
            err++;
 80096ec:	7afb      	ldrb	r3, [r7, #11]
 80096ee:	3301      	adds	r3, #1
 80096f0:	72fb      	strb	r3, [r7, #11]
          break;
 80096f2:	e03b      	b.n	800976c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096fa:	695b      	ldr	r3, [r3, #20]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d00b      	beq.n	8009718 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009706:	695b      	ldr	r3, [r3, #20]
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	7c12      	ldrb	r2, [r2, #16]
 800970c:	f107 0108 	add.w	r1, r7, #8
 8009710:	4610      	mov	r0, r2
 8009712:	4798      	blx	r3
 8009714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009716:	e029      	b.n	800976c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009718:	6839      	ldr	r1, [r7, #0]
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fa63 	bl	8009be6 <USBD_CtlError>
            err++;
 8009720:	7afb      	ldrb	r3, [r7, #11]
 8009722:	3301      	adds	r3, #1
 8009724:	72fb      	strb	r3, [r7, #11]
          break;
 8009726:	e021      	b.n	800976c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d00b      	beq.n	800974c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800973a:	699b      	ldr	r3, [r3, #24]
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	7c12      	ldrb	r2, [r2, #16]
 8009740:	f107 0108 	add.w	r1, r7, #8
 8009744:	4610      	mov	r0, r2
 8009746:	4798      	blx	r3
 8009748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800974a:	e00f      	b.n	800976c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800974c:	6839      	ldr	r1, [r7, #0]
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 fa49 	bl	8009be6 <USBD_CtlError>
            err++;
 8009754:	7afb      	ldrb	r3, [r7, #11]
 8009756:	3301      	adds	r3, #1
 8009758:	72fb      	strb	r3, [r7, #11]
          break;
 800975a:	e007      	b.n	800976c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 fa41 	bl	8009be6 <USBD_CtlError>
          err++;
 8009764:	7afb      	ldrb	r3, [r7, #11]
 8009766:	3301      	adds	r3, #1
 8009768:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800976a:	bf00      	nop
      }
      break;
 800976c:	e037      	b.n	80097de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	7c1b      	ldrb	r3, [r3, #16]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d109      	bne.n	800978a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800977c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800977e:	f107 0208 	add.w	r2, r7, #8
 8009782:	4610      	mov	r0, r2
 8009784:	4798      	blx	r3
 8009786:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009788:	e029      	b.n	80097de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800978a:	6839      	ldr	r1, [r7, #0]
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 fa2a 	bl	8009be6 <USBD_CtlError>
        err++;
 8009792:	7afb      	ldrb	r3, [r7, #11]
 8009794:	3301      	adds	r3, #1
 8009796:	72fb      	strb	r3, [r7, #11]
      break;
 8009798:	e021      	b.n	80097de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	7c1b      	ldrb	r3, [r3, #16]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10d      	bne.n	80097be <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097aa:	f107 0208 	add.w	r2, r7, #8
 80097ae:	4610      	mov	r0, r2
 80097b0:	4798      	blx	r3
 80097b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	3301      	adds	r3, #1
 80097b8:	2207      	movs	r2, #7
 80097ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097bc:	e00f      	b.n	80097de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 fa10 	bl	8009be6 <USBD_CtlError>
        err++;
 80097c6:	7afb      	ldrb	r3, [r7, #11]
 80097c8:	3301      	adds	r3, #1
 80097ca:	72fb      	strb	r3, [r7, #11]
      break;
 80097cc:	e007      	b.n	80097de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80097ce:	6839      	ldr	r1, [r7, #0]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fa08 	bl	8009be6 <USBD_CtlError>
      err++;
 80097d6:	7afb      	ldrb	r3, [r7, #11]
 80097d8:	3301      	adds	r3, #1
 80097da:	72fb      	strb	r3, [r7, #11]
      break;
 80097dc:	bf00      	nop
  }

  if (err != 0U)
 80097de:	7afb      	ldrb	r3, [r7, #11]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d11e      	bne.n	8009822 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	88db      	ldrh	r3, [r3, #6]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d016      	beq.n	800981a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80097ec:	893b      	ldrh	r3, [r7, #8]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00e      	beq.n	8009810 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	88da      	ldrh	r2, [r3, #6]
 80097f6:	893b      	ldrh	r3, [r7, #8]
 80097f8:	4293      	cmp	r3, r2
 80097fa:	bf28      	it	cs
 80097fc:	4613      	movcs	r3, r2
 80097fe:	b29b      	uxth	r3, r3
 8009800:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009802:	893b      	ldrh	r3, [r7, #8]
 8009804:	461a      	mov	r2, r3
 8009806:	68f9      	ldr	r1, [r7, #12]
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 fa5d 	bl	8009cc8 <USBD_CtlSendData>
 800980e:	e009      	b.n	8009824 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 f9e7 	bl	8009be6 <USBD_CtlError>
 8009818:	e004      	b.n	8009824 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 faae 	bl	8009d7c <USBD_CtlSendStatus>
 8009820:	e000      	b.n	8009824 <USBD_GetDescriptor+0x2cc>
    return;
 8009822:	bf00      	nop
  }
}
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop

0800982c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	889b      	ldrh	r3, [r3, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d131      	bne.n	80098a2 <USBD_SetAddress+0x76>
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	88db      	ldrh	r3, [r3, #6]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d12d      	bne.n	80098a2 <USBD_SetAddress+0x76>
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	885b      	ldrh	r3, [r3, #2]
 800984a:	2b7f      	cmp	r3, #127	; 0x7f
 800984c:	d829      	bhi.n	80098a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	885b      	ldrh	r3, [r3, #2]
 8009852:	b2db      	uxtb	r3, r3
 8009854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009858:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009860:	b2db      	uxtb	r3, r3
 8009862:	2b03      	cmp	r3, #3
 8009864:	d104      	bne.n	8009870 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009866:	6839      	ldr	r1, [r7, #0]
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 f9bc 	bl	8009be6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800986e:	e01d      	b.n	80098ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	7bfa      	ldrb	r2, [r7, #15]
 8009874:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009878:	7bfb      	ldrb	r3, [r7, #15]
 800987a:	4619      	mov	r1, r3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 ff19 	bl	800a6b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fa7a 	bl	8009d7c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009888:	7bfb      	ldrb	r3, [r7, #15]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d004      	beq.n	8009898 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2202      	movs	r2, #2
 8009892:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009896:	e009      	b.n	80098ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098a0:	e004      	b.n	80098ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80098a2:	6839      	ldr	r1, [r7, #0]
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 f99e 	bl	8009be6 <USBD_CtlError>
  }
}
 80098aa:	bf00      	nop
 80098ac:	bf00      	nop
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	885b      	ldrh	r3, [r3, #2]
 80098c6:	b2da      	uxtb	r2, r3
 80098c8:	4b4e      	ldr	r3, [pc, #312]	; (8009a04 <USBD_SetConfig+0x150>)
 80098ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80098cc:	4b4d      	ldr	r3, [pc, #308]	; (8009a04 <USBD_SetConfig+0x150>)
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d905      	bls.n	80098e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80098d4:	6839      	ldr	r1, [r7, #0]
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 f985 	bl	8009be6 <USBD_CtlError>
    return USBD_FAIL;
 80098dc:	2303      	movs	r3, #3
 80098de:	e08c      	b.n	80099fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	d002      	beq.n	80098f2 <USBD_SetConfig+0x3e>
 80098ec:	2b03      	cmp	r3, #3
 80098ee:	d029      	beq.n	8009944 <USBD_SetConfig+0x90>
 80098f0:	e075      	b.n	80099de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80098f2:	4b44      	ldr	r3, [pc, #272]	; (8009a04 <USBD_SetConfig+0x150>)
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d020      	beq.n	800993c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80098fa:	4b42      	ldr	r3, [pc, #264]	; (8009a04 <USBD_SetConfig+0x150>)
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	461a      	mov	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009904:	4b3f      	ldr	r3, [pc, #252]	; (8009a04 <USBD_SetConfig+0x150>)
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	4619      	mov	r1, r3
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f7fe ffe7 	bl	80088de <USBD_SetClassConfig>
 8009910:	4603      	mov	r3, r0
 8009912:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009914:	7bfb      	ldrb	r3, [r7, #15]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d008      	beq.n	800992c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800991a:	6839      	ldr	r1, [r7, #0]
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 f962 	bl	8009be6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2202      	movs	r2, #2
 8009926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800992a:	e065      	b.n	80099f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fa25 	bl	8009d7c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2203      	movs	r2, #3
 8009936:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800993a:	e05d      	b.n	80099f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 fa1d 	bl	8009d7c <USBD_CtlSendStatus>
      break;
 8009942:	e059      	b.n	80099f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009944:	4b2f      	ldr	r3, [pc, #188]	; (8009a04 <USBD_SetConfig+0x150>)
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d112      	bne.n	8009972 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2202      	movs	r2, #2
 8009950:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009954:	4b2b      	ldr	r3, [pc, #172]	; (8009a04 <USBD_SetConfig+0x150>)
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	461a      	mov	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800995e:	4b29      	ldr	r3, [pc, #164]	; (8009a04 <USBD_SetConfig+0x150>)
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	4619      	mov	r1, r3
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f7fe ffd6 	bl	8008916 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fa06 	bl	8009d7c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009970:	e042      	b.n	80099f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009972:	4b24      	ldr	r3, [pc, #144]	; (8009a04 <USBD_SetConfig+0x150>)
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	461a      	mov	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	429a      	cmp	r2, r3
 800997e:	d02a      	beq.n	80099d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	b2db      	uxtb	r3, r3
 8009986:	4619      	mov	r1, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f7fe ffc4 	bl	8008916 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800998e:	4b1d      	ldr	r3, [pc, #116]	; (8009a04 <USBD_SetConfig+0x150>)
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	461a      	mov	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009998:	4b1a      	ldr	r3, [pc, #104]	; (8009a04 <USBD_SetConfig+0x150>)
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	4619      	mov	r1, r3
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7fe ff9d 	bl	80088de <USBD_SetClassConfig>
 80099a4:	4603      	mov	r3, r0
 80099a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00f      	beq.n	80099ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f918 	bl	8009be6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	4619      	mov	r1, r3
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f7fe ffa9 	bl	8008916 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2202      	movs	r2, #2
 80099c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80099cc:	e014      	b.n	80099f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f9d4 	bl	8009d7c <USBD_CtlSendStatus>
      break;
 80099d4:	e010      	b.n	80099f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f9d0 	bl	8009d7c <USBD_CtlSendStatus>
      break;
 80099dc:	e00c      	b.n	80099f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80099de:	6839      	ldr	r1, [r7, #0]
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f900 	bl	8009be6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099e6:	4b07      	ldr	r3, [pc, #28]	; (8009a04 <USBD_SetConfig+0x150>)
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	4619      	mov	r1, r3
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f7fe ff92 	bl	8008916 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80099f2:	2303      	movs	r3, #3
 80099f4:	73fb      	strb	r3, [r7, #15]
      break;
 80099f6:	bf00      	nop
  }

  return ret;
 80099f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	20000510 	.word	0x20000510

08009a08 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	88db      	ldrh	r3, [r3, #6]
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d004      	beq.n	8009a24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009a1a:	6839      	ldr	r1, [r7, #0]
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 f8e2 	bl	8009be6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009a22:	e023      	b.n	8009a6c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	dc02      	bgt.n	8009a36 <USBD_GetConfig+0x2e>
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	dc03      	bgt.n	8009a3c <USBD_GetConfig+0x34>
 8009a34:	e015      	b.n	8009a62 <USBD_GetConfig+0x5a>
 8009a36:	2b03      	cmp	r3, #3
 8009a38:	d00b      	beq.n	8009a52 <USBD_GetConfig+0x4a>
 8009a3a:	e012      	b.n	8009a62 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	3308      	adds	r3, #8
 8009a46:	2201      	movs	r2, #1
 8009a48:	4619      	mov	r1, r3
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f93c 	bl	8009cc8 <USBD_CtlSendData>
        break;
 8009a50:	e00c      	b.n	8009a6c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	3304      	adds	r3, #4
 8009a56:	2201      	movs	r2, #1
 8009a58:	4619      	mov	r1, r3
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f934 	bl	8009cc8 <USBD_CtlSendData>
        break;
 8009a60:	e004      	b.n	8009a6c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009a62:	6839      	ldr	r1, [r7, #0]
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 f8be 	bl	8009be6 <USBD_CtlError>
        break;
 8009a6a:	bf00      	nop
}
 8009a6c:	bf00      	nop
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	3b01      	subs	r3, #1
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d81e      	bhi.n	8009aca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	88db      	ldrh	r3, [r3, #6]
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	d004      	beq.n	8009a9e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f8a5 	bl	8009be6 <USBD_CtlError>
        break;
 8009a9c:	e01a      	b.n	8009ad4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d005      	beq.n	8009aba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	f043 0202 	orr.w	r2, r3, #2
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	330c      	adds	r3, #12
 8009abe:	2202      	movs	r2, #2
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f900 	bl	8009cc8 <USBD_CtlSendData>
      break;
 8009ac8:	e004      	b.n	8009ad4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009aca:	6839      	ldr	r1, [r7, #0]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 f88a 	bl	8009be6 <USBD_CtlError>
      break;
 8009ad2:	bf00      	nop
  }
}
 8009ad4:	bf00      	nop
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	885b      	ldrh	r3, [r3, #2]
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d107      	bne.n	8009afe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f940 	bl	8009d7c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009afc:	e013      	b.n	8009b26 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	885b      	ldrh	r3, [r3, #2]
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d10b      	bne.n	8009b1e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	889b      	ldrh	r3, [r3, #4]
 8009b0a:	0a1b      	lsrs	r3, r3, #8
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	b2da      	uxtb	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 f930 	bl	8009d7c <USBD_CtlSendStatus>
}
 8009b1c:	e003      	b.n	8009b26 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009b1e:	6839      	ldr	r1, [r7, #0]
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 f860 	bl	8009be6 <USBD_CtlError>
}
 8009b26:	bf00      	nop
 8009b28:	3708      	adds	r7, #8
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b082      	sub	sp, #8
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
 8009b36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	3b01      	subs	r3, #1
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d80b      	bhi.n	8009b5e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	885b      	ldrh	r3, [r3, #2]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d10c      	bne.n	8009b68 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f910 	bl	8009d7c <USBD_CtlSendStatus>
      }
      break;
 8009b5c:	e004      	b.n	8009b68 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009b5e:	6839      	ldr	r1, [r7, #0]
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 f840 	bl	8009be6 <USBD_CtlError>
      break;
 8009b66:	e000      	b.n	8009b6a <USBD_ClrFeature+0x3c>
      break;
 8009b68:	bf00      	nop
  }
}
 8009b6a:	bf00      	nop
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b084      	sub	sp, #16
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	781a      	ldrb	r2, [r3, #0]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	781a      	ldrb	r2, [r3, #0]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f7ff fa41 	bl	8009024 <SWAPBYTE>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	3301      	adds	r3, #1
 8009bae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f7ff fa34 	bl	8009024 <SWAPBYTE>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f7ff fa27 	bl	8009024 <SWAPBYTE>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	461a      	mov	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	80da      	strh	r2, [r3, #6]
}
 8009bde:	bf00      	nop
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b082      	sub	sp, #8
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009bf0:	2180      	movs	r1, #128	; 0x80
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fcf4 	bl	800a5e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fcf0 	bl	800a5e0 <USBD_LL_StallEP>
}
 8009c00:	bf00      	nop
 8009c02:	3708      	adds	r7, #8
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c14:	2300      	movs	r3, #0
 8009c16:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d036      	beq.n	8009c8c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009c22:	6938      	ldr	r0, [r7, #16]
 8009c24:	f000 f836 	bl	8009c94 <USBD_GetLen>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	005b      	lsls	r3, r3, #1
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009c36:	7dfb      	ldrb	r3, [r7, #23]
 8009c38:	68ba      	ldr	r2, [r7, #8]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	7812      	ldrb	r2, [r2, #0]
 8009c40:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c42:	7dfb      	ldrb	r3, [r7, #23]
 8009c44:	3301      	adds	r3, #1
 8009c46:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009c48:	7dfb      	ldrb	r3, [r7, #23]
 8009c4a:	68ba      	ldr	r2, [r7, #8]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	2203      	movs	r2, #3
 8009c50:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c52:	7dfb      	ldrb	r3, [r7, #23]
 8009c54:	3301      	adds	r3, #1
 8009c56:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009c58:	e013      	b.n	8009c82 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009c5a:	7dfb      	ldrb	r3, [r7, #23]
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	4413      	add	r3, r2
 8009c60:	693a      	ldr	r2, [r7, #16]
 8009c62:	7812      	ldrb	r2, [r2, #0]
 8009c64:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	613b      	str	r3, [r7, #16]
    idx++;
 8009c6c:	7dfb      	ldrb	r3, [r7, #23]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009c72:	7dfb      	ldrb	r3, [r7, #23]
 8009c74:	68ba      	ldr	r2, [r7, #8]
 8009c76:	4413      	add	r3, r2
 8009c78:	2200      	movs	r2, #0
 8009c7a:	701a      	strb	r2, [r3, #0]
    idx++;
 8009c7c:	7dfb      	ldrb	r3, [r7, #23]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1e7      	bne.n	8009c5a <USBD_GetString+0x52>
 8009c8a:	e000      	b.n	8009c8e <USBD_GetString+0x86>
    return;
 8009c8c:	bf00      	nop
  }
}
 8009c8e:	3718      	adds	r7, #24
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009ca4:	e005      	b.n	8009cb2 <USBD_GetLen+0x1e>
  {
    len++;
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d1f5      	bne.n	8009ca6 <USBD_GetLen+0x12>
  }

  return len;
 8009cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2202      	movs	r2, #2
 8009cd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	68ba      	ldr	r2, [r7, #8]
 8009cec:	2100      	movs	r1, #0
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	f000 fcff 	bl	800a6f2 <USBD_LL_Transmit>

  return USBD_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b084      	sub	sp, #16
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	60f8      	str	r0, [r7, #12]
 8009d06:	60b9      	str	r1, [r7, #8]
 8009d08:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	2100      	movs	r1, #0
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 fcee 	bl	800a6f2 <USBD_LL_Transmit>

  return USBD_OK;
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2203      	movs	r2, #3
 8009d30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	2100      	movs	r1, #0
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	f000 fcf2 	bl	800a734 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b084      	sub	sp, #16
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	60f8      	str	r0, [r7, #12]
 8009d62:	60b9      	str	r1, [r7, #8]
 8009d64:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f000 fce1 	bl	800a734 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2204      	movs	r2, #4
 8009d88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	2200      	movs	r2, #0
 8009d90:	2100      	movs	r1, #0
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 fcad 	bl	800a6f2 <USBD_LL_Transmit>

  return USBD_OK;
 8009d98:	2300      	movs	r3, #0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3708      	adds	r7, #8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b082      	sub	sp, #8
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2205      	movs	r2, #5
 8009dae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009db2:	2300      	movs	r3, #0
 8009db4:	2200      	movs	r2, #0
 8009db6:	2100      	movs	r1, #0
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 fcbb 	bl	800a734 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3708      	adds	r7, #8
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009dcc:	2200      	movs	r2, #0
 8009dce:	4912      	ldr	r1, [pc, #72]	; (8009e18 <MX_USB_DEVICE_Init+0x50>)
 8009dd0:	4812      	ldr	r0, [pc, #72]	; (8009e1c <MX_USB_DEVICE_Init+0x54>)
 8009dd2:	f7fe fd07 	bl	80087e4 <USBD_Init>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d001      	beq.n	8009de0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009ddc:	f7f7 fcfa 	bl	80017d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009de0:	490f      	ldr	r1, [pc, #60]	; (8009e20 <MX_USB_DEVICE_Init+0x58>)
 8009de2:	480e      	ldr	r0, [pc, #56]	; (8009e1c <MX_USB_DEVICE_Init+0x54>)
 8009de4:	f7fe fd2e 	bl	8008844 <USBD_RegisterClass>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d001      	beq.n	8009df2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009dee:	f7f7 fcf1 	bl	80017d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009df2:	490c      	ldr	r1, [pc, #48]	; (8009e24 <MX_USB_DEVICE_Init+0x5c>)
 8009df4:	4809      	ldr	r0, [pc, #36]	; (8009e1c <MX_USB_DEVICE_Init+0x54>)
 8009df6:	f7fe fc1f 	bl	8008638 <USBD_CDC_RegisterInterface>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d001      	beq.n	8009e04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009e00:	f7f7 fce8 	bl	80017d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009e04:	4805      	ldr	r0, [pc, #20]	; (8009e1c <MX_USB_DEVICE_Init+0x54>)
 8009e06:	f7fe fd53 	bl	80088b0 <USBD_Start>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d001      	beq.n	8009e14 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009e10:	f7f7 fce0 	bl	80017d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009e14:	bf00      	nop
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	200000b4 	.word	0x200000b4
 8009e1c:	20000514 	.word	0x20000514
 8009e20:	20000018 	.word	0x20000018
 8009e24:	200000a0 	.word	0x200000a0

08009e28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	4905      	ldr	r1, [pc, #20]	; (8009e44 <CDC_Init_FS+0x1c>)
 8009e30:	4805      	ldr	r0, [pc, #20]	; (8009e48 <CDC_Init_FS+0x20>)
 8009e32:	f7fe fc1b 	bl	800866c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009e36:	4905      	ldr	r1, [pc, #20]	; (8009e4c <CDC_Init_FS+0x24>)
 8009e38:	4803      	ldr	r0, [pc, #12]	; (8009e48 <CDC_Init_FS+0x20>)
 8009e3a:	f7fe fc39 	bl	80086b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009e3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	20000ff0 	.word	0x20000ff0
 8009e48:	20000514 	.word	0x20000514
 8009e4c:	200007f0 	.word	0x200007f0

08009e50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009e50:	b480      	push	{r7}
 8009e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009e54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	4603      	mov	r3, r0
 8009e68:	6039      	str	r1, [r7, #0]
 8009e6a:	71fb      	strb	r3, [r7, #7]
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009e70:	79fb      	ldrb	r3, [r7, #7]
 8009e72:	2b23      	cmp	r3, #35	; 0x23
 8009e74:	d85c      	bhi.n	8009f30 <CDC_Control_FS+0xd0>
 8009e76:	a201      	add	r2, pc, #4	; (adr r2, 8009e7c <CDC_Control_FS+0x1c>)
 8009e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7c:	08009f31 	.word	0x08009f31
 8009e80:	08009f31 	.word	0x08009f31
 8009e84:	08009f31 	.word	0x08009f31
 8009e88:	08009f31 	.word	0x08009f31
 8009e8c:	08009f31 	.word	0x08009f31
 8009e90:	08009f31 	.word	0x08009f31
 8009e94:	08009f31 	.word	0x08009f31
 8009e98:	08009f31 	.word	0x08009f31
 8009e9c:	08009f31 	.word	0x08009f31
 8009ea0:	08009f31 	.word	0x08009f31
 8009ea4:	08009f31 	.word	0x08009f31
 8009ea8:	08009f31 	.word	0x08009f31
 8009eac:	08009f31 	.word	0x08009f31
 8009eb0:	08009f31 	.word	0x08009f31
 8009eb4:	08009f31 	.word	0x08009f31
 8009eb8:	08009f31 	.word	0x08009f31
 8009ebc:	08009f31 	.word	0x08009f31
 8009ec0:	08009f31 	.word	0x08009f31
 8009ec4:	08009f31 	.word	0x08009f31
 8009ec8:	08009f31 	.word	0x08009f31
 8009ecc:	08009f31 	.word	0x08009f31
 8009ed0:	08009f31 	.word	0x08009f31
 8009ed4:	08009f31 	.word	0x08009f31
 8009ed8:	08009f31 	.word	0x08009f31
 8009edc:	08009f31 	.word	0x08009f31
 8009ee0:	08009f31 	.word	0x08009f31
 8009ee4:	08009f31 	.word	0x08009f31
 8009ee8:	08009f31 	.word	0x08009f31
 8009eec:	08009f31 	.word	0x08009f31
 8009ef0:	08009f31 	.word	0x08009f31
 8009ef4:	08009f31 	.word	0x08009f31
 8009ef8:	08009f31 	.word	0x08009f31
 8009efc:	08009f0d 	.word	0x08009f0d
 8009f00:	08009f1f 	.word	0x08009f1f
 8009f04:	08009f31 	.word	0x08009f31
 8009f08:	08009f31 	.word	0x08009f31
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8009f0c:	4b0c      	ldr	r3, [pc, #48]	; (8009f40 <CDC_Control_FS+0xe0>)
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	6810      	ldr	r0, [r2, #0]
 8009f12:	6018      	str	r0, [r3, #0]
 8009f14:	8891      	ldrh	r1, [r2, #4]
 8009f16:	7992      	ldrb	r2, [r2, #6]
 8009f18:	8099      	strh	r1, [r3, #4]
 8009f1a:	719a      	strb	r2, [r3, #6]
    break;
 8009f1c:	e009      	b.n	8009f32 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	4a07      	ldr	r2, [pc, #28]	; (8009f40 <CDC_Control_FS+0xe0>)
 8009f22:	6810      	ldr	r0, [r2, #0]
 8009f24:	6018      	str	r0, [r3, #0]
 8009f26:	8891      	ldrh	r1, [r2, #4]
 8009f28:	7992      	ldrb	r2, [r2, #6]
 8009f2a:	8099      	strh	r1, [r3, #4]
 8009f2c:	719a      	strb	r2, [r3, #6]
    break;
 8009f2e:	e000      	b.n	8009f32 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009f30:	bf00      	nop
  }

  return (USBD_OK);
 8009f32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	20000098 	.word	0x20000098

08009f44 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009f4e:	6879      	ldr	r1, [r7, #4]
 8009f50:	4805      	ldr	r0, [pc, #20]	; (8009f68 <CDC_Receive_FS+0x24>)
 8009f52:	f7fe fbad 	bl	80086b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009f56:	4804      	ldr	r0, [pc, #16]	; (8009f68 <CDC_Receive_FS+0x24>)
 8009f58:	f7fe fc0e 	bl	8008778 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009f5c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3708      	adds	r7, #8
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	20000514 	.word	0x20000514

08009f6c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	460b      	mov	r3, r1
 8009f76:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009f7c:	4b0d      	ldr	r3, [pc, #52]	; (8009fb4 <CDC_Transmit_FS+0x48>)
 8009f7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f82:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d001      	beq.n	8009f92 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e00b      	b.n	8009faa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009f92:	887b      	ldrh	r3, [r7, #2]
 8009f94:	461a      	mov	r2, r3
 8009f96:	6879      	ldr	r1, [r7, #4]
 8009f98:	4806      	ldr	r0, [pc, #24]	; (8009fb4 <CDC_Transmit_FS+0x48>)
 8009f9a:	f7fe fb67 	bl	800866c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009f9e:	4805      	ldr	r0, [pc, #20]	; (8009fb4 <CDC_Transmit_FS+0x48>)
 8009fa0:	f7fe fba4 	bl	80086ec <USBD_CDC_TransmitPacket>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	20000514 	.word	0x20000514

08009fb8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b087      	sub	sp, #28
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009fca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	371c      	adds	r7, #28
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
	...

08009fdc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	6039      	str	r1, [r7, #0]
 8009fe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	2212      	movs	r2, #18
 8009fec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009fee:	4b03      	ldr	r3, [pc, #12]	; (8009ffc <USBD_FS_DeviceDescriptor+0x20>)
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr
 8009ffc:	200000d0 	.word	0x200000d0

0800a000 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	4603      	mov	r3, r0
 800a008:	6039      	str	r1, [r7, #0]
 800a00a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	2204      	movs	r2, #4
 800a010:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a012:	4b03      	ldr	r3, [pc, #12]	; (800a020 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a014:	4618      	mov	r0, r3
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr
 800a020:	200000e4 	.word	0x200000e4

0800a024 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	4603      	mov	r3, r0
 800a02c:	6039      	str	r1, [r7, #0]
 800a02e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a030:	79fb      	ldrb	r3, [r7, #7]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d105      	bne.n	800a042 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a036:	683a      	ldr	r2, [r7, #0]
 800a038:	4907      	ldr	r1, [pc, #28]	; (800a058 <USBD_FS_ProductStrDescriptor+0x34>)
 800a03a:	4808      	ldr	r0, [pc, #32]	; (800a05c <USBD_FS_ProductStrDescriptor+0x38>)
 800a03c:	f7ff fde4 	bl	8009c08 <USBD_GetString>
 800a040:	e004      	b.n	800a04c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	4904      	ldr	r1, [pc, #16]	; (800a058 <USBD_FS_ProductStrDescriptor+0x34>)
 800a046:	4805      	ldr	r0, [pc, #20]	; (800a05c <USBD_FS_ProductStrDescriptor+0x38>)
 800a048:	f7ff fdde 	bl	8009c08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a04c:	4b02      	ldr	r3, [pc, #8]	; (800a058 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3708      	adds	r7, #8
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	200017f0 	.word	0x200017f0
 800a05c:	0800da8c 	.word	0x0800da8c

0800a060 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	4603      	mov	r3, r0
 800a068:	6039      	str	r1, [r7, #0]
 800a06a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a06c:	683a      	ldr	r2, [r7, #0]
 800a06e:	4904      	ldr	r1, [pc, #16]	; (800a080 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a070:	4804      	ldr	r0, [pc, #16]	; (800a084 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a072:	f7ff fdc9 	bl	8009c08 <USBD_GetString>
  return USBD_StrDesc;
 800a076:	4b02      	ldr	r3, [pc, #8]	; (800a080 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	200017f0 	.word	0x200017f0
 800a084:	0800daa4 	.word	0x0800daa4

0800a088 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	4603      	mov	r3, r0
 800a090:	6039      	str	r1, [r7, #0]
 800a092:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	221a      	movs	r2, #26
 800a098:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a09a:	f000 f843 	bl	800a124 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a09e:	4b02      	ldr	r3, [pc, #8]	; (800a0a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	200000e8 	.word	0x200000e8

0800a0ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	6039      	str	r1, [r7, #0]
 800a0b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a0b8:	79fb      	ldrb	r3, [r7, #7]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d105      	bne.n	800a0ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a0be:	683a      	ldr	r2, [r7, #0]
 800a0c0:	4907      	ldr	r1, [pc, #28]	; (800a0e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0c2:	4808      	ldr	r0, [pc, #32]	; (800a0e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0c4:	f7ff fda0 	bl	8009c08 <USBD_GetString>
 800a0c8:	e004      	b.n	800a0d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a0ca:	683a      	ldr	r2, [r7, #0]
 800a0cc:	4904      	ldr	r1, [pc, #16]	; (800a0e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0ce:	4805      	ldr	r0, [pc, #20]	; (800a0e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0d0:	f7ff fd9a 	bl	8009c08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0d4:	4b02      	ldr	r3, [pc, #8]	; (800a0e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	200017f0 	.word	0x200017f0
 800a0e4:	0800dab8 	.word	0x0800dab8

0800a0e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	6039      	str	r1, [r7, #0]
 800a0f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a0f4:	79fb      	ldrb	r3, [r7, #7]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d105      	bne.n	800a106 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a0fa:	683a      	ldr	r2, [r7, #0]
 800a0fc:	4907      	ldr	r1, [pc, #28]	; (800a11c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a0fe:	4808      	ldr	r0, [pc, #32]	; (800a120 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a100:	f7ff fd82 	bl	8009c08 <USBD_GetString>
 800a104:	e004      	b.n	800a110 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a106:	683a      	ldr	r2, [r7, #0]
 800a108:	4904      	ldr	r1, [pc, #16]	; (800a11c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a10a:	4805      	ldr	r0, [pc, #20]	; (800a120 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a10c:	f7ff fd7c 	bl	8009c08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a110:	4b02      	ldr	r3, [pc, #8]	; (800a11c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a112:	4618      	mov	r0, r3
 800a114:	3708      	adds	r7, #8
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	200017f0 	.word	0x200017f0
 800a120:	0800dac4 	.word	0x0800dac4

0800a124 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a12a:	4b0f      	ldr	r3, [pc, #60]	; (800a168 <Get_SerialNum+0x44>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a130:	4b0e      	ldr	r3, [pc, #56]	; (800a16c <Get_SerialNum+0x48>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a136:	4b0e      	ldr	r3, [pc, #56]	; (800a170 <Get_SerialNum+0x4c>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4413      	add	r3, r2
 800a142:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d009      	beq.n	800a15e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a14a:	2208      	movs	r2, #8
 800a14c:	4909      	ldr	r1, [pc, #36]	; (800a174 <Get_SerialNum+0x50>)
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f000 f814 	bl	800a17c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a154:	2204      	movs	r2, #4
 800a156:	4908      	ldr	r1, [pc, #32]	; (800a178 <Get_SerialNum+0x54>)
 800a158:	68b8      	ldr	r0, [r7, #8]
 800a15a:	f000 f80f 	bl	800a17c <IntToUnicode>
  }
}
 800a15e:	bf00      	nop
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	1fff7a10 	.word	0x1fff7a10
 800a16c:	1fff7a14 	.word	0x1fff7a14
 800a170:	1fff7a18 	.word	0x1fff7a18
 800a174:	200000ea 	.word	0x200000ea
 800a178:	200000fa 	.word	0x200000fa

0800a17c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b087      	sub	sp, #28
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	4613      	mov	r3, r2
 800a188:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a18a:	2300      	movs	r3, #0
 800a18c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a18e:	2300      	movs	r3, #0
 800a190:	75fb      	strb	r3, [r7, #23]
 800a192:	e027      	b.n	800a1e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	0f1b      	lsrs	r3, r3, #28
 800a198:	2b09      	cmp	r3, #9
 800a19a:	d80b      	bhi.n	800a1b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	0f1b      	lsrs	r3, r3, #28
 800a1a0:	b2da      	uxtb	r2, r3
 800a1a2:	7dfb      	ldrb	r3, [r7, #23]
 800a1a4:	005b      	lsls	r3, r3, #1
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	440b      	add	r3, r1
 800a1ac:	3230      	adds	r2, #48	; 0x30
 800a1ae:	b2d2      	uxtb	r2, r2
 800a1b0:	701a      	strb	r2, [r3, #0]
 800a1b2:	e00a      	b.n	800a1ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	0f1b      	lsrs	r3, r3, #28
 800a1b8:	b2da      	uxtb	r2, r3
 800a1ba:	7dfb      	ldrb	r3, [r7, #23]
 800a1bc:	005b      	lsls	r3, r3, #1
 800a1be:	4619      	mov	r1, r3
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	440b      	add	r3, r1
 800a1c4:	3237      	adds	r2, #55	; 0x37
 800a1c6:	b2d2      	uxtb	r2, r2
 800a1c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	011b      	lsls	r3, r3, #4
 800a1ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a1d0:	7dfb      	ldrb	r3, [r7, #23]
 800a1d2:	005b      	lsls	r3, r3, #1
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	68ba      	ldr	r2, [r7, #8]
 800a1d8:	4413      	add	r3, r2
 800a1da:	2200      	movs	r2, #0
 800a1dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a1de:	7dfb      	ldrb	r3, [r7, #23]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	75fb      	strb	r3, [r7, #23]
 800a1e4:	7dfa      	ldrb	r2, [r7, #23]
 800a1e6:	79fb      	ldrb	r3, [r7, #7]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d3d3      	bcc.n	800a194 <IntToUnicode+0x18>
  }
}
 800a1ec:	bf00      	nop
 800a1ee:	bf00      	nop
 800a1f0:	371c      	adds	r7, #28
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr
	...

0800a1fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b08a      	sub	sp, #40	; 0x28
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a204:	f107 0314 	add.w	r3, r7, #20
 800a208:	2200      	movs	r2, #0
 800a20a:	601a      	str	r2, [r3, #0]
 800a20c:	605a      	str	r2, [r3, #4]
 800a20e:	609a      	str	r2, [r3, #8]
 800a210:	60da      	str	r2, [r3, #12]
 800a212:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a21c:	d13a      	bne.n	800a294 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a21e:	2300      	movs	r3, #0
 800a220:	613b      	str	r3, [r7, #16]
 800a222:	4b1e      	ldr	r3, [pc, #120]	; (800a29c <HAL_PCD_MspInit+0xa0>)
 800a224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a226:	4a1d      	ldr	r2, [pc, #116]	; (800a29c <HAL_PCD_MspInit+0xa0>)
 800a228:	f043 0301 	orr.w	r3, r3, #1
 800a22c:	6313      	str	r3, [r2, #48]	; 0x30
 800a22e:	4b1b      	ldr	r3, [pc, #108]	; (800a29c <HAL_PCD_MspInit+0xa0>)
 800a230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a232:	f003 0301 	and.w	r3, r3, #1
 800a236:	613b      	str	r3, [r7, #16]
 800a238:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a23a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a23e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a240:	2302      	movs	r3, #2
 800a242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a244:	2300      	movs	r3, #0
 800a246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a248:	2303      	movs	r3, #3
 800a24a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a24c:	230a      	movs	r3, #10
 800a24e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a250:	f107 0314 	add.w	r3, r7, #20
 800a254:	4619      	mov	r1, r3
 800a256:	4812      	ldr	r0, [pc, #72]	; (800a2a0 <HAL_PCD_MspInit+0xa4>)
 800a258:	f7f7 ffe2 	bl	8002220 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a25c:	4b0f      	ldr	r3, [pc, #60]	; (800a29c <HAL_PCD_MspInit+0xa0>)
 800a25e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a260:	4a0e      	ldr	r2, [pc, #56]	; (800a29c <HAL_PCD_MspInit+0xa0>)
 800a262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a266:	6353      	str	r3, [r2, #52]	; 0x34
 800a268:	2300      	movs	r3, #0
 800a26a:	60fb      	str	r3, [r7, #12]
 800a26c:	4b0b      	ldr	r3, [pc, #44]	; (800a29c <HAL_PCD_MspInit+0xa0>)
 800a26e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a270:	4a0a      	ldr	r2, [pc, #40]	; (800a29c <HAL_PCD_MspInit+0xa0>)
 800a272:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a276:	6453      	str	r3, [r2, #68]	; 0x44
 800a278:	4b08      	ldr	r3, [pc, #32]	; (800a29c <HAL_PCD_MspInit+0xa0>)
 800a27a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a27c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a280:	60fb      	str	r3, [r7, #12]
 800a282:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a284:	2200      	movs	r2, #0
 800a286:	2100      	movs	r1, #0
 800a288:	2043      	movs	r0, #67	; 0x43
 800a28a:	f7f7 ff92 	bl	80021b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a28e:	2043      	movs	r0, #67	; 0x43
 800a290:	f7f7 ffab 	bl	80021ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a294:	bf00      	nop
 800a296:	3728      	adds	r7, #40	; 0x28
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	40023800 	.word	0x40023800
 800a2a0:	40020000 	.word	0x40020000

0800a2a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	4610      	mov	r0, r2
 800a2bc:	f7fe fb45 	bl	800894a <USBD_LL_SetupStage>
}
 800a2c0:	bf00      	nop
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a2da:	78fa      	ldrb	r2, [r7, #3]
 800a2dc:	6879      	ldr	r1, [r7, #4]
 800a2de:	4613      	mov	r3, r2
 800a2e0:	00db      	lsls	r3, r3, #3
 800a2e2:	4413      	add	r3, r2
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	440b      	add	r3, r1
 800a2e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	78fb      	ldrb	r3, [r7, #3]
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	f7fe fb7f 	bl	80089f4 <USBD_LL_DataOutStage>
}
 800a2f6:	bf00      	nop
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b082      	sub	sp, #8
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	460b      	mov	r3, r1
 800a308:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a310:	78fa      	ldrb	r2, [r7, #3]
 800a312:	6879      	ldr	r1, [r7, #4]
 800a314:	4613      	mov	r3, r2
 800a316:	00db      	lsls	r3, r3, #3
 800a318:	4413      	add	r3, r2
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	440b      	add	r3, r1
 800a31e:	334c      	adds	r3, #76	; 0x4c
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	78fb      	ldrb	r3, [r7, #3]
 800a324:	4619      	mov	r1, r3
 800a326:	f7fe fc18 	bl	8008b5a <USBD_LL_DataInStage>
}
 800a32a:	bf00      	nop
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b082      	sub	sp, #8
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a340:	4618      	mov	r0, r3
 800a342:	f7fe fd4c 	bl	8008dde <USBD_LL_SOF>
}
 800a346:	bf00      	nop
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b084      	sub	sp, #16
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a356:	2301      	movs	r3, #1
 800a358:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d102      	bne.n	800a368 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a362:	2300      	movs	r3, #0
 800a364:	73fb      	strb	r3, [r7, #15]
 800a366:	e008      	b.n	800a37a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	d102      	bne.n	800a376 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a370:	2301      	movs	r3, #1
 800a372:	73fb      	strb	r3, [r7, #15]
 800a374:	e001      	b.n	800a37a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a376:	f7f7 fa2d 	bl	80017d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a380:	7bfa      	ldrb	r2, [r7, #15]
 800a382:	4611      	mov	r1, r2
 800a384:	4618      	mov	r0, r3
 800a386:	f7fe fcec 	bl	8008d62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a390:	4618      	mov	r0, r3
 800a392:	f7fe fc94 	bl	8008cbe <USBD_LL_Reset>
}
 800a396:	bf00      	nop
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
	...

0800a3a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fe fce7 	bl	8008d82 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	6812      	ldr	r2, [r2, #0]
 800a3c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a3c6:	f043 0301 	orr.w	r3, r3, #1
 800a3ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a1b      	ldr	r3, [r3, #32]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d005      	beq.n	800a3e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a3d4:	4b04      	ldr	r3, [pc, #16]	; (800a3e8 <HAL_PCD_SuspendCallback+0x48>)
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	4a03      	ldr	r2, [pc, #12]	; (800a3e8 <HAL_PCD_SuspendCallback+0x48>)
 800a3da:	f043 0306 	orr.w	r3, r3, #6
 800a3de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a3e0:	bf00      	nop
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	e000ed00 	.word	0xe000ed00

0800a3ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7fe fcd7 	bl	8008dae <USBD_LL_Resume>
}
 800a400:	bf00      	nop
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	460b      	mov	r3, r1
 800a412:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a41a:	78fa      	ldrb	r2, [r7, #3]
 800a41c:	4611      	mov	r1, r2
 800a41e:	4618      	mov	r0, r3
 800a420:	f7fe fd2f 	bl	8008e82 <USBD_LL_IsoOUTIncomplete>
}
 800a424:	bf00      	nop
 800a426:	3708      	adds	r7, #8
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	460b      	mov	r3, r1
 800a436:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a43e:	78fa      	ldrb	r2, [r7, #3]
 800a440:	4611      	mov	r1, r2
 800a442:	4618      	mov	r0, r3
 800a444:	f7fe fceb 	bl	8008e1e <USBD_LL_IsoINIncomplete>
}
 800a448:	bf00      	nop
 800a44a:	3708      	adds	r7, #8
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fe fd41 	bl	8008ee6 <USBD_LL_DevConnected>
}
 800a464:	bf00      	nop
 800a466:	3708      	adds	r7, #8
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7fe fd3e 	bl	8008efc <USBD_LL_DevDisconnected>
}
 800a480:	bf00      	nop
 800a482:	3708      	adds	r7, #8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d13c      	bne.n	800a512 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a498:	4a20      	ldr	r2, [pc, #128]	; (800a51c <USBD_LL_Init+0x94>)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4a1e      	ldr	r2, [pc, #120]	; (800a51c <USBD_LL_Init+0x94>)
 800a4a4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a4a8:	4b1c      	ldr	r3, [pc, #112]	; (800a51c <USBD_LL_Init+0x94>)
 800a4aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a4ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a4b0:	4b1a      	ldr	r3, [pc, #104]	; (800a51c <USBD_LL_Init+0x94>)
 800a4b2:	2204      	movs	r2, #4
 800a4b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a4b6:	4b19      	ldr	r3, [pc, #100]	; (800a51c <USBD_LL_Init+0x94>)
 800a4b8:	2202      	movs	r2, #2
 800a4ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a4bc:	4b17      	ldr	r3, [pc, #92]	; (800a51c <USBD_LL_Init+0x94>)
 800a4be:	2200      	movs	r2, #0
 800a4c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a4c2:	4b16      	ldr	r3, [pc, #88]	; (800a51c <USBD_LL_Init+0x94>)
 800a4c4:	2202      	movs	r2, #2
 800a4c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a4c8:	4b14      	ldr	r3, [pc, #80]	; (800a51c <USBD_LL_Init+0x94>)
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a4ce:	4b13      	ldr	r3, [pc, #76]	; (800a51c <USBD_LL_Init+0x94>)
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a4d4:	4b11      	ldr	r3, [pc, #68]	; (800a51c <USBD_LL_Init+0x94>)
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a4da:	4b10      	ldr	r3, [pc, #64]	; (800a51c <USBD_LL_Init+0x94>)
 800a4dc:	2200      	movs	r2, #0
 800a4de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a4e0:	4b0e      	ldr	r3, [pc, #56]	; (800a51c <USBD_LL_Init+0x94>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a4e6:	480d      	ldr	r0, [pc, #52]	; (800a51c <USBD_LL_Init+0x94>)
 800a4e8:	f7f9 f80f 	bl	800350a <HAL_PCD_Init>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d001      	beq.n	800a4f6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a4f2:	f7f7 f96f 	bl	80017d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a4f6:	2180      	movs	r1, #128	; 0x80
 800a4f8:	4808      	ldr	r0, [pc, #32]	; (800a51c <USBD_LL_Init+0x94>)
 800a4fa:	f7fa fa66 	bl	80049ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a4fe:	2240      	movs	r2, #64	; 0x40
 800a500:	2100      	movs	r1, #0
 800a502:	4806      	ldr	r0, [pc, #24]	; (800a51c <USBD_LL_Init+0x94>)
 800a504:	f7fa fa1a 	bl	800493c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a508:	2280      	movs	r2, #128	; 0x80
 800a50a:	2101      	movs	r1, #1
 800a50c:	4803      	ldr	r0, [pc, #12]	; (800a51c <USBD_LL_Init+0x94>)
 800a50e:	f7fa fa15 	bl	800493c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	3708      	adds	r7, #8
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	200019f0 	.word	0x200019f0

0800a520 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a528:	2300      	movs	r3, #0
 800a52a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a52c:	2300      	movs	r3, #0
 800a52e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a536:	4618      	mov	r0, r3
 800a538:	f7f9 f904 	bl	8003744 <HAL_PCD_Start>
 800a53c:	4603      	mov	r3, r0
 800a53e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a540:	7bfb      	ldrb	r3, [r7, #15]
 800a542:	4618      	mov	r0, r3
 800a544:	f000 f942 	bl	800a7cc <USBD_Get_USB_Status>
 800a548:	4603      	mov	r3, r0
 800a54a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a54c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b084      	sub	sp, #16
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	4608      	mov	r0, r1
 800a560:	4611      	mov	r1, r2
 800a562:	461a      	mov	r2, r3
 800a564:	4603      	mov	r3, r0
 800a566:	70fb      	strb	r3, [r7, #3]
 800a568:	460b      	mov	r3, r1
 800a56a:	70bb      	strb	r3, [r7, #2]
 800a56c:	4613      	mov	r3, r2
 800a56e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a570:	2300      	movs	r3, #0
 800a572:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a574:	2300      	movs	r3, #0
 800a576:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a57e:	78bb      	ldrb	r3, [r7, #2]
 800a580:	883a      	ldrh	r2, [r7, #0]
 800a582:	78f9      	ldrb	r1, [r7, #3]
 800a584:	f7f9 fdd5 	bl	8004132 <HAL_PCD_EP_Open>
 800a588:	4603      	mov	r3, r0
 800a58a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a58c:	7bfb      	ldrb	r3, [r7, #15]
 800a58e:	4618      	mov	r0, r3
 800a590:	f000 f91c 	bl	800a7cc <USBD_Get_USB_Status>
 800a594:	4603      	mov	r3, r0
 800a596:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a598:	7bbb      	ldrb	r3, [r7, #14]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b084      	sub	sp, #16
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a5bc:	78fa      	ldrb	r2, [r7, #3]
 800a5be:	4611      	mov	r1, r2
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7f9 fe1e 	bl	8004202 <HAL_PCD_EP_Close>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5ca:	7bfb      	ldrb	r3, [r7, #15]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f000 f8fd 	bl	800a7cc <USBD_Get_USB_Status>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3710      	adds	r7, #16
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a5fa:	78fa      	ldrb	r2, [r7, #3]
 800a5fc:	4611      	mov	r1, r2
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7f9 fef6 	bl	80043f0 <HAL_PCD_EP_SetStall>
 800a604:	4603      	mov	r3, r0
 800a606:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a608:	7bfb      	ldrb	r3, [r7, #15]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 f8de 	bl	800a7cc <USBD_Get_USB_Status>
 800a610:	4603      	mov	r3, r0
 800a612:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a614:	7bbb      	ldrb	r3, [r7, #14]
}
 800a616:	4618      	mov	r0, r3
 800a618:	3710      	adds	r7, #16
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b084      	sub	sp, #16
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
 800a626:	460b      	mov	r3, r1
 800a628:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a62a:	2300      	movs	r3, #0
 800a62c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a62e:	2300      	movs	r3, #0
 800a630:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a638:	78fa      	ldrb	r2, [r7, #3]
 800a63a:	4611      	mov	r1, r2
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7f9 ff3b 	bl	80044b8 <HAL_PCD_EP_ClrStall>
 800a642:	4603      	mov	r3, r0
 800a644:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a646:	7bfb      	ldrb	r3, [r7, #15]
 800a648:	4618      	mov	r0, r3
 800a64a:	f000 f8bf 	bl	800a7cc <USBD_Get_USB_Status>
 800a64e:	4603      	mov	r3, r0
 800a650:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a652:	7bbb      	ldrb	r3, [r7, #14]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	460b      	mov	r3, r1
 800a666:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a66e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a670:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a674:	2b00      	cmp	r3, #0
 800a676:	da0b      	bge.n	800a690 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a678:	78fb      	ldrb	r3, [r7, #3]
 800a67a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a67e:	68f9      	ldr	r1, [r7, #12]
 800a680:	4613      	mov	r3, r2
 800a682:	00db      	lsls	r3, r3, #3
 800a684:	4413      	add	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	440b      	add	r3, r1
 800a68a:	333e      	adds	r3, #62	; 0x3e
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	e00b      	b.n	800a6a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a690:	78fb      	ldrb	r3, [r7, #3]
 800a692:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a696:	68f9      	ldr	r1, [r7, #12]
 800a698:	4613      	mov	r3, r2
 800a69a:	00db      	lsls	r3, r3, #3
 800a69c:	4413      	add	r3, r2
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	440b      	add	r3, r1
 800a6a2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a6a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3714      	adds	r7, #20
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	460b      	mov	r3, r1
 800a6be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a6ce:	78fa      	ldrb	r2, [r7, #3]
 800a6d0:	4611      	mov	r1, r2
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7f9 fd08 	bl	80040e8 <HAL_PCD_SetAddress>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6dc:	7bfb      	ldrb	r3, [r7, #15]
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f000 f874 	bl	800a7cc <USBD_Get_USB_Status>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b086      	sub	sp, #24
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	60f8      	str	r0, [r7, #12]
 800a6fa:	607a      	str	r2, [r7, #4]
 800a6fc:	603b      	str	r3, [r7, #0]
 800a6fe:	460b      	mov	r3, r1
 800a700:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a702:	2300      	movs	r3, #0
 800a704:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a706:	2300      	movs	r3, #0
 800a708:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a710:	7af9      	ldrb	r1, [r7, #11]
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	f7f9 fe21 	bl	800435c <HAL_PCD_EP_Transmit>
 800a71a:	4603      	mov	r3, r0
 800a71c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a71e:	7dfb      	ldrb	r3, [r7, #23]
 800a720:	4618      	mov	r0, r3
 800a722:	f000 f853 	bl	800a7cc <USBD_Get_USB_Status>
 800a726:	4603      	mov	r3, r0
 800a728:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a72a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3718      	adds	r7, #24
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b086      	sub	sp, #24
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	607a      	str	r2, [r7, #4]
 800a73e:	603b      	str	r3, [r7, #0]
 800a740:	460b      	mov	r3, r1
 800a742:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a744:	2300      	movs	r3, #0
 800a746:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a748:	2300      	movs	r3, #0
 800a74a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a752:	7af9      	ldrb	r1, [r7, #11]
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	f7f9 fd9d 	bl	8004296 <HAL_PCD_EP_Receive>
 800a75c:	4603      	mov	r3, r0
 800a75e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a760:	7dfb      	ldrb	r3, [r7, #23]
 800a762:	4618      	mov	r0, r3
 800a764:	f000 f832 	bl	800a7cc <USBD_Get_USB_Status>
 800a768:	4603      	mov	r3, r0
 800a76a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a76c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3718      	adds	r7, #24
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b082      	sub	sp, #8
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
 800a77e:	460b      	mov	r3, r1
 800a780:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a788:	78fa      	ldrb	r2, [r7, #3]
 800a78a:	4611      	mov	r1, r2
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7f9 fdcd 	bl	800432c <HAL_PCD_EP_GetRxCount>
 800a792:	4603      	mov	r3, r0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a7a4:	4b03      	ldr	r3, [pc, #12]	; (800a7b4 <USBD_static_malloc+0x18>)
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	370c      	adds	r7, #12
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	20001efc 	.word	0x20001efc

0800a7b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]

}
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a7da:	79fb      	ldrb	r3, [r7, #7]
 800a7dc:	2b03      	cmp	r3, #3
 800a7de:	d817      	bhi.n	800a810 <USBD_Get_USB_Status+0x44>
 800a7e0:	a201      	add	r2, pc, #4	; (adr r2, 800a7e8 <USBD_Get_USB_Status+0x1c>)
 800a7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e6:	bf00      	nop
 800a7e8:	0800a7f9 	.word	0x0800a7f9
 800a7ec:	0800a7ff 	.word	0x0800a7ff
 800a7f0:	0800a805 	.word	0x0800a805
 800a7f4:	0800a80b 	.word	0x0800a80b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a7fc:	e00b      	b.n	800a816 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a7fe:	2303      	movs	r3, #3
 800a800:	73fb      	strb	r3, [r7, #15]
    break;
 800a802:	e008      	b.n	800a816 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a804:	2301      	movs	r3, #1
 800a806:	73fb      	strb	r3, [r7, #15]
    break;
 800a808:	e005      	b.n	800a816 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a80a:	2303      	movs	r3, #3
 800a80c:	73fb      	strb	r3, [r7, #15]
    break;
 800a80e:	e002      	b.n	800a816 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a810:	2303      	movs	r3, #3
 800a812:	73fb      	strb	r3, [r7, #15]
    break;
 800a814:	bf00      	nop
  }
  return usb_status;
 800a816:	7bfb      	ldrb	r3, [r7, #15]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3714      	adds	r7, #20
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <__errno>:
 800a824:	4b01      	ldr	r3, [pc, #4]	; (800a82c <__errno+0x8>)
 800a826:	6818      	ldr	r0, [r3, #0]
 800a828:	4770      	bx	lr
 800a82a:	bf00      	nop
 800a82c:	20000104 	.word	0x20000104

0800a830 <__libc_init_array>:
 800a830:	b570      	push	{r4, r5, r6, lr}
 800a832:	4d0d      	ldr	r5, [pc, #52]	; (800a868 <__libc_init_array+0x38>)
 800a834:	4c0d      	ldr	r4, [pc, #52]	; (800a86c <__libc_init_array+0x3c>)
 800a836:	1b64      	subs	r4, r4, r5
 800a838:	10a4      	asrs	r4, r4, #2
 800a83a:	2600      	movs	r6, #0
 800a83c:	42a6      	cmp	r6, r4
 800a83e:	d109      	bne.n	800a854 <__libc_init_array+0x24>
 800a840:	4d0b      	ldr	r5, [pc, #44]	; (800a870 <__libc_init_array+0x40>)
 800a842:	4c0c      	ldr	r4, [pc, #48]	; (800a874 <__libc_init_array+0x44>)
 800a844:	f003 f910 	bl	800da68 <_init>
 800a848:	1b64      	subs	r4, r4, r5
 800a84a:	10a4      	asrs	r4, r4, #2
 800a84c:	2600      	movs	r6, #0
 800a84e:	42a6      	cmp	r6, r4
 800a850:	d105      	bne.n	800a85e <__libc_init_array+0x2e>
 800a852:	bd70      	pop	{r4, r5, r6, pc}
 800a854:	f855 3b04 	ldr.w	r3, [r5], #4
 800a858:	4798      	blx	r3
 800a85a:	3601      	adds	r6, #1
 800a85c:	e7ee      	b.n	800a83c <__libc_init_array+0xc>
 800a85e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a862:	4798      	blx	r3
 800a864:	3601      	adds	r6, #1
 800a866:	e7f2      	b.n	800a84e <__libc_init_array+0x1e>
 800a868:	0800deec 	.word	0x0800deec
 800a86c:	0800deec 	.word	0x0800deec
 800a870:	0800deec 	.word	0x0800deec
 800a874:	0800def0 	.word	0x0800def0

0800a878 <memset>:
 800a878:	4402      	add	r2, r0
 800a87a:	4603      	mov	r3, r0
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d100      	bne.n	800a882 <memset+0xa>
 800a880:	4770      	bx	lr
 800a882:	f803 1b01 	strb.w	r1, [r3], #1
 800a886:	e7f9      	b.n	800a87c <memset+0x4>

0800a888 <__cvt>:
 800a888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a88c:	ec55 4b10 	vmov	r4, r5, d0
 800a890:	2d00      	cmp	r5, #0
 800a892:	460e      	mov	r6, r1
 800a894:	4619      	mov	r1, r3
 800a896:	462b      	mov	r3, r5
 800a898:	bfbb      	ittet	lt
 800a89a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a89e:	461d      	movlt	r5, r3
 800a8a0:	2300      	movge	r3, #0
 800a8a2:	232d      	movlt	r3, #45	; 0x2d
 800a8a4:	700b      	strb	r3, [r1, #0]
 800a8a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a8ac:	4691      	mov	r9, r2
 800a8ae:	f023 0820 	bic.w	r8, r3, #32
 800a8b2:	bfbc      	itt	lt
 800a8b4:	4622      	movlt	r2, r4
 800a8b6:	4614      	movlt	r4, r2
 800a8b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8bc:	d005      	beq.n	800a8ca <__cvt+0x42>
 800a8be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a8c2:	d100      	bne.n	800a8c6 <__cvt+0x3e>
 800a8c4:	3601      	adds	r6, #1
 800a8c6:	2102      	movs	r1, #2
 800a8c8:	e000      	b.n	800a8cc <__cvt+0x44>
 800a8ca:	2103      	movs	r1, #3
 800a8cc:	ab03      	add	r3, sp, #12
 800a8ce:	9301      	str	r3, [sp, #4]
 800a8d0:	ab02      	add	r3, sp, #8
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	ec45 4b10 	vmov	d0, r4, r5
 800a8d8:	4653      	mov	r3, sl
 800a8da:	4632      	mov	r2, r6
 800a8dc:	f000 fd00 	bl	800b2e0 <_dtoa_r>
 800a8e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a8e4:	4607      	mov	r7, r0
 800a8e6:	d102      	bne.n	800a8ee <__cvt+0x66>
 800a8e8:	f019 0f01 	tst.w	r9, #1
 800a8ec:	d022      	beq.n	800a934 <__cvt+0xac>
 800a8ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8f2:	eb07 0906 	add.w	r9, r7, r6
 800a8f6:	d110      	bne.n	800a91a <__cvt+0x92>
 800a8f8:	783b      	ldrb	r3, [r7, #0]
 800a8fa:	2b30      	cmp	r3, #48	; 0x30
 800a8fc:	d10a      	bne.n	800a914 <__cvt+0x8c>
 800a8fe:	2200      	movs	r2, #0
 800a900:	2300      	movs	r3, #0
 800a902:	4620      	mov	r0, r4
 800a904:	4629      	mov	r1, r5
 800a906:	f7f6 f8df 	bl	8000ac8 <__aeabi_dcmpeq>
 800a90a:	b918      	cbnz	r0, 800a914 <__cvt+0x8c>
 800a90c:	f1c6 0601 	rsb	r6, r6, #1
 800a910:	f8ca 6000 	str.w	r6, [sl]
 800a914:	f8da 3000 	ldr.w	r3, [sl]
 800a918:	4499      	add	r9, r3
 800a91a:	2200      	movs	r2, #0
 800a91c:	2300      	movs	r3, #0
 800a91e:	4620      	mov	r0, r4
 800a920:	4629      	mov	r1, r5
 800a922:	f7f6 f8d1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a926:	b108      	cbz	r0, 800a92c <__cvt+0xa4>
 800a928:	f8cd 900c 	str.w	r9, [sp, #12]
 800a92c:	2230      	movs	r2, #48	; 0x30
 800a92e:	9b03      	ldr	r3, [sp, #12]
 800a930:	454b      	cmp	r3, r9
 800a932:	d307      	bcc.n	800a944 <__cvt+0xbc>
 800a934:	9b03      	ldr	r3, [sp, #12]
 800a936:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a938:	1bdb      	subs	r3, r3, r7
 800a93a:	4638      	mov	r0, r7
 800a93c:	6013      	str	r3, [r2, #0]
 800a93e:	b004      	add	sp, #16
 800a940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a944:	1c59      	adds	r1, r3, #1
 800a946:	9103      	str	r1, [sp, #12]
 800a948:	701a      	strb	r2, [r3, #0]
 800a94a:	e7f0      	b.n	800a92e <__cvt+0xa6>

0800a94c <__exponent>:
 800a94c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a94e:	4603      	mov	r3, r0
 800a950:	2900      	cmp	r1, #0
 800a952:	bfb8      	it	lt
 800a954:	4249      	neglt	r1, r1
 800a956:	f803 2b02 	strb.w	r2, [r3], #2
 800a95a:	bfb4      	ite	lt
 800a95c:	222d      	movlt	r2, #45	; 0x2d
 800a95e:	222b      	movge	r2, #43	; 0x2b
 800a960:	2909      	cmp	r1, #9
 800a962:	7042      	strb	r2, [r0, #1]
 800a964:	dd2a      	ble.n	800a9bc <__exponent+0x70>
 800a966:	f10d 0407 	add.w	r4, sp, #7
 800a96a:	46a4      	mov	ip, r4
 800a96c:	270a      	movs	r7, #10
 800a96e:	46a6      	mov	lr, r4
 800a970:	460a      	mov	r2, r1
 800a972:	fb91 f6f7 	sdiv	r6, r1, r7
 800a976:	fb07 1516 	mls	r5, r7, r6, r1
 800a97a:	3530      	adds	r5, #48	; 0x30
 800a97c:	2a63      	cmp	r2, #99	; 0x63
 800a97e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a982:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a986:	4631      	mov	r1, r6
 800a988:	dcf1      	bgt.n	800a96e <__exponent+0x22>
 800a98a:	3130      	adds	r1, #48	; 0x30
 800a98c:	f1ae 0502 	sub.w	r5, lr, #2
 800a990:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a994:	1c44      	adds	r4, r0, #1
 800a996:	4629      	mov	r1, r5
 800a998:	4561      	cmp	r1, ip
 800a99a:	d30a      	bcc.n	800a9b2 <__exponent+0x66>
 800a99c:	f10d 0209 	add.w	r2, sp, #9
 800a9a0:	eba2 020e 	sub.w	r2, r2, lr
 800a9a4:	4565      	cmp	r5, ip
 800a9a6:	bf88      	it	hi
 800a9a8:	2200      	movhi	r2, #0
 800a9aa:	4413      	add	r3, r2
 800a9ac:	1a18      	subs	r0, r3, r0
 800a9ae:	b003      	add	sp, #12
 800a9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a9ba:	e7ed      	b.n	800a998 <__exponent+0x4c>
 800a9bc:	2330      	movs	r3, #48	; 0x30
 800a9be:	3130      	adds	r1, #48	; 0x30
 800a9c0:	7083      	strb	r3, [r0, #2]
 800a9c2:	70c1      	strb	r1, [r0, #3]
 800a9c4:	1d03      	adds	r3, r0, #4
 800a9c6:	e7f1      	b.n	800a9ac <__exponent+0x60>

0800a9c8 <_printf_float>:
 800a9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9cc:	ed2d 8b02 	vpush	{d8}
 800a9d0:	b08d      	sub	sp, #52	; 0x34
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a9d8:	4616      	mov	r6, r2
 800a9da:	461f      	mov	r7, r3
 800a9dc:	4605      	mov	r5, r0
 800a9de:	f001 fa6d 	bl	800bebc <_localeconv_r>
 800a9e2:	f8d0 a000 	ldr.w	sl, [r0]
 800a9e6:	4650      	mov	r0, sl
 800a9e8:	f7f5 fbf2 	bl	80001d0 <strlen>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	930a      	str	r3, [sp, #40]	; 0x28
 800a9f0:	6823      	ldr	r3, [r4, #0]
 800a9f2:	9305      	str	r3, [sp, #20]
 800a9f4:	f8d8 3000 	ldr.w	r3, [r8]
 800a9f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a9fc:	3307      	adds	r3, #7
 800a9fe:	f023 0307 	bic.w	r3, r3, #7
 800aa02:	f103 0208 	add.w	r2, r3, #8
 800aa06:	f8c8 2000 	str.w	r2, [r8]
 800aa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aa12:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aa16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa1a:	9307      	str	r3, [sp, #28]
 800aa1c:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa20:	ee08 0a10 	vmov	s16, r0
 800aa24:	4b9f      	ldr	r3, [pc, #636]	; (800aca4 <_printf_float+0x2dc>)
 800aa26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa2a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa2e:	f7f6 f87d 	bl	8000b2c <__aeabi_dcmpun>
 800aa32:	bb88      	cbnz	r0, 800aa98 <_printf_float+0xd0>
 800aa34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa38:	4b9a      	ldr	r3, [pc, #616]	; (800aca4 <_printf_float+0x2dc>)
 800aa3a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa3e:	f7f6 f857 	bl	8000af0 <__aeabi_dcmple>
 800aa42:	bb48      	cbnz	r0, 800aa98 <_printf_float+0xd0>
 800aa44:	2200      	movs	r2, #0
 800aa46:	2300      	movs	r3, #0
 800aa48:	4640      	mov	r0, r8
 800aa4a:	4649      	mov	r1, r9
 800aa4c:	f7f6 f846 	bl	8000adc <__aeabi_dcmplt>
 800aa50:	b110      	cbz	r0, 800aa58 <_printf_float+0x90>
 800aa52:	232d      	movs	r3, #45	; 0x2d
 800aa54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa58:	4b93      	ldr	r3, [pc, #588]	; (800aca8 <_printf_float+0x2e0>)
 800aa5a:	4894      	ldr	r0, [pc, #592]	; (800acac <_printf_float+0x2e4>)
 800aa5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aa60:	bf94      	ite	ls
 800aa62:	4698      	movls	r8, r3
 800aa64:	4680      	movhi	r8, r0
 800aa66:	2303      	movs	r3, #3
 800aa68:	6123      	str	r3, [r4, #16]
 800aa6a:	9b05      	ldr	r3, [sp, #20]
 800aa6c:	f023 0204 	bic.w	r2, r3, #4
 800aa70:	6022      	str	r2, [r4, #0]
 800aa72:	f04f 0900 	mov.w	r9, #0
 800aa76:	9700      	str	r7, [sp, #0]
 800aa78:	4633      	mov	r3, r6
 800aa7a:	aa0b      	add	r2, sp, #44	; 0x2c
 800aa7c:	4621      	mov	r1, r4
 800aa7e:	4628      	mov	r0, r5
 800aa80:	f000 f9d8 	bl	800ae34 <_printf_common>
 800aa84:	3001      	adds	r0, #1
 800aa86:	f040 8090 	bne.w	800abaa <_printf_float+0x1e2>
 800aa8a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa8e:	b00d      	add	sp, #52	; 0x34
 800aa90:	ecbd 8b02 	vpop	{d8}
 800aa94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa98:	4642      	mov	r2, r8
 800aa9a:	464b      	mov	r3, r9
 800aa9c:	4640      	mov	r0, r8
 800aa9e:	4649      	mov	r1, r9
 800aaa0:	f7f6 f844 	bl	8000b2c <__aeabi_dcmpun>
 800aaa4:	b140      	cbz	r0, 800aab8 <_printf_float+0xf0>
 800aaa6:	464b      	mov	r3, r9
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	bfbc      	itt	lt
 800aaac:	232d      	movlt	r3, #45	; 0x2d
 800aaae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aab2:	487f      	ldr	r0, [pc, #508]	; (800acb0 <_printf_float+0x2e8>)
 800aab4:	4b7f      	ldr	r3, [pc, #508]	; (800acb4 <_printf_float+0x2ec>)
 800aab6:	e7d1      	b.n	800aa5c <_printf_float+0x94>
 800aab8:	6863      	ldr	r3, [r4, #4]
 800aaba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aabe:	9206      	str	r2, [sp, #24]
 800aac0:	1c5a      	adds	r2, r3, #1
 800aac2:	d13f      	bne.n	800ab44 <_printf_float+0x17c>
 800aac4:	2306      	movs	r3, #6
 800aac6:	6063      	str	r3, [r4, #4]
 800aac8:	9b05      	ldr	r3, [sp, #20]
 800aaca:	6861      	ldr	r1, [r4, #4]
 800aacc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aad0:	2300      	movs	r3, #0
 800aad2:	9303      	str	r3, [sp, #12]
 800aad4:	ab0a      	add	r3, sp, #40	; 0x28
 800aad6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aada:	ab09      	add	r3, sp, #36	; 0x24
 800aadc:	ec49 8b10 	vmov	d0, r8, r9
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	6022      	str	r2, [r4, #0]
 800aae4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aae8:	4628      	mov	r0, r5
 800aaea:	f7ff fecd 	bl	800a888 <__cvt>
 800aaee:	9b06      	ldr	r3, [sp, #24]
 800aaf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aaf2:	2b47      	cmp	r3, #71	; 0x47
 800aaf4:	4680      	mov	r8, r0
 800aaf6:	d108      	bne.n	800ab0a <_printf_float+0x142>
 800aaf8:	1cc8      	adds	r0, r1, #3
 800aafa:	db02      	blt.n	800ab02 <_printf_float+0x13a>
 800aafc:	6863      	ldr	r3, [r4, #4]
 800aafe:	4299      	cmp	r1, r3
 800ab00:	dd41      	ble.n	800ab86 <_printf_float+0x1be>
 800ab02:	f1ab 0b02 	sub.w	fp, fp, #2
 800ab06:	fa5f fb8b 	uxtb.w	fp, fp
 800ab0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab0e:	d820      	bhi.n	800ab52 <_printf_float+0x18a>
 800ab10:	3901      	subs	r1, #1
 800ab12:	465a      	mov	r2, fp
 800ab14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ab18:	9109      	str	r1, [sp, #36]	; 0x24
 800ab1a:	f7ff ff17 	bl	800a94c <__exponent>
 800ab1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab20:	1813      	adds	r3, r2, r0
 800ab22:	2a01      	cmp	r2, #1
 800ab24:	4681      	mov	r9, r0
 800ab26:	6123      	str	r3, [r4, #16]
 800ab28:	dc02      	bgt.n	800ab30 <_printf_float+0x168>
 800ab2a:	6822      	ldr	r2, [r4, #0]
 800ab2c:	07d2      	lsls	r2, r2, #31
 800ab2e:	d501      	bpl.n	800ab34 <_printf_float+0x16c>
 800ab30:	3301      	adds	r3, #1
 800ab32:	6123      	str	r3, [r4, #16]
 800ab34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d09c      	beq.n	800aa76 <_printf_float+0xae>
 800ab3c:	232d      	movs	r3, #45	; 0x2d
 800ab3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab42:	e798      	b.n	800aa76 <_printf_float+0xae>
 800ab44:	9a06      	ldr	r2, [sp, #24]
 800ab46:	2a47      	cmp	r2, #71	; 0x47
 800ab48:	d1be      	bne.n	800aac8 <_printf_float+0x100>
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d1bc      	bne.n	800aac8 <_printf_float+0x100>
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e7b9      	b.n	800aac6 <_printf_float+0xfe>
 800ab52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ab56:	d118      	bne.n	800ab8a <_printf_float+0x1c2>
 800ab58:	2900      	cmp	r1, #0
 800ab5a:	6863      	ldr	r3, [r4, #4]
 800ab5c:	dd0b      	ble.n	800ab76 <_printf_float+0x1ae>
 800ab5e:	6121      	str	r1, [r4, #16]
 800ab60:	b913      	cbnz	r3, 800ab68 <_printf_float+0x1a0>
 800ab62:	6822      	ldr	r2, [r4, #0]
 800ab64:	07d0      	lsls	r0, r2, #31
 800ab66:	d502      	bpl.n	800ab6e <_printf_float+0x1a6>
 800ab68:	3301      	adds	r3, #1
 800ab6a:	440b      	add	r3, r1
 800ab6c:	6123      	str	r3, [r4, #16]
 800ab6e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ab70:	f04f 0900 	mov.w	r9, #0
 800ab74:	e7de      	b.n	800ab34 <_printf_float+0x16c>
 800ab76:	b913      	cbnz	r3, 800ab7e <_printf_float+0x1b6>
 800ab78:	6822      	ldr	r2, [r4, #0]
 800ab7a:	07d2      	lsls	r2, r2, #31
 800ab7c:	d501      	bpl.n	800ab82 <_printf_float+0x1ba>
 800ab7e:	3302      	adds	r3, #2
 800ab80:	e7f4      	b.n	800ab6c <_printf_float+0x1a4>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e7f2      	b.n	800ab6c <_printf_float+0x1a4>
 800ab86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ab8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab8c:	4299      	cmp	r1, r3
 800ab8e:	db05      	blt.n	800ab9c <_printf_float+0x1d4>
 800ab90:	6823      	ldr	r3, [r4, #0]
 800ab92:	6121      	str	r1, [r4, #16]
 800ab94:	07d8      	lsls	r0, r3, #31
 800ab96:	d5ea      	bpl.n	800ab6e <_printf_float+0x1a6>
 800ab98:	1c4b      	adds	r3, r1, #1
 800ab9a:	e7e7      	b.n	800ab6c <_printf_float+0x1a4>
 800ab9c:	2900      	cmp	r1, #0
 800ab9e:	bfd4      	ite	le
 800aba0:	f1c1 0202 	rsble	r2, r1, #2
 800aba4:	2201      	movgt	r2, #1
 800aba6:	4413      	add	r3, r2
 800aba8:	e7e0      	b.n	800ab6c <_printf_float+0x1a4>
 800abaa:	6823      	ldr	r3, [r4, #0]
 800abac:	055a      	lsls	r2, r3, #21
 800abae:	d407      	bmi.n	800abc0 <_printf_float+0x1f8>
 800abb0:	6923      	ldr	r3, [r4, #16]
 800abb2:	4642      	mov	r2, r8
 800abb4:	4631      	mov	r1, r6
 800abb6:	4628      	mov	r0, r5
 800abb8:	47b8      	blx	r7
 800abba:	3001      	adds	r0, #1
 800abbc:	d12c      	bne.n	800ac18 <_printf_float+0x250>
 800abbe:	e764      	b.n	800aa8a <_printf_float+0xc2>
 800abc0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800abc4:	f240 80e0 	bls.w	800ad88 <_printf_float+0x3c0>
 800abc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800abcc:	2200      	movs	r2, #0
 800abce:	2300      	movs	r3, #0
 800abd0:	f7f5 ff7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800abd4:	2800      	cmp	r0, #0
 800abd6:	d034      	beq.n	800ac42 <_printf_float+0x27a>
 800abd8:	4a37      	ldr	r2, [pc, #220]	; (800acb8 <_printf_float+0x2f0>)
 800abda:	2301      	movs	r3, #1
 800abdc:	4631      	mov	r1, r6
 800abde:	4628      	mov	r0, r5
 800abe0:	47b8      	blx	r7
 800abe2:	3001      	adds	r0, #1
 800abe4:	f43f af51 	beq.w	800aa8a <_printf_float+0xc2>
 800abe8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800abec:	429a      	cmp	r2, r3
 800abee:	db02      	blt.n	800abf6 <_printf_float+0x22e>
 800abf0:	6823      	ldr	r3, [r4, #0]
 800abf2:	07d8      	lsls	r0, r3, #31
 800abf4:	d510      	bpl.n	800ac18 <_printf_float+0x250>
 800abf6:	ee18 3a10 	vmov	r3, s16
 800abfa:	4652      	mov	r2, sl
 800abfc:	4631      	mov	r1, r6
 800abfe:	4628      	mov	r0, r5
 800ac00:	47b8      	blx	r7
 800ac02:	3001      	adds	r0, #1
 800ac04:	f43f af41 	beq.w	800aa8a <_printf_float+0xc2>
 800ac08:	f04f 0800 	mov.w	r8, #0
 800ac0c:	f104 091a 	add.w	r9, r4, #26
 800ac10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac12:	3b01      	subs	r3, #1
 800ac14:	4543      	cmp	r3, r8
 800ac16:	dc09      	bgt.n	800ac2c <_printf_float+0x264>
 800ac18:	6823      	ldr	r3, [r4, #0]
 800ac1a:	079b      	lsls	r3, r3, #30
 800ac1c:	f100 8105 	bmi.w	800ae2a <_printf_float+0x462>
 800ac20:	68e0      	ldr	r0, [r4, #12]
 800ac22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac24:	4298      	cmp	r0, r3
 800ac26:	bfb8      	it	lt
 800ac28:	4618      	movlt	r0, r3
 800ac2a:	e730      	b.n	800aa8e <_printf_float+0xc6>
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	464a      	mov	r2, r9
 800ac30:	4631      	mov	r1, r6
 800ac32:	4628      	mov	r0, r5
 800ac34:	47b8      	blx	r7
 800ac36:	3001      	adds	r0, #1
 800ac38:	f43f af27 	beq.w	800aa8a <_printf_float+0xc2>
 800ac3c:	f108 0801 	add.w	r8, r8, #1
 800ac40:	e7e6      	b.n	800ac10 <_printf_float+0x248>
 800ac42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	dc39      	bgt.n	800acbc <_printf_float+0x2f4>
 800ac48:	4a1b      	ldr	r2, [pc, #108]	; (800acb8 <_printf_float+0x2f0>)
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	4631      	mov	r1, r6
 800ac4e:	4628      	mov	r0, r5
 800ac50:	47b8      	blx	r7
 800ac52:	3001      	adds	r0, #1
 800ac54:	f43f af19 	beq.w	800aa8a <_printf_float+0xc2>
 800ac58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	d102      	bne.n	800ac66 <_printf_float+0x29e>
 800ac60:	6823      	ldr	r3, [r4, #0]
 800ac62:	07d9      	lsls	r1, r3, #31
 800ac64:	d5d8      	bpl.n	800ac18 <_printf_float+0x250>
 800ac66:	ee18 3a10 	vmov	r3, s16
 800ac6a:	4652      	mov	r2, sl
 800ac6c:	4631      	mov	r1, r6
 800ac6e:	4628      	mov	r0, r5
 800ac70:	47b8      	blx	r7
 800ac72:	3001      	adds	r0, #1
 800ac74:	f43f af09 	beq.w	800aa8a <_printf_float+0xc2>
 800ac78:	f04f 0900 	mov.w	r9, #0
 800ac7c:	f104 0a1a 	add.w	sl, r4, #26
 800ac80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac82:	425b      	negs	r3, r3
 800ac84:	454b      	cmp	r3, r9
 800ac86:	dc01      	bgt.n	800ac8c <_printf_float+0x2c4>
 800ac88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac8a:	e792      	b.n	800abb2 <_printf_float+0x1ea>
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	4652      	mov	r2, sl
 800ac90:	4631      	mov	r1, r6
 800ac92:	4628      	mov	r0, r5
 800ac94:	47b8      	blx	r7
 800ac96:	3001      	adds	r0, #1
 800ac98:	f43f aef7 	beq.w	800aa8a <_printf_float+0xc2>
 800ac9c:	f109 0901 	add.w	r9, r9, #1
 800aca0:	e7ee      	b.n	800ac80 <_printf_float+0x2b8>
 800aca2:	bf00      	nop
 800aca4:	7fefffff 	.word	0x7fefffff
 800aca8:	0800daf0 	.word	0x0800daf0
 800acac:	0800daf4 	.word	0x0800daf4
 800acb0:	0800dafc 	.word	0x0800dafc
 800acb4:	0800daf8 	.word	0x0800daf8
 800acb8:	0800db00 	.word	0x0800db00
 800acbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800acc0:	429a      	cmp	r2, r3
 800acc2:	bfa8      	it	ge
 800acc4:	461a      	movge	r2, r3
 800acc6:	2a00      	cmp	r2, #0
 800acc8:	4691      	mov	r9, r2
 800acca:	dc37      	bgt.n	800ad3c <_printf_float+0x374>
 800accc:	f04f 0b00 	mov.w	fp, #0
 800acd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acd4:	f104 021a 	add.w	r2, r4, #26
 800acd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800acda:	9305      	str	r3, [sp, #20]
 800acdc:	eba3 0309 	sub.w	r3, r3, r9
 800ace0:	455b      	cmp	r3, fp
 800ace2:	dc33      	bgt.n	800ad4c <_printf_float+0x384>
 800ace4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ace8:	429a      	cmp	r2, r3
 800acea:	db3b      	blt.n	800ad64 <_printf_float+0x39c>
 800acec:	6823      	ldr	r3, [r4, #0]
 800acee:	07da      	lsls	r2, r3, #31
 800acf0:	d438      	bmi.n	800ad64 <_printf_float+0x39c>
 800acf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acf4:	9a05      	ldr	r2, [sp, #20]
 800acf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acf8:	1a9a      	subs	r2, r3, r2
 800acfa:	eba3 0901 	sub.w	r9, r3, r1
 800acfe:	4591      	cmp	r9, r2
 800ad00:	bfa8      	it	ge
 800ad02:	4691      	movge	r9, r2
 800ad04:	f1b9 0f00 	cmp.w	r9, #0
 800ad08:	dc35      	bgt.n	800ad76 <_printf_float+0x3ae>
 800ad0a:	f04f 0800 	mov.w	r8, #0
 800ad0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad12:	f104 0a1a 	add.w	sl, r4, #26
 800ad16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad1a:	1a9b      	subs	r3, r3, r2
 800ad1c:	eba3 0309 	sub.w	r3, r3, r9
 800ad20:	4543      	cmp	r3, r8
 800ad22:	f77f af79 	ble.w	800ac18 <_printf_float+0x250>
 800ad26:	2301      	movs	r3, #1
 800ad28:	4652      	mov	r2, sl
 800ad2a:	4631      	mov	r1, r6
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	47b8      	blx	r7
 800ad30:	3001      	adds	r0, #1
 800ad32:	f43f aeaa 	beq.w	800aa8a <_printf_float+0xc2>
 800ad36:	f108 0801 	add.w	r8, r8, #1
 800ad3a:	e7ec      	b.n	800ad16 <_printf_float+0x34e>
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	4631      	mov	r1, r6
 800ad40:	4642      	mov	r2, r8
 800ad42:	4628      	mov	r0, r5
 800ad44:	47b8      	blx	r7
 800ad46:	3001      	adds	r0, #1
 800ad48:	d1c0      	bne.n	800accc <_printf_float+0x304>
 800ad4a:	e69e      	b.n	800aa8a <_printf_float+0xc2>
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	4631      	mov	r1, r6
 800ad50:	4628      	mov	r0, r5
 800ad52:	9205      	str	r2, [sp, #20]
 800ad54:	47b8      	blx	r7
 800ad56:	3001      	adds	r0, #1
 800ad58:	f43f ae97 	beq.w	800aa8a <_printf_float+0xc2>
 800ad5c:	9a05      	ldr	r2, [sp, #20]
 800ad5e:	f10b 0b01 	add.w	fp, fp, #1
 800ad62:	e7b9      	b.n	800acd8 <_printf_float+0x310>
 800ad64:	ee18 3a10 	vmov	r3, s16
 800ad68:	4652      	mov	r2, sl
 800ad6a:	4631      	mov	r1, r6
 800ad6c:	4628      	mov	r0, r5
 800ad6e:	47b8      	blx	r7
 800ad70:	3001      	adds	r0, #1
 800ad72:	d1be      	bne.n	800acf2 <_printf_float+0x32a>
 800ad74:	e689      	b.n	800aa8a <_printf_float+0xc2>
 800ad76:	9a05      	ldr	r2, [sp, #20]
 800ad78:	464b      	mov	r3, r9
 800ad7a:	4442      	add	r2, r8
 800ad7c:	4631      	mov	r1, r6
 800ad7e:	4628      	mov	r0, r5
 800ad80:	47b8      	blx	r7
 800ad82:	3001      	adds	r0, #1
 800ad84:	d1c1      	bne.n	800ad0a <_printf_float+0x342>
 800ad86:	e680      	b.n	800aa8a <_printf_float+0xc2>
 800ad88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad8a:	2a01      	cmp	r2, #1
 800ad8c:	dc01      	bgt.n	800ad92 <_printf_float+0x3ca>
 800ad8e:	07db      	lsls	r3, r3, #31
 800ad90:	d538      	bpl.n	800ae04 <_printf_float+0x43c>
 800ad92:	2301      	movs	r3, #1
 800ad94:	4642      	mov	r2, r8
 800ad96:	4631      	mov	r1, r6
 800ad98:	4628      	mov	r0, r5
 800ad9a:	47b8      	blx	r7
 800ad9c:	3001      	adds	r0, #1
 800ad9e:	f43f ae74 	beq.w	800aa8a <_printf_float+0xc2>
 800ada2:	ee18 3a10 	vmov	r3, s16
 800ada6:	4652      	mov	r2, sl
 800ada8:	4631      	mov	r1, r6
 800adaa:	4628      	mov	r0, r5
 800adac:	47b8      	blx	r7
 800adae:	3001      	adds	r0, #1
 800adb0:	f43f ae6b 	beq.w	800aa8a <_printf_float+0xc2>
 800adb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800adb8:	2200      	movs	r2, #0
 800adba:	2300      	movs	r3, #0
 800adbc:	f7f5 fe84 	bl	8000ac8 <__aeabi_dcmpeq>
 800adc0:	b9d8      	cbnz	r0, 800adfa <_printf_float+0x432>
 800adc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adc4:	f108 0201 	add.w	r2, r8, #1
 800adc8:	3b01      	subs	r3, #1
 800adca:	4631      	mov	r1, r6
 800adcc:	4628      	mov	r0, r5
 800adce:	47b8      	blx	r7
 800add0:	3001      	adds	r0, #1
 800add2:	d10e      	bne.n	800adf2 <_printf_float+0x42a>
 800add4:	e659      	b.n	800aa8a <_printf_float+0xc2>
 800add6:	2301      	movs	r3, #1
 800add8:	4652      	mov	r2, sl
 800adda:	4631      	mov	r1, r6
 800addc:	4628      	mov	r0, r5
 800adde:	47b8      	blx	r7
 800ade0:	3001      	adds	r0, #1
 800ade2:	f43f ae52 	beq.w	800aa8a <_printf_float+0xc2>
 800ade6:	f108 0801 	add.w	r8, r8, #1
 800adea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adec:	3b01      	subs	r3, #1
 800adee:	4543      	cmp	r3, r8
 800adf0:	dcf1      	bgt.n	800add6 <_printf_float+0x40e>
 800adf2:	464b      	mov	r3, r9
 800adf4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800adf8:	e6dc      	b.n	800abb4 <_printf_float+0x1ec>
 800adfa:	f04f 0800 	mov.w	r8, #0
 800adfe:	f104 0a1a 	add.w	sl, r4, #26
 800ae02:	e7f2      	b.n	800adea <_printf_float+0x422>
 800ae04:	2301      	movs	r3, #1
 800ae06:	4642      	mov	r2, r8
 800ae08:	e7df      	b.n	800adca <_printf_float+0x402>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	464a      	mov	r2, r9
 800ae0e:	4631      	mov	r1, r6
 800ae10:	4628      	mov	r0, r5
 800ae12:	47b8      	blx	r7
 800ae14:	3001      	adds	r0, #1
 800ae16:	f43f ae38 	beq.w	800aa8a <_printf_float+0xc2>
 800ae1a:	f108 0801 	add.w	r8, r8, #1
 800ae1e:	68e3      	ldr	r3, [r4, #12]
 800ae20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae22:	1a5b      	subs	r3, r3, r1
 800ae24:	4543      	cmp	r3, r8
 800ae26:	dcf0      	bgt.n	800ae0a <_printf_float+0x442>
 800ae28:	e6fa      	b.n	800ac20 <_printf_float+0x258>
 800ae2a:	f04f 0800 	mov.w	r8, #0
 800ae2e:	f104 0919 	add.w	r9, r4, #25
 800ae32:	e7f4      	b.n	800ae1e <_printf_float+0x456>

0800ae34 <_printf_common>:
 800ae34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae38:	4616      	mov	r6, r2
 800ae3a:	4699      	mov	r9, r3
 800ae3c:	688a      	ldr	r2, [r1, #8]
 800ae3e:	690b      	ldr	r3, [r1, #16]
 800ae40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae44:	4293      	cmp	r3, r2
 800ae46:	bfb8      	it	lt
 800ae48:	4613      	movlt	r3, r2
 800ae4a:	6033      	str	r3, [r6, #0]
 800ae4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae50:	4607      	mov	r7, r0
 800ae52:	460c      	mov	r4, r1
 800ae54:	b10a      	cbz	r2, 800ae5a <_printf_common+0x26>
 800ae56:	3301      	adds	r3, #1
 800ae58:	6033      	str	r3, [r6, #0]
 800ae5a:	6823      	ldr	r3, [r4, #0]
 800ae5c:	0699      	lsls	r1, r3, #26
 800ae5e:	bf42      	ittt	mi
 800ae60:	6833      	ldrmi	r3, [r6, #0]
 800ae62:	3302      	addmi	r3, #2
 800ae64:	6033      	strmi	r3, [r6, #0]
 800ae66:	6825      	ldr	r5, [r4, #0]
 800ae68:	f015 0506 	ands.w	r5, r5, #6
 800ae6c:	d106      	bne.n	800ae7c <_printf_common+0x48>
 800ae6e:	f104 0a19 	add.w	sl, r4, #25
 800ae72:	68e3      	ldr	r3, [r4, #12]
 800ae74:	6832      	ldr	r2, [r6, #0]
 800ae76:	1a9b      	subs	r3, r3, r2
 800ae78:	42ab      	cmp	r3, r5
 800ae7a:	dc26      	bgt.n	800aeca <_printf_common+0x96>
 800ae7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae80:	1e13      	subs	r3, r2, #0
 800ae82:	6822      	ldr	r2, [r4, #0]
 800ae84:	bf18      	it	ne
 800ae86:	2301      	movne	r3, #1
 800ae88:	0692      	lsls	r2, r2, #26
 800ae8a:	d42b      	bmi.n	800aee4 <_printf_common+0xb0>
 800ae8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae90:	4649      	mov	r1, r9
 800ae92:	4638      	mov	r0, r7
 800ae94:	47c0      	blx	r8
 800ae96:	3001      	adds	r0, #1
 800ae98:	d01e      	beq.n	800aed8 <_printf_common+0xa4>
 800ae9a:	6823      	ldr	r3, [r4, #0]
 800ae9c:	68e5      	ldr	r5, [r4, #12]
 800ae9e:	6832      	ldr	r2, [r6, #0]
 800aea0:	f003 0306 	and.w	r3, r3, #6
 800aea4:	2b04      	cmp	r3, #4
 800aea6:	bf08      	it	eq
 800aea8:	1aad      	subeq	r5, r5, r2
 800aeaa:	68a3      	ldr	r3, [r4, #8]
 800aeac:	6922      	ldr	r2, [r4, #16]
 800aeae:	bf0c      	ite	eq
 800aeb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aeb4:	2500      	movne	r5, #0
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	bfc4      	itt	gt
 800aeba:	1a9b      	subgt	r3, r3, r2
 800aebc:	18ed      	addgt	r5, r5, r3
 800aebe:	2600      	movs	r6, #0
 800aec0:	341a      	adds	r4, #26
 800aec2:	42b5      	cmp	r5, r6
 800aec4:	d11a      	bne.n	800aefc <_printf_common+0xc8>
 800aec6:	2000      	movs	r0, #0
 800aec8:	e008      	b.n	800aedc <_printf_common+0xa8>
 800aeca:	2301      	movs	r3, #1
 800aecc:	4652      	mov	r2, sl
 800aece:	4649      	mov	r1, r9
 800aed0:	4638      	mov	r0, r7
 800aed2:	47c0      	blx	r8
 800aed4:	3001      	adds	r0, #1
 800aed6:	d103      	bne.n	800aee0 <_printf_common+0xac>
 800aed8:	f04f 30ff 	mov.w	r0, #4294967295
 800aedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aee0:	3501      	adds	r5, #1
 800aee2:	e7c6      	b.n	800ae72 <_printf_common+0x3e>
 800aee4:	18e1      	adds	r1, r4, r3
 800aee6:	1c5a      	adds	r2, r3, #1
 800aee8:	2030      	movs	r0, #48	; 0x30
 800aeea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aeee:	4422      	add	r2, r4
 800aef0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aef4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aef8:	3302      	adds	r3, #2
 800aefa:	e7c7      	b.n	800ae8c <_printf_common+0x58>
 800aefc:	2301      	movs	r3, #1
 800aefe:	4622      	mov	r2, r4
 800af00:	4649      	mov	r1, r9
 800af02:	4638      	mov	r0, r7
 800af04:	47c0      	blx	r8
 800af06:	3001      	adds	r0, #1
 800af08:	d0e6      	beq.n	800aed8 <_printf_common+0xa4>
 800af0a:	3601      	adds	r6, #1
 800af0c:	e7d9      	b.n	800aec2 <_printf_common+0x8e>
	...

0800af10 <_printf_i>:
 800af10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af14:	7e0f      	ldrb	r7, [r1, #24]
 800af16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af18:	2f78      	cmp	r7, #120	; 0x78
 800af1a:	4691      	mov	r9, r2
 800af1c:	4680      	mov	r8, r0
 800af1e:	460c      	mov	r4, r1
 800af20:	469a      	mov	sl, r3
 800af22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af26:	d807      	bhi.n	800af38 <_printf_i+0x28>
 800af28:	2f62      	cmp	r7, #98	; 0x62
 800af2a:	d80a      	bhi.n	800af42 <_printf_i+0x32>
 800af2c:	2f00      	cmp	r7, #0
 800af2e:	f000 80d8 	beq.w	800b0e2 <_printf_i+0x1d2>
 800af32:	2f58      	cmp	r7, #88	; 0x58
 800af34:	f000 80a3 	beq.w	800b07e <_printf_i+0x16e>
 800af38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af40:	e03a      	b.n	800afb8 <_printf_i+0xa8>
 800af42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af46:	2b15      	cmp	r3, #21
 800af48:	d8f6      	bhi.n	800af38 <_printf_i+0x28>
 800af4a:	a101      	add	r1, pc, #4	; (adr r1, 800af50 <_printf_i+0x40>)
 800af4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af50:	0800afa9 	.word	0x0800afa9
 800af54:	0800afbd 	.word	0x0800afbd
 800af58:	0800af39 	.word	0x0800af39
 800af5c:	0800af39 	.word	0x0800af39
 800af60:	0800af39 	.word	0x0800af39
 800af64:	0800af39 	.word	0x0800af39
 800af68:	0800afbd 	.word	0x0800afbd
 800af6c:	0800af39 	.word	0x0800af39
 800af70:	0800af39 	.word	0x0800af39
 800af74:	0800af39 	.word	0x0800af39
 800af78:	0800af39 	.word	0x0800af39
 800af7c:	0800b0c9 	.word	0x0800b0c9
 800af80:	0800afed 	.word	0x0800afed
 800af84:	0800b0ab 	.word	0x0800b0ab
 800af88:	0800af39 	.word	0x0800af39
 800af8c:	0800af39 	.word	0x0800af39
 800af90:	0800b0eb 	.word	0x0800b0eb
 800af94:	0800af39 	.word	0x0800af39
 800af98:	0800afed 	.word	0x0800afed
 800af9c:	0800af39 	.word	0x0800af39
 800afa0:	0800af39 	.word	0x0800af39
 800afa4:	0800b0b3 	.word	0x0800b0b3
 800afa8:	682b      	ldr	r3, [r5, #0]
 800afaa:	1d1a      	adds	r2, r3, #4
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	602a      	str	r2, [r5, #0]
 800afb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800afb8:	2301      	movs	r3, #1
 800afba:	e0a3      	b.n	800b104 <_printf_i+0x1f4>
 800afbc:	6820      	ldr	r0, [r4, #0]
 800afbe:	6829      	ldr	r1, [r5, #0]
 800afc0:	0606      	lsls	r6, r0, #24
 800afc2:	f101 0304 	add.w	r3, r1, #4
 800afc6:	d50a      	bpl.n	800afde <_printf_i+0xce>
 800afc8:	680e      	ldr	r6, [r1, #0]
 800afca:	602b      	str	r3, [r5, #0]
 800afcc:	2e00      	cmp	r6, #0
 800afce:	da03      	bge.n	800afd8 <_printf_i+0xc8>
 800afd0:	232d      	movs	r3, #45	; 0x2d
 800afd2:	4276      	negs	r6, r6
 800afd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afd8:	485e      	ldr	r0, [pc, #376]	; (800b154 <_printf_i+0x244>)
 800afda:	230a      	movs	r3, #10
 800afdc:	e019      	b.n	800b012 <_printf_i+0x102>
 800afde:	680e      	ldr	r6, [r1, #0]
 800afe0:	602b      	str	r3, [r5, #0]
 800afe2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800afe6:	bf18      	it	ne
 800afe8:	b236      	sxthne	r6, r6
 800afea:	e7ef      	b.n	800afcc <_printf_i+0xbc>
 800afec:	682b      	ldr	r3, [r5, #0]
 800afee:	6820      	ldr	r0, [r4, #0]
 800aff0:	1d19      	adds	r1, r3, #4
 800aff2:	6029      	str	r1, [r5, #0]
 800aff4:	0601      	lsls	r1, r0, #24
 800aff6:	d501      	bpl.n	800affc <_printf_i+0xec>
 800aff8:	681e      	ldr	r6, [r3, #0]
 800affa:	e002      	b.n	800b002 <_printf_i+0xf2>
 800affc:	0646      	lsls	r6, r0, #25
 800affe:	d5fb      	bpl.n	800aff8 <_printf_i+0xe8>
 800b000:	881e      	ldrh	r6, [r3, #0]
 800b002:	4854      	ldr	r0, [pc, #336]	; (800b154 <_printf_i+0x244>)
 800b004:	2f6f      	cmp	r7, #111	; 0x6f
 800b006:	bf0c      	ite	eq
 800b008:	2308      	moveq	r3, #8
 800b00a:	230a      	movne	r3, #10
 800b00c:	2100      	movs	r1, #0
 800b00e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b012:	6865      	ldr	r5, [r4, #4]
 800b014:	60a5      	str	r5, [r4, #8]
 800b016:	2d00      	cmp	r5, #0
 800b018:	bfa2      	ittt	ge
 800b01a:	6821      	ldrge	r1, [r4, #0]
 800b01c:	f021 0104 	bicge.w	r1, r1, #4
 800b020:	6021      	strge	r1, [r4, #0]
 800b022:	b90e      	cbnz	r6, 800b028 <_printf_i+0x118>
 800b024:	2d00      	cmp	r5, #0
 800b026:	d04d      	beq.n	800b0c4 <_printf_i+0x1b4>
 800b028:	4615      	mov	r5, r2
 800b02a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b02e:	fb03 6711 	mls	r7, r3, r1, r6
 800b032:	5dc7      	ldrb	r7, [r0, r7]
 800b034:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b038:	4637      	mov	r7, r6
 800b03a:	42bb      	cmp	r3, r7
 800b03c:	460e      	mov	r6, r1
 800b03e:	d9f4      	bls.n	800b02a <_printf_i+0x11a>
 800b040:	2b08      	cmp	r3, #8
 800b042:	d10b      	bne.n	800b05c <_printf_i+0x14c>
 800b044:	6823      	ldr	r3, [r4, #0]
 800b046:	07de      	lsls	r6, r3, #31
 800b048:	d508      	bpl.n	800b05c <_printf_i+0x14c>
 800b04a:	6923      	ldr	r3, [r4, #16]
 800b04c:	6861      	ldr	r1, [r4, #4]
 800b04e:	4299      	cmp	r1, r3
 800b050:	bfde      	ittt	le
 800b052:	2330      	movle	r3, #48	; 0x30
 800b054:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b058:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b05c:	1b52      	subs	r2, r2, r5
 800b05e:	6122      	str	r2, [r4, #16]
 800b060:	f8cd a000 	str.w	sl, [sp]
 800b064:	464b      	mov	r3, r9
 800b066:	aa03      	add	r2, sp, #12
 800b068:	4621      	mov	r1, r4
 800b06a:	4640      	mov	r0, r8
 800b06c:	f7ff fee2 	bl	800ae34 <_printf_common>
 800b070:	3001      	adds	r0, #1
 800b072:	d14c      	bne.n	800b10e <_printf_i+0x1fe>
 800b074:	f04f 30ff 	mov.w	r0, #4294967295
 800b078:	b004      	add	sp, #16
 800b07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b07e:	4835      	ldr	r0, [pc, #212]	; (800b154 <_printf_i+0x244>)
 800b080:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b084:	6829      	ldr	r1, [r5, #0]
 800b086:	6823      	ldr	r3, [r4, #0]
 800b088:	f851 6b04 	ldr.w	r6, [r1], #4
 800b08c:	6029      	str	r1, [r5, #0]
 800b08e:	061d      	lsls	r5, r3, #24
 800b090:	d514      	bpl.n	800b0bc <_printf_i+0x1ac>
 800b092:	07df      	lsls	r7, r3, #31
 800b094:	bf44      	itt	mi
 800b096:	f043 0320 	orrmi.w	r3, r3, #32
 800b09a:	6023      	strmi	r3, [r4, #0]
 800b09c:	b91e      	cbnz	r6, 800b0a6 <_printf_i+0x196>
 800b09e:	6823      	ldr	r3, [r4, #0]
 800b0a0:	f023 0320 	bic.w	r3, r3, #32
 800b0a4:	6023      	str	r3, [r4, #0]
 800b0a6:	2310      	movs	r3, #16
 800b0a8:	e7b0      	b.n	800b00c <_printf_i+0xfc>
 800b0aa:	6823      	ldr	r3, [r4, #0]
 800b0ac:	f043 0320 	orr.w	r3, r3, #32
 800b0b0:	6023      	str	r3, [r4, #0]
 800b0b2:	2378      	movs	r3, #120	; 0x78
 800b0b4:	4828      	ldr	r0, [pc, #160]	; (800b158 <_printf_i+0x248>)
 800b0b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b0ba:	e7e3      	b.n	800b084 <_printf_i+0x174>
 800b0bc:	0659      	lsls	r1, r3, #25
 800b0be:	bf48      	it	mi
 800b0c0:	b2b6      	uxthmi	r6, r6
 800b0c2:	e7e6      	b.n	800b092 <_printf_i+0x182>
 800b0c4:	4615      	mov	r5, r2
 800b0c6:	e7bb      	b.n	800b040 <_printf_i+0x130>
 800b0c8:	682b      	ldr	r3, [r5, #0]
 800b0ca:	6826      	ldr	r6, [r4, #0]
 800b0cc:	6961      	ldr	r1, [r4, #20]
 800b0ce:	1d18      	adds	r0, r3, #4
 800b0d0:	6028      	str	r0, [r5, #0]
 800b0d2:	0635      	lsls	r5, r6, #24
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	d501      	bpl.n	800b0dc <_printf_i+0x1cc>
 800b0d8:	6019      	str	r1, [r3, #0]
 800b0da:	e002      	b.n	800b0e2 <_printf_i+0x1d2>
 800b0dc:	0670      	lsls	r0, r6, #25
 800b0de:	d5fb      	bpl.n	800b0d8 <_printf_i+0x1c8>
 800b0e0:	8019      	strh	r1, [r3, #0]
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	6123      	str	r3, [r4, #16]
 800b0e6:	4615      	mov	r5, r2
 800b0e8:	e7ba      	b.n	800b060 <_printf_i+0x150>
 800b0ea:	682b      	ldr	r3, [r5, #0]
 800b0ec:	1d1a      	adds	r2, r3, #4
 800b0ee:	602a      	str	r2, [r5, #0]
 800b0f0:	681d      	ldr	r5, [r3, #0]
 800b0f2:	6862      	ldr	r2, [r4, #4]
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	f7f5 f872 	bl	80001e0 <memchr>
 800b0fc:	b108      	cbz	r0, 800b102 <_printf_i+0x1f2>
 800b0fe:	1b40      	subs	r0, r0, r5
 800b100:	6060      	str	r0, [r4, #4]
 800b102:	6863      	ldr	r3, [r4, #4]
 800b104:	6123      	str	r3, [r4, #16]
 800b106:	2300      	movs	r3, #0
 800b108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b10c:	e7a8      	b.n	800b060 <_printf_i+0x150>
 800b10e:	6923      	ldr	r3, [r4, #16]
 800b110:	462a      	mov	r2, r5
 800b112:	4649      	mov	r1, r9
 800b114:	4640      	mov	r0, r8
 800b116:	47d0      	blx	sl
 800b118:	3001      	adds	r0, #1
 800b11a:	d0ab      	beq.n	800b074 <_printf_i+0x164>
 800b11c:	6823      	ldr	r3, [r4, #0]
 800b11e:	079b      	lsls	r3, r3, #30
 800b120:	d413      	bmi.n	800b14a <_printf_i+0x23a>
 800b122:	68e0      	ldr	r0, [r4, #12]
 800b124:	9b03      	ldr	r3, [sp, #12]
 800b126:	4298      	cmp	r0, r3
 800b128:	bfb8      	it	lt
 800b12a:	4618      	movlt	r0, r3
 800b12c:	e7a4      	b.n	800b078 <_printf_i+0x168>
 800b12e:	2301      	movs	r3, #1
 800b130:	4632      	mov	r2, r6
 800b132:	4649      	mov	r1, r9
 800b134:	4640      	mov	r0, r8
 800b136:	47d0      	blx	sl
 800b138:	3001      	adds	r0, #1
 800b13a:	d09b      	beq.n	800b074 <_printf_i+0x164>
 800b13c:	3501      	adds	r5, #1
 800b13e:	68e3      	ldr	r3, [r4, #12]
 800b140:	9903      	ldr	r1, [sp, #12]
 800b142:	1a5b      	subs	r3, r3, r1
 800b144:	42ab      	cmp	r3, r5
 800b146:	dcf2      	bgt.n	800b12e <_printf_i+0x21e>
 800b148:	e7eb      	b.n	800b122 <_printf_i+0x212>
 800b14a:	2500      	movs	r5, #0
 800b14c:	f104 0619 	add.w	r6, r4, #25
 800b150:	e7f5      	b.n	800b13e <_printf_i+0x22e>
 800b152:	bf00      	nop
 800b154:	0800db02 	.word	0x0800db02
 800b158:	0800db13 	.word	0x0800db13

0800b15c <sniprintf>:
 800b15c:	b40c      	push	{r2, r3}
 800b15e:	b530      	push	{r4, r5, lr}
 800b160:	4b17      	ldr	r3, [pc, #92]	; (800b1c0 <sniprintf+0x64>)
 800b162:	1e0c      	subs	r4, r1, #0
 800b164:	681d      	ldr	r5, [r3, #0]
 800b166:	b09d      	sub	sp, #116	; 0x74
 800b168:	da08      	bge.n	800b17c <sniprintf+0x20>
 800b16a:	238b      	movs	r3, #139	; 0x8b
 800b16c:	602b      	str	r3, [r5, #0]
 800b16e:	f04f 30ff 	mov.w	r0, #4294967295
 800b172:	b01d      	add	sp, #116	; 0x74
 800b174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b178:	b002      	add	sp, #8
 800b17a:	4770      	bx	lr
 800b17c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b180:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b184:	bf14      	ite	ne
 800b186:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b18a:	4623      	moveq	r3, r4
 800b18c:	9304      	str	r3, [sp, #16]
 800b18e:	9307      	str	r3, [sp, #28]
 800b190:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b194:	9002      	str	r0, [sp, #8]
 800b196:	9006      	str	r0, [sp, #24]
 800b198:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b19c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b19e:	ab21      	add	r3, sp, #132	; 0x84
 800b1a0:	a902      	add	r1, sp, #8
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	9301      	str	r3, [sp, #4]
 800b1a6:	f001 fb79 	bl	800c89c <_svfiprintf_r>
 800b1aa:	1c43      	adds	r3, r0, #1
 800b1ac:	bfbc      	itt	lt
 800b1ae:	238b      	movlt	r3, #139	; 0x8b
 800b1b0:	602b      	strlt	r3, [r5, #0]
 800b1b2:	2c00      	cmp	r4, #0
 800b1b4:	d0dd      	beq.n	800b172 <sniprintf+0x16>
 800b1b6:	9b02      	ldr	r3, [sp, #8]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	701a      	strb	r2, [r3, #0]
 800b1bc:	e7d9      	b.n	800b172 <sniprintf+0x16>
 800b1be:	bf00      	nop
 800b1c0:	20000104 	.word	0x20000104

0800b1c4 <quorem>:
 800b1c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c8:	6903      	ldr	r3, [r0, #16]
 800b1ca:	690c      	ldr	r4, [r1, #16]
 800b1cc:	42a3      	cmp	r3, r4
 800b1ce:	4607      	mov	r7, r0
 800b1d0:	f2c0 8081 	blt.w	800b2d6 <quorem+0x112>
 800b1d4:	3c01      	subs	r4, #1
 800b1d6:	f101 0814 	add.w	r8, r1, #20
 800b1da:	f100 0514 	add.w	r5, r0, #20
 800b1de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1e2:	9301      	str	r3, [sp, #4]
 800b1e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b1e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b1f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b1f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b1fc:	d331      	bcc.n	800b262 <quorem+0x9e>
 800b1fe:	f04f 0e00 	mov.w	lr, #0
 800b202:	4640      	mov	r0, r8
 800b204:	46ac      	mov	ip, r5
 800b206:	46f2      	mov	sl, lr
 800b208:	f850 2b04 	ldr.w	r2, [r0], #4
 800b20c:	b293      	uxth	r3, r2
 800b20e:	fb06 e303 	mla	r3, r6, r3, lr
 800b212:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b216:	b29b      	uxth	r3, r3
 800b218:	ebaa 0303 	sub.w	r3, sl, r3
 800b21c:	f8dc a000 	ldr.w	sl, [ip]
 800b220:	0c12      	lsrs	r2, r2, #16
 800b222:	fa13 f38a 	uxtah	r3, r3, sl
 800b226:	fb06 e202 	mla	r2, r6, r2, lr
 800b22a:	9300      	str	r3, [sp, #0]
 800b22c:	9b00      	ldr	r3, [sp, #0]
 800b22e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b232:	b292      	uxth	r2, r2
 800b234:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b238:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b23c:	f8bd 3000 	ldrh.w	r3, [sp]
 800b240:	4581      	cmp	r9, r0
 800b242:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b246:	f84c 3b04 	str.w	r3, [ip], #4
 800b24a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b24e:	d2db      	bcs.n	800b208 <quorem+0x44>
 800b250:	f855 300b 	ldr.w	r3, [r5, fp]
 800b254:	b92b      	cbnz	r3, 800b262 <quorem+0x9e>
 800b256:	9b01      	ldr	r3, [sp, #4]
 800b258:	3b04      	subs	r3, #4
 800b25a:	429d      	cmp	r5, r3
 800b25c:	461a      	mov	r2, r3
 800b25e:	d32e      	bcc.n	800b2be <quorem+0xfa>
 800b260:	613c      	str	r4, [r7, #16]
 800b262:	4638      	mov	r0, r7
 800b264:	f001 f8c6 	bl	800c3f4 <__mcmp>
 800b268:	2800      	cmp	r0, #0
 800b26a:	db24      	blt.n	800b2b6 <quorem+0xf2>
 800b26c:	3601      	adds	r6, #1
 800b26e:	4628      	mov	r0, r5
 800b270:	f04f 0c00 	mov.w	ip, #0
 800b274:	f858 2b04 	ldr.w	r2, [r8], #4
 800b278:	f8d0 e000 	ldr.w	lr, [r0]
 800b27c:	b293      	uxth	r3, r2
 800b27e:	ebac 0303 	sub.w	r3, ip, r3
 800b282:	0c12      	lsrs	r2, r2, #16
 800b284:	fa13 f38e 	uxtah	r3, r3, lr
 800b288:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b28c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b290:	b29b      	uxth	r3, r3
 800b292:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b296:	45c1      	cmp	r9, r8
 800b298:	f840 3b04 	str.w	r3, [r0], #4
 800b29c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b2a0:	d2e8      	bcs.n	800b274 <quorem+0xb0>
 800b2a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2aa:	b922      	cbnz	r2, 800b2b6 <quorem+0xf2>
 800b2ac:	3b04      	subs	r3, #4
 800b2ae:	429d      	cmp	r5, r3
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	d30a      	bcc.n	800b2ca <quorem+0x106>
 800b2b4:	613c      	str	r4, [r7, #16]
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	b003      	add	sp, #12
 800b2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2be:	6812      	ldr	r2, [r2, #0]
 800b2c0:	3b04      	subs	r3, #4
 800b2c2:	2a00      	cmp	r2, #0
 800b2c4:	d1cc      	bne.n	800b260 <quorem+0x9c>
 800b2c6:	3c01      	subs	r4, #1
 800b2c8:	e7c7      	b.n	800b25a <quorem+0x96>
 800b2ca:	6812      	ldr	r2, [r2, #0]
 800b2cc:	3b04      	subs	r3, #4
 800b2ce:	2a00      	cmp	r2, #0
 800b2d0:	d1f0      	bne.n	800b2b4 <quorem+0xf0>
 800b2d2:	3c01      	subs	r4, #1
 800b2d4:	e7eb      	b.n	800b2ae <quorem+0xea>
 800b2d6:	2000      	movs	r0, #0
 800b2d8:	e7ee      	b.n	800b2b8 <quorem+0xf4>
 800b2da:	0000      	movs	r0, r0
 800b2dc:	0000      	movs	r0, r0
	...

0800b2e0 <_dtoa_r>:
 800b2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e4:	ed2d 8b04 	vpush	{d8-d9}
 800b2e8:	ec57 6b10 	vmov	r6, r7, d0
 800b2ec:	b093      	sub	sp, #76	; 0x4c
 800b2ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b2f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b2f4:	9106      	str	r1, [sp, #24]
 800b2f6:	ee10 aa10 	vmov	sl, s0
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	9209      	str	r2, [sp, #36]	; 0x24
 800b2fe:	930c      	str	r3, [sp, #48]	; 0x30
 800b300:	46bb      	mov	fp, r7
 800b302:	b975      	cbnz	r5, 800b322 <_dtoa_r+0x42>
 800b304:	2010      	movs	r0, #16
 800b306:	f000 fddd 	bl	800bec4 <malloc>
 800b30a:	4602      	mov	r2, r0
 800b30c:	6260      	str	r0, [r4, #36]	; 0x24
 800b30e:	b920      	cbnz	r0, 800b31a <_dtoa_r+0x3a>
 800b310:	4ba7      	ldr	r3, [pc, #668]	; (800b5b0 <_dtoa_r+0x2d0>)
 800b312:	21ea      	movs	r1, #234	; 0xea
 800b314:	48a7      	ldr	r0, [pc, #668]	; (800b5b4 <_dtoa_r+0x2d4>)
 800b316:	f001 fbd1 	bl	800cabc <__assert_func>
 800b31a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b31e:	6005      	str	r5, [r0, #0]
 800b320:	60c5      	str	r5, [r0, #12]
 800b322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b324:	6819      	ldr	r1, [r3, #0]
 800b326:	b151      	cbz	r1, 800b33e <_dtoa_r+0x5e>
 800b328:	685a      	ldr	r2, [r3, #4]
 800b32a:	604a      	str	r2, [r1, #4]
 800b32c:	2301      	movs	r3, #1
 800b32e:	4093      	lsls	r3, r2
 800b330:	608b      	str	r3, [r1, #8]
 800b332:	4620      	mov	r0, r4
 800b334:	f000 fe1c 	bl	800bf70 <_Bfree>
 800b338:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b33a:	2200      	movs	r2, #0
 800b33c:	601a      	str	r2, [r3, #0]
 800b33e:	1e3b      	subs	r3, r7, #0
 800b340:	bfaa      	itet	ge
 800b342:	2300      	movge	r3, #0
 800b344:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b348:	f8c8 3000 	strge.w	r3, [r8]
 800b34c:	4b9a      	ldr	r3, [pc, #616]	; (800b5b8 <_dtoa_r+0x2d8>)
 800b34e:	bfbc      	itt	lt
 800b350:	2201      	movlt	r2, #1
 800b352:	f8c8 2000 	strlt.w	r2, [r8]
 800b356:	ea33 030b 	bics.w	r3, r3, fp
 800b35a:	d11b      	bne.n	800b394 <_dtoa_r+0xb4>
 800b35c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b35e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b362:	6013      	str	r3, [r2, #0]
 800b364:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b368:	4333      	orrs	r3, r6
 800b36a:	f000 8592 	beq.w	800be92 <_dtoa_r+0xbb2>
 800b36e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b370:	b963      	cbnz	r3, 800b38c <_dtoa_r+0xac>
 800b372:	4b92      	ldr	r3, [pc, #584]	; (800b5bc <_dtoa_r+0x2dc>)
 800b374:	e022      	b.n	800b3bc <_dtoa_r+0xdc>
 800b376:	4b92      	ldr	r3, [pc, #584]	; (800b5c0 <_dtoa_r+0x2e0>)
 800b378:	9301      	str	r3, [sp, #4]
 800b37a:	3308      	adds	r3, #8
 800b37c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b37e:	6013      	str	r3, [r2, #0]
 800b380:	9801      	ldr	r0, [sp, #4]
 800b382:	b013      	add	sp, #76	; 0x4c
 800b384:	ecbd 8b04 	vpop	{d8-d9}
 800b388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38c:	4b8b      	ldr	r3, [pc, #556]	; (800b5bc <_dtoa_r+0x2dc>)
 800b38e:	9301      	str	r3, [sp, #4]
 800b390:	3303      	adds	r3, #3
 800b392:	e7f3      	b.n	800b37c <_dtoa_r+0x9c>
 800b394:	2200      	movs	r2, #0
 800b396:	2300      	movs	r3, #0
 800b398:	4650      	mov	r0, sl
 800b39a:	4659      	mov	r1, fp
 800b39c:	f7f5 fb94 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3a0:	ec4b ab19 	vmov	d9, sl, fp
 800b3a4:	4680      	mov	r8, r0
 800b3a6:	b158      	cbz	r0, 800b3c0 <_dtoa_r+0xe0>
 800b3a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	6013      	str	r3, [r2, #0]
 800b3ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	f000 856b 	beq.w	800be8c <_dtoa_r+0xbac>
 800b3b6:	4883      	ldr	r0, [pc, #524]	; (800b5c4 <_dtoa_r+0x2e4>)
 800b3b8:	6018      	str	r0, [r3, #0]
 800b3ba:	1e43      	subs	r3, r0, #1
 800b3bc:	9301      	str	r3, [sp, #4]
 800b3be:	e7df      	b.n	800b380 <_dtoa_r+0xa0>
 800b3c0:	ec4b ab10 	vmov	d0, sl, fp
 800b3c4:	aa10      	add	r2, sp, #64	; 0x40
 800b3c6:	a911      	add	r1, sp, #68	; 0x44
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f001 f8b9 	bl	800c540 <__d2b>
 800b3ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b3d2:	ee08 0a10 	vmov	s16, r0
 800b3d6:	2d00      	cmp	r5, #0
 800b3d8:	f000 8084 	beq.w	800b4e4 <_dtoa_r+0x204>
 800b3dc:	ee19 3a90 	vmov	r3, s19
 800b3e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b3e8:	4656      	mov	r6, sl
 800b3ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b3ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b3f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b3f6:	4b74      	ldr	r3, [pc, #464]	; (800b5c8 <_dtoa_r+0x2e8>)
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	4630      	mov	r0, r6
 800b3fc:	4639      	mov	r1, r7
 800b3fe:	f7f4 ff43 	bl	8000288 <__aeabi_dsub>
 800b402:	a365      	add	r3, pc, #404	; (adr r3, 800b598 <_dtoa_r+0x2b8>)
 800b404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b408:	f7f5 f8f6 	bl	80005f8 <__aeabi_dmul>
 800b40c:	a364      	add	r3, pc, #400	; (adr r3, 800b5a0 <_dtoa_r+0x2c0>)
 800b40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b412:	f7f4 ff3b 	bl	800028c <__adddf3>
 800b416:	4606      	mov	r6, r0
 800b418:	4628      	mov	r0, r5
 800b41a:	460f      	mov	r7, r1
 800b41c:	f7f5 f882 	bl	8000524 <__aeabi_i2d>
 800b420:	a361      	add	r3, pc, #388	; (adr r3, 800b5a8 <_dtoa_r+0x2c8>)
 800b422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b426:	f7f5 f8e7 	bl	80005f8 <__aeabi_dmul>
 800b42a:	4602      	mov	r2, r0
 800b42c:	460b      	mov	r3, r1
 800b42e:	4630      	mov	r0, r6
 800b430:	4639      	mov	r1, r7
 800b432:	f7f4 ff2b 	bl	800028c <__adddf3>
 800b436:	4606      	mov	r6, r0
 800b438:	460f      	mov	r7, r1
 800b43a:	f7f5 fb8d 	bl	8000b58 <__aeabi_d2iz>
 800b43e:	2200      	movs	r2, #0
 800b440:	9000      	str	r0, [sp, #0]
 800b442:	2300      	movs	r3, #0
 800b444:	4630      	mov	r0, r6
 800b446:	4639      	mov	r1, r7
 800b448:	f7f5 fb48 	bl	8000adc <__aeabi_dcmplt>
 800b44c:	b150      	cbz	r0, 800b464 <_dtoa_r+0x184>
 800b44e:	9800      	ldr	r0, [sp, #0]
 800b450:	f7f5 f868 	bl	8000524 <__aeabi_i2d>
 800b454:	4632      	mov	r2, r6
 800b456:	463b      	mov	r3, r7
 800b458:	f7f5 fb36 	bl	8000ac8 <__aeabi_dcmpeq>
 800b45c:	b910      	cbnz	r0, 800b464 <_dtoa_r+0x184>
 800b45e:	9b00      	ldr	r3, [sp, #0]
 800b460:	3b01      	subs	r3, #1
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	9b00      	ldr	r3, [sp, #0]
 800b466:	2b16      	cmp	r3, #22
 800b468:	d85a      	bhi.n	800b520 <_dtoa_r+0x240>
 800b46a:	9a00      	ldr	r2, [sp, #0]
 800b46c:	4b57      	ldr	r3, [pc, #348]	; (800b5cc <_dtoa_r+0x2ec>)
 800b46e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b476:	ec51 0b19 	vmov	r0, r1, d9
 800b47a:	f7f5 fb2f 	bl	8000adc <__aeabi_dcmplt>
 800b47e:	2800      	cmp	r0, #0
 800b480:	d050      	beq.n	800b524 <_dtoa_r+0x244>
 800b482:	9b00      	ldr	r3, [sp, #0]
 800b484:	3b01      	subs	r3, #1
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	2300      	movs	r3, #0
 800b48a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b48c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b48e:	1b5d      	subs	r5, r3, r5
 800b490:	1e6b      	subs	r3, r5, #1
 800b492:	9305      	str	r3, [sp, #20]
 800b494:	bf45      	ittet	mi
 800b496:	f1c5 0301 	rsbmi	r3, r5, #1
 800b49a:	9304      	strmi	r3, [sp, #16]
 800b49c:	2300      	movpl	r3, #0
 800b49e:	2300      	movmi	r3, #0
 800b4a0:	bf4c      	ite	mi
 800b4a2:	9305      	strmi	r3, [sp, #20]
 800b4a4:	9304      	strpl	r3, [sp, #16]
 800b4a6:	9b00      	ldr	r3, [sp, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	db3d      	blt.n	800b528 <_dtoa_r+0x248>
 800b4ac:	9b05      	ldr	r3, [sp, #20]
 800b4ae:	9a00      	ldr	r2, [sp, #0]
 800b4b0:	920a      	str	r2, [sp, #40]	; 0x28
 800b4b2:	4413      	add	r3, r2
 800b4b4:	9305      	str	r3, [sp, #20]
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	9307      	str	r3, [sp, #28]
 800b4ba:	9b06      	ldr	r3, [sp, #24]
 800b4bc:	2b09      	cmp	r3, #9
 800b4be:	f200 8089 	bhi.w	800b5d4 <_dtoa_r+0x2f4>
 800b4c2:	2b05      	cmp	r3, #5
 800b4c4:	bfc4      	itt	gt
 800b4c6:	3b04      	subgt	r3, #4
 800b4c8:	9306      	strgt	r3, [sp, #24]
 800b4ca:	9b06      	ldr	r3, [sp, #24]
 800b4cc:	f1a3 0302 	sub.w	r3, r3, #2
 800b4d0:	bfcc      	ite	gt
 800b4d2:	2500      	movgt	r5, #0
 800b4d4:	2501      	movle	r5, #1
 800b4d6:	2b03      	cmp	r3, #3
 800b4d8:	f200 8087 	bhi.w	800b5ea <_dtoa_r+0x30a>
 800b4dc:	e8df f003 	tbb	[pc, r3]
 800b4e0:	59383a2d 	.word	0x59383a2d
 800b4e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b4e8:	441d      	add	r5, r3
 800b4ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b4ee:	2b20      	cmp	r3, #32
 800b4f0:	bfc1      	itttt	gt
 800b4f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b4f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b4fa:	fa0b f303 	lslgt.w	r3, fp, r3
 800b4fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b502:	bfda      	itte	le
 800b504:	f1c3 0320 	rsble	r3, r3, #32
 800b508:	fa06 f003 	lslle.w	r0, r6, r3
 800b50c:	4318      	orrgt	r0, r3
 800b50e:	f7f4 fff9 	bl	8000504 <__aeabi_ui2d>
 800b512:	2301      	movs	r3, #1
 800b514:	4606      	mov	r6, r0
 800b516:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b51a:	3d01      	subs	r5, #1
 800b51c:	930e      	str	r3, [sp, #56]	; 0x38
 800b51e:	e76a      	b.n	800b3f6 <_dtoa_r+0x116>
 800b520:	2301      	movs	r3, #1
 800b522:	e7b2      	b.n	800b48a <_dtoa_r+0x1aa>
 800b524:	900b      	str	r0, [sp, #44]	; 0x2c
 800b526:	e7b1      	b.n	800b48c <_dtoa_r+0x1ac>
 800b528:	9b04      	ldr	r3, [sp, #16]
 800b52a:	9a00      	ldr	r2, [sp, #0]
 800b52c:	1a9b      	subs	r3, r3, r2
 800b52e:	9304      	str	r3, [sp, #16]
 800b530:	4253      	negs	r3, r2
 800b532:	9307      	str	r3, [sp, #28]
 800b534:	2300      	movs	r3, #0
 800b536:	930a      	str	r3, [sp, #40]	; 0x28
 800b538:	e7bf      	b.n	800b4ba <_dtoa_r+0x1da>
 800b53a:	2300      	movs	r3, #0
 800b53c:	9308      	str	r3, [sp, #32]
 800b53e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b540:	2b00      	cmp	r3, #0
 800b542:	dc55      	bgt.n	800b5f0 <_dtoa_r+0x310>
 800b544:	2301      	movs	r3, #1
 800b546:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b54a:	461a      	mov	r2, r3
 800b54c:	9209      	str	r2, [sp, #36]	; 0x24
 800b54e:	e00c      	b.n	800b56a <_dtoa_r+0x28a>
 800b550:	2301      	movs	r3, #1
 800b552:	e7f3      	b.n	800b53c <_dtoa_r+0x25c>
 800b554:	2300      	movs	r3, #0
 800b556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b558:	9308      	str	r3, [sp, #32]
 800b55a:	9b00      	ldr	r3, [sp, #0]
 800b55c:	4413      	add	r3, r2
 800b55e:	9302      	str	r3, [sp, #8]
 800b560:	3301      	adds	r3, #1
 800b562:	2b01      	cmp	r3, #1
 800b564:	9303      	str	r3, [sp, #12]
 800b566:	bfb8      	it	lt
 800b568:	2301      	movlt	r3, #1
 800b56a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b56c:	2200      	movs	r2, #0
 800b56e:	6042      	str	r2, [r0, #4]
 800b570:	2204      	movs	r2, #4
 800b572:	f102 0614 	add.w	r6, r2, #20
 800b576:	429e      	cmp	r6, r3
 800b578:	6841      	ldr	r1, [r0, #4]
 800b57a:	d93d      	bls.n	800b5f8 <_dtoa_r+0x318>
 800b57c:	4620      	mov	r0, r4
 800b57e:	f000 fcb7 	bl	800bef0 <_Balloc>
 800b582:	9001      	str	r0, [sp, #4]
 800b584:	2800      	cmp	r0, #0
 800b586:	d13b      	bne.n	800b600 <_dtoa_r+0x320>
 800b588:	4b11      	ldr	r3, [pc, #68]	; (800b5d0 <_dtoa_r+0x2f0>)
 800b58a:	4602      	mov	r2, r0
 800b58c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b590:	e6c0      	b.n	800b314 <_dtoa_r+0x34>
 800b592:	2301      	movs	r3, #1
 800b594:	e7df      	b.n	800b556 <_dtoa_r+0x276>
 800b596:	bf00      	nop
 800b598:	636f4361 	.word	0x636f4361
 800b59c:	3fd287a7 	.word	0x3fd287a7
 800b5a0:	8b60c8b3 	.word	0x8b60c8b3
 800b5a4:	3fc68a28 	.word	0x3fc68a28
 800b5a8:	509f79fb 	.word	0x509f79fb
 800b5ac:	3fd34413 	.word	0x3fd34413
 800b5b0:	0800db31 	.word	0x0800db31
 800b5b4:	0800db48 	.word	0x0800db48
 800b5b8:	7ff00000 	.word	0x7ff00000
 800b5bc:	0800db2d 	.word	0x0800db2d
 800b5c0:	0800db24 	.word	0x0800db24
 800b5c4:	0800db01 	.word	0x0800db01
 800b5c8:	3ff80000 	.word	0x3ff80000
 800b5cc:	0800dc38 	.word	0x0800dc38
 800b5d0:	0800dba3 	.word	0x0800dba3
 800b5d4:	2501      	movs	r5, #1
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	9306      	str	r3, [sp, #24]
 800b5da:	9508      	str	r5, [sp, #32]
 800b5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b5e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	2312      	movs	r3, #18
 800b5e8:	e7b0      	b.n	800b54c <_dtoa_r+0x26c>
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	9308      	str	r3, [sp, #32]
 800b5ee:	e7f5      	b.n	800b5dc <_dtoa_r+0x2fc>
 800b5f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b5f6:	e7b8      	b.n	800b56a <_dtoa_r+0x28a>
 800b5f8:	3101      	adds	r1, #1
 800b5fa:	6041      	str	r1, [r0, #4]
 800b5fc:	0052      	lsls	r2, r2, #1
 800b5fe:	e7b8      	b.n	800b572 <_dtoa_r+0x292>
 800b600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b602:	9a01      	ldr	r2, [sp, #4]
 800b604:	601a      	str	r2, [r3, #0]
 800b606:	9b03      	ldr	r3, [sp, #12]
 800b608:	2b0e      	cmp	r3, #14
 800b60a:	f200 809d 	bhi.w	800b748 <_dtoa_r+0x468>
 800b60e:	2d00      	cmp	r5, #0
 800b610:	f000 809a 	beq.w	800b748 <_dtoa_r+0x468>
 800b614:	9b00      	ldr	r3, [sp, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	dd32      	ble.n	800b680 <_dtoa_r+0x3a0>
 800b61a:	4ab7      	ldr	r2, [pc, #732]	; (800b8f8 <_dtoa_r+0x618>)
 800b61c:	f003 030f 	and.w	r3, r3, #15
 800b620:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b624:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b628:	9b00      	ldr	r3, [sp, #0]
 800b62a:	05d8      	lsls	r0, r3, #23
 800b62c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b630:	d516      	bpl.n	800b660 <_dtoa_r+0x380>
 800b632:	4bb2      	ldr	r3, [pc, #712]	; (800b8fc <_dtoa_r+0x61c>)
 800b634:	ec51 0b19 	vmov	r0, r1, d9
 800b638:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b63c:	f7f5 f906 	bl	800084c <__aeabi_ddiv>
 800b640:	f007 070f 	and.w	r7, r7, #15
 800b644:	4682      	mov	sl, r0
 800b646:	468b      	mov	fp, r1
 800b648:	2503      	movs	r5, #3
 800b64a:	4eac      	ldr	r6, [pc, #688]	; (800b8fc <_dtoa_r+0x61c>)
 800b64c:	b957      	cbnz	r7, 800b664 <_dtoa_r+0x384>
 800b64e:	4642      	mov	r2, r8
 800b650:	464b      	mov	r3, r9
 800b652:	4650      	mov	r0, sl
 800b654:	4659      	mov	r1, fp
 800b656:	f7f5 f8f9 	bl	800084c <__aeabi_ddiv>
 800b65a:	4682      	mov	sl, r0
 800b65c:	468b      	mov	fp, r1
 800b65e:	e028      	b.n	800b6b2 <_dtoa_r+0x3d2>
 800b660:	2502      	movs	r5, #2
 800b662:	e7f2      	b.n	800b64a <_dtoa_r+0x36a>
 800b664:	07f9      	lsls	r1, r7, #31
 800b666:	d508      	bpl.n	800b67a <_dtoa_r+0x39a>
 800b668:	4640      	mov	r0, r8
 800b66a:	4649      	mov	r1, r9
 800b66c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b670:	f7f4 ffc2 	bl	80005f8 <__aeabi_dmul>
 800b674:	3501      	adds	r5, #1
 800b676:	4680      	mov	r8, r0
 800b678:	4689      	mov	r9, r1
 800b67a:	107f      	asrs	r7, r7, #1
 800b67c:	3608      	adds	r6, #8
 800b67e:	e7e5      	b.n	800b64c <_dtoa_r+0x36c>
 800b680:	f000 809b 	beq.w	800b7ba <_dtoa_r+0x4da>
 800b684:	9b00      	ldr	r3, [sp, #0]
 800b686:	4f9d      	ldr	r7, [pc, #628]	; (800b8fc <_dtoa_r+0x61c>)
 800b688:	425e      	negs	r6, r3
 800b68a:	4b9b      	ldr	r3, [pc, #620]	; (800b8f8 <_dtoa_r+0x618>)
 800b68c:	f006 020f 	and.w	r2, r6, #15
 800b690:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b698:	ec51 0b19 	vmov	r0, r1, d9
 800b69c:	f7f4 ffac 	bl	80005f8 <__aeabi_dmul>
 800b6a0:	1136      	asrs	r6, r6, #4
 800b6a2:	4682      	mov	sl, r0
 800b6a4:	468b      	mov	fp, r1
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	2502      	movs	r5, #2
 800b6aa:	2e00      	cmp	r6, #0
 800b6ac:	d17a      	bne.n	800b7a4 <_dtoa_r+0x4c4>
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d1d3      	bne.n	800b65a <_dtoa_r+0x37a>
 800b6b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	f000 8082 	beq.w	800b7be <_dtoa_r+0x4de>
 800b6ba:	4b91      	ldr	r3, [pc, #580]	; (800b900 <_dtoa_r+0x620>)
 800b6bc:	2200      	movs	r2, #0
 800b6be:	4650      	mov	r0, sl
 800b6c0:	4659      	mov	r1, fp
 800b6c2:	f7f5 fa0b 	bl	8000adc <__aeabi_dcmplt>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d079      	beq.n	800b7be <_dtoa_r+0x4de>
 800b6ca:	9b03      	ldr	r3, [sp, #12]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d076      	beq.n	800b7be <_dtoa_r+0x4de>
 800b6d0:	9b02      	ldr	r3, [sp, #8]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	dd36      	ble.n	800b744 <_dtoa_r+0x464>
 800b6d6:	9b00      	ldr	r3, [sp, #0]
 800b6d8:	4650      	mov	r0, sl
 800b6da:	4659      	mov	r1, fp
 800b6dc:	1e5f      	subs	r7, r3, #1
 800b6de:	2200      	movs	r2, #0
 800b6e0:	4b88      	ldr	r3, [pc, #544]	; (800b904 <_dtoa_r+0x624>)
 800b6e2:	f7f4 ff89 	bl	80005f8 <__aeabi_dmul>
 800b6e6:	9e02      	ldr	r6, [sp, #8]
 800b6e8:	4682      	mov	sl, r0
 800b6ea:	468b      	mov	fp, r1
 800b6ec:	3501      	adds	r5, #1
 800b6ee:	4628      	mov	r0, r5
 800b6f0:	f7f4 ff18 	bl	8000524 <__aeabi_i2d>
 800b6f4:	4652      	mov	r2, sl
 800b6f6:	465b      	mov	r3, fp
 800b6f8:	f7f4 ff7e 	bl	80005f8 <__aeabi_dmul>
 800b6fc:	4b82      	ldr	r3, [pc, #520]	; (800b908 <_dtoa_r+0x628>)
 800b6fe:	2200      	movs	r2, #0
 800b700:	f7f4 fdc4 	bl	800028c <__adddf3>
 800b704:	46d0      	mov	r8, sl
 800b706:	46d9      	mov	r9, fp
 800b708:	4682      	mov	sl, r0
 800b70a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b70e:	2e00      	cmp	r6, #0
 800b710:	d158      	bne.n	800b7c4 <_dtoa_r+0x4e4>
 800b712:	4b7e      	ldr	r3, [pc, #504]	; (800b90c <_dtoa_r+0x62c>)
 800b714:	2200      	movs	r2, #0
 800b716:	4640      	mov	r0, r8
 800b718:	4649      	mov	r1, r9
 800b71a:	f7f4 fdb5 	bl	8000288 <__aeabi_dsub>
 800b71e:	4652      	mov	r2, sl
 800b720:	465b      	mov	r3, fp
 800b722:	4680      	mov	r8, r0
 800b724:	4689      	mov	r9, r1
 800b726:	f7f5 f9f7 	bl	8000b18 <__aeabi_dcmpgt>
 800b72a:	2800      	cmp	r0, #0
 800b72c:	f040 8295 	bne.w	800bc5a <_dtoa_r+0x97a>
 800b730:	4652      	mov	r2, sl
 800b732:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b736:	4640      	mov	r0, r8
 800b738:	4649      	mov	r1, r9
 800b73a:	f7f5 f9cf 	bl	8000adc <__aeabi_dcmplt>
 800b73e:	2800      	cmp	r0, #0
 800b740:	f040 8289 	bne.w	800bc56 <_dtoa_r+0x976>
 800b744:	ec5b ab19 	vmov	sl, fp, d9
 800b748:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f2c0 8148 	blt.w	800b9e0 <_dtoa_r+0x700>
 800b750:	9a00      	ldr	r2, [sp, #0]
 800b752:	2a0e      	cmp	r2, #14
 800b754:	f300 8144 	bgt.w	800b9e0 <_dtoa_r+0x700>
 800b758:	4b67      	ldr	r3, [pc, #412]	; (800b8f8 <_dtoa_r+0x618>)
 800b75a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b75e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b764:	2b00      	cmp	r3, #0
 800b766:	f280 80d5 	bge.w	800b914 <_dtoa_r+0x634>
 800b76a:	9b03      	ldr	r3, [sp, #12]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f300 80d1 	bgt.w	800b914 <_dtoa_r+0x634>
 800b772:	f040 826f 	bne.w	800bc54 <_dtoa_r+0x974>
 800b776:	4b65      	ldr	r3, [pc, #404]	; (800b90c <_dtoa_r+0x62c>)
 800b778:	2200      	movs	r2, #0
 800b77a:	4640      	mov	r0, r8
 800b77c:	4649      	mov	r1, r9
 800b77e:	f7f4 ff3b 	bl	80005f8 <__aeabi_dmul>
 800b782:	4652      	mov	r2, sl
 800b784:	465b      	mov	r3, fp
 800b786:	f7f5 f9bd 	bl	8000b04 <__aeabi_dcmpge>
 800b78a:	9e03      	ldr	r6, [sp, #12]
 800b78c:	4637      	mov	r7, r6
 800b78e:	2800      	cmp	r0, #0
 800b790:	f040 8245 	bne.w	800bc1e <_dtoa_r+0x93e>
 800b794:	9d01      	ldr	r5, [sp, #4]
 800b796:	2331      	movs	r3, #49	; 0x31
 800b798:	f805 3b01 	strb.w	r3, [r5], #1
 800b79c:	9b00      	ldr	r3, [sp, #0]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	9300      	str	r3, [sp, #0]
 800b7a2:	e240      	b.n	800bc26 <_dtoa_r+0x946>
 800b7a4:	07f2      	lsls	r2, r6, #31
 800b7a6:	d505      	bpl.n	800b7b4 <_dtoa_r+0x4d4>
 800b7a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7ac:	f7f4 ff24 	bl	80005f8 <__aeabi_dmul>
 800b7b0:	3501      	adds	r5, #1
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	1076      	asrs	r6, r6, #1
 800b7b6:	3708      	adds	r7, #8
 800b7b8:	e777      	b.n	800b6aa <_dtoa_r+0x3ca>
 800b7ba:	2502      	movs	r5, #2
 800b7bc:	e779      	b.n	800b6b2 <_dtoa_r+0x3d2>
 800b7be:	9f00      	ldr	r7, [sp, #0]
 800b7c0:	9e03      	ldr	r6, [sp, #12]
 800b7c2:	e794      	b.n	800b6ee <_dtoa_r+0x40e>
 800b7c4:	9901      	ldr	r1, [sp, #4]
 800b7c6:	4b4c      	ldr	r3, [pc, #304]	; (800b8f8 <_dtoa_r+0x618>)
 800b7c8:	4431      	add	r1, r6
 800b7ca:	910d      	str	r1, [sp, #52]	; 0x34
 800b7cc:	9908      	ldr	r1, [sp, #32]
 800b7ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b7d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b7d6:	2900      	cmp	r1, #0
 800b7d8:	d043      	beq.n	800b862 <_dtoa_r+0x582>
 800b7da:	494d      	ldr	r1, [pc, #308]	; (800b910 <_dtoa_r+0x630>)
 800b7dc:	2000      	movs	r0, #0
 800b7de:	f7f5 f835 	bl	800084c <__aeabi_ddiv>
 800b7e2:	4652      	mov	r2, sl
 800b7e4:	465b      	mov	r3, fp
 800b7e6:	f7f4 fd4f 	bl	8000288 <__aeabi_dsub>
 800b7ea:	9d01      	ldr	r5, [sp, #4]
 800b7ec:	4682      	mov	sl, r0
 800b7ee:	468b      	mov	fp, r1
 800b7f0:	4649      	mov	r1, r9
 800b7f2:	4640      	mov	r0, r8
 800b7f4:	f7f5 f9b0 	bl	8000b58 <__aeabi_d2iz>
 800b7f8:	4606      	mov	r6, r0
 800b7fa:	f7f4 fe93 	bl	8000524 <__aeabi_i2d>
 800b7fe:	4602      	mov	r2, r0
 800b800:	460b      	mov	r3, r1
 800b802:	4640      	mov	r0, r8
 800b804:	4649      	mov	r1, r9
 800b806:	f7f4 fd3f 	bl	8000288 <__aeabi_dsub>
 800b80a:	3630      	adds	r6, #48	; 0x30
 800b80c:	f805 6b01 	strb.w	r6, [r5], #1
 800b810:	4652      	mov	r2, sl
 800b812:	465b      	mov	r3, fp
 800b814:	4680      	mov	r8, r0
 800b816:	4689      	mov	r9, r1
 800b818:	f7f5 f960 	bl	8000adc <__aeabi_dcmplt>
 800b81c:	2800      	cmp	r0, #0
 800b81e:	d163      	bne.n	800b8e8 <_dtoa_r+0x608>
 800b820:	4642      	mov	r2, r8
 800b822:	464b      	mov	r3, r9
 800b824:	4936      	ldr	r1, [pc, #216]	; (800b900 <_dtoa_r+0x620>)
 800b826:	2000      	movs	r0, #0
 800b828:	f7f4 fd2e 	bl	8000288 <__aeabi_dsub>
 800b82c:	4652      	mov	r2, sl
 800b82e:	465b      	mov	r3, fp
 800b830:	f7f5 f954 	bl	8000adc <__aeabi_dcmplt>
 800b834:	2800      	cmp	r0, #0
 800b836:	f040 80b5 	bne.w	800b9a4 <_dtoa_r+0x6c4>
 800b83a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b83c:	429d      	cmp	r5, r3
 800b83e:	d081      	beq.n	800b744 <_dtoa_r+0x464>
 800b840:	4b30      	ldr	r3, [pc, #192]	; (800b904 <_dtoa_r+0x624>)
 800b842:	2200      	movs	r2, #0
 800b844:	4650      	mov	r0, sl
 800b846:	4659      	mov	r1, fp
 800b848:	f7f4 fed6 	bl	80005f8 <__aeabi_dmul>
 800b84c:	4b2d      	ldr	r3, [pc, #180]	; (800b904 <_dtoa_r+0x624>)
 800b84e:	4682      	mov	sl, r0
 800b850:	468b      	mov	fp, r1
 800b852:	4640      	mov	r0, r8
 800b854:	4649      	mov	r1, r9
 800b856:	2200      	movs	r2, #0
 800b858:	f7f4 fece 	bl	80005f8 <__aeabi_dmul>
 800b85c:	4680      	mov	r8, r0
 800b85e:	4689      	mov	r9, r1
 800b860:	e7c6      	b.n	800b7f0 <_dtoa_r+0x510>
 800b862:	4650      	mov	r0, sl
 800b864:	4659      	mov	r1, fp
 800b866:	f7f4 fec7 	bl	80005f8 <__aeabi_dmul>
 800b86a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b86c:	9d01      	ldr	r5, [sp, #4]
 800b86e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b870:	4682      	mov	sl, r0
 800b872:	468b      	mov	fp, r1
 800b874:	4649      	mov	r1, r9
 800b876:	4640      	mov	r0, r8
 800b878:	f7f5 f96e 	bl	8000b58 <__aeabi_d2iz>
 800b87c:	4606      	mov	r6, r0
 800b87e:	f7f4 fe51 	bl	8000524 <__aeabi_i2d>
 800b882:	3630      	adds	r6, #48	; 0x30
 800b884:	4602      	mov	r2, r0
 800b886:	460b      	mov	r3, r1
 800b888:	4640      	mov	r0, r8
 800b88a:	4649      	mov	r1, r9
 800b88c:	f7f4 fcfc 	bl	8000288 <__aeabi_dsub>
 800b890:	f805 6b01 	strb.w	r6, [r5], #1
 800b894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b896:	429d      	cmp	r5, r3
 800b898:	4680      	mov	r8, r0
 800b89a:	4689      	mov	r9, r1
 800b89c:	f04f 0200 	mov.w	r2, #0
 800b8a0:	d124      	bne.n	800b8ec <_dtoa_r+0x60c>
 800b8a2:	4b1b      	ldr	r3, [pc, #108]	; (800b910 <_dtoa_r+0x630>)
 800b8a4:	4650      	mov	r0, sl
 800b8a6:	4659      	mov	r1, fp
 800b8a8:	f7f4 fcf0 	bl	800028c <__adddf3>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	4640      	mov	r0, r8
 800b8b2:	4649      	mov	r1, r9
 800b8b4:	f7f5 f930 	bl	8000b18 <__aeabi_dcmpgt>
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	d173      	bne.n	800b9a4 <_dtoa_r+0x6c4>
 800b8bc:	4652      	mov	r2, sl
 800b8be:	465b      	mov	r3, fp
 800b8c0:	4913      	ldr	r1, [pc, #76]	; (800b910 <_dtoa_r+0x630>)
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	f7f4 fce0 	bl	8000288 <__aeabi_dsub>
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	4640      	mov	r0, r8
 800b8ce:	4649      	mov	r1, r9
 800b8d0:	f7f5 f904 	bl	8000adc <__aeabi_dcmplt>
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	f43f af35 	beq.w	800b744 <_dtoa_r+0x464>
 800b8da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b8dc:	1e6b      	subs	r3, r5, #1
 800b8de:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b8e4:	2b30      	cmp	r3, #48	; 0x30
 800b8e6:	d0f8      	beq.n	800b8da <_dtoa_r+0x5fa>
 800b8e8:	9700      	str	r7, [sp, #0]
 800b8ea:	e049      	b.n	800b980 <_dtoa_r+0x6a0>
 800b8ec:	4b05      	ldr	r3, [pc, #20]	; (800b904 <_dtoa_r+0x624>)
 800b8ee:	f7f4 fe83 	bl	80005f8 <__aeabi_dmul>
 800b8f2:	4680      	mov	r8, r0
 800b8f4:	4689      	mov	r9, r1
 800b8f6:	e7bd      	b.n	800b874 <_dtoa_r+0x594>
 800b8f8:	0800dc38 	.word	0x0800dc38
 800b8fc:	0800dc10 	.word	0x0800dc10
 800b900:	3ff00000 	.word	0x3ff00000
 800b904:	40240000 	.word	0x40240000
 800b908:	401c0000 	.word	0x401c0000
 800b90c:	40140000 	.word	0x40140000
 800b910:	3fe00000 	.word	0x3fe00000
 800b914:	9d01      	ldr	r5, [sp, #4]
 800b916:	4656      	mov	r6, sl
 800b918:	465f      	mov	r7, fp
 800b91a:	4642      	mov	r2, r8
 800b91c:	464b      	mov	r3, r9
 800b91e:	4630      	mov	r0, r6
 800b920:	4639      	mov	r1, r7
 800b922:	f7f4 ff93 	bl	800084c <__aeabi_ddiv>
 800b926:	f7f5 f917 	bl	8000b58 <__aeabi_d2iz>
 800b92a:	4682      	mov	sl, r0
 800b92c:	f7f4 fdfa 	bl	8000524 <__aeabi_i2d>
 800b930:	4642      	mov	r2, r8
 800b932:	464b      	mov	r3, r9
 800b934:	f7f4 fe60 	bl	80005f8 <__aeabi_dmul>
 800b938:	4602      	mov	r2, r0
 800b93a:	460b      	mov	r3, r1
 800b93c:	4630      	mov	r0, r6
 800b93e:	4639      	mov	r1, r7
 800b940:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b944:	f7f4 fca0 	bl	8000288 <__aeabi_dsub>
 800b948:	f805 6b01 	strb.w	r6, [r5], #1
 800b94c:	9e01      	ldr	r6, [sp, #4]
 800b94e:	9f03      	ldr	r7, [sp, #12]
 800b950:	1bae      	subs	r6, r5, r6
 800b952:	42b7      	cmp	r7, r6
 800b954:	4602      	mov	r2, r0
 800b956:	460b      	mov	r3, r1
 800b958:	d135      	bne.n	800b9c6 <_dtoa_r+0x6e6>
 800b95a:	f7f4 fc97 	bl	800028c <__adddf3>
 800b95e:	4642      	mov	r2, r8
 800b960:	464b      	mov	r3, r9
 800b962:	4606      	mov	r6, r0
 800b964:	460f      	mov	r7, r1
 800b966:	f7f5 f8d7 	bl	8000b18 <__aeabi_dcmpgt>
 800b96a:	b9d0      	cbnz	r0, 800b9a2 <_dtoa_r+0x6c2>
 800b96c:	4642      	mov	r2, r8
 800b96e:	464b      	mov	r3, r9
 800b970:	4630      	mov	r0, r6
 800b972:	4639      	mov	r1, r7
 800b974:	f7f5 f8a8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b978:	b110      	cbz	r0, 800b980 <_dtoa_r+0x6a0>
 800b97a:	f01a 0f01 	tst.w	sl, #1
 800b97e:	d110      	bne.n	800b9a2 <_dtoa_r+0x6c2>
 800b980:	4620      	mov	r0, r4
 800b982:	ee18 1a10 	vmov	r1, s16
 800b986:	f000 faf3 	bl	800bf70 <_Bfree>
 800b98a:	2300      	movs	r3, #0
 800b98c:	9800      	ldr	r0, [sp, #0]
 800b98e:	702b      	strb	r3, [r5, #0]
 800b990:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b992:	3001      	adds	r0, #1
 800b994:	6018      	str	r0, [r3, #0]
 800b996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f43f acf1 	beq.w	800b380 <_dtoa_r+0xa0>
 800b99e:	601d      	str	r5, [r3, #0]
 800b9a0:	e4ee      	b.n	800b380 <_dtoa_r+0xa0>
 800b9a2:	9f00      	ldr	r7, [sp, #0]
 800b9a4:	462b      	mov	r3, r5
 800b9a6:	461d      	mov	r5, r3
 800b9a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9ac:	2a39      	cmp	r2, #57	; 0x39
 800b9ae:	d106      	bne.n	800b9be <_dtoa_r+0x6de>
 800b9b0:	9a01      	ldr	r2, [sp, #4]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d1f7      	bne.n	800b9a6 <_dtoa_r+0x6c6>
 800b9b6:	9901      	ldr	r1, [sp, #4]
 800b9b8:	2230      	movs	r2, #48	; 0x30
 800b9ba:	3701      	adds	r7, #1
 800b9bc:	700a      	strb	r2, [r1, #0]
 800b9be:	781a      	ldrb	r2, [r3, #0]
 800b9c0:	3201      	adds	r2, #1
 800b9c2:	701a      	strb	r2, [r3, #0]
 800b9c4:	e790      	b.n	800b8e8 <_dtoa_r+0x608>
 800b9c6:	4ba6      	ldr	r3, [pc, #664]	; (800bc60 <_dtoa_r+0x980>)
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f7f4 fe15 	bl	80005f8 <__aeabi_dmul>
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	4606      	mov	r6, r0
 800b9d4:	460f      	mov	r7, r1
 800b9d6:	f7f5 f877 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	d09d      	beq.n	800b91a <_dtoa_r+0x63a>
 800b9de:	e7cf      	b.n	800b980 <_dtoa_r+0x6a0>
 800b9e0:	9a08      	ldr	r2, [sp, #32]
 800b9e2:	2a00      	cmp	r2, #0
 800b9e4:	f000 80d7 	beq.w	800bb96 <_dtoa_r+0x8b6>
 800b9e8:	9a06      	ldr	r2, [sp, #24]
 800b9ea:	2a01      	cmp	r2, #1
 800b9ec:	f300 80ba 	bgt.w	800bb64 <_dtoa_r+0x884>
 800b9f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9f2:	2a00      	cmp	r2, #0
 800b9f4:	f000 80b2 	beq.w	800bb5c <_dtoa_r+0x87c>
 800b9f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b9fc:	9e07      	ldr	r6, [sp, #28]
 800b9fe:	9d04      	ldr	r5, [sp, #16]
 800ba00:	9a04      	ldr	r2, [sp, #16]
 800ba02:	441a      	add	r2, r3
 800ba04:	9204      	str	r2, [sp, #16]
 800ba06:	9a05      	ldr	r2, [sp, #20]
 800ba08:	2101      	movs	r1, #1
 800ba0a:	441a      	add	r2, r3
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	9205      	str	r2, [sp, #20]
 800ba10:	f000 fb66 	bl	800c0e0 <__i2b>
 800ba14:	4607      	mov	r7, r0
 800ba16:	2d00      	cmp	r5, #0
 800ba18:	dd0c      	ble.n	800ba34 <_dtoa_r+0x754>
 800ba1a:	9b05      	ldr	r3, [sp, #20]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	dd09      	ble.n	800ba34 <_dtoa_r+0x754>
 800ba20:	42ab      	cmp	r3, r5
 800ba22:	9a04      	ldr	r2, [sp, #16]
 800ba24:	bfa8      	it	ge
 800ba26:	462b      	movge	r3, r5
 800ba28:	1ad2      	subs	r2, r2, r3
 800ba2a:	9204      	str	r2, [sp, #16]
 800ba2c:	9a05      	ldr	r2, [sp, #20]
 800ba2e:	1aed      	subs	r5, r5, r3
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	9305      	str	r3, [sp, #20]
 800ba34:	9b07      	ldr	r3, [sp, #28]
 800ba36:	b31b      	cbz	r3, 800ba80 <_dtoa_r+0x7a0>
 800ba38:	9b08      	ldr	r3, [sp, #32]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	f000 80af 	beq.w	800bb9e <_dtoa_r+0x8be>
 800ba40:	2e00      	cmp	r6, #0
 800ba42:	dd13      	ble.n	800ba6c <_dtoa_r+0x78c>
 800ba44:	4639      	mov	r1, r7
 800ba46:	4632      	mov	r2, r6
 800ba48:	4620      	mov	r0, r4
 800ba4a:	f000 fc09 	bl	800c260 <__pow5mult>
 800ba4e:	ee18 2a10 	vmov	r2, s16
 800ba52:	4601      	mov	r1, r0
 800ba54:	4607      	mov	r7, r0
 800ba56:	4620      	mov	r0, r4
 800ba58:	f000 fb58 	bl	800c10c <__multiply>
 800ba5c:	ee18 1a10 	vmov	r1, s16
 800ba60:	4680      	mov	r8, r0
 800ba62:	4620      	mov	r0, r4
 800ba64:	f000 fa84 	bl	800bf70 <_Bfree>
 800ba68:	ee08 8a10 	vmov	s16, r8
 800ba6c:	9b07      	ldr	r3, [sp, #28]
 800ba6e:	1b9a      	subs	r2, r3, r6
 800ba70:	d006      	beq.n	800ba80 <_dtoa_r+0x7a0>
 800ba72:	ee18 1a10 	vmov	r1, s16
 800ba76:	4620      	mov	r0, r4
 800ba78:	f000 fbf2 	bl	800c260 <__pow5mult>
 800ba7c:	ee08 0a10 	vmov	s16, r0
 800ba80:	2101      	movs	r1, #1
 800ba82:	4620      	mov	r0, r4
 800ba84:	f000 fb2c 	bl	800c0e0 <__i2b>
 800ba88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	4606      	mov	r6, r0
 800ba8e:	f340 8088 	ble.w	800bba2 <_dtoa_r+0x8c2>
 800ba92:	461a      	mov	r2, r3
 800ba94:	4601      	mov	r1, r0
 800ba96:	4620      	mov	r0, r4
 800ba98:	f000 fbe2 	bl	800c260 <__pow5mult>
 800ba9c:	9b06      	ldr	r3, [sp, #24]
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	4606      	mov	r6, r0
 800baa2:	f340 8081 	ble.w	800bba8 <_dtoa_r+0x8c8>
 800baa6:	f04f 0800 	mov.w	r8, #0
 800baaa:	6933      	ldr	r3, [r6, #16]
 800baac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bab0:	6918      	ldr	r0, [r3, #16]
 800bab2:	f000 fac5 	bl	800c040 <__hi0bits>
 800bab6:	f1c0 0020 	rsb	r0, r0, #32
 800baba:	9b05      	ldr	r3, [sp, #20]
 800babc:	4418      	add	r0, r3
 800babe:	f010 001f 	ands.w	r0, r0, #31
 800bac2:	f000 8092 	beq.w	800bbea <_dtoa_r+0x90a>
 800bac6:	f1c0 0320 	rsb	r3, r0, #32
 800baca:	2b04      	cmp	r3, #4
 800bacc:	f340 808a 	ble.w	800bbe4 <_dtoa_r+0x904>
 800bad0:	f1c0 001c 	rsb	r0, r0, #28
 800bad4:	9b04      	ldr	r3, [sp, #16]
 800bad6:	4403      	add	r3, r0
 800bad8:	9304      	str	r3, [sp, #16]
 800bada:	9b05      	ldr	r3, [sp, #20]
 800badc:	4403      	add	r3, r0
 800bade:	4405      	add	r5, r0
 800bae0:	9305      	str	r3, [sp, #20]
 800bae2:	9b04      	ldr	r3, [sp, #16]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	dd07      	ble.n	800baf8 <_dtoa_r+0x818>
 800bae8:	ee18 1a10 	vmov	r1, s16
 800baec:	461a      	mov	r2, r3
 800baee:	4620      	mov	r0, r4
 800baf0:	f000 fc10 	bl	800c314 <__lshift>
 800baf4:	ee08 0a10 	vmov	s16, r0
 800baf8:	9b05      	ldr	r3, [sp, #20]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	dd05      	ble.n	800bb0a <_dtoa_r+0x82a>
 800bafe:	4631      	mov	r1, r6
 800bb00:	461a      	mov	r2, r3
 800bb02:	4620      	mov	r0, r4
 800bb04:	f000 fc06 	bl	800c314 <__lshift>
 800bb08:	4606      	mov	r6, r0
 800bb0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d06e      	beq.n	800bbee <_dtoa_r+0x90e>
 800bb10:	ee18 0a10 	vmov	r0, s16
 800bb14:	4631      	mov	r1, r6
 800bb16:	f000 fc6d 	bl	800c3f4 <__mcmp>
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	da67      	bge.n	800bbee <_dtoa_r+0x90e>
 800bb1e:	9b00      	ldr	r3, [sp, #0]
 800bb20:	3b01      	subs	r3, #1
 800bb22:	ee18 1a10 	vmov	r1, s16
 800bb26:	9300      	str	r3, [sp, #0]
 800bb28:	220a      	movs	r2, #10
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	f000 fa41 	bl	800bfb4 <__multadd>
 800bb32:	9b08      	ldr	r3, [sp, #32]
 800bb34:	ee08 0a10 	vmov	s16, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	f000 81b1 	beq.w	800bea0 <_dtoa_r+0xbc0>
 800bb3e:	2300      	movs	r3, #0
 800bb40:	4639      	mov	r1, r7
 800bb42:	220a      	movs	r2, #10
 800bb44:	4620      	mov	r0, r4
 800bb46:	f000 fa35 	bl	800bfb4 <__multadd>
 800bb4a:	9b02      	ldr	r3, [sp, #8]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	4607      	mov	r7, r0
 800bb50:	f300 808e 	bgt.w	800bc70 <_dtoa_r+0x990>
 800bb54:	9b06      	ldr	r3, [sp, #24]
 800bb56:	2b02      	cmp	r3, #2
 800bb58:	dc51      	bgt.n	800bbfe <_dtoa_r+0x91e>
 800bb5a:	e089      	b.n	800bc70 <_dtoa_r+0x990>
 800bb5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bb62:	e74b      	b.n	800b9fc <_dtoa_r+0x71c>
 800bb64:	9b03      	ldr	r3, [sp, #12]
 800bb66:	1e5e      	subs	r6, r3, #1
 800bb68:	9b07      	ldr	r3, [sp, #28]
 800bb6a:	42b3      	cmp	r3, r6
 800bb6c:	bfbf      	itttt	lt
 800bb6e:	9b07      	ldrlt	r3, [sp, #28]
 800bb70:	9607      	strlt	r6, [sp, #28]
 800bb72:	1af2      	sublt	r2, r6, r3
 800bb74:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bb76:	bfb6      	itet	lt
 800bb78:	189b      	addlt	r3, r3, r2
 800bb7a:	1b9e      	subge	r6, r3, r6
 800bb7c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bb7e:	9b03      	ldr	r3, [sp, #12]
 800bb80:	bfb8      	it	lt
 800bb82:	2600      	movlt	r6, #0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	bfb7      	itett	lt
 800bb88:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bb8c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bb90:	1a9d      	sublt	r5, r3, r2
 800bb92:	2300      	movlt	r3, #0
 800bb94:	e734      	b.n	800ba00 <_dtoa_r+0x720>
 800bb96:	9e07      	ldr	r6, [sp, #28]
 800bb98:	9d04      	ldr	r5, [sp, #16]
 800bb9a:	9f08      	ldr	r7, [sp, #32]
 800bb9c:	e73b      	b.n	800ba16 <_dtoa_r+0x736>
 800bb9e:	9a07      	ldr	r2, [sp, #28]
 800bba0:	e767      	b.n	800ba72 <_dtoa_r+0x792>
 800bba2:	9b06      	ldr	r3, [sp, #24]
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	dc18      	bgt.n	800bbda <_dtoa_r+0x8fa>
 800bba8:	f1ba 0f00 	cmp.w	sl, #0
 800bbac:	d115      	bne.n	800bbda <_dtoa_r+0x8fa>
 800bbae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bbb2:	b993      	cbnz	r3, 800bbda <_dtoa_r+0x8fa>
 800bbb4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bbb8:	0d1b      	lsrs	r3, r3, #20
 800bbba:	051b      	lsls	r3, r3, #20
 800bbbc:	b183      	cbz	r3, 800bbe0 <_dtoa_r+0x900>
 800bbbe:	9b04      	ldr	r3, [sp, #16]
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	9304      	str	r3, [sp, #16]
 800bbc4:	9b05      	ldr	r3, [sp, #20]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	9305      	str	r3, [sp, #20]
 800bbca:	f04f 0801 	mov.w	r8, #1
 800bbce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	f47f af6a 	bne.w	800baaa <_dtoa_r+0x7ca>
 800bbd6:	2001      	movs	r0, #1
 800bbd8:	e76f      	b.n	800baba <_dtoa_r+0x7da>
 800bbda:	f04f 0800 	mov.w	r8, #0
 800bbde:	e7f6      	b.n	800bbce <_dtoa_r+0x8ee>
 800bbe0:	4698      	mov	r8, r3
 800bbe2:	e7f4      	b.n	800bbce <_dtoa_r+0x8ee>
 800bbe4:	f43f af7d 	beq.w	800bae2 <_dtoa_r+0x802>
 800bbe8:	4618      	mov	r0, r3
 800bbea:	301c      	adds	r0, #28
 800bbec:	e772      	b.n	800bad4 <_dtoa_r+0x7f4>
 800bbee:	9b03      	ldr	r3, [sp, #12]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	dc37      	bgt.n	800bc64 <_dtoa_r+0x984>
 800bbf4:	9b06      	ldr	r3, [sp, #24]
 800bbf6:	2b02      	cmp	r3, #2
 800bbf8:	dd34      	ble.n	800bc64 <_dtoa_r+0x984>
 800bbfa:	9b03      	ldr	r3, [sp, #12]
 800bbfc:	9302      	str	r3, [sp, #8]
 800bbfe:	9b02      	ldr	r3, [sp, #8]
 800bc00:	b96b      	cbnz	r3, 800bc1e <_dtoa_r+0x93e>
 800bc02:	4631      	mov	r1, r6
 800bc04:	2205      	movs	r2, #5
 800bc06:	4620      	mov	r0, r4
 800bc08:	f000 f9d4 	bl	800bfb4 <__multadd>
 800bc0c:	4601      	mov	r1, r0
 800bc0e:	4606      	mov	r6, r0
 800bc10:	ee18 0a10 	vmov	r0, s16
 800bc14:	f000 fbee 	bl	800c3f4 <__mcmp>
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	f73f adbb 	bgt.w	800b794 <_dtoa_r+0x4b4>
 800bc1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc20:	9d01      	ldr	r5, [sp, #4]
 800bc22:	43db      	mvns	r3, r3
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	f04f 0800 	mov.w	r8, #0
 800bc2a:	4631      	mov	r1, r6
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	f000 f99f 	bl	800bf70 <_Bfree>
 800bc32:	2f00      	cmp	r7, #0
 800bc34:	f43f aea4 	beq.w	800b980 <_dtoa_r+0x6a0>
 800bc38:	f1b8 0f00 	cmp.w	r8, #0
 800bc3c:	d005      	beq.n	800bc4a <_dtoa_r+0x96a>
 800bc3e:	45b8      	cmp	r8, r7
 800bc40:	d003      	beq.n	800bc4a <_dtoa_r+0x96a>
 800bc42:	4641      	mov	r1, r8
 800bc44:	4620      	mov	r0, r4
 800bc46:	f000 f993 	bl	800bf70 <_Bfree>
 800bc4a:	4639      	mov	r1, r7
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	f000 f98f 	bl	800bf70 <_Bfree>
 800bc52:	e695      	b.n	800b980 <_dtoa_r+0x6a0>
 800bc54:	2600      	movs	r6, #0
 800bc56:	4637      	mov	r7, r6
 800bc58:	e7e1      	b.n	800bc1e <_dtoa_r+0x93e>
 800bc5a:	9700      	str	r7, [sp, #0]
 800bc5c:	4637      	mov	r7, r6
 800bc5e:	e599      	b.n	800b794 <_dtoa_r+0x4b4>
 800bc60:	40240000 	.word	0x40240000
 800bc64:	9b08      	ldr	r3, [sp, #32]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	f000 80ca 	beq.w	800be00 <_dtoa_r+0xb20>
 800bc6c:	9b03      	ldr	r3, [sp, #12]
 800bc6e:	9302      	str	r3, [sp, #8]
 800bc70:	2d00      	cmp	r5, #0
 800bc72:	dd05      	ble.n	800bc80 <_dtoa_r+0x9a0>
 800bc74:	4639      	mov	r1, r7
 800bc76:	462a      	mov	r2, r5
 800bc78:	4620      	mov	r0, r4
 800bc7a:	f000 fb4b 	bl	800c314 <__lshift>
 800bc7e:	4607      	mov	r7, r0
 800bc80:	f1b8 0f00 	cmp.w	r8, #0
 800bc84:	d05b      	beq.n	800bd3e <_dtoa_r+0xa5e>
 800bc86:	6879      	ldr	r1, [r7, #4]
 800bc88:	4620      	mov	r0, r4
 800bc8a:	f000 f931 	bl	800bef0 <_Balloc>
 800bc8e:	4605      	mov	r5, r0
 800bc90:	b928      	cbnz	r0, 800bc9e <_dtoa_r+0x9be>
 800bc92:	4b87      	ldr	r3, [pc, #540]	; (800beb0 <_dtoa_r+0xbd0>)
 800bc94:	4602      	mov	r2, r0
 800bc96:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bc9a:	f7ff bb3b 	b.w	800b314 <_dtoa_r+0x34>
 800bc9e:	693a      	ldr	r2, [r7, #16]
 800bca0:	3202      	adds	r2, #2
 800bca2:	0092      	lsls	r2, r2, #2
 800bca4:	f107 010c 	add.w	r1, r7, #12
 800bca8:	300c      	adds	r0, #12
 800bcaa:	f000 f913 	bl	800bed4 <memcpy>
 800bcae:	2201      	movs	r2, #1
 800bcb0:	4629      	mov	r1, r5
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f000 fb2e 	bl	800c314 <__lshift>
 800bcb8:	9b01      	ldr	r3, [sp, #4]
 800bcba:	f103 0901 	add.w	r9, r3, #1
 800bcbe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bcc2:	4413      	add	r3, r2
 800bcc4:	9305      	str	r3, [sp, #20]
 800bcc6:	f00a 0301 	and.w	r3, sl, #1
 800bcca:	46b8      	mov	r8, r7
 800bccc:	9304      	str	r3, [sp, #16]
 800bcce:	4607      	mov	r7, r0
 800bcd0:	4631      	mov	r1, r6
 800bcd2:	ee18 0a10 	vmov	r0, s16
 800bcd6:	f7ff fa75 	bl	800b1c4 <quorem>
 800bcda:	4641      	mov	r1, r8
 800bcdc:	9002      	str	r0, [sp, #8]
 800bcde:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bce2:	ee18 0a10 	vmov	r0, s16
 800bce6:	f000 fb85 	bl	800c3f4 <__mcmp>
 800bcea:	463a      	mov	r2, r7
 800bcec:	9003      	str	r0, [sp, #12]
 800bcee:	4631      	mov	r1, r6
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f000 fb9b 	bl	800c42c <__mdiff>
 800bcf6:	68c2      	ldr	r2, [r0, #12]
 800bcf8:	f109 3bff 	add.w	fp, r9, #4294967295
 800bcfc:	4605      	mov	r5, r0
 800bcfe:	bb02      	cbnz	r2, 800bd42 <_dtoa_r+0xa62>
 800bd00:	4601      	mov	r1, r0
 800bd02:	ee18 0a10 	vmov	r0, s16
 800bd06:	f000 fb75 	bl	800c3f4 <__mcmp>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	4620      	mov	r0, r4
 800bd10:	9207      	str	r2, [sp, #28]
 800bd12:	f000 f92d 	bl	800bf70 <_Bfree>
 800bd16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bd1a:	ea43 0102 	orr.w	r1, r3, r2
 800bd1e:	9b04      	ldr	r3, [sp, #16]
 800bd20:	430b      	orrs	r3, r1
 800bd22:	464d      	mov	r5, r9
 800bd24:	d10f      	bne.n	800bd46 <_dtoa_r+0xa66>
 800bd26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bd2a:	d02a      	beq.n	800bd82 <_dtoa_r+0xaa2>
 800bd2c:	9b03      	ldr	r3, [sp, #12]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	dd02      	ble.n	800bd38 <_dtoa_r+0xa58>
 800bd32:	9b02      	ldr	r3, [sp, #8]
 800bd34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bd38:	f88b a000 	strb.w	sl, [fp]
 800bd3c:	e775      	b.n	800bc2a <_dtoa_r+0x94a>
 800bd3e:	4638      	mov	r0, r7
 800bd40:	e7ba      	b.n	800bcb8 <_dtoa_r+0x9d8>
 800bd42:	2201      	movs	r2, #1
 800bd44:	e7e2      	b.n	800bd0c <_dtoa_r+0xa2c>
 800bd46:	9b03      	ldr	r3, [sp, #12]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	db04      	blt.n	800bd56 <_dtoa_r+0xa76>
 800bd4c:	9906      	ldr	r1, [sp, #24]
 800bd4e:	430b      	orrs	r3, r1
 800bd50:	9904      	ldr	r1, [sp, #16]
 800bd52:	430b      	orrs	r3, r1
 800bd54:	d122      	bne.n	800bd9c <_dtoa_r+0xabc>
 800bd56:	2a00      	cmp	r2, #0
 800bd58:	ddee      	ble.n	800bd38 <_dtoa_r+0xa58>
 800bd5a:	ee18 1a10 	vmov	r1, s16
 800bd5e:	2201      	movs	r2, #1
 800bd60:	4620      	mov	r0, r4
 800bd62:	f000 fad7 	bl	800c314 <__lshift>
 800bd66:	4631      	mov	r1, r6
 800bd68:	ee08 0a10 	vmov	s16, r0
 800bd6c:	f000 fb42 	bl	800c3f4 <__mcmp>
 800bd70:	2800      	cmp	r0, #0
 800bd72:	dc03      	bgt.n	800bd7c <_dtoa_r+0xa9c>
 800bd74:	d1e0      	bne.n	800bd38 <_dtoa_r+0xa58>
 800bd76:	f01a 0f01 	tst.w	sl, #1
 800bd7a:	d0dd      	beq.n	800bd38 <_dtoa_r+0xa58>
 800bd7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bd80:	d1d7      	bne.n	800bd32 <_dtoa_r+0xa52>
 800bd82:	2339      	movs	r3, #57	; 0x39
 800bd84:	f88b 3000 	strb.w	r3, [fp]
 800bd88:	462b      	mov	r3, r5
 800bd8a:	461d      	mov	r5, r3
 800bd8c:	3b01      	subs	r3, #1
 800bd8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bd92:	2a39      	cmp	r2, #57	; 0x39
 800bd94:	d071      	beq.n	800be7a <_dtoa_r+0xb9a>
 800bd96:	3201      	adds	r2, #1
 800bd98:	701a      	strb	r2, [r3, #0]
 800bd9a:	e746      	b.n	800bc2a <_dtoa_r+0x94a>
 800bd9c:	2a00      	cmp	r2, #0
 800bd9e:	dd07      	ble.n	800bdb0 <_dtoa_r+0xad0>
 800bda0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bda4:	d0ed      	beq.n	800bd82 <_dtoa_r+0xaa2>
 800bda6:	f10a 0301 	add.w	r3, sl, #1
 800bdaa:	f88b 3000 	strb.w	r3, [fp]
 800bdae:	e73c      	b.n	800bc2a <_dtoa_r+0x94a>
 800bdb0:	9b05      	ldr	r3, [sp, #20]
 800bdb2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bdb6:	4599      	cmp	r9, r3
 800bdb8:	d047      	beq.n	800be4a <_dtoa_r+0xb6a>
 800bdba:	ee18 1a10 	vmov	r1, s16
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	220a      	movs	r2, #10
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f000 f8f6 	bl	800bfb4 <__multadd>
 800bdc8:	45b8      	cmp	r8, r7
 800bdca:	ee08 0a10 	vmov	s16, r0
 800bdce:	f04f 0300 	mov.w	r3, #0
 800bdd2:	f04f 020a 	mov.w	r2, #10
 800bdd6:	4641      	mov	r1, r8
 800bdd8:	4620      	mov	r0, r4
 800bdda:	d106      	bne.n	800bdea <_dtoa_r+0xb0a>
 800bddc:	f000 f8ea 	bl	800bfb4 <__multadd>
 800bde0:	4680      	mov	r8, r0
 800bde2:	4607      	mov	r7, r0
 800bde4:	f109 0901 	add.w	r9, r9, #1
 800bde8:	e772      	b.n	800bcd0 <_dtoa_r+0x9f0>
 800bdea:	f000 f8e3 	bl	800bfb4 <__multadd>
 800bdee:	4639      	mov	r1, r7
 800bdf0:	4680      	mov	r8, r0
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	220a      	movs	r2, #10
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	f000 f8dc 	bl	800bfb4 <__multadd>
 800bdfc:	4607      	mov	r7, r0
 800bdfe:	e7f1      	b.n	800bde4 <_dtoa_r+0xb04>
 800be00:	9b03      	ldr	r3, [sp, #12]
 800be02:	9302      	str	r3, [sp, #8]
 800be04:	9d01      	ldr	r5, [sp, #4]
 800be06:	ee18 0a10 	vmov	r0, s16
 800be0a:	4631      	mov	r1, r6
 800be0c:	f7ff f9da 	bl	800b1c4 <quorem>
 800be10:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800be14:	9b01      	ldr	r3, [sp, #4]
 800be16:	f805 ab01 	strb.w	sl, [r5], #1
 800be1a:	1aea      	subs	r2, r5, r3
 800be1c:	9b02      	ldr	r3, [sp, #8]
 800be1e:	4293      	cmp	r3, r2
 800be20:	dd09      	ble.n	800be36 <_dtoa_r+0xb56>
 800be22:	ee18 1a10 	vmov	r1, s16
 800be26:	2300      	movs	r3, #0
 800be28:	220a      	movs	r2, #10
 800be2a:	4620      	mov	r0, r4
 800be2c:	f000 f8c2 	bl	800bfb4 <__multadd>
 800be30:	ee08 0a10 	vmov	s16, r0
 800be34:	e7e7      	b.n	800be06 <_dtoa_r+0xb26>
 800be36:	9b02      	ldr	r3, [sp, #8]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	bfc8      	it	gt
 800be3c:	461d      	movgt	r5, r3
 800be3e:	9b01      	ldr	r3, [sp, #4]
 800be40:	bfd8      	it	le
 800be42:	2501      	movle	r5, #1
 800be44:	441d      	add	r5, r3
 800be46:	f04f 0800 	mov.w	r8, #0
 800be4a:	ee18 1a10 	vmov	r1, s16
 800be4e:	2201      	movs	r2, #1
 800be50:	4620      	mov	r0, r4
 800be52:	f000 fa5f 	bl	800c314 <__lshift>
 800be56:	4631      	mov	r1, r6
 800be58:	ee08 0a10 	vmov	s16, r0
 800be5c:	f000 faca 	bl	800c3f4 <__mcmp>
 800be60:	2800      	cmp	r0, #0
 800be62:	dc91      	bgt.n	800bd88 <_dtoa_r+0xaa8>
 800be64:	d102      	bne.n	800be6c <_dtoa_r+0xb8c>
 800be66:	f01a 0f01 	tst.w	sl, #1
 800be6a:	d18d      	bne.n	800bd88 <_dtoa_r+0xaa8>
 800be6c:	462b      	mov	r3, r5
 800be6e:	461d      	mov	r5, r3
 800be70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be74:	2a30      	cmp	r2, #48	; 0x30
 800be76:	d0fa      	beq.n	800be6e <_dtoa_r+0xb8e>
 800be78:	e6d7      	b.n	800bc2a <_dtoa_r+0x94a>
 800be7a:	9a01      	ldr	r2, [sp, #4]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d184      	bne.n	800bd8a <_dtoa_r+0xaaa>
 800be80:	9b00      	ldr	r3, [sp, #0]
 800be82:	3301      	adds	r3, #1
 800be84:	9300      	str	r3, [sp, #0]
 800be86:	2331      	movs	r3, #49	; 0x31
 800be88:	7013      	strb	r3, [r2, #0]
 800be8a:	e6ce      	b.n	800bc2a <_dtoa_r+0x94a>
 800be8c:	4b09      	ldr	r3, [pc, #36]	; (800beb4 <_dtoa_r+0xbd4>)
 800be8e:	f7ff ba95 	b.w	800b3bc <_dtoa_r+0xdc>
 800be92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be94:	2b00      	cmp	r3, #0
 800be96:	f47f aa6e 	bne.w	800b376 <_dtoa_r+0x96>
 800be9a:	4b07      	ldr	r3, [pc, #28]	; (800beb8 <_dtoa_r+0xbd8>)
 800be9c:	f7ff ba8e 	b.w	800b3bc <_dtoa_r+0xdc>
 800bea0:	9b02      	ldr	r3, [sp, #8]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	dcae      	bgt.n	800be04 <_dtoa_r+0xb24>
 800bea6:	9b06      	ldr	r3, [sp, #24]
 800bea8:	2b02      	cmp	r3, #2
 800beaa:	f73f aea8 	bgt.w	800bbfe <_dtoa_r+0x91e>
 800beae:	e7a9      	b.n	800be04 <_dtoa_r+0xb24>
 800beb0:	0800dba3 	.word	0x0800dba3
 800beb4:	0800db00 	.word	0x0800db00
 800beb8:	0800db24 	.word	0x0800db24

0800bebc <_localeconv_r>:
 800bebc:	4800      	ldr	r0, [pc, #0]	; (800bec0 <_localeconv_r+0x4>)
 800bebe:	4770      	bx	lr
 800bec0:	20000258 	.word	0x20000258

0800bec4 <malloc>:
 800bec4:	4b02      	ldr	r3, [pc, #8]	; (800bed0 <malloc+0xc>)
 800bec6:	4601      	mov	r1, r0
 800bec8:	6818      	ldr	r0, [r3, #0]
 800beca:	f000 bc17 	b.w	800c6fc <_malloc_r>
 800bece:	bf00      	nop
 800bed0:	20000104 	.word	0x20000104

0800bed4 <memcpy>:
 800bed4:	440a      	add	r2, r1
 800bed6:	4291      	cmp	r1, r2
 800bed8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bedc:	d100      	bne.n	800bee0 <memcpy+0xc>
 800bede:	4770      	bx	lr
 800bee0:	b510      	push	{r4, lr}
 800bee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800beea:	4291      	cmp	r1, r2
 800beec:	d1f9      	bne.n	800bee2 <memcpy+0xe>
 800beee:	bd10      	pop	{r4, pc}

0800bef0 <_Balloc>:
 800bef0:	b570      	push	{r4, r5, r6, lr}
 800bef2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bef4:	4604      	mov	r4, r0
 800bef6:	460d      	mov	r5, r1
 800bef8:	b976      	cbnz	r6, 800bf18 <_Balloc+0x28>
 800befa:	2010      	movs	r0, #16
 800befc:	f7ff ffe2 	bl	800bec4 <malloc>
 800bf00:	4602      	mov	r2, r0
 800bf02:	6260      	str	r0, [r4, #36]	; 0x24
 800bf04:	b920      	cbnz	r0, 800bf10 <_Balloc+0x20>
 800bf06:	4b18      	ldr	r3, [pc, #96]	; (800bf68 <_Balloc+0x78>)
 800bf08:	4818      	ldr	r0, [pc, #96]	; (800bf6c <_Balloc+0x7c>)
 800bf0a:	2166      	movs	r1, #102	; 0x66
 800bf0c:	f000 fdd6 	bl	800cabc <__assert_func>
 800bf10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf14:	6006      	str	r6, [r0, #0]
 800bf16:	60c6      	str	r6, [r0, #12]
 800bf18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf1a:	68f3      	ldr	r3, [r6, #12]
 800bf1c:	b183      	cbz	r3, 800bf40 <_Balloc+0x50>
 800bf1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf26:	b9b8      	cbnz	r0, 800bf58 <_Balloc+0x68>
 800bf28:	2101      	movs	r1, #1
 800bf2a:	fa01 f605 	lsl.w	r6, r1, r5
 800bf2e:	1d72      	adds	r2, r6, #5
 800bf30:	0092      	lsls	r2, r2, #2
 800bf32:	4620      	mov	r0, r4
 800bf34:	f000 fb60 	bl	800c5f8 <_calloc_r>
 800bf38:	b160      	cbz	r0, 800bf54 <_Balloc+0x64>
 800bf3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf3e:	e00e      	b.n	800bf5e <_Balloc+0x6e>
 800bf40:	2221      	movs	r2, #33	; 0x21
 800bf42:	2104      	movs	r1, #4
 800bf44:	4620      	mov	r0, r4
 800bf46:	f000 fb57 	bl	800c5f8 <_calloc_r>
 800bf4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf4c:	60f0      	str	r0, [r6, #12]
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d1e4      	bne.n	800bf1e <_Balloc+0x2e>
 800bf54:	2000      	movs	r0, #0
 800bf56:	bd70      	pop	{r4, r5, r6, pc}
 800bf58:	6802      	ldr	r2, [r0, #0]
 800bf5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf5e:	2300      	movs	r3, #0
 800bf60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf64:	e7f7      	b.n	800bf56 <_Balloc+0x66>
 800bf66:	bf00      	nop
 800bf68:	0800db31 	.word	0x0800db31
 800bf6c:	0800dbb4 	.word	0x0800dbb4

0800bf70 <_Bfree>:
 800bf70:	b570      	push	{r4, r5, r6, lr}
 800bf72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf74:	4605      	mov	r5, r0
 800bf76:	460c      	mov	r4, r1
 800bf78:	b976      	cbnz	r6, 800bf98 <_Bfree+0x28>
 800bf7a:	2010      	movs	r0, #16
 800bf7c:	f7ff ffa2 	bl	800bec4 <malloc>
 800bf80:	4602      	mov	r2, r0
 800bf82:	6268      	str	r0, [r5, #36]	; 0x24
 800bf84:	b920      	cbnz	r0, 800bf90 <_Bfree+0x20>
 800bf86:	4b09      	ldr	r3, [pc, #36]	; (800bfac <_Bfree+0x3c>)
 800bf88:	4809      	ldr	r0, [pc, #36]	; (800bfb0 <_Bfree+0x40>)
 800bf8a:	218a      	movs	r1, #138	; 0x8a
 800bf8c:	f000 fd96 	bl	800cabc <__assert_func>
 800bf90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf94:	6006      	str	r6, [r0, #0]
 800bf96:	60c6      	str	r6, [r0, #12]
 800bf98:	b13c      	cbz	r4, 800bfaa <_Bfree+0x3a>
 800bf9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf9c:	6862      	ldr	r2, [r4, #4]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfa4:	6021      	str	r1, [r4, #0]
 800bfa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bfaa:	bd70      	pop	{r4, r5, r6, pc}
 800bfac:	0800db31 	.word	0x0800db31
 800bfb0:	0800dbb4 	.word	0x0800dbb4

0800bfb4 <__multadd>:
 800bfb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb8:	690d      	ldr	r5, [r1, #16]
 800bfba:	4607      	mov	r7, r0
 800bfbc:	460c      	mov	r4, r1
 800bfbe:	461e      	mov	r6, r3
 800bfc0:	f101 0c14 	add.w	ip, r1, #20
 800bfc4:	2000      	movs	r0, #0
 800bfc6:	f8dc 3000 	ldr.w	r3, [ip]
 800bfca:	b299      	uxth	r1, r3
 800bfcc:	fb02 6101 	mla	r1, r2, r1, r6
 800bfd0:	0c1e      	lsrs	r6, r3, #16
 800bfd2:	0c0b      	lsrs	r3, r1, #16
 800bfd4:	fb02 3306 	mla	r3, r2, r6, r3
 800bfd8:	b289      	uxth	r1, r1
 800bfda:	3001      	adds	r0, #1
 800bfdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfe0:	4285      	cmp	r5, r0
 800bfe2:	f84c 1b04 	str.w	r1, [ip], #4
 800bfe6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bfea:	dcec      	bgt.n	800bfc6 <__multadd+0x12>
 800bfec:	b30e      	cbz	r6, 800c032 <__multadd+0x7e>
 800bfee:	68a3      	ldr	r3, [r4, #8]
 800bff0:	42ab      	cmp	r3, r5
 800bff2:	dc19      	bgt.n	800c028 <__multadd+0x74>
 800bff4:	6861      	ldr	r1, [r4, #4]
 800bff6:	4638      	mov	r0, r7
 800bff8:	3101      	adds	r1, #1
 800bffa:	f7ff ff79 	bl	800bef0 <_Balloc>
 800bffe:	4680      	mov	r8, r0
 800c000:	b928      	cbnz	r0, 800c00e <__multadd+0x5a>
 800c002:	4602      	mov	r2, r0
 800c004:	4b0c      	ldr	r3, [pc, #48]	; (800c038 <__multadd+0x84>)
 800c006:	480d      	ldr	r0, [pc, #52]	; (800c03c <__multadd+0x88>)
 800c008:	21b5      	movs	r1, #181	; 0xb5
 800c00a:	f000 fd57 	bl	800cabc <__assert_func>
 800c00e:	6922      	ldr	r2, [r4, #16]
 800c010:	3202      	adds	r2, #2
 800c012:	f104 010c 	add.w	r1, r4, #12
 800c016:	0092      	lsls	r2, r2, #2
 800c018:	300c      	adds	r0, #12
 800c01a:	f7ff ff5b 	bl	800bed4 <memcpy>
 800c01e:	4621      	mov	r1, r4
 800c020:	4638      	mov	r0, r7
 800c022:	f7ff ffa5 	bl	800bf70 <_Bfree>
 800c026:	4644      	mov	r4, r8
 800c028:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c02c:	3501      	adds	r5, #1
 800c02e:	615e      	str	r6, [r3, #20]
 800c030:	6125      	str	r5, [r4, #16]
 800c032:	4620      	mov	r0, r4
 800c034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c038:	0800dba3 	.word	0x0800dba3
 800c03c:	0800dbb4 	.word	0x0800dbb4

0800c040 <__hi0bits>:
 800c040:	0c03      	lsrs	r3, r0, #16
 800c042:	041b      	lsls	r3, r3, #16
 800c044:	b9d3      	cbnz	r3, 800c07c <__hi0bits+0x3c>
 800c046:	0400      	lsls	r0, r0, #16
 800c048:	2310      	movs	r3, #16
 800c04a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c04e:	bf04      	itt	eq
 800c050:	0200      	lsleq	r0, r0, #8
 800c052:	3308      	addeq	r3, #8
 800c054:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c058:	bf04      	itt	eq
 800c05a:	0100      	lsleq	r0, r0, #4
 800c05c:	3304      	addeq	r3, #4
 800c05e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c062:	bf04      	itt	eq
 800c064:	0080      	lsleq	r0, r0, #2
 800c066:	3302      	addeq	r3, #2
 800c068:	2800      	cmp	r0, #0
 800c06a:	db05      	blt.n	800c078 <__hi0bits+0x38>
 800c06c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c070:	f103 0301 	add.w	r3, r3, #1
 800c074:	bf08      	it	eq
 800c076:	2320      	moveq	r3, #32
 800c078:	4618      	mov	r0, r3
 800c07a:	4770      	bx	lr
 800c07c:	2300      	movs	r3, #0
 800c07e:	e7e4      	b.n	800c04a <__hi0bits+0xa>

0800c080 <__lo0bits>:
 800c080:	6803      	ldr	r3, [r0, #0]
 800c082:	f013 0207 	ands.w	r2, r3, #7
 800c086:	4601      	mov	r1, r0
 800c088:	d00b      	beq.n	800c0a2 <__lo0bits+0x22>
 800c08a:	07da      	lsls	r2, r3, #31
 800c08c:	d423      	bmi.n	800c0d6 <__lo0bits+0x56>
 800c08e:	0798      	lsls	r0, r3, #30
 800c090:	bf49      	itett	mi
 800c092:	085b      	lsrmi	r3, r3, #1
 800c094:	089b      	lsrpl	r3, r3, #2
 800c096:	2001      	movmi	r0, #1
 800c098:	600b      	strmi	r3, [r1, #0]
 800c09a:	bf5c      	itt	pl
 800c09c:	600b      	strpl	r3, [r1, #0]
 800c09e:	2002      	movpl	r0, #2
 800c0a0:	4770      	bx	lr
 800c0a2:	b298      	uxth	r0, r3
 800c0a4:	b9a8      	cbnz	r0, 800c0d2 <__lo0bits+0x52>
 800c0a6:	0c1b      	lsrs	r3, r3, #16
 800c0a8:	2010      	movs	r0, #16
 800c0aa:	b2da      	uxtb	r2, r3
 800c0ac:	b90a      	cbnz	r2, 800c0b2 <__lo0bits+0x32>
 800c0ae:	3008      	adds	r0, #8
 800c0b0:	0a1b      	lsrs	r3, r3, #8
 800c0b2:	071a      	lsls	r2, r3, #28
 800c0b4:	bf04      	itt	eq
 800c0b6:	091b      	lsreq	r3, r3, #4
 800c0b8:	3004      	addeq	r0, #4
 800c0ba:	079a      	lsls	r2, r3, #30
 800c0bc:	bf04      	itt	eq
 800c0be:	089b      	lsreq	r3, r3, #2
 800c0c0:	3002      	addeq	r0, #2
 800c0c2:	07da      	lsls	r2, r3, #31
 800c0c4:	d403      	bmi.n	800c0ce <__lo0bits+0x4e>
 800c0c6:	085b      	lsrs	r3, r3, #1
 800c0c8:	f100 0001 	add.w	r0, r0, #1
 800c0cc:	d005      	beq.n	800c0da <__lo0bits+0x5a>
 800c0ce:	600b      	str	r3, [r1, #0]
 800c0d0:	4770      	bx	lr
 800c0d2:	4610      	mov	r0, r2
 800c0d4:	e7e9      	b.n	800c0aa <__lo0bits+0x2a>
 800c0d6:	2000      	movs	r0, #0
 800c0d8:	4770      	bx	lr
 800c0da:	2020      	movs	r0, #32
 800c0dc:	4770      	bx	lr
	...

0800c0e0 <__i2b>:
 800c0e0:	b510      	push	{r4, lr}
 800c0e2:	460c      	mov	r4, r1
 800c0e4:	2101      	movs	r1, #1
 800c0e6:	f7ff ff03 	bl	800bef0 <_Balloc>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	b928      	cbnz	r0, 800c0fa <__i2b+0x1a>
 800c0ee:	4b05      	ldr	r3, [pc, #20]	; (800c104 <__i2b+0x24>)
 800c0f0:	4805      	ldr	r0, [pc, #20]	; (800c108 <__i2b+0x28>)
 800c0f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c0f6:	f000 fce1 	bl	800cabc <__assert_func>
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	6144      	str	r4, [r0, #20]
 800c0fe:	6103      	str	r3, [r0, #16]
 800c100:	bd10      	pop	{r4, pc}
 800c102:	bf00      	nop
 800c104:	0800dba3 	.word	0x0800dba3
 800c108:	0800dbb4 	.word	0x0800dbb4

0800c10c <__multiply>:
 800c10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c110:	4691      	mov	r9, r2
 800c112:	690a      	ldr	r2, [r1, #16]
 800c114:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c118:	429a      	cmp	r2, r3
 800c11a:	bfb8      	it	lt
 800c11c:	460b      	movlt	r3, r1
 800c11e:	460c      	mov	r4, r1
 800c120:	bfbc      	itt	lt
 800c122:	464c      	movlt	r4, r9
 800c124:	4699      	movlt	r9, r3
 800c126:	6927      	ldr	r7, [r4, #16]
 800c128:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c12c:	68a3      	ldr	r3, [r4, #8]
 800c12e:	6861      	ldr	r1, [r4, #4]
 800c130:	eb07 060a 	add.w	r6, r7, sl
 800c134:	42b3      	cmp	r3, r6
 800c136:	b085      	sub	sp, #20
 800c138:	bfb8      	it	lt
 800c13a:	3101      	addlt	r1, #1
 800c13c:	f7ff fed8 	bl	800bef0 <_Balloc>
 800c140:	b930      	cbnz	r0, 800c150 <__multiply+0x44>
 800c142:	4602      	mov	r2, r0
 800c144:	4b44      	ldr	r3, [pc, #272]	; (800c258 <__multiply+0x14c>)
 800c146:	4845      	ldr	r0, [pc, #276]	; (800c25c <__multiply+0x150>)
 800c148:	f240 115d 	movw	r1, #349	; 0x15d
 800c14c:	f000 fcb6 	bl	800cabc <__assert_func>
 800c150:	f100 0514 	add.w	r5, r0, #20
 800c154:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c158:	462b      	mov	r3, r5
 800c15a:	2200      	movs	r2, #0
 800c15c:	4543      	cmp	r3, r8
 800c15e:	d321      	bcc.n	800c1a4 <__multiply+0x98>
 800c160:	f104 0314 	add.w	r3, r4, #20
 800c164:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c168:	f109 0314 	add.w	r3, r9, #20
 800c16c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c170:	9202      	str	r2, [sp, #8]
 800c172:	1b3a      	subs	r2, r7, r4
 800c174:	3a15      	subs	r2, #21
 800c176:	f022 0203 	bic.w	r2, r2, #3
 800c17a:	3204      	adds	r2, #4
 800c17c:	f104 0115 	add.w	r1, r4, #21
 800c180:	428f      	cmp	r7, r1
 800c182:	bf38      	it	cc
 800c184:	2204      	movcc	r2, #4
 800c186:	9201      	str	r2, [sp, #4]
 800c188:	9a02      	ldr	r2, [sp, #8]
 800c18a:	9303      	str	r3, [sp, #12]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d80c      	bhi.n	800c1aa <__multiply+0x9e>
 800c190:	2e00      	cmp	r6, #0
 800c192:	dd03      	ble.n	800c19c <__multiply+0x90>
 800c194:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d05a      	beq.n	800c252 <__multiply+0x146>
 800c19c:	6106      	str	r6, [r0, #16]
 800c19e:	b005      	add	sp, #20
 800c1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a4:	f843 2b04 	str.w	r2, [r3], #4
 800c1a8:	e7d8      	b.n	800c15c <__multiply+0x50>
 800c1aa:	f8b3 a000 	ldrh.w	sl, [r3]
 800c1ae:	f1ba 0f00 	cmp.w	sl, #0
 800c1b2:	d024      	beq.n	800c1fe <__multiply+0xf2>
 800c1b4:	f104 0e14 	add.w	lr, r4, #20
 800c1b8:	46a9      	mov	r9, r5
 800c1ba:	f04f 0c00 	mov.w	ip, #0
 800c1be:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c1c2:	f8d9 1000 	ldr.w	r1, [r9]
 800c1c6:	fa1f fb82 	uxth.w	fp, r2
 800c1ca:	b289      	uxth	r1, r1
 800c1cc:	fb0a 110b 	mla	r1, sl, fp, r1
 800c1d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c1d4:	f8d9 2000 	ldr.w	r2, [r9]
 800c1d8:	4461      	add	r1, ip
 800c1da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c1de:	fb0a c20b 	mla	r2, sl, fp, ip
 800c1e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c1e6:	b289      	uxth	r1, r1
 800c1e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c1ec:	4577      	cmp	r7, lr
 800c1ee:	f849 1b04 	str.w	r1, [r9], #4
 800c1f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c1f6:	d8e2      	bhi.n	800c1be <__multiply+0xb2>
 800c1f8:	9a01      	ldr	r2, [sp, #4]
 800c1fa:	f845 c002 	str.w	ip, [r5, r2]
 800c1fe:	9a03      	ldr	r2, [sp, #12]
 800c200:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c204:	3304      	adds	r3, #4
 800c206:	f1b9 0f00 	cmp.w	r9, #0
 800c20a:	d020      	beq.n	800c24e <__multiply+0x142>
 800c20c:	6829      	ldr	r1, [r5, #0]
 800c20e:	f104 0c14 	add.w	ip, r4, #20
 800c212:	46ae      	mov	lr, r5
 800c214:	f04f 0a00 	mov.w	sl, #0
 800c218:	f8bc b000 	ldrh.w	fp, [ip]
 800c21c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c220:	fb09 220b 	mla	r2, r9, fp, r2
 800c224:	4492      	add	sl, r2
 800c226:	b289      	uxth	r1, r1
 800c228:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c22c:	f84e 1b04 	str.w	r1, [lr], #4
 800c230:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c234:	f8be 1000 	ldrh.w	r1, [lr]
 800c238:	0c12      	lsrs	r2, r2, #16
 800c23a:	fb09 1102 	mla	r1, r9, r2, r1
 800c23e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c242:	4567      	cmp	r7, ip
 800c244:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c248:	d8e6      	bhi.n	800c218 <__multiply+0x10c>
 800c24a:	9a01      	ldr	r2, [sp, #4]
 800c24c:	50a9      	str	r1, [r5, r2]
 800c24e:	3504      	adds	r5, #4
 800c250:	e79a      	b.n	800c188 <__multiply+0x7c>
 800c252:	3e01      	subs	r6, #1
 800c254:	e79c      	b.n	800c190 <__multiply+0x84>
 800c256:	bf00      	nop
 800c258:	0800dba3 	.word	0x0800dba3
 800c25c:	0800dbb4 	.word	0x0800dbb4

0800c260 <__pow5mult>:
 800c260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c264:	4615      	mov	r5, r2
 800c266:	f012 0203 	ands.w	r2, r2, #3
 800c26a:	4606      	mov	r6, r0
 800c26c:	460f      	mov	r7, r1
 800c26e:	d007      	beq.n	800c280 <__pow5mult+0x20>
 800c270:	4c25      	ldr	r4, [pc, #148]	; (800c308 <__pow5mult+0xa8>)
 800c272:	3a01      	subs	r2, #1
 800c274:	2300      	movs	r3, #0
 800c276:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c27a:	f7ff fe9b 	bl	800bfb4 <__multadd>
 800c27e:	4607      	mov	r7, r0
 800c280:	10ad      	asrs	r5, r5, #2
 800c282:	d03d      	beq.n	800c300 <__pow5mult+0xa0>
 800c284:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c286:	b97c      	cbnz	r4, 800c2a8 <__pow5mult+0x48>
 800c288:	2010      	movs	r0, #16
 800c28a:	f7ff fe1b 	bl	800bec4 <malloc>
 800c28e:	4602      	mov	r2, r0
 800c290:	6270      	str	r0, [r6, #36]	; 0x24
 800c292:	b928      	cbnz	r0, 800c2a0 <__pow5mult+0x40>
 800c294:	4b1d      	ldr	r3, [pc, #116]	; (800c30c <__pow5mult+0xac>)
 800c296:	481e      	ldr	r0, [pc, #120]	; (800c310 <__pow5mult+0xb0>)
 800c298:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c29c:	f000 fc0e 	bl	800cabc <__assert_func>
 800c2a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2a4:	6004      	str	r4, [r0, #0]
 800c2a6:	60c4      	str	r4, [r0, #12]
 800c2a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c2ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2b0:	b94c      	cbnz	r4, 800c2c6 <__pow5mult+0x66>
 800c2b2:	f240 2171 	movw	r1, #625	; 0x271
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	f7ff ff12 	bl	800c0e0 <__i2b>
 800c2bc:	2300      	movs	r3, #0
 800c2be:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	6003      	str	r3, [r0, #0]
 800c2c6:	f04f 0900 	mov.w	r9, #0
 800c2ca:	07eb      	lsls	r3, r5, #31
 800c2cc:	d50a      	bpl.n	800c2e4 <__pow5mult+0x84>
 800c2ce:	4639      	mov	r1, r7
 800c2d0:	4622      	mov	r2, r4
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	f7ff ff1a 	bl	800c10c <__multiply>
 800c2d8:	4639      	mov	r1, r7
 800c2da:	4680      	mov	r8, r0
 800c2dc:	4630      	mov	r0, r6
 800c2de:	f7ff fe47 	bl	800bf70 <_Bfree>
 800c2e2:	4647      	mov	r7, r8
 800c2e4:	106d      	asrs	r5, r5, #1
 800c2e6:	d00b      	beq.n	800c300 <__pow5mult+0xa0>
 800c2e8:	6820      	ldr	r0, [r4, #0]
 800c2ea:	b938      	cbnz	r0, 800c2fc <__pow5mult+0x9c>
 800c2ec:	4622      	mov	r2, r4
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	f7ff ff0b 	bl	800c10c <__multiply>
 800c2f6:	6020      	str	r0, [r4, #0]
 800c2f8:	f8c0 9000 	str.w	r9, [r0]
 800c2fc:	4604      	mov	r4, r0
 800c2fe:	e7e4      	b.n	800c2ca <__pow5mult+0x6a>
 800c300:	4638      	mov	r0, r7
 800c302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c306:	bf00      	nop
 800c308:	0800dd00 	.word	0x0800dd00
 800c30c:	0800db31 	.word	0x0800db31
 800c310:	0800dbb4 	.word	0x0800dbb4

0800c314 <__lshift>:
 800c314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c318:	460c      	mov	r4, r1
 800c31a:	6849      	ldr	r1, [r1, #4]
 800c31c:	6923      	ldr	r3, [r4, #16]
 800c31e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c322:	68a3      	ldr	r3, [r4, #8]
 800c324:	4607      	mov	r7, r0
 800c326:	4691      	mov	r9, r2
 800c328:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c32c:	f108 0601 	add.w	r6, r8, #1
 800c330:	42b3      	cmp	r3, r6
 800c332:	db0b      	blt.n	800c34c <__lshift+0x38>
 800c334:	4638      	mov	r0, r7
 800c336:	f7ff fddb 	bl	800bef0 <_Balloc>
 800c33a:	4605      	mov	r5, r0
 800c33c:	b948      	cbnz	r0, 800c352 <__lshift+0x3e>
 800c33e:	4602      	mov	r2, r0
 800c340:	4b2a      	ldr	r3, [pc, #168]	; (800c3ec <__lshift+0xd8>)
 800c342:	482b      	ldr	r0, [pc, #172]	; (800c3f0 <__lshift+0xdc>)
 800c344:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c348:	f000 fbb8 	bl	800cabc <__assert_func>
 800c34c:	3101      	adds	r1, #1
 800c34e:	005b      	lsls	r3, r3, #1
 800c350:	e7ee      	b.n	800c330 <__lshift+0x1c>
 800c352:	2300      	movs	r3, #0
 800c354:	f100 0114 	add.w	r1, r0, #20
 800c358:	f100 0210 	add.w	r2, r0, #16
 800c35c:	4618      	mov	r0, r3
 800c35e:	4553      	cmp	r3, sl
 800c360:	db37      	blt.n	800c3d2 <__lshift+0xbe>
 800c362:	6920      	ldr	r0, [r4, #16]
 800c364:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c368:	f104 0314 	add.w	r3, r4, #20
 800c36c:	f019 091f 	ands.w	r9, r9, #31
 800c370:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c374:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c378:	d02f      	beq.n	800c3da <__lshift+0xc6>
 800c37a:	f1c9 0e20 	rsb	lr, r9, #32
 800c37e:	468a      	mov	sl, r1
 800c380:	f04f 0c00 	mov.w	ip, #0
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	fa02 f209 	lsl.w	r2, r2, r9
 800c38a:	ea42 020c 	orr.w	r2, r2, ip
 800c38e:	f84a 2b04 	str.w	r2, [sl], #4
 800c392:	f853 2b04 	ldr.w	r2, [r3], #4
 800c396:	4298      	cmp	r0, r3
 800c398:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c39c:	d8f2      	bhi.n	800c384 <__lshift+0x70>
 800c39e:	1b03      	subs	r3, r0, r4
 800c3a0:	3b15      	subs	r3, #21
 800c3a2:	f023 0303 	bic.w	r3, r3, #3
 800c3a6:	3304      	adds	r3, #4
 800c3a8:	f104 0215 	add.w	r2, r4, #21
 800c3ac:	4290      	cmp	r0, r2
 800c3ae:	bf38      	it	cc
 800c3b0:	2304      	movcc	r3, #4
 800c3b2:	f841 c003 	str.w	ip, [r1, r3]
 800c3b6:	f1bc 0f00 	cmp.w	ip, #0
 800c3ba:	d001      	beq.n	800c3c0 <__lshift+0xac>
 800c3bc:	f108 0602 	add.w	r6, r8, #2
 800c3c0:	3e01      	subs	r6, #1
 800c3c2:	4638      	mov	r0, r7
 800c3c4:	612e      	str	r6, [r5, #16]
 800c3c6:	4621      	mov	r1, r4
 800c3c8:	f7ff fdd2 	bl	800bf70 <_Bfree>
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	e7c1      	b.n	800c35e <__lshift+0x4a>
 800c3da:	3904      	subs	r1, #4
 800c3dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3e4:	4298      	cmp	r0, r3
 800c3e6:	d8f9      	bhi.n	800c3dc <__lshift+0xc8>
 800c3e8:	e7ea      	b.n	800c3c0 <__lshift+0xac>
 800c3ea:	bf00      	nop
 800c3ec:	0800dba3 	.word	0x0800dba3
 800c3f0:	0800dbb4 	.word	0x0800dbb4

0800c3f4 <__mcmp>:
 800c3f4:	b530      	push	{r4, r5, lr}
 800c3f6:	6902      	ldr	r2, [r0, #16]
 800c3f8:	690c      	ldr	r4, [r1, #16]
 800c3fa:	1b12      	subs	r2, r2, r4
 800c3fc:	d10e      	bne.n	800c41c <__mcmp+0x28>
 800c3fe:	f100 0314 	add.w	r3, r0, #20
 800c402:	3114      	adds	r1, #20
 800c404:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c408:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c40c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c410:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c414:	42a5      	cmp	r5, r4
 800c416:	d003      	beq.n	800c420 <__mcmp+0x2c>
 800c418:	d305      	bcc.n	800c426 <__mcmp+0x32>
 800c41a:	2201      	movs	r2, #1
 800c41c:	4610      	mov	r0, r2
 800c41e:	bd30      	pop	{r4, r5, pc}
 800c420:	4283      	cmp	r3, r0
 800c422:	d3f3      	bcc.n	800c40c <__mcmp+0x18>
 800c424:	e7fa      	b.n	800c41c <__mcmp+0x28>
 800c426:	f04f 32ff 	mov.w	r2, #4294967295
 800c42a:	e7f7      	b.n	800c41c <__mcmp+0x28>

0800c42c <__mdiff>:
 800c42c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c430:	460c      	mov	r4, r1
 800c432:	4606      	mov	r6, r0
 800c434:	4611      	mov	r1, r2
 800c436:	4620      	mov	r0, r4
 800c438:	4690      	mov	r8, r2
 800c43a:	f7ff ffdb 	bl	800c3f4 <__mcmp>
 800c43e:	1e05      	subs	r5, r0, #0
 800c440:	d110      	bne.n	800c464 <__mdiff+0x38>
 800c442:	4629      	mov	r1, r5
 800c444:	4630      	mov	r0, r6
 800c446:	f7ff fd53 	bl	800bef0 <_Balloc>
 800c44a:	b930      	cbnz	r0, 800c45a <__mdiff+0x2e>
 800c44c:	4b3a      	ldr	r3, [pc, #232]	; (800c538 <__mdiff+0x10c>)
 800c44e:	4602      	mov	r2, r0
 800c450:	f240 2132 	movw	r1, #562	; 0x232
 800c454:	4839      	ldr	r0, [pc, #228]	; (800c53c <__mdiff+0x110>)
 800c456:	f000 fb31 	bl	800cabc <__assert_func>
 800c45a:	2301      	movs	r3, #1
 800c45c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c460:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c464:	bfa4      	itt	ge
 800c466:	4643      	movge	r3, r8
 800c468:	46a0      	movge	r8, r4
 800c46a:	4630      	mov	r0, r6
 800c46c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c470:	bfa6      	itte	ge
 800c472:	461c      	movge	r4, r3
 800c474:	2500      	movge	r5, #0
 800c476:	2501      	movlt	r5, #1
 800c478:	f7ff fd3a 	bl	800bef0 <_Balloc>
 800c47c:	b920      	cbnz	r0, 800c488 <__mdiff+0x5c>
 800c47e:	4b2e      	ldr	r3, [pc, #184]	; (800c538 <__mdiff+0x10c>)
 800c480:	4602      	mov	r2, r0
 800c482:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c486:	e7e5      	b.n	800c454 <__mdiff+0x28>
 800c488:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c48c:	6926      	ldr	r6, [r4, #16]
 800c48e:	60c5      	str	r5, [r0, #12]
 800c490:	f104 0914 	add.w	r9, r4, #20
 800c494:	f108 0514 	add.w	r5, r8, #20
 800c498:	f100 0e14 	add.w	lr, r0, #20
 800c49c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c4a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c4a4:	f108 0210 	add.w	r2, r8, #16
 800c4a8:	46f2      	mov	sl, lr
 800c4aa:	2100      	movs	r1, #0
 800c4ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800c4b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c4b4:	fa1f f883 	uxth.w	r8, r3
 800c4b8:	fa11 f18b 	uxtah	r1, r1, fp
 800c4bc:	0c1b      	lsrs	r3, r3, #16
 800c4be:	eba1 0808 	sub.w	r8, r1, r8
 800c4c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c4c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c4ca:	fa1f f888 	uxth.w	r8, r8
 800c4ce:	1419      	asrs	r1, r3, #16
 800c4d0:	454e      	cmp	r6, r9
 800c4d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c4d6:	f84a 3b04 	str.w	r3, [sl], #4
 800c4da:	d8e7      	bhi.n	800c4ac <__mdiff+0x80>
 800c4dc:	1b33      	subs	r3, r6, r4
 800c4de:	3b15      	subs	r3, #21
 800c4e0:	f023 0303 	bic.w	r3, r3, #3
 800c4e4:	3304      	adds	r3, #4
 800c4e6:	3415      	adds	r4, #21
 800c4e8:	42a6      	cmp	r6, r4
 800c4ea:	bf38      	it	cc
 800c4ec:	2304      	movcc	r3, #4
 800c4ee:	441d      	add	r5, r3
 800c4f0:	4473      	add	r3, lr
 800c4f2:	469e      	mov	lr, r3
 800c4f4:	462e      	mov	r6, r5
 800c4f6:	4566      	cmp	r6, ip
 800c4f8:	d30e      	bcc.n	800c518 <__mdiff+0xec>
 800c4fa:	f10c 0203 	add.w	r2, ip, #3
 800c4fe:	1b52      	subs	r2, r2, r5
 800c500:	f022 0203 	bic.w	r2, r2, #3
 800c504:	3d03      	subs	r5, #3
 800c506:	45ac      	cmp	ip, r5
 800c508:	bf38      	it	cc
 800c50a:	2200      	movcc	r2, #0
 800c50c:	441a      	add	r2, r3
 800c50e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c512:	b17b      	cbz	r3, 800c534 <__mdiff+0x108>
 800c514:	6107      	str	r7, [r0, #16]
 800c516:	e7a3      	b.n	800c460 <__mdiff+0x34>
 800c518:	f856 8b04 	ldr.w	r8, [r6], #4
 800c51c:	fa11 f288 	uxtah	r2, r1, r8
 800c520:	1414      	asrs	r4, r2, #16
 800c522:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c526:	b292      	uxth	r2, r2
 800c528:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c52c:	f84e 2b04 	str.w	r2, [lr], #4
 800c530:	1421      	asrs	r1, r4, #16
 800c532:	e7e0      	b.n	800c4f6 <__mdiff+0xca>
 800c534:	3f01      	subs	r7, #1
 800c536:	e7ea      	b.n	800c50e <__mdiff+0xe2>
 800c538:	0800dba3 	.word	0x0800dba3
 800c53c:	0800dbb4 	.word	0x0800dbb4

0800c540 <__d2b>:
 800c540:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c544:	4689      	mov	r9, r1
 800c546:	2101      	movs	r1, #1
 800c548:	ec57 6b10 	vmov	r6, r7, d0
 800c54c:	4690      	mov	r8, r2
 800c54e:	f7ff fccf 	bl	800bef0 <_Balloc>
 800c552:	4604      	mov	r4, r0
 800c554:	b930      	cbnz	r0, 800c564 <__d2b+0x24>
 800c556:	4602      	mov	r2, r0
 800c558:	4b25      	ldr	r3, [pc, #148]	; (800c5f0 <__d2b+0xb0>)
 800c55a:	4826      	ldr	r0, [pc, #152]	; (800c5f4 <__d2b+0xb4>)
 800c55c:	f240 310a 	movw	r1, #778	; 0x30a
 800c560:	f000 faac 	bl	800cabc <__assert_func>
 800c564:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c568:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c56c:	bb35      	cbnz	r5, 800c5bc <__d2b+0x7c>
 800c56e:	2e00      	cmp	r6, #0
 800c570:	9301      	str	r3, [sp, #4]
 800c572:	d028      	beq.n	800c5c6 <__d2b+0x86>
 800c574:	4668      	mov	r0, sp
 800c576:	9600      	str	r6, [sp, #0]
 800c578:	f7ff fd82 	bl	800c080 <__lo0bits>
 800c57c:	9900      	ldr	r1, [sp, #0]
 800c57e:	b300      	cbz	r0, 800c5c2 <__d2b+0x82>
 800c580:	9a01      	ldr	r2, [sp, #4]
 800c582:	f1c0 0320 	rsb	r3, r0, #32
 800c586:	fa02 f303 	lsl.w	r3, r2, r3
 800c58a:	430b      	orrs	r3, r1
 800c58c:	40c2      	lsrs	r2, r0
 800c58e:	6163      	str	r3, [r4, #20]
 800c590:	9201      	str	r2, [sp, #4]
 800c592:	9b01      	ldr	r3, [sp, #4]
 800c594:	61a3      	str	r3, [r4, #24]
 800c596:	2b00      	cmp	r3, #0
 800c598:	bf14      	ite	ne
 800c59a:	2202      	movne	r2, #2
 800c59c:	2201      	moveq	r2, #1
 800c59e:	6122      	str	r2, [r4, #16]
 800c5a0:	b1d5      	cbz	r5, 800c5d8 <__d2b+0x98>
 800c5a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c5a6:	4405      	add	r5, r0
 800c5a8:	f8c9 5000 	str.w	r5, [r9]
 800c5ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c5b0:	f8c8 0000 	str.w	r0, [r8]
 800c5b4:	4620      	mov	r0, r4
 800c5b6:	b003      	add	sp, #12
 800c5b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5c0:	e7d5      	b.n	800c56e <__d2b+0x2e>
 800c5c2:	6161      	str	r1, [r4, #20]
 800c5c4:	e7e5      	b.n	800c592 <__d2b+0x52>
 800c5c6:	a801      	add	r0, sp, #4
 800c5c8:	f7ff fd5a 	bl	800c080 <__lo0bits>
 800c5cc:	9b01      	ldr	r3, [sp, #4]
 800c5ce:	6163      	str	r3, [r4, #20]
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	6122      	str	r2, [r4, #16]
 800c5d4:	3020      	adds	r0, #32
 800c5d6:	e7e3      	b.n	800c5a0 <__d2b+0x60>
 800c5d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c5e0:	f8c9 0000 	str.w	r0, [r9]
 800c5e4:	6918      	ldr	r0, [r3, #16]
 800c5e6:	f7ff fd2b 	bl	800c040 <__hi0bits>
 800c5ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c5ee:	e7df      	b.n	800c5b0 <__d2b+0x70>
 800c5f0:	0800dba3 	.word	0x0800dba3
 800c5f4:	0800dbb4 	.word	0x0800dbb4

0800c5f8 <_calloc_r>:
 800c5f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5fa:	fba1 2402 	umull	r2, r4, r1, r2
 800c5fe:	b94c      	cbnz	r4, 800c614 <_calloc_r+0x1c>
 800c600:	4611      	mov	r1, r2
 800c602:	9201      	str	r2, [sp, #4]
 800c604:	f000 f87a 	bl	800c6fc <_malloc_r>
 800c608:	9a01      	ldr	r2, [sp, #4]
 800c60a:	4605      	mov	r5, r0
 800c60c:	b930      	cbnz	r0, 800c61c <_calloc_r+0x24>
 800c60e:	4628      	mov	r0, r5
 800c610:	b003      	add	sp, #12
 800c612:	bd30      	pop	{r4, r5, pc}
 800c614:	220c      	movs	r2, #12
 800c616:	6002      	str	r2, [r0, #0]
 800c618:	2500      	movs	r5, #0
 800c61a:	e7f8      	b.n	800c60e <_calloc_r+0x16>
 800c61c:	4621      	mov	r1, r4
 800c61e:	f7fe f92b 	bl	800a878 <memset>
 800c622:	e7f4      	b.n	800c60e <_calloc_r+0x16>

0800c624 <_free_r>:
 800c624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c626:	2900      	cmp	r1, #0
 800c628:	d044      	beq.n	800c6b4 <_free_r+0x90>
 800c62a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c62e:	9001      	str	r0, [sp, #4]
 800c630:	2b00      	cmp	r3, #0
 800c632:	f1a1 0404 	sub.w	r4, r1, #4
 800c636:	bfb8      	it	lt
 800c638:	18e4      	addlt	r4, r4, r3
 800c63a:	f000 fa9b 	bl	800cb74 <__malloc_lock>
 800c63e:	4a1e      	ldr	r2, [pc, #120]	; (800c6b8 <_free_r+0x94>)
 800c640:	9801      	ldr	r0, [sp, #4]
 800c642:	6813      	ldr	r3, [r2, #0]
 800c644:	b933      	cbnz	r3, 800c654 <_free_r+0x30>
 800c646:	6063      	str	r3, [r4, #4]
 800c648:	6014      	str	r4, [r2, #0]
 800c64a:	b003      	add	sp, #12
 800c64c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c650:	f000 ba96 	b.w	800cb80 <__malloc_unlock>
 800c654:	42a3      	cmp	r3, r4
 800c656:	d908      	bls.n	800c66a <_free_r+0x46>
 800c658:	6825      	ldr	r5, [r4, #0]
 800c65a:	1961      	adds	r1, r4, r5
 800c65c:	428b      	cmp	r3, r1
 800c65e:	bf01      	itttt	eq
 800c660:	6819      	ldreq	r1, [r3, #0]
 800c662:	685b      	ldreq	r3, [r3, #4]
 800c664:	1949      	addeq	r1, r1, r5
 800c666:	6021      	streq	r1, [r4, #0]
 800c668:	e7ed      	b.n	800c646 <_free_r+0x22>
 800c66a:	461a      	mov	r2, r3
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	b10b      	cbz	r3, 800c674 <_free_r+0x50>
 800c670:	42a3      	cmp	r3, r4
 800c672:	d9fa      	bls.n	800c66a <_free_r+0x46>
 800c674:	6811      	ldr	r1, [r2, #0]
 800c676:	1855      	adds	r5, r2, r1
 800c678:	42a5      	cmp	r5, r4
 800c67a:	d10b      	bne.n	800c694 <_free_r+0x70>
 800c67c:	6824      	ldr	r4, [r4, #0]
 800c67e:	4421      	add	r1, r4
 800c680:	1854      	adds	r4, r2, r1
 800c682:	42a3      	cmp	r3, r4
 800c684:	6011      	str	r1, [r2, #0]
 800c686:	d1e0      	bne.n	800c64a <_free_r+0x26>
 800c688:	681c      	ldr	r4, [r3, #0]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	6053      	str	r3, [r2, #4]
 800c68e:	4421      	add	r1, r4
 800c690:	6011      	str	r1, [r2, #0]
 800c692:	e7da      	b.n	800c64a <_free_r+0x26>
 800c694:	d902      	bls.n	800c69c <_free_r+0x78>
 800c696:	230c      	movs	r3, #12
 800c698:	6003      	str	r3, [r0, #0]
 800c69a:	e7d6      	b.n	800c64a <_free_r+0x26>
 800c69c:	6825      	ldr	r5, [r4, #0]
 800c69e:	1961      	adds	r1, r4, r5
 800c6a0:	428b      	cmp	r3, r1
 800c6a2:	bf04      	itt	eq
 800c6a4:	6819      	ldreq	r1, [r3, #0]
 800c6a6:	685b      	ldreq	r3, [r3, #4]
 800c6a8:	6063      	str	r3, [r4, #4]
 800c6aa:	bf04      	itt	eq
 800c6ac:	1949      	addeq	r1, r1, r5
 800c6ae:	6021      	streq	r1, [r4, #0]
 800c6b0:	6054      	str	r4, [r2, #4]
 800c6b2:	e7ca      	b.n	800c64a <_free_r+0x26>
 800c6b4:	b003      	add	sp, #12
 800c6b6:	bd30      	pop	{r4, r5, pc}
 800c6b8:	2000211c 	.word	0x2000211c

0800c6bc <sbrk_aligned>:
 800c6bc:	b570      	push	{r4, r5, r6, lr}
 800c6be:	4e0e      	ldr	r6, [pc, #56]	; (800c6f8 <sbrk_aligned+0x3c>)
 800c6c0:	460c      	mov	r4, r1
 800c6c2:	6831      	ldr	r1, [r6, #0]
 800c6c4:	4605      	mov	r5, r0
 800c6c6:	b911      	cbnz	r1, 800c6ce <sbrk_aligned+0x12>
 800c6c8:	f000 f9e8 	bl	800ca9c <_sbrk_r>
 800c6cc:	6030      	str	r0, [r6, #0]
 800c6ce:	4621      	mov	r1, r4
 800c6d0:	4628      	mov	r0, r5
 800c6d2:	f000 f9e3 	bl	800ca9c <_sbrk_r>
 800c6d6:	1c43      	adds	r3, r0, #1
 800c6d8:	d00a      	beq.n	800c6f0 <sbrk_aligned+0x34>
 800c6da:	1cc4      	adds	r4, r0, #3
 800c6dc:	f024 0403 	bic.w	r4, r4, #3
 800c6e0:	42a0      	cmp	r0, r4
 800c6e2:	d007      	beq.n	800c6f4 <sbrk_aligned+0x38>
 800c6e4:	1a21      	subs	r1, r4, r0
 800c6e6:	4628      	mov	r0, r5
 800c6e8:	f000 f9d8 	bl	800ca9c <_sbrk_r>
 800c6ec:	3001      	adds	r0, #1
 800c6ee:	d101      	bne.n	800c6f4 <sbrk_aligned+0x38>
 800c6f0:	f04f 34ff 	mov.w	r4, #4294967295
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	bd70      	pop	{r4, r5, r6, pc}
 800c6f8:	20002120 	.word	0x20002120

0800c6fc <_malloc_r>:
 800c6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c700:	1ccd      	adds	r5, r1, #3
 800c702:	f025 0503 	bic.w	r5, r5, #3
 800c706:	3508      	adds	r5, #8
 800c708:	2d0c      	cmp	r5, #12
 800c70a:	bf38      	it	cc
 800c70c:	250c      	movcc	r5, #12
 800c70e:	2d00      	cmp	r5, #0
 800c710:	4607      	mov	r7, r0
 800c712:	db01      	blt.n	800c718 <_malloc_r+0x1c>
 800c714:	42a9      	cmp	r1, r5
 800c716:	d905      	bls.n	800c724 <_malloc_r+0x28>
 800c718:	230c      	movs	r3, #12
 800c71a:	603b      	str	r3, [r7, #0]
 800c71c:	2600      	movs	r6, #0
 800c71e:	4630      	mov	r0, r6
 800c720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c724:	4e2e      	ldr	r6, [pc, #184]	; (800c7e0 <_malloc_r+0xe4>)
 800c726:	f000 fa25 	bl	800cb74 <__malloc_lock>
 800c72a:	6833      	ldr	r3, [r6, #0]
 800c72c:	461c      	mov	r4, r3
 800c72e:	bb34      	cbnz	r4, 800c77e <_malloc_r+0x82>
 800c730:	4629      	mov	r1, r5
 800c732:	4638      	mov	r0, r7
 800c734:	f7ff ffc2 	bl	800c6bc <sbrk_aligned>
 800c738:	1c43      	adds	r3, r0, #1
 800c73a:	4604      	mov	r4, r0
 800c73c:	d14d      	bne.n	800c7da <_malloc_r+0xde>
 800c73e:	6834      	ldr	r4, [r6, #0]
 800c740:	4626      	mov	r6, r4
 800c742:	2e00      	cmp	r6, #0
 800c744:	d140      	bne.n	800c7c8 <_malloc_r+0xcc>
 800c746:	6823      	ldr	r3, [r4, #0]
 800c748:	4631      	mov	r1, r6
 800c74a:	4638      	mov	r0, r7
 800c74c:	eb04 0803 	add.w	r8, r4, r3
 800c750:	f000 f9a4 	bl	800ca9c <_sbrk_r>
 800c754:	4580      	cmp	r8, r0
 800c756:	d13a      	bne.n	800c7ce <_malloc_r+0xd2>
 800c758:	6821      	ldr	r1, [r4, #0]
 800c75a:	3503      	adds	r5, #3
 800c75c:	1a6d      	subs	r5, r5, r1
 800c75e:	f025 0503 	bic.w	r5, r5, #3
 800c762:	3508      	adds	r5, #8
 800c764:	2d0c      	cmp	r5, #12
 800c766:	bf38      	it	cc
 800c768:	250c      	movcc	r5, #12
 800c76a:	4629      	mov	r1, r5
 800c76c:	4638      	mov	r0, r7
 800c76e:	f7ff ffa5 	bl	800c6bc <sbrk_aligned>
 800c772:	3001      	adds	r0, #1
 800c774:	d02b      	beq.n	800c7ce <_malloc_r+0xd2>
 800c776:	6823      	ldr	r3, [r4, #0]
 800c778:	442b      	add	r3, r5
 800c77a:	6023      	str	r3, [r4, #0]
 800c77c:	e00e      	b.n	800c79c <_malloc_r+0xa0>
 800c77e:	6822      	ldr	r2, [r4, #0]
 800c780:	1b52      	subs	r2, r2, r5
 800c782:	d41e      	bmi.n	800c7c2 <_malloc_r+0xc6>
 800c784:	2a0b      	cmp	r2, #11
 800c786:	d916      	bls.n	800c7b6 <_malloc_r+0xba>
 800c788:	1961      	adds	r1, r4, r5
 800c78a:	42a3      	cmp	r3, r4
 800c78c:	6025      	str	r5, [r4, #0]
 800c78e:	bf18      	it	ne
 800c790:	6059      	strne	r1, [r3, #4]
 800c792:	6863      	ldr	r3, [r4, #4]
 800c794:	bf08      	it	eq
 800c796:	6031      	streq	r1, [r6, #0]
 800c798:	5162      	str	r2, [r4, r5]
 800c79a:	604b      	str	r3, [r1, #4]
 800c79c:	4638      	mov	r0, r7
 800c79e:	f104 060b 	add.w	r6, r4, #11
 800c7a2:	f000 f9ed 	bl	800cb80 <__malloc_unlock>
 800c7a6:	f026 0607 	bic.w	r6, r6, #7
 800c7aa:	1d23      	adds	r3, r4, #4
 800c7ac:	1af2      	subs	r2, r6, r3
 800c7ae:	d0b6      	beq.n	800c71e <_malloc_r+0x22>
 800c7b0:	1b9b      	subs	r3, r3, r6
 800c7b2:	50a3      	str	r3, [r4, r2]
 800c7b4:	e7b3      	b.n	800c71e <_malloc_r+0x22>
 800c7b6:	6862      	ldr	r2, [r4, #4]
 800c7b8:	42a3      	cmp	r3, r4
 800c7ba:	bf0c      	ite	eq
 800c7bc:	6032      	streq	r2, [r6, #0]
 800c7be:	605a      	strne	r2, [r3, #4]
 800c7c0:	e7ec      	b.n	800c79c <_malloc_r+0xa0>
 800c7c2:	4623      	mov	r3, r4
 800c7c4:	6864      	ldr	r4, [r4, #4]
 800c7c6:	e7b2      	b.n	800c72e <_malloc_r+0x32>
 800c7c8:	4634      	mov	r4, r6
 800c7ca:	6876      	ldr	r6, [r6, #4]
 800c7cc:	e7b9      	b.n	800c742 <_malloc_r+0x46>
 800c7ce:	230c      	movs	r3, #12
 800c7d0:	603b      	str	r3, [r7, #0]
 800c7d2:	4638      	mov	r0, r7
 800c7d4:	f000 f9d4 	bl	800cb80 <__malloc_unlock>
 800c7d8:	e7a1      	b.n	800c71e <_malloc_r+0x22>
 800c7da:	6025      	str	r5, [r4, #0]
 800c7dc:	e7de      	b.n	800c79c <_malloc_r+0xa0>
 800c7de:	bf00      	nop
 800c7e0:	2000211c 	.word	0x2000211c

0800c7e4 <__ssputs_r>:
 800c7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7e8:	688e      	ldr	r6, [r1, #8]
 800c7ea:	429e      	cmp	r6, r3
 800c7ec:	4682      	mov	sl, r0
 800c7ee:	460c      	mov	r4, r1
 800c7f0:	4690      	mov	r8, r2
 800c7f2:	461f      	mov	r7, r3
 800c7f4:	d838      	bhi.n	800c868 <__ssputs_r+0x84>
 800c7f6:	898a      	ldrh	r2, [r1, #12]
 800c7f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c7fc:	d032      	beq.n	800c864 <__ssputs_r+0x80>
 800c7fe:	6825      	ldr	r5, [r4, #0]
 800c800:	6909      	ldr	r1, [r1, #16]
 800c802:	eba5 0901 	sub.w	r9, r5, r1
 800c806:	6965      	ldr	r5, [r4, #20]
 800c808:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c80c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c810:	3301      	adds	r3, #1
 800c812:	444b      	add	r3, r9
 800c814:	106d      	asrs	r5, r5, #1
 800c816:	429d      	cmp	r5, r3
 800c818:	bf38      	it	cc
 800c81a:	461d      	movcc	r5, r3
 800c81c:	0553      	lsls	r3, r2, #21
 800c81e:	d531      	bpl.n	800c884 <__ssputs_r+0xa0>
 800c820:	4629      	mov	r1, r5
 800c822:	f7ff ff6b 	bl	800c6fc <_malloc_r>
 800c826:	4606      	mov	r6, r0
 800c828:	b950      	cbnz	r0, 800c840 <__ssputs_r+0x5c>
 800c82a:	230c      	movs	r3, #12
 800c82c:	f8ca 3000 	str.w	r3, [sl]
 800c830:	89a3      	ldrh	r3, [r4, #12]
 800c832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c836:	81a3      	strh	r3, [r4, #12]
 800c838:	f04f 30ff 	mov.w	r0, #4294967295
 800c83c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c840:	6921      	ldr	r1, [r4, #16]
 800c842:	464a      	mov	r2, r9
 800c844:	f7ff fb46 	bl	800bed4 <memcpy>
 800c848:	89a3      	ldrh	r3, [r4, #12]
 800c84a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c84e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c852:	81a3      	strh	r3, [r4, #12]
 800c854:	6126      	str	r6, [r4, #16]
 800c856:	6165      	str	r5, [r4, #20]
 800c858:	444e      	add	r6, r9
 800c85a:	eba5 0509 	sub.w	r5, r5, r9
 800c85e:	6026      	str	r6, [r4, #0]
 800c860:	60a5      	str	r5, [r4, #8]
 800c862:	463e      	mov	r6, r7
 800c864:	42be      	cmp	r6, r7
 800c866:	d900      	bls.n	800c86a <__ssputs_r+0x86>
 800c868:	463e      	mov	r6, r7
 800c86a:	6820      	ldr	r0, [r4, #0]
 800c86c:	4632      	mov	r2, r6
 800c86e:	4641      	mov	r1, r8
 800c870:	f000 f966 	bl	800cb40 <memmove>
 800c874:	68a3      	ldr	r3, [r4, #8]
 800c876:	1b9b      	subs	r3, r3, r6
 800c878:	60a3      	str	r3, [r4, #8]
 800c87a:	6823      	ldr	r3, [r4, #0]
 800c87c:	4433      	add	r3, r6
 800c87e:	6023      	str	r3, [r4, #0]
 800c880:	2000      	movs	r0, #0
 800c882:	e7db      	b.n	800c83c <__ssputs_r+0x58>
 800c884:	462a      	mov	r2, r5
 800c886:	f000 f981 	bl	800cb8c <_realloc_r>
 800c88a:	4606      	mov	r6, r0
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d1e1      	bne.n	800c854 <__ssputs_r+0x70>
 800c890:	6921      	ldr	r1, [r4, #16]
 800c892:	4650      	mov	r0, sl
 800c894:	f7ff fec6 	bl	800c624 <_free_r>
 800c898:	e7c7      	b.n	800c82a <__ssputs_r+0x46>
	...

0800c89c <_svfiprintf_r>:
 800c89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a0:	4698      	mov	r8, r3
 800c8a2:	898b      	ldrh	r3, [r1, #12]
 800c8a4:	061b      	lsls	r3, r3, #24
 800c8a6:	b09d      	sub	sp, #116	; 0x74
 800c8a8:	4607      	mov	r7, r0
 800c8aa:	460d      	mov	r5, r1
 800c8ac:	4614      	mov	r4, r2
 800c8ae:	d50e      	bpl.n	800c8ce <_svfiprintf_r+0x32>
 800c8b0:	690b      	ldr	r3, [r1, #16]
 800c8b2:	b963      	cbnz	r3, 800c8ce <_svfiprintf_r+0x32>
 800c8b4:	2140      	movs	r1, #64	; 0x40
 800c8b6:	f7ff ff21 	bl	800c6fc <_malloc_r>
 800c8ba:	6028      	str	r0, [r5, #0]
 800c8bc:	6128      	str	r0, [r5, #16]
 800c8be:	b920      	cbnz	r0, 800c8ca <_svfiprintf_r+0x2e>
 800c8c0:	230c      	movs	r3, #12
 800c8c2:	603b      	str	r3, [r7, #0]
 800c8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8c8:	e0d1      	b.n	800ca6e <_svfiprintf_r+0x1d2>
 800c8ca:	2340      	movs	r3, #64	; 0x40
 800c8cc:	616b      	str	r3, [r5, #20]
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c8d2:	2320      	movs	r3, #32
 800c8d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8dc:	2330      	movs	r3, #48	; 0x30
 800c8de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ca88 <_svfiprintf_r+0x1ec>
 800c8e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8e6:	f04f 0901 	mov.w	r9, #1
 800c8ea:	4623      	mov	r3, r4
 800c8ec:	469a      	mov	sl, r3
 800c8ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8f2:	b10a      	cbz	r2, 800c8f8 <_svfiprintf_r+0x5c>
 800c8f4:	2a25      	cmp	r2, #37	; 0x25
 800c8f6:	d1f9      	bne.n	800c8ec <_svfiprintf_r+0x50>
 800c8f8:	ebba 0b04 	subs.w	fp, sl, r4
 800c8fc:	d00b      	beq.n	800c916 <_svfiprintf_r+0x7a>
 800c8fe:	465b      	mov	r3, fp
 800c900:	4622      	mov	r2, r4
 800c902:	4629      	mov	r1, r5
 800c904:	4638      	mov	r0, r7
 800c906:	f7ff ff6d 	bl	800c7e4 <__ssputs_r>
 800c90a:	3001      	adds	r0, #1
 800c90c:	f000 80aa 	beq.w	800ca64 <_svfiprintf_r+0x1c8>
 800c910:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c912:	445a      	add	r2, fp
 800c914:	9209      	str	r2, [sp, #36]	; 0x24
 800c916:	f89a 3000 	ldrb.w	r3, [sl]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	f000 80a2 	beq.w	800ca64 <_svfiprintf_r+0x1c8>
 800c920:	2300      	movs	r3, #0
 800c922:	f04f 32ff 	mov.w	r2, #4294967295
 800c926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c92a:	f10a 0a01 	add.w	sl, sl, #1
 800c92e:	9304      	str	r3, [sp, #16]
 800c930:	9307      	str	r3, [sp, #28]
 800c932:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c936:	931a      	str	r3, [sp, #104]	; 0x68
 800c938:	4654      	mov	r4, sl
 800c93a:	2205      	movs	r2, #5
 800c93c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c940:	4851      	ldr	r0, [pc, #324]	; (800ca88 <_svfiprintf_r+0x1ec>)
 800c942:	f7f3 fc4d 	bl	80001e0 <memchr>
 800c946:	9a04      	ldr	r2, [sp, #16]
 800c948:	b9d8      	cbnz	r0, 800c982 <_svfiprintf_r+0xe6>
 800c94a:	06d0      	lsls	r0, r2, #27
 800c94c:	bf44      	itt	mi
 800c94e:	2320      	movmi	r3, #32
 800c950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c954:	0711      	lsls	r1, r2, #28
 800c956:	bf44      	itt	mi
 800c958:	232b      	movmi	r3, #43	; 0x2b
 800c95a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c95e:	f89a 3000 	ldrb.w	r3, [sl]
 800c962:	2b2a      	cmp	r3, #42	; 0x2a
 800c964:	d015      	beq.n	800c992 <_svfiprintf_r+0xf6>
 800c966:	9a07      	ldr	r2, [sp, #28]
 800c968:	4654      	mov	r4, sl
 800c96a:	2000      	movs	r0, #0
 800c96c:	f04f 0c0a 	mov.w	ip, #10
 800c970:	4621      	mov	r1, r4
 800c972:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c976:	3b30      	subs	r3, #48	; 0x30
 800c978:	2b09      	cmp	r3, #9
 800c97a:	d94e      	bls.n	800ca1a <_svfiprintf_r+0x17e>
 800c97c:	b1b0      	cbz	r0, 800c9ac <_svfiprintf_r+0x110>
 800c97e:	9207      	str	r2, [sp, #28]
 800c980:	e014      	b.n	800c9ac <_svfiprintf_r+0x110>
 800c982:	eba0 0308 	sub.w	r3, r0, r8
 800c986:	fa09 f303 	lsl.w	r3, r9, r3
 800c98a:	4313      	orrs	r3, r2
 800c98c:	9304      	str	r3, [sp, #16]
 800c98e:	46a2      	mov	sl, r4
 800c990:	e7d2      	b.n	800c938 <_svfiprintf_r+0x9c>
 800c992:	9b03      	ldr	r3, [sp, #12]
 800c994:	1d19      	adds	r1, r3, #4
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	9103      	str	r1, [sp, #12]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	bfbb      	ittet	lt
 800c99e:	425b      	neglt	r3, r3
 800c9a0:	f042 0202 	orrlt.w	r2, r2, #2
 800c9a4:	9307      	strge	r3, [sp, #28]
 800c9a6:	9307      	strlt	r3, [sp, #28]
 800c9a8:	bfb8      	it	lt
 800c9aa:	9204      	strlt	r2, [sp, #16]
 800c9ac:	7823      	ldrb	r3, [r4, #0]
 800c9ae:	2b2e      	cmp	r3, #46	; 0x2e
 800c9b0:	d10c      	bne.n	800c9cc <_svfiprintf_r+0x130>
 800c9b2:	7863      	ldrb	r3, [r4, #1]
 800c9b4:	2b2a      	cmp	r3, #42	; 0x2a
 800c9b6:	d135      	bne.n	800ca24 <_svfiprintf_r+0x188>
 800c9b8:	9b03      	ldr	r3, [sp, #12]
 800c9ba:	1d1a      	adds	r2, r3, #4
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	9203      	str	r2, [sp, #12]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	bfb8      	it	lt
 800c9c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9c8:	3402      	adds	r4, #2
 800c9ca:	9305      	str	r3, [sp, #20]
 800c9cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ca98 <_svfiprintf_r+0x1fc>
 800c9d0:	7821      	ldrb	r1, [r4, #0]
 800c9d2:	2203      	movs	r2, #3
 800c9d4:	4650      	mov	r0, sl
 800c9d6:	f7f3 fc03 	bl	80001e0 <memchr>
 800c9da:	b140      	cbz	r0, 800c9ee <_svfiprintf_r+0x152>
 800c9dc:	2340      	movs	r3, #64	; 0x40
 800c9de:	eba0 000a 	sub.w	r0, r0, sl
 800c9e2:	fa03 f000 	lsl.w	r0, r3, r0
 800c9e6:	9b04      	ldr	r3, [sp, #16]
 800c9e8:	4303      	orrs	r3, r0
 800c9ea:	3401      	adds	r4, #1
 800c9ec:	9304      	str	r3, [sp, #16]
 800c9ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9f2:	4826      	ldr	r0, [pc, #152]	; (800ca8c <_svfiprintf_r+0x1f0>)
 800c9f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9f8:	2206      	movs	r2, #6
 800c9fa:	f7f3 fbf1 	bl	80001e0 <memchr>
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	d038      	beq.n	800ca74 <_svfiprintf_r+0x1d8>
 800ca02:	4b23      	ldr	r3, [pc, #140]	; (800ca90 <_svfiprintf_r+0x1f4>)
 800ca04:	bb1b      	cbnz	r3, 800ca4e <_svfiprintf_r+0x1b2>
 800ca06:	9b03      	ldr	r3, [sp, #12]
 800ca08:	3307      	adds	r3, #7
 800ca0a:	f023 0307 	bic.w	r3, r3, #7
 800ca0e:	3308      	adds	r3, #8
 800ca10:	9303      	str	r3, [sp, #12]
 800ca12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca14:	4433      	add	r3, r6
 800ca16:	9309      	str	r3, [sp, #36]	; 0x24
 800ca18:	e767      	b.n	800c8ea <_svfiprintf_r+0x4e>
 800ca1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca1e:	460c      	mov	r4, r1
 800ca20:	2001      	movs	r0, #1
 800ca22:	e7a5      	b.n	800c970 <_svfiprintf_r+0xd4>
 800ca24:	2300      	movs	r3, #0
 800ca26:	3401      	adds	r4, #1
 800ca28:	9305      	str	r3, [sp, #20]
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	f04f 0c0a 	mov.w	ip, #10
 800ca30:	4620      	mov	r0, r4
 800ca32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca36:	3a30      	subs	r2, #48	; 0x30
 800ca38:	2a09      	cmp	r2, #9
 800ca3a:	d903      	bls.n	800ca44 <_svfiprintf_r+0x1a8>
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d0c5      	beq.n	800c9cc <_svfiprintf_r+0x130>
 800ca40:	9105      	str	r1, [sp, #20]
 800ca42:	e7c3      	b.n	800c9cc <_svfiprintf_r+0x130>
 800ca44:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca48:	4604      	mov	r4, r0
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	e7f0      	b.n	800ca30 <_svfiprintf_r+0x194>
 800ca4e:	ab03      	add	r3, sp, #12
 800ca50:	9300      	str	r3, [sp, #0]
 800ca52:	462a      	mov	r2, r5
 800ca54:	4b0f      	ldr	r3, [pc, #60]	; (800ca94 <_svfiprintf_r+0x1f8>)
 800ca56:	a904      	add	r1, sp, #16
 800ca58:	4638      	mov	r0, r7
 800ca5a:	f7fd ffb5 	bl	800a9c8 <_printf_float>
 800ca5e:	1c42      	adds	r2, r0, #1
 800ca60:	4606      	mov	r6, r0
 800ca62:	d1d6      	bne.n	800ca12 <_svfiprintf_r+0x176>
 800ca64:	89ab      	ldrh	r3, [r5, #12]
 800ca66:	065b      	lsls	r3, r3, #25
 800ca68:	f53f af2c 	bmi.w	800c8c4 <_svfiprintf_r+0x28>
 800ca6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca6e:	b01d      	add	sp, #116	; 0x74
 800ca70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca74:	ab03      	add	r3, sp, #12
 800ca76:	9300      	str	r3, [sp, #0]
 800ca78:	462a      	mov	r2, r5
 800ca7a:	4b06      	ldr	r3, [pc, #24]	; (800ca94 <_svfiprintf_r+0x1f8>)
 800ca7c:	a904      	add	r1, sp, #16
 800ca7e:	4638      	mov	r0, r7
 800ca80:	f7fe fa46 	bl	800af10 <_printf_i>
 800ca84:	e7eb      	b.n	800ca5e <_svfiprintf_r+0x1c2>
 800ca86:	bf00      	nop
 800ca88:	0800dd0c 	.word	0x0800dd0c
 800ca8c:	0800dd16 	.word	0x0800dd16
 800ca90:	0800a9c9 	.word	0x0800a9c9
 800ca94:	0800c7e5 	.word	0x0800c7e5
 800ca98:	0800dd12 	.word	0x0800dd12

0800ca9c <_sbrk_r>:
 800ca9c:	b538      	push	{r3, r4, r5, lr}
 800ca9e:	4d06      	ldr	r5, [pc, #24]	; (800cab8 <_sbrk_r+0x1c>)
 800caa0:	2300      	movs	r3, #0
 800caa2:	4604      	mov	r4, r0
 800caa4:	4608      	mov	r0, r1
 800caa6:	602b      	str	r3, [r5, #0]
 800caa8:	f7f5 f9a0 	bl	8001dec <_sbrk>
 800caac:	1c43      	adds	r3, r0, #1
 800caae:	d102      	bne.n	800cab6 <_sbrk_r+0x1a>
 800cab0:	682b      	ldr	r3, [r5, #0]
 800cab2:	b103      	cbz	r3, 800cab6 <_sbrk_r+0x1a>
 800cab4:	6023      	str	r3, [r4, #0]
 800cab6:	bd38      	pop	{r3, r4, r5, pc}
 800cab8:	20002124 	.word	0x20002124

0800cabc <__assert_func>:
 800cabc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cabe:	4614      	mov	r4, r2
 800cac0:	461a      	mov	r2, r3
 800cac2:	4b09      	ldr	r3, [pc, #36]	; (800cae8 <__assert_func+0x2c>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4605      	mov	r5, r0
 800cac8:	68d8      	ldr	r0, [r3, #12]
 800caca:	b14c      	cbz	r4, 800cae0 <__assert_func+0x24>
 800cacc:	4b07      	ldr	r3, [pc, #28]	; (800caec <__assert_func+0x30>)
 800cace:	9100      	str	r1, [sp, #0]
 800cad0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cad4:	4906      	ldr	r1, [pc, #24]	; (800caf0 <__assert_func+0x34>)
 800cad6:	462b      	mov	r3, r5
 800cad8:	f000 f80e 	bl	800caf8 <fiprintf>
 800cadc:	f000 faac 	bl	800d038 <abort>
 800cae0:	4b04      	ldr	r3, [pc, #16]	; (800caf4 <__assert_func+0x38>)
 800cae2:	461c      	mov	r4, r3
 800cae4:	e7f3      	b.n	800cace <__assert_func+0x12>
 800cae6:	bf00      	nop
 800cae8:	20000104 	.word	0x20000104
 800caec:	0800dd1d 	.word	0x0800dd1d
 800caf0:	0800dd2a 	.word	0x0800dd2a
 800caf4:	0800dd58 	.word	0x0800dd58

0800caf8 <fiprintf>:
 800caf8:	b40e      	push	{r1, r2, r3}
 800cafa:	b503      	push	{r0, r1, lr}
 800cafc:	4601      	mov	r1, r0
 800cafe:	ab03      	add	r3, sp, #12
 800cb00:	4805      	ldr	r0, [pc, #20]	; (800cb18 <fiprintf+0x20>)
 800cb02:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb06:	6800      	ldr	r0, [r0, #0]
 800cb08:	9301      	str	r3, [sp, #4]
 800cb0a:	f000 f897 	bl	800cc3c <_vfiprintf_r>
 800cb0e:	b002      	add	sp, #8
 800cb10:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb14:	b003      	add	sp, #12
 800cb16:	4770      	bx	lr
 800cb18:	20000104 	.word	0x20000104

0800cb1c <__ascii_mbtowc>:
 800cb1c:	b082      	sub	sp, #8
 800cb1e:	b901      	cbnz	r1, 800cb22 <__ascii_mbtowc+0x6>
 800cb20:	a901      	add	r1, sp, #4
 800cb22:	b142      	cbz	r2, 800cb36 <__ascii_mbtowc+0x1a>
 800cb24:	b14b      	cbz	r3, 800cb3a <__ascii_mbtowc+0x1e>
 800cb26:	7813      	ldrb	r3, [r2, #0]
 800cb28:	600b      	str	r3, [r1, #0]
 800cb2a:	7812      	ldrb	r2, [r2, #0]
 800cb2c:	1e10      	subs	r0, r2, #0
 800cb2e:	bf18      	it	ne
 800cb30:	2001      	movne	r0, #1
 800cb32:	b002      	add	sp, #8
 800cb34:	4770      	bx	lr
 800cb36:	4610      	mov	r0, r2
 800cb38:	e7fb      	b.n	800cb32 <__ascii_mbtowc+0x16>
 800cb3a:	f06f 0001 	mvn.w	r0, #1
 800cb3e:	e7f8      	b.n	800cb32 <__ascii_mbtowc+0x16>

0800cb40 <memmove>:
 800cb40:	4288      	cmp	r0, r1
 800cb42:	b510      	push	{r4, lr}
 800cb44:	eb01 0402 	add.w	r4, r1, r2
 800cb48:	d902      	bls.n	800cb50 <memmove+0x10>
 800cb4a:	4284      	cmp	r4, r0
 800cb4c:	4623      	mov	r3, r4
 800cb4e:	d807      	bhi.n	800cb60 <memmove+0x20>
 800cb50:	1e43      	subs	r3, r0, #1
 800cb52:	42a1      	cmp	r1, r4
 800cb54:	d008      	beq.n	800cb68 <memmove+0x28>
 800cb56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb5e:	e7f8      	b.n	800cb52 <memmove+0x12>
 800cb60:	4402      	add	r2, r0
 800cb62:	4601      	mov	r1, r0
 800cb64:	428a      	cmp	r2, r1
 800cb66:	d100      	bne.n	800cb6a <memmove+0x2a>
 800cb68:	bd10      	pop	{r4, pc}
 800cb6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb72:	e7f7      	b.n	800cb64 <memmove+0x24>

0800cb74 <__malloc_lock>:
 800cb74:	4801      	ldr	r0, [pc, #4]	; (800cb7c <__malloc_lock+0x8>)
 800cb76:	f000 bc1f 	b.w	800d3b8 <__retarget_lock_acquire_recursive>
 800cb7a:	bf00      	nop
 800cb7c:	20002128 	.word	0x20002128

0800cb80 <__malloc_unlock>:
 800cb80:	4801      	ldr	r0, [pc, #4]	; (800cb88 <__malloc_unlock+0x8>)
 800cb82:	f000 bc1a 	b.w	800d3ba <__retarget_lock_release_recursive>
 800cb86:	bf00      	nop
 800cb88:	20002128 	.word	0x20002128

0800cb8c <_realloc_r>:
 800cb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb90:	4680      	mov	r8, r0
 800cb92:	4614      	mov	r4, r2
 800cb94:	460e      	mov	r6, r1
 800cb96:	b921      	cbnz	r1, 800cba2 <_realloc_r+0x16>
 800cb98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb9c:	4611      	mov	r1, r2
 800cb9e:	f7ff bdad 	b.w	800c6fc <_malloc_r>
 800cba2:	b92a      	cbnz	r2, 800cbb0 <_realloc_r+0x24>
 800cba4:	f7ff fd3e 	bl	800c624 <_free_r>
 800cba8:	4625      	mov	r5, r4
 800cbaa:	4628      	mov	r0, r5
 800cbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbb0:	f000 fc6a 	bl	800d488 <_malloc_usable_size_r>
 800cbb4:	4284      	cmp	r4, r0
 800cbb6:	4607      	mov	r7, r0
 800cbb8:	d802      	bhi.n	800cbc0 <_realloc_r+0x34>
 800cbba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cbbe:	d812      	bhi.n	800cbe6 <_realloc_r+0x5a>
 800cbc0:	4621      	mov	r1, r4
 800cbc2:	4640      	mov	r0, r8
 800cbc4:	f7ff fd9a 	bl	800c6fc <_malloc_r>
 800cbc8:	4605      	mov	r5, r0
 800cbca:	2800      	cmp	r0, #0
 800cbcc:	d0ed      	beq.n	800cbaa <_realloc_r+0x1e>
 800cbce:	42bc      	cmp	r4, r7
 800cbd0:	4622      	mov	r2, r4
 800cbd2:	4631      	mov	r1, r6
 800cbd4:	bf28      	it	cs
 800cbd6:	463a      	movcs	r2, r7
 800cbd8:	f7ff f97c 	bl	800bed4 <memcpy>
 800cbdc:	4631      	mov	r1, r6
 800cbde:	4640      	mov	r0, r8
 800cbe0:	f7ff fd20 	bl	800c624 <_free_r>
 800cbe4:	e7e1      	b.n	800cbaa <_realloc_r+0x1e>
 800cbe6:	4635      	mov	r5, r6
 800cbe8:	e7df      	b.n	800cbaa <_realloc_r+0x1e>

0800cbea <__sfputc_r>:
 800cbea:	6893      	ldr	r3, [r2, #8]
 800cbec:	3b01      	subs	r3, #1
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	b410      	push	{r4}
 800cbf2:	6093      	str	r3, [r2, #8]
 800cbf4:	da08      	bge.n	800cc08 <__sfputc_r+0x1e>
 800cbf6:	6994      	ldr	r4, [r2, #24]
 800cbf8:	42a3      	cmp	r3, r4
 800cbfa:	db01      	blt.n	800cc00 <__sfputc_r+0x16>
 800cbfc:	290a      	cmp	r1, #10
 800cbfe:	d103      	bne.n	800cc08 <__sfputc_r+0x1e>
 800cc00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc04:	f000 b94a 	b.w	800ce9c <__swbuf_r>
 800cc08:	6813      	ldr	r3, [r2, #0]
 800cc0a:	1c58      	adds	r0, r3, #1
 800cc0c:	6010      	str	r0, [r2, #0]
 800cc0e:	7019      	strb	r1, [r3, #0]
 800cc10:	4608      	mov	r0, r1
 800cc12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc16:	4770      	bx	lr

0800cc18 <__sfputs_r>:
 800cc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc1a:	4606      	mov	r6, r0
 800cc1c:	460f      	mov	r7, r1
 800cc1e:	4614      	mov	r4, r2
 800cc20:	18d5      	adds	r5, r2, r3
 800cc22:	42ac      	cmp	r4, r5
 800cc24:	d101      	bne.n	800cc2a <__sfputs_r+0x12>
 800cc26:	2000      	movs	r0, #0
 800cc28:	e007      	b.n	800cc3a <__sfputs_r+0x22>
 800cc2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc2e:	463a      	mov	r2, r7
 800cc30:	4630      	mov	r0, r6
 800cc32:	f7ff ffda 	bl	800cbea <__sfputc_r>
 800cc36:	1c43      	adds	r3, r0, #1
 800cc38:	d1f3      	bne.n	800cc22 <__sfputs_r+0xa>
 800cc3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc3c <_vfiprintf_r>:
 800cc3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc40:	460d      	mov	r5, r1
 800cc42:	b09d      	sub	sp, #116	; 0x74
 800cc44:	4614      	mov	r4, r2
 800cc46:	4698      	mov	r8, r3
 800cc48:	4606      	mov	r6, r0
 800cc4a:	b118      	cbz	r0, 800cc54 <_vfiprintf_r+0x18>
 800cc4c:	6983      	ldr	r3, [r0, #24]
 800cc4e:	b90b      	cbnz	r3, 800cc54 <_vfiprintf_r+0x18>
 800cc50:	f000 fb14 	bl	800d27c <__sinit>
 800cc54:	4b89      	ldr	r3, [pc, #548]	; (800ce7c <_vfiprintf_r+0x240>)
 800cc56:	429d      	cmp	r5, r3
 800cc58:	d11b      	bne.n	800cc92 <_vfiprintf_r+0x56>
 800cc5a:	6875      	ldr	r5, [r6, #4]
 800cc5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc5e:	07d9      	lsls	r1, r3, #31
 800cc60:	d405      	bmi.n	800cc6e <_vfiprintf_r+0x32>
 800cc62:	89ab      	ldrh	r3, [r5, #12]
 800cc64:	059a      	lsls	r2, r3, #22
 800cc66:	d402      	bmi.n	800cc6e <_vfiprintf_r+0x32>
 800cc68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc6a:	f000 fba5 	bl	800d3b8 <__retarget_lock_acquire_recursive>
 800cc6e:	89ab      	ldrh	r3, [r5, #12]
 800cc70:	071b      	lsls	r3, r3, #28
 800cc72:	d501      	bpl.n	800cc78 <_vfiprintf_r+0x3c>
 800cc74:	692b      	ldr	r3, [r5, #16]
 800cc76:	b9eb      	cbnz	r3, 800ccb4 <_vfiprintf_r+0x78>
 800cc78:	4629      	mov	r1, r5
 800cc7a:	4630      	mov	r0, r6
 800cc7c:	f000 f96e 	bl	800cf5c <__swsetup_r>
 800cc80:	b1c0      	cbz	r0, 800ccb4 <_vfiprintf_r+0x78>
 800cc82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc84:	07dc      	lsls	r4, r3, #31
 800cc86:	d50e      	bpl.n	800cca6 <_vfiprintf_r+0x6a>
 800cc88:	f04f 30ff 	mov.w	r0, #4294967295
 800cc8c:	b01d      	add	sp, #116	; 0x74
 800cc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc92:	4b7b      	ldr	r3, [pc, #492]	; (800ce80 <_vfiprintf_r+0x244>)
 800cc94:	429d      	cmp	r5, r3
 800cc96:	d101      	bne.n	800cc9c <_vfiprintf_r+0x60>
 800cc98:	68b5      	ldr	r5, [r6, #8]
 800cc9a:	e7df      	b.n	800cc5c <_vfiprintf_r+0x20>
 800cc9c:	4b79      	ldr	r3, [pc, #484]	; (800ce84 <_vfiprintf_r+0x248>)
 800cc9e:	429d      	cmp	r5, r3
 800cca0:	bf08      	it	eq
 800cca2:	68f5      	ldreq	r5, [r6, #12]
 800cca4:	e7da      	b.n	800cc5c <_vfiprintf_r+0x20>
 800cca6:	89ab      	ldrh	r3, [r5, #12]
 800cca8:	0598      	lsls	r0, r3, #22
 800ccaa:	d4ed      	bmi.n	800cc88 <_vfiprintf_r+0x4c>
 800ccac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccae:	f000 fb84 	bl	800d3ba <__retarget_lock_release_recursive>
 800ccb2:	e7e9      	b.n	800cc88 <_vfiprintf_r+0x4c>
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	9309      	str	r3, [sp, #36]	; 0x24
 800ccb8:	2320      	movs	r3, #32
 800ccba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccc2:	2330      	movs	r3, #48	; 0x30
 800ccc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ce88 <_vfiprintf_r+0x24c>
 800ccc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cccc:	f04f 0901 	mov.w	r9, #1
 800ccd0:	4623      	mov	r3, r4
 800ccd2:	469a      	mov	sl, r3
 800ccd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccd8:	b10a      	cbz	r2, 800ccde <_vfiprintf_r+0xa2>
 800ccda:	2a25      	cmp	r2, #37	; 0x25
 800ccdc:	d1f9      	bne.n	800ccd2 <_vfiprintf_r+0x96>
 800ccde:	ebba 0b04 	subs.w	fp, sl, r4
 800cce2:	d00b      	beq.n	800ccfc <_vfiprintf_r+0xc0>
 800cce4:	465b      	mov	r3, fp
 800cce6:	4622      	mov	r2, r4
 800cce8:	4629      	mov	r1, r5
 800ccea:	4630      	mov	r0, r6
 800ccec:	f7ff ff94 	bl	800cc18 <__sfputs_r>
 800ccf0:	3001      	adds	r0, #1
 800ccf2:	f000 80aa 	beq.w	800ce4a <_vfiprintf_r+0x20e>
 800ccf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccf8:	445a      	add	r2, fp
 800ccfa:	9209      	str	r2, [sp, #36]	; 0x24
 800ccfc:	f89a 3000 	ldrb.w	r3, [sl]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	f000 80a2 	beq.w	800ce4a <_vfiprintf_r+0x20e>
 800cd06:	2300      	movs	r3, #0
 800cd08:	f04f 32ff 	mov.w	r2, #4294967295
 800cd0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd10:	f10a 0a01 	add.w	sl, sl, #1
 800cd14:	9304      	str	r3, [sp, #16]
 800cd16:	9307      	str	r3, [sp, #28]
 800cd18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd1c:	931a      	str	r3, [sp, #104]	; 0x68
 800cd1e:	4654      	mov	r4, sl
 800cd20:	2205      	movs	r2, #5
 800cd22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd26:	4858      	ldr	r0, [pc, #352]	; (800ce88 <_vfiprintf_r+0x24c>)
 800cd28:	f7f3 fa5a 	bl	80001e0 <memchr>
 800cd2c:	9a04      	ldr	r2, [sp, #16]
 800cd2e:	b9d8      	cbnz	r0, 800cd68 <_vfiprintf_r+0x12c>
 800cd30:	06d1      	lsls	r1, r2, #27
 800cd32:	bf44      	itt	mi
 800cd34:	2320      	movmi	r3, #32
 800cd36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd3a:	0713      	lsls	r3, r2, #28
 800cd3c:	bf44      	itt	mi
 800cd3e:	232b      	movmi	r3, #43	; 0x2b
 800cd40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd44:	f89a 3000 	ldrb.w	r3, [sl]
 800cd48:	2b2a      	cmp	r3, #42	; 0x2a
 800cd4a:	d015      	beq.n	800cd78 <_vfiprintf_r+0x13c>
 800cd4c:	9a07      	ldr	r2, [sp, #28]
 800cd4e:	4654      	mov	r4, sl
 800cd50:	2000      	movs	r0, #0
 800cd52:	f04f 0c0a 	mov.w	ip, #10
 800cd56:	4621      	mov	r1, r4
 800cd58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd5c:	3b30      	subs	r3, #48	; 0x30
 800cd5e:	2b09      	cmp	r3, #9
 800cd60:	d94e      	bls.n	800ce00 <_vfiprintf_r+0x1c4>
 800cd62:	b1b0      	cbz	r0, 800cd92 <_vfiprintf_r+0x156>
 800cd64:	9207      	str	r2, [sp, #28]
 800cd66:	e014      	b.n	800cd92 <_vfiprintf_r+0x156>
 800cd68:	eba0 0308 	sub.w	r3, r0, r8
 800cd6c:	fa09 f303 	lsl.w	r3, r9, r3
 800cd70:	4313      	orrs	r3, r2
 800cd72:	9304      	str	r3, [sp, #16]
 800cd74:	46a2      	mov	sl, r4
 800cd76:	e7d2      	b.n	800cd1e <_vfiprintf_r+0xe2>
 800cd78:	9b03      	ldr	r3, [sp, #12]
 800cd7a:	1d19      	adds	r1, r3, #4
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	9103      	str	r1, [sp, #12]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	bfbb      	ittet	lt
 800cd84:	425b      	neglt	r3, r3
 800cd86:	f042 0202 	orrlt.w	r2, r2, #2
 800cd8a:	9307      	strge	r3, [sp, #28]
 800cd8c:	9307      	strlt	r3, [sp, #28]
 800cd8e:	bfb8      	it	lt
 800cd90:	9204      	strlt	r2, [sp, #16]
 800cd92:	7823      	ldrb	r3, [r4, #0]
 800cd94:	2b2e      	cmp	r3, #46	; 0x2e
 800cd96:	d10c      	bne.n	800cdb2 <_vfiprintf_r+0x176>
 800cd98:	7863      	ldrb	r3, [r4, #1]
 800cd9a:	2b2a      	cmp	r3, #42	; 0x2a
 800cd9c:	d135      	bne.n	800ce0a <_vfiprintf_r+0x1ce>
 800cd9e:	9b03      	ldr	r3, [sp, #12]
 800cda0:	1d1a      	adds	r2, r3, #4
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	9203      	str	r2, [sp, #12]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	bfb8      	it	lt
 800cdaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800cdae:	3402      	adds	r4, #2
 800cdb0:	9305      	str	r3, [sp, #20]
 800cdb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ce98 <_vfiprintf_r+0x25c>
 800cdb6:	7821      	ldrb	r1, [r4, #0]
 800cdb8:	2203      	movs	r2, #3
 800cdba:	4650      	mov	r0, sl
 800cdbc:	f7f3 fa10 	bl	80001e0 <memchr>
 800cdc0:	b140      	cbz	r0, 800cdd4 <_vfiprintf_r+0x198>
 800cdc2:	2340      	movs	r3, #64	; 0x40
 800cdc4:	eba0 000a 	sub.w	r0, r0, sl
 800cdc8:	fa03 f000 	lsl.w	r0, r3, r0
 800cdcc:	9b04      	ldr	r3, [sp, #16]
 800cdce:	4303      	orrs	r3, r0
 800cdd0:	3401      	adds	r4, #1
 800cdd2:	9304      	str	r3, [sp, #16]
 800cdd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdd8:	482c      	ldr	r0, [pc, #176]	; (800ce8c <_vfiprintf_r+0x250>)
 800cdda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdde:	2206      	movs	r2, #6
 800cde0:	f7f3 f9fe 	bl	80001e0 <memchr>
 800cde4:	2800      	cmp	r0, #0
 800cde6:	d03f      	beq.n	800ce68 <_vfiprintf_r+0x22c>
 800cde8:	4b29      	ldr	r3, [pc, #164]	; (800ce90 <_vfiprintf_r+0x254>)
 800cdea:	bb1b      	cbnz	r3, 800ce34 <_vfiprintf_r+0x1f8>
 800cdec:	9b03      	ldr	r3, [sp, #12]
 800cdee:	3307      	adds	r3, #7
 800cdf0:	f023 0307 	bic.w	r3, r3, #7
 800cdf4:	3308      	adds	r3, #8
 800cdf6:	9303      	str	r3, [sp, #12]
 800cdf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdfa:	443b      	add	r3, r7
 800cdfc:	9309      	str	r3, [sp, #36]	; 0x24
 800cdfe:	e767      	b.n	800ccd0 <_vfiprintf_r+0x94>
 800ce00:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce04:	460c      	mov	r4, r1
 800ce06:	2001      	movs	r0, #1
 800ce08:	e7a5      	b.n	800cd56 <_vfiprintf_r+0x11a>
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	3401      	adds	r4, #1
 800ce0e:	9305      	str	r3, [sp, #20]
 800ce10:	4619      	mov	r1, r3
 800ce12:	f04f 0c0a 	mov.w	ip, #10
 800ce16:	4620      	mov	r0, r4
 800ce18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce1c:	3a30      	subs	r2, #48	; 0x30
 800ce1e:	2a09      	cmp	r2, #9
 800ce20:	d903      	bls.n	800ce2a <_vfiprintf_r+0x1ee>
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d0c5      	beq.n	800cdb2 <_vfiprintf_r+0x176>
 800ce26:	9105      	str	r1, [sp, #20]
 800ce28:	e7c3      	b.n	800cdb2 <_vfiprintf_r+0x176>
 800ce2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce2e:	4604      	mov	r4, r0
 800ce30:	2301      	movs	r3, #1
 800ce32:	e7f0      	b.n	800ce16 <_vfiprintf_r+0x1da>
 800ce34:	ab03      	add	r3, sp, #12
 800ce36:	9300      	str	r3, [sp, #0]
 800ce38:	462a      	mov	r2, r5
 800ce3a:	4b16      	ldr	r3, [pc, #88]	; (800ce94 <_vfiprintf_r+0x258>)
 800ce3c:	a904      	add	r1, sp, #16
 800ce3e:	4630      	mov	r0, r6
 800ce40:	f7fd fdc2 	bl	800a9c8 <_printf_float>
 800ce44:	4607      	mov	r7, r0
 800ce46:	1c78      	adds	r0, r7, #1
 800ce48:	d1d6      	bne.n	800cdf8 <_vfiprintf_r+0x1bc>
 800ce4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce4c:	07d9      	lsls	r1, r3, #31
 800ce4e:	d405      	bmi.n	800ce5c <_vfiprintf_r+0x220>
 800ce50:	89ab      	ldrh	r3, [r5, #12]
 800ce52:	059a      	lsls	r2, r3, #22
 800ce54:	d402      	bmi.n	800ce5c <_vfiprintf_r+0x220>
 800ce56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce58:	f000 faaf 	bl	800d3ba <__retarget_lock_release_recursive>
 800ce5c:	89ab      	ldrh	r3, [r5, #12]
 800ce5e:	065b      	lsls	r3, r3, #25
 800ce60:	f53f af12 	bmi.w	800cc88 <_vfiprintf_r+0x4c>
 800ce64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce66:	e711      	b.n	800cc8c <_vfiprintf_r+0x50>
 800ce68:	ab03      	add	r3, sp, #12
 800ce6a:	9300      	str	r3, [sp, #0]
 800ce6c:	462a      	mov	r2, r5
 800ce6e:	4b09      	ldr	r3, [pc, #36]	; (800ce94 <_vfiprintf_r+0x258>)
 800ce70:	a904      	add	r1, sp, #16
 800ce72:	4630      	mov	r0, r6
 800ce74:	f7fe f84c 	bl	800af10 <_printf_i>
 800ce78:	e7e4      	b.n	800ce44 <_vfiprintf_r+0x208>
 800ce7a:	bf00      	nop
 800ce7c:	0800de84 	.word	0x0800de84
 800ce80:	0800dea4 	.word	0x0800dea4
 800ce84:	0800de64 	.word	0x0800de64
 800ce88:	0800dd0c 	.word	0x0800dd0c
 800ce8c:	0800dd16 	.word	0x0800dd16
 800ce90:	0800a9c9 	.word	0x0800a9c9
 800ce94:	0800cc19 	.word	0x0800cc19
 800ce98:	0800dd12 	.word	0x0800dd12

0800ce9c <__swbuf_r>:
 800ce9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce9e:	460e      	mov	r6, r1
 800cea0:	4614      	mov	r4, r2
 800cea2:	4605      	mov	r5, r0
 800cea4:	b118      	cbz	r0, 800ceae <__swbuf_r+0x12>
 800cea6:	6983      	ldr	r3, [r0, #24]
 800cea8:	b90b      	cbnz	r3, 800ceae <__swbuf_r+0x12>
 800ceaa:	f000 f9e7 	bl	800d27c <__sinit>
 800ceae:	4b21      	ldr	r3, [pc, #132]	; (800cf34 <__swbuf_r+0x98>)
 800ceb0:	429c      	cmp	r4, r3
 800ceb2:	d12b      	bne.n	800cf0c <__swbuf_r+0x70>
 800ceb4:	686c      	ldr	r4, [r5, #4]
 800ceb6:	69a3      	ldr	r3, [r4, #24]
 800ceb8:	60a3      	str	r3, [r4, #8]
 800ceba:	89a3      	ldrh	r3, [r4, #12]
 800cebc:	071a      	lsls	r2, r3, #28
 800cebe:	d52f      	bpl.n	800cf20 <__swbuf_r+0x84>
 800cec0:	6923      	ldr	r3, [r4, #16]
 800cec2:	b36b      	cbz	r3, 800cf20 <__swbuf_r+0x84>
 800cec4:	6923      	ldr	r3, [r4, #16]
 800cec6:	6820      	ldr	r0, [r4, #0]
 800cec8:	1ac0      	subs	r0, r0, r3
 800ceca:	6963      	ldr	r3, [r4, #20]
 800cecc:	b2f6      	uxtb	r6, r6
 800cece:	4283      	cmp	r3, r0
 800ced0:	4637      	mov	r7, r6
 800ced2:	dc04      	bgt.n	800cede <__swbuf_r+0x42>
 800ced4:	4621      	mov	r1, r4
 800ced6:	4628      	mov	r0, r5
 800ced8:	f000 f93c 	bl	800d154 <_fflush_r>
 800cedc:	bb30      	cbnz	r0, 800cf2c <__swbuf_r+0x90>
 800cede:	68a3      	ldr	r3, [r4, #8]
 800cee0:	3b01      	subs	r3, #1
 800cee2:	60a3      	str	r3, [r4, #8]
 800cee4:	6823      	ldr	r3, [r4, #0]
 800cee6:	1c5a      	adds	r2, r3, #1
 800cee8:	6022      	str	r2, [r4, #0]
 800ceea:	701e      	strb	r6, [r3, #0]
 800ceec:	6963      	ldr	r3, [r4, #20]
 800ceee:	3001      	adds	r0, #1
 800cef0:	4283      	cmp	r3, r0
 800cef2:	d004      	beq.n	800cefe <__swbuf_r+0x62>
 800cef4:	89a3      	ldrh	r3, [r4, #12]
 800cef6:	07db      	lsls	r3, r3, #31
 800cef8:	d506      	bpl.n	800cf08 <__swbuf_r+0x6c>
 800cefa:	2e0a      	cmp	r6, #10
 800cefc:	d104      	bne.n	800cf08 <__swbuf_r+0x6c>
 800cefe:	4621      	mov	r1, r4
 800cf00:	4628      	mov	r0, r5
 800cf02:	f000 f927 	bl	800d154 <_fflush_r>
 800cf06:	b988      	cbnz	r0, 800cf2c <__swbuf_r+0x90>
 800cf08:	4638      	mov	r0, r7
 800cf0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf0c:	4b0a      	ldr	r3, [pc, #40]	; (800cf38 <__swbuf_r+0x9c>)
 800cf0e:	429c      	cmp	r4, r3
 800cf10:	d101      	bne.n	800cf16 <__swbuf_r+0x7a>
 800cf12:	68ac      	ldr	r4, [r5, #8]
 800cf14:	e7cf      	b.n	800ceb6 <__swbuf_r+0x1a>
 800cf16:	4b09      	ldr	r3, [pc, #36]	; (800cf3c <__swbuf_r+0xa0>)
 800cf18:	429c      	cmp	r4, r3
 800cf1a:	bf08      	it	eq
 800cf1c:	68ec      	ldreq	r4, [r5, #12]
 800cf1e:	e7ca      	b.n	800ceb6 <__swbuf_r+0x1a>
 800cf20:	4621      	mov	r1, r4
 800cf22:	4628      	mov	r0, r5
 800cf24:	f000 f81a 	bl	800cf5c <__swsetup_r>
 800cf28:	2800      	cmp	r0, #0
 800cf2a:	d0cb      	beq.n	800cec4 <__swbuf_r+0x28>
 800cf2c:	f04f 37ff 	mov.w	r7, #4294967295
 800cf30:	e7ea      	b.n	800cf08 <__swbuf_r+0x6c>
 800cf32:	bf00      	nop
 800cf34:	0800de84 	.word	0x0800de84
 800cf38:	0800dea4 	.word	0x0800dea4
 800cf3c:	0800de64 	.word	0x0800de64

0800cf40 <__ascii_wctomb>:
 800cf40:	b149      	cbz	r1, 800cf56 <__ascii_wctomb+0x16>
 800cf42:	2aff      	cmp	r2, #255	; 0xff
 800cf44:	bf85      	ittet	hi
 800cf46:	238a      	movhi	r3, #138	; 0x8a
 800cf48:	6003      	strhi	r3, [r0, #0]
 800cf4a:	700a      	strbls	r2, [r1, #0]
 800cf4c:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf50:	bf98      	it	ls
 800cf52:	2001      	movls	r0, #1
 800cf54:	4770      	bx	lr
 800cf56:	4608      	mov	r0, r1
 800cf58:	4770      	bx	lr
	...

0800cf5c <__swsetup_r>:
 800cf5c:	4b32      	ldr	r3, [pc, #200]	; (800d028 <__swsetup_r+0xcc>)
 800cf5e:	b570      	push	{r4, r5, r6, lr}
 800cf60:	681d      	ldr	r5, [r3, #0]
 800cf62:	4606      	mov	r6, r0
 800cf64:	460c      	mov	r4, r1
 800cf66:	b125      	cbz	r5, 800cf72 <__swsetup_r+0x16>
 800cf68:	69ab      	ldr	r3, [r5, #24]
 800cf6a:	b913      	cbnz	r3, 800cf72 <__swsetup_r+0x16>
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	f000 f985 	bl	800d27c <__sinit>
 800cf72:	4b2e      	ldr	r3, [pc, #184]	; (800d02c <__swsetup_r+0xd0>)
 800cf74:	429c      	cmp	r4, r3
 800cf76:	d10f      	bne.n	800cf98 <__swsetup_r+0x3c>
 800cf78:	686c      	ldr	r4, [r5, #4]
 800cf7a:	89a3      	ldrh	r3, [r4, #12]
 800cf7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf80:	0719      	lsls	r1, r3, #28
 800cf82:	d42c      	bmi.n	800cfde <__swsetup_r+0x82>
 800cf84:	06dd      	lsls	r5, r3, #27
 800cf86:	d411      	bmi.n	800cfac <__swsetup_r+0x50>
 800cf88:	2309      	movs	r3, #9
 800cf8a:	6033      	str	r3, [r6, #0]
 800cf8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cf90:	81a3      	strh	r3, [r4, #12]
 800cf92:	f04f 30ff 	mov.w	r0, #4294967295
 800cf96:	e03e      	b.n	800d016 <__swsetup_r+0xba>
 800cf98:	4b25      	ldr	r3, [pc, #148]	; (800d030 <__swsetup_r+0xd4>)
 800cf9a:	429c      	cmp	r4, r3
 800cf9c:	d101      	bne.n	800cfa2 <__swsetup_r+0x46>
 800cf9e:	68ac      	ldr	r4, [r5, #8]
 800cfa0:	e7eb      	b.n	800cf7a <__swsetup_r+0x1e>
 800cfa2:	4b24      	ldr	r3, [pc, #144]	; (800d034 <__swsetup_r+0xd8>)
 800cfa4:	429c      	cmp	r4, r3
 800cfa6:	bf08      	it	eq
 800cfa8:	68ec      	ldreq	r4, [r5, #12]
 800cfaa:	e7e6      	b.n	800cf7a <__swsetup_r+0x1e>
 800cfac:	0758      	lsls	r0, r3, #29
 800cfae:	d512      	bpl.n	800cfd6 <__swsetup_r+0x7a>
 800cfb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfb2:	b141      	cbz	r1, 800cfc6 <__swsetup_r+0x6a>
 800cfb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfb8:	4299      	cmp	r1, r3
 800cfba:	d002      	beq.n	800cfc2 <__swsetup_r+0x66>
 800cfbc:	4630      	mov	r0, r6
 800cfbe:	f7ff fb31 	bl	800c624 <_free_r>
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	6363      	str	r3, [r4, #52]	; 0x34
 800cfc6:	89a3      	ldrh	r3, [r4, #12]
 800cfc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cfcc:	81a3      	strh	r3, [r4, #12]
 800cfce:	2300      	movs	r3, #0
 800cfd0:	6063      	str	r3, [r4, #4]
 800cfd2:	6923      	ldr	r3, [r4, #16]
 800cfd4:	6023      	str	r3, [r4, #0]
 800cfd6:	89a3      	ldrh	r3, [r4, #12]
 800cfd8:	f043 0308 	orr.w	r3, r3, #8
 800cfdc:	81a3      	strh	r3, [r4, #12]
 800cfde:	6923      	ldr	r3, [r4, #16]
 800cfe0:	b94b      	cbnz	r3, 800cff6 <__swsetup_r+0x9a>
 800cfe2:	89a3      	ldrh	r3, [r4, #12]
 800cfe4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cfe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfec:	d003      	beq.n	800cff6 <__swsetup_r+0x9a>
 800cfee:	4621      	mov	r1, r4
 800cff0:	4630      	mov	r0, r6
 800cff2:	f000 fa09 	bl	800d408 <__smakebuf_r>
 800cff6:	89a0      	ldrh	r0, [r4, #12]
 800cff8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cffc:	f010 0301 	ands.w	r3, r0, #1
 800d000:	d00a      	beq.n	800d018 <__swsetup_r+0xbc>
 800d002:	2300      	movs	r3, #0
 800d004:	60a3      	str	r3, [r4, #8]
 800d006:	6963      	ldr	r3, [r4, #20]
 800d008:	425b      	negs	r3, r3
 800d00a:	61a3      	str	r3, [r4, #24]
 800d00c:	6923      	ldr	r3, [r4, #16]
 800d00e:	b943      	cbnz	r3, 800d022 <__swsetup_r+0xc6>
 800d010:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d014:	d1ba      	bne.n	800cf8c <__swsetup_r+0x30>
 800d016:	bd70      	pop	{r4, r5, r6, pc}
 800d018:	0781      	lsls	r1, r0, #30
 800d01a:	bf58      	it	pl
 800d01c:	6963      	ldrpl	r3, [r4, #20]
 800d01e:	60a3      	str	r3, [r4, #8]
 800d020:	e7f4      	b.n	800d00c <__swsetup_r+0xb0>
 800d022:	2000      	movs	r0, #0
 800d024:	e7f7      	b.n	800d016 <__swsetup_r+0xba>
 800d026:	bf00      	nop
 800d028:	20000104 	.word	0x20000104
 800d02c:	0800de84 	.word	0x0800de84
 800d030:	0800dea4 	.word	0x0800dea4
 800d034:	0800de64 	.word	0x0800de64

0800d038 <abort>:
 800d038:	b508      	push	{r3, lr}
 800d03a:	2006      	movs	r0, #6
 800d03c:	f000 fa54 	bl	800d4e8 <raise>
 800d040:	2001      	movs	r0, #1
 800d042:	f7f4 fe5b 	bl	8001cfc <_exit>
	...

0800d048 <__sflush_r>:
 800d048:	898a      	ldrh	r2, [r1, #12]
 800d04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d04e:	4605      	mov	r5, r0
 800d050:	0710      	lsls	r0, r2, #28
 800d052:	460c      	mov	r4, r1
 800d054:	d458      	bmi.n	800d108 <__sflush_r+0xc0>
 800d056:	684b      	ldr	r3, [r1, #4]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	dc05      	bgt.n	800d068 <__sflush_r+0x20>
 800d05c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d05e:	2b00      	cmp	r3, #0
 800d060:	dc02      	bgt.n	800d068 <__sflush_r+0x20>
 800d062:	2000      	movs	r0, #0
 800d064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d06a:	2e00      	cmp	r6, #0
 800d06c:	d0f9      	beq.n	800d062 <__sflush_r+0x1a>
 800d06e:	2300      	movs	r3, #0
 800d070:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d074:	682f      	ldr	r7, [r5, #0]
 800d076:	602b      	str	r3, [r5, #0]
 800d078:	d032      	beq.n	800d0e0 <__sflush_r+0x98>
 800d07a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d07c:	89a3      	ldrh	r3, [r4, #12]
 800d07e:	075a      	lsls	r2, r3, #29
 800d080:	d505      	bpl.n	800d08e <__sflush_r+0x46>
 800d082:	6863      	ldr	r3, [r4, #4]
 800d084:	1ac0      	subs	r0, r0, r3
 800d086:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d088:	b10b      	cbz	r3, 800d08e <__sflush_r+0x46>
 800d08a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d08c:	1ac0      	subs	r0, r0, r3
 800d08e:	2300      	movs	r3, #0
 800d090:	4602      	mov	r2, r0
 800d092:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d094:	6a21      	ldr	r1, [r4, #32]
 800d096:	4628      	mov	r0, r5
 800d098:	47b0      	blx	r6
 800d09a:	1c43      	adds	r3, r0, #1
 800d09c:	89a3      	ldrh	r3, [r4, #12]
 800d09e:	d106      	bne.n	800d0ae <__sflush_r+0x66>
 800d0a0:	6829      	ldr	r1, [r5, #0]
 800d0a2:	291d      	cmp	r1, #29
 800d0a4:	d82c      	bhi.n	800d100 <__sflush_r+0xb8>
 800d0a6:	4a2a      	ldr	r2, [pc, #168]	; (800d150 <__sflush_r+0x108>)
 800d0a8:	40ca      	lsrs	r2, r1
 800d0aa:	07d6      	lsls	r6, r2, #31
 800d0ac:	d528      	bpl.n	800d100 <__sflush_r+0xb8>
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	6062      	str	r2, [r4, #4]
 800d0b2:	04d9      	lsls	r1, r3, #19
 800d0b4:	6922      	ldr	r2, [r4, #16]
 800d0b6:	6022      	str	r2, [r4, #0]
 800d0b8:	d504      	bpl.n	800d0c4 <__sflush_r+0x7c>
 800d0ba:	1c42      	adds	r2, r0, #1
 800d0bc:	d101      	bne.n	800d0c2 <__sflush_r+0x7a>
 800d0be:	682b      	ldr	r3, [r5, #0]
 800d0c0:	b903      	cbnz	r3, 800d0c4 <__sflush_r+0x7c>
 800d0c2:	6560      	str	r0, [r4, #84]	; 0x54
 800d0c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0c6:	602f      	str	r7, [r5, #0]
 800d0c8:	2900      	cmp	r1, #0
 800d0ca:	d0ca      	beq.n	800d062 <__sflush_r+0x1a>
 800d0cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0d0:	4299      	cmp	r1, r3
 800d0d2:	d002      	beq.n	800d0da <__sflush_r+0x92>
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	f7ff faa5 	bl	800c624 <_free_r>
 800d0da:	2000      	movs	r0, #0
 800d0dc:	6360      	str	r0, [r4, #52]	; 0x34
 800d0de:	e7c1      	b.n	800d064 <__sflush_r+0x1c>
 800d0e0:	6a21      	ldr	r1, [r4, #32]
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	47b0      	blx	r6
 800d0e8:	1c41      	adds	r1, r0, #1
 800d0ea:	d1c7      	bne.n	800d07c <__sflush_r+0x34>
 800d0ec:	682b      	ldr	r3, [r5, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d0c4      	beq.n	800d07c <__sflush_r+0x34>
 800d0f2:	2b1d      	cmp	r3, #29
 800d0f4:	d001      	beq.n	800d0fa <__sflush_r+0xb2>
 800d0f6:	2b16      	cmp	r3, #22
 800d0f8:	d101      	bne.n	800d0fe <__sflush_r+0xb6>
 800d0fa:	602f      	str	r7, [r5, #0]
 800d0fc:	e7b1      	b.n	800d062 <__sflush_r+0x1a>
 800d0fe:	89a3      	ldrh	r3, [r4, #12]
 800d100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d104:	81a3      	strh	r3, [r4, #12]
 800d106:	e7ad      	b.n	800d064 <__sflush_r+0x1c>
 800d108:	690f      	ldr	r7, [r1, #16]
 800d10a:	2f00      	cmp	r7, #0
 800d10c:	d0a9      	beq.n	800d062 <__sflush_r+0x1a>
 800d10e:	0793      	lsls	r3, r2, #30
 800d110:	680e      	ldr	r6, [r1, #0]
 800d112:	bf08      	it	eq
 800d114:	694b      	ldreq	r3, [r1, #20]
 800d116:	600f      	str	r7, [r1, #0]
 800d118:	bf18      	it	ne
 800d11a:	2300      	movne	r3, #0
 800d11c:	eba6 0807 	sub.w	r8, r6, r7
 800d120:	608b      	str	r3, [r1, #8]
 800d122:	f1b8 0f00 	cmp.w	r8, #0
 800d126:	dd9c      	ble.n	800d062 <__sflush_r+0x1a>
 800d128:	6a21      	ldr	r1, [r4, #32]
 800d12a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d12c:	4643      	mov	r3, r8
 800d12e:	463a      	mov	r2, r7
 800d130:	4628      	mov	r0, r5
 800d132:	47b0      	blx	r6
 800d134:	2800      	cmp	r0, #0
 800d136:	dc06      	bgt.n	800d146 <__sflush_r+0xfe>
 800d138:	89a3      	ldrh	r3, [r4, #12]
 800d13a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d13e:	81a3      	strh	r3, [r4, #12]
 800d140:	f04f 30ff 	mov.w	r0, #4294967295
 800d144:	e78e      	b.n	800d064 <__sflush_r+0x1c>
 800d146:	4407      	add	r7, r0
 800d148:	eba8 0800 	sub.w	r8, r8, r0
 800d14c:	e7e9      	b.n	800d122 <__sflush_r+0xda>
 800d14e:	bf00      	nop
 800d150:	20400001 	.word	0x20400001

0800d154 <_fflush_r>:
 800d154:	b538      	push	{r3, r4, r5, lr}
 800d156:	690b      	ldr	r3, [r1, #16]
 800d158:	4605      	mov	r5, r0
 800d15a:	460c      	mov	r4, r1
 800d15c:	b913      	cbnz	r3, 800d164 <_fflush_r+0x10>
 800d15e:	2500      	movs	r5, #0
 800d160:	4628      	mov	r0, r5
 800d162:	bd38      	pop	{r3, r4, r5, pc}
 800d164:	b118      	cbz	r0, 800d16e <_fflush_r+0x1a>
 800d166:	6983      	ldr	r3, [r0, #24]
 800d168:	b90b      	cbnz	r3, 800d16e <_fflush_r+0x1a>
 800d16a:	f000 f887 	bl	800d27c <__sinit>
 800d16e:	4b14      	ldr	r3, [pc, #80]	; (800d1c0 <_fflush_r+0x6c>)
 800d170:	429c      	cmp	r4, r3
 800d172:	d11b      	bne.n	800d1ac <_fflush_r+0x58>
 800d174:	686c      	ldr	r4, [r5, #4]
 800d176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d0ef      	beq.n	800d15e <_fflush_r+0xa>
 800d17e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d180:	07d0      	lsls	r0, r2, #31
 800d182:	d404      	bmi.n	800d18e <_fflush_r+0x3a>
 800d184:	0599      	lsls	r1, r3, #22
 800d186:	d402      	bmi.n	800d18e <_fflush_r+0x3a>
 800d188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d18a:	f000 f915 	bl	800d3b8 <__retarget_lock_acquire_recursive>
 800d18e:	4628      	mov	r0, r5
 800d190:	4621      	mov	r1, r4
 800d192:	f7ff ff59 	bl	800d048 <__sflush_r>
 800d196:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d198:	07da      	lsls	r2, r3, #31
 800d19a:	4605      	mov	r5, r0
 800d19c:	d4e0      	bmi.n	800d160 <_fflush_r+0xc>
 800d19e:	89a3      	ldrh	r3, [r4, #12]
 800d1a0:	059b      	lsls	r3, r3, #22
 800d1a2:	d4dd      	bmi.n	800d160 <_fflush_r+0xc>
 800d1a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1a6:	f000 f908 	bl	800d3ba <__retarget_lock_release_recursive>
 800d1aa:	e7d9      	b.n	800d160 <_fflush_r+0xc>
 800d1ac:	4b05      	ldr	r3, [pc, #20]	; (800d1c4 <_fflush_r+0x70>)
 800d1ae:	429c      	cmp	r4, r3
 800d1b0:	d101      	bne.n	800d1b6 <_fflush_r+0x62>
 800d1b2:	68ac      	ldr	r4, [r5, #8]
 800d1b4:	e7df      	b.n	800d176 <_fflush_r+0x22>
 800d1b6:	4b04      	ldr	r3, [pc, #16]	; (800d1c8 <_fflush_r+0x74>)
 800d1b8:	429c      	cmp	r4, r3
 800d1ba:	bf08      	it	eq
 800d1bc:	68ec      	ldreq	r4, [r5, #12]
 800d1be:	e7da      	b.n	800d176 <_fflush_r+0x22>
 800d1c0:	0800de84 	.word	0x0800de84
 800d1c4:	0800dea4 	.word	0x0800dea4
 800d1c8:	0800de64 	.word	0x0800de64

0800d1cc <std>:
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	b510      	push	{r4, lr}
 800d1d0:	4604      	mov	r4, r0
 800d1d2:	e9c0 3300 	strd	r3, r3, [r0]
 800d1d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d1da:	6083      	str	r3, [r0, #8]
 800d1dc:	8181      	strh	r1, [r0, #12]
 800d1de:	6643      	str	r3, [r0, #100]	; 0x64
 800d1e0:	81c2      	strh	r2, [r0, #14]
 800d1e2:	6183      	str	r3, [r0, #24]
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	2208      	movs	r2, #8
 800d1e8:	305c      	adds	r0, #92	; 0x5c
 800d1ea:	f7fd fb45 	bl	800a878 <memset>
 800d1ee:	4b05      	ldr	r3, [pc, #20]	; (800d204 <std+0x38>)
 800d1f0:	6263      	str	r3, [r4, #36]	; 0x24
 800d1f2:	4b05      	ldr	r3, [pc, #20]	; (800d208 <std+0x3c>)
 800d1f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800d1f6:	4b05      	ldr	r3, [pc, #20]	; (800d20c <std+0x40>)
 800d1f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d1fa:	4b05      	ldr	r3, [pc, #20]	; (800d210 <std+0x44>)
 800d1fc:	6224      	str	r4, [r4, #32]
 800d1fe:	6323      	str	r3, [r4, #48]	; 0x30
 800d200:	bd10      	pop	{r4, pc}
 800d202:	bf00      	nop
 800d204:	0800d521 	.word	0x0800d521
 800d208:	0800d543 	.word	0x0800d543
 800d20c:	0800d57b 	.word	0x0800d57b
 800d210:	0800d59f 	.word	0x0800d59f

0800d214 <_cleanup_r>:
 800d214:	4901      	ldr	r1, [pc, #4]	; (800d21c <_cleanup_r+0x8>)
 800d216:	f000 b8af 	b.w	800d378 <_fwalk_reent>
 800d21a:	bf00      	nop
 800d21c:	0800d155 	.word	0x0800d155

0800d220 <__sfmoreglue>:
 800d220:	b570      	push	{r4, r5, r6, lr}
 800d222:	2268      	movs	r2, #104	; 0x68
 800d224:	1e4d      	subs	r5, r1, #1
 800d226:	4355      	muls	r5, r2
 800d228:	460e      	mov	r6, r1
 800d22a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d22e:	f7ff fa65 	bl	800c6fc <_malloc_r>
 800d232:	4604      	mov	r4, r0
 800d234:	b140      	cbz	r0, 800d248 <__sfmoreglue+0x28>
 800d236:	2100      	movs	r1, #0
 800d238:	e9c0 1600 	strd	r1, r6, [r0]
 800d23c:	300c      	adds	r0, #12
 800d23e:	60a0      	str	r0, [r4, #8]
 800d240:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d244:	f7fd fb18 	bl	800a878 <memset>
 800d248:	4620      	mov	r0, r4
 800d24a:	bd70      	pop	{r4, r5, r6, pc}

0800d24c <__sfp_lock_acquire>:
 800d24c:	4801      	ldr	r0, [pc, #4]	; (800d254 <__sfp_lock_acquire+0x8>)
 800d24e:	f000 b8b3 	b.w	800d3b8 <__retarget_lock_acquire_recursive>
 800d252:	bf00      	nop
 800d254:	20002129 	.word	0x20002129

0800d258 <__sfp_lock_release>:
 800d258:	4801      	ldr	r0, [pc, #4]	; (800d260 <__sfp_lock_release+0x8>)
 800d25a:	f000 b8ae 	b.w	800d3ba <__retarget_lock_release_recursive>
 800d25e:	bf00      	nop
 800d260:	20002129 	.word	0x20002129

0800d264 <__sinit_lock_acquire>:
 800d264:	4801      	ldr	r0, [pc, #4]	; (800d26c <__sinit_lock_acquire+0x8>)
 800d266:	f000 b8a7 	b.w	800d3b8 <__retarget_lock_acquire_recursive>
 800d26a:	bf00      	nop
 800d26c:	2000212a 	.word	0x2000212a

0800d270 <__sinit_lock_release>:
 800d270:	4801      	ldr	r0, [pc, #4]	; (800d278 <__sinit_lock_release+0x8>)
 800d272:	f000 b8a2 	b.w	800d3ba <__retarget_lock_release_recursive>
 800d276:	bf00      	nop
 800d278:	2000212a 	.word	0x2000212a

0800d27c <__sinit>:
 800d27c:	b510      	push	{r4, lr}
 800d27e:	4604      	mov	r4, r0
 800d280:	f7ff fff0 	bl	800d264 <__sinit_lock_acquire>
 800d284:	69a3      	ldr	r3, [r4, #24]
 800d286:	b11b      	cbz	r3, 800d290 <__sinit+0x14>
 800d288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d28c:	f7ff bff0 	b.w	800d270 <__sinit_lock_release>
 800d290:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d294:	6523      	str	r3, [r4, #80]	; 0x50
 800d296:	4b13      	ldr	r3, [pc, #76]	; (800d2e4 <__sinit+0x68>)
 800d298:	4a13      	ldr	r2, [pc, #76]	; (800d2e8 <__sinit+0x6c>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d29e:	42a3      	cmp	r3, r4
 800d2a0:	bf04      	itt	eq
 800d2a2:	2301      	moveq	r3, #1
 800d2a4:	61a3      	streq	r3, [r4, #24]
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	f000 f820 	bl	800d2ec <__sfp>
 800d2ac:	6060      	str	r0, [r4, #4]
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	f000 f81c 	bl	800d2ec <__sfp>
 800d2b4:	60a0      	str	r0, [r4, #8]
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	f000 f818 	bl	800d2ec <__sfp>
 800d2bc:	2200      	movs	r2, #0
 800d2be:	60e0      	str	r0, [r4, #12]
 800d2c0:	2104      	movs	r1, #4
 800d2c2:	6860      	ldr	r0, [r4, #4]
 800d2c4:	f7ff ff82 	bl	800d1cc <std>
 800d2c8:	68a0      	ldr	r0, [r4, #8]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	2109      	movs	r1, #9
 800d2ce:	f7ff ff7d 	bl	800d1cc <std>
 800d2d2:	68e0      	ldr	r0, [r4, #12]
 800d2d4:	2202      	movs	r2, #2
 800d2d6:	2112      	movs	r1, #18
 800d2d8:	f7ff ff78 	bl	800d1cc <std>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	61a3      	str	r3, [r4, #24]
 800d2e0:	e7d2      	b.n	800d288 <__sinit+0xc>
 800d2e2:	bf00      	nop
 800d2e4:	0800daec 	.word	0x0800daec
 800d2e8:	0800d215 	.word	0x0800d215

0800d2ec <__sfp>:
 800d2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ee:	4607      	mov	r7, r0
 800d2f0:	f7ff ffac 	bl	800d24c <__sfp_lock_acquire>
 800d2f4:	4b1e      	ldr	r3, [pc, #120]	; (800d370 <__sfp+0x84>)
 800d2f6:	681e      	ldr	r6, [r3, #0]
 800d2f8:	69b3      	ldr	r3, [r6, #24]
 800d2fa:	b913      	cbnz	r3, 800d302 <__sfp+0x16>
 800d2fc:	4630      	mov	r0, r6
 800d2fe:	f7ff ffbd 	bl	800d27c <__sinit>
 800d302:	3648      	adds	r6, #72	; 0x48
 800d304:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d308:	3b01      	subs	r3, #1
 800d30a:	d503      	bpl.n	800d314 <__sfp+0x28>
 800d30c:	6833      	ldr	r3, [r6, #0]
 800d30e:	b30b      	cbz	r3, 800d354 <__sfp+0x68>
 800d310:	6836      	ldr	r6, [r6, #0]
 800d312:	e7f7      	b.n	800d304 <__sfp+0x18>
 800d314:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d318:	b9d5      	cbnz	r5, 800d350 <__sfp+0x64>
 800d31a:	4b16      	ldr	r3, [pc, #88]	; (800d374 <__sfp+0x88>)
 800d31c:	60e3      	str	r3, [r4, #12]
 800d31e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d322:	6665      	str	r5, [r4, #100]	; 0x64
 800d324:	f000 f847 	bl	800d3b6 <__retarget_lock_init_recursive>
 800d328:	f7ff ff96 	bl	800d258 <__sfp_lock_release>
 800d32c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d330:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d334:	6025      	str	r5, [r4, #0]
 800d336:	61a5      	str	r5, [r4, #24]
 800d338:	2208      	movs	r2, #8
 800d33a:	4629      	mov	r1, r5
 800d33c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d340:	f7fd fa9a 	bl	800a878 <memset>
 800d344:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d348:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d34c:	4620      	mov	r0, r4
 800d34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d350:	3468      	adds	r4, #104	; 0x68
 800d352:	e7d9      	b.n	800d308 <__sfp+0x1c>
 800d354:	2104      	movs	r1, #4
 800d356:	4638      	mov	r0, r7
 800d358:	f7ff ff62 	bl	800d220 <__sfmoreglue>
 800d35c:	4604      	mov	r4, r0
 800d35e:	6030      	str	r0, [r6, #0]
 800d360:	2800      	cmp	r0, #0
 800d362:	d1d5      	bne.n	800d310 <__sfp+0x24>
 800d364:	f7ff ff78 	bl	800d258 <__sfp_lock_release>
 800d368:	230c      	movs	r3, #12
 800d36a:	603b      	str	r3, [r7, #0]
 800d36c:	e7ee      	b.n	800d34c <__sfp+0x60>
 800d36e:	bf00      	nop
 800d370:	0800daec 	.word	0x0800daec
 800d374:	ffff0001 	.word	0xffff0001

0800d378 <_fwalk_reent>:
 800d378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d37c:	4606      	mov	r6, r0
 800d37e:	4688      	mov	r8, r1
 800d380:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d384:	2700      	movs	r7, #0
 800d386:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d38a:	f1b9 0901 	subs.w	r9, r9, #1
 800d38e:	d505      	bpl.n	800d39c <_fwalk_reent+0x24>
 800d390:	6824      	ldr	r4, [r4, #0]
 800d392:	2c00      	cmp	r4, #0
 800d394:	d1f7      	bne.n	800d386 <_fwalk_reent+0xe>
 800d396:	4638      	mov	r0, r7
 800d398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d39c:	89ab      	ldrh	r3, [r5, #12]
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	d907      	bls.n	800d3b2 <_fwalk_reent+0x3a>
 800d3a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	d003      	beq.n	800d3b2 <_fwalk_reent+0x3a>
 800d3aa:	4629      	mov	r1, r5
 800d3ac:	4630      	mov	r0, r6
 800d3ae:	47c0      	blx	r8
 800d3b0:	4307      	orrs	r7, r0
 800d3b2:	3568      	adds	r5, #104	; 0x68
 800d3b4:	e7e9      	b.n	800d38a <_fwalk_reent+0x12>

0800d3b6 <__retarget_lock_init_recursive>:
 800d3b6:	4770      	bx	lr

0800d3b8 <__retarget_lock_acquire_recursive>:
 800d3b8:	4770      	bx	lr

0800d3ba <__retarget_lock_release_recursive>:
 800d3ba:	4770      	bx	lr

0800d3bc <__swhatbuf_r>:
 800d3bc:	b570      	push	{r4, r5, r6, lr}
 800d3be:	460e      	mov	r6, r1
 800d3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3c4:	2900      	cmp	r1, #0
 800d3c6:	b096      	sub	sp, #88	; 0x58
 800d3c8:	4614      	mov	r4, r2
 800d3ca:	461d      	mov	r5, r3
 800d3cc:	da08      	bge.n	800d3e0 <__swhatbuf_r+0x24>
 800d3ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	602a      	str	r2, [r5, #0]
 800d3d6:	061a      	lsls	r2, r3, #24
 800d3d8:	d410      	bmi.n	800d3fc <__swhatbuf_r+0x40>
 800d3da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3de:	e00e      	b.n	800d3fe <__swhatbuf_r+0x42>
 800d3e0:	466a      	mov	r2, sp
 800d3e2:	f000 f903 	bl	800d5ec <_fstat_r>
 800d3e6:	2800      	cmp	r0, #0
 800d3e8:	dbf1      	blt.n	800d3ce <__swhatbuf_r+0x12>
 800d3ea:	9a01      	ldr	r2, [sp, #4]
 800d3ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d3f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d3f4:	425a      	negs	r2, r3
 800d3f6:	415a      	adcs	r2, r3
 800d3f8:	602a      	str	r2, [r5, #0]
 800d3fa:	e7ee      	b.n	800d3da <__swhatbuf_r+0x1e>
 800d3fc:	2340      	movs	r3, #64	; 0x40
 800d3fe:	2000      	movs	r0, #0
 800d400:	6023      	str	r3, [r4, #0]
 800d402:	b016      	add	sp, #88	; 0x58
 800d404:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d408 <__smakebuf_r>:
 800d408:	898b      	ldrh	r3, [r1, #12]
 800d40a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d40c:	079d      	lsls	r5, r3, #30
 800d40e:	4606      	mov	r6, r0
 800d410:	460c      	mov	r4, r1
 800d412:	d507      	bpl.n	800d424 <__smakebuf_r+0x1c>
 800d414:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d418:	6023      	str	r3, [r4, #0]
 800d41a:	6123      	str	r3, [r4, #16]
 800d41c:	2301      	movs	r3, #1
 800d41e:	6163      	str	r3, [r4, #20]
 800d420:	b002      	add	sp, #8
 800d422:	bd70      	pop	{r4, r5, r6, pc}
 800d424:	ab01      	add	r3, sp, #4
 800d426:	466a      	mov	r2, sp
 800d428:	f7ff ffc8 	bl	800d3bc <__swhatbuf_r>
 800d42c:	9900      	ldr	r1, [sp, #0]
 800d42e:	4605      	mov	r5, r0
 800d430:	4630      	mov	r0, r6
 800d432:	f7ff f963 	bl	800c6fc <_malloc_r>
 800d436:	b948      	cbnz	r0, 800d44c <__smakebuf_r+0x44>
 800d438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d43c:	059a      	lsls	r2, r3, #22
 800d43e:	d4ef      	bmi.n	800d420 <__smakebuf_r+0x18>
 800d440:	f023 0303 	bic.w	r3, r3, #3
 800d444:	f043 0302 	orr.w	r3, r3, #2
 800d448:	81a3      	strh	r3, [r4, #12]
 800d44a:	e7e3      	b.n	800d414 <__smakebuf_r+0xc>
 800d44c:	4b0d      	ldr	r3, [pc, #52]	; (800d484 <__smakebuf_r+0x7c>)
 800d44e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d450:	89a3      	ldrh	r3, [r4, #12]
 800d452:	6020      	str	r0, [r4, #0]
 800d454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d458:	81a3      	strh	r3, [r4, #12]
 800d45a:	9b00      	ldr	r3, [sp, #0]
 800d45c:	6163      	str	r3, [r4, #20]
 800d45e:	9b01      	ldr	r3, [sp, #4]
 800d460:	6120      	str	r0, [r4, #16]
 800d462:	b15b      	cbz	r3, 800d47c <__smakebuf_r+0x74>
 800d464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d468:	4630      	mov	r0, r6
 800d46a:	f000 f8d1 	bl	800d610 <_isatty_r>
 800d46e:	b128      	cbz	r0, 800d47c <__smakebuf_r+0x74>
 800d470:	89a3      	ldrh	r3, [r4, #12]
 800d472:	f023 0303 	bic.w	r3, r3, #3
 800d476:	f043 0301 	orr.w	r3, r3, #1
 800d47a:	81a3      	strh	r3, [r4, #12]
 800d47c:	89a0      	ldrh	r0, [r4, #12]
 800d47e:	4305      	orrs	r5, r0
 800d480:	81a5      	strh	r5, [r4, #12]
 800d482:	e7cd      	b.n	800d420 <__smakebuf_r+0x18>
 800d484:	0800d215 	.word	0x0800d215

0800d488 <_malloc_usable_size_r>:
 800d488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d48c:	1f18      	subs	r0, r3, #4
 800d48e:	2b00      	cmp	r3, #0
 800d490:	bfbc      	itt	lt
 800d492:	580b      	ldrlt	r3, [r1, r0]
 800d494:	18c0      	addlt	r0, r0, r3
 800d496:	4770      	bx	lr

0800d498 <_raise_r>:
 800d498:	291f      	cmp	r1, #31
 800d49a:	b538      	push	{r3, r4, r5, lr}
 800d49c:	4604      	mov	r4, r0
 800d49e:	460d      	mov	r5, r1
 800d4a0:	d904      	bls.n	800d4ac <_raise_r+0x14>
 800d4a2:	2316      	movs	r3, #22
 800d4a4:	6003      	str	r3, [r0, #0]
 800d4a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d4aa:	bd38      	pop	{r3, r4, r5, pc}
 800d4ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d4ae:	b112      	cbz	r2, 800d4b6 <_raise_r+0x1e>
 800d4b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4b4:	b94b      	cbnz	r3, 800d4ca <_raise_r+0x32>
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	f000 f830 	bl	800d51c <_getpid_r>
 800d4bc:	462a      	mov	r2, r5
 800d4be:	4601      	mov	r1, r0
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4c6:	f000 b817 	b.w	800d4f8 <_kill_r>
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d00a      	beq.n	800d4e4 <_raise_r+0x4c>
 800d4ce:	1c59      	adds	r1, r3, #1
 800d4d0:	d103      	bne.n	800d4da <_raise_r+0x42>
 800d4d2:	2316      	movs	r3, #22
 800d4d4:	6003      	str	r3, [r0, #0]
 800d4d6:	2001      	movs	r0, #1
 800d4d8:	e7e7      	b.n	800d4aa <_raise_r+0x12>
 800d4da:	2400      	movs	r4, #0
 800d4dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d4e0:	4628      	mov	r0, r5
 800d4e2:	4798      	blx	r3
 800d4e4:	2000      	movs	r0, #0
 800d4e6:	e7e0      	b.n	800d4aa <_raise_r+0x12>

0800d4e8 <raise>:
 800d4e8:	4b02      	ldr	r3, [pc, #8]	; (800d4f4 <raise+0xc>)
 800d4ea:	4601      	mov	r1, r0
 800d4ec:	6818      	ldr	r0, [r3, #0]
 800d4ee:	f7ff bfd3 	b.w	800d498 <_raise_r>
 800d4f2:	bf00      	nop
 800d4f4:	20000104 	.word	0x20000104

0800d4f8 <_kill_r>:
 800d4f8:	b538      	push	{r3, r4, r5, lr}
 800d4fa:	4d07      	ldr	r5, [pc, #28]	; (800d518 <_kill_r+0x20>)
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	4604      	mov	r4, r0
 800d500:	4608      	mov	r0, r1
 800d502:	4611      	mov	r1, r2
 800d504:	602b      	str	r3, [r5, #0]
 800d506:	f7f4 fbe9 	bl	8001cdc <_kill>
 800d50a:	1c43      	adds	r3, r0, #1
 800d50c:	d102      	bne.n	800d514 <_kill_r+0x1c>
 800d50e:	682b      	ldr	r3, [r5, #0]
 800d510:	b103      	cbz	r3, 800d514 <_kill_r+0x1c>
 800d512:	6023      	str	r3, [r4, #0]
 800d514:	bd38      	pop	{r3, r4, r5, pc}
 800d516:	bf00      	nop
 800d518:	20002124 	.word	0x20002124

0800d51c <_getpid_r>:
 800d51c:	f7f4 bbd6 	b.w	8001ccc <_getpid>

0800d520 <__sread>:
 800d520:	b510      	push	{r4, lr}
 800d522:	460c      	mov	r4, r1
 800d524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d528:	f000 f894 	bl	800d654 <_read_r>
 800d52c:	2800      	cmp	r0, #0
 800d52e:	bfab      	itete	ge
 800d530:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d532:	89a3      	ldrhlt	r3, [r4, #12]
 800d534:	181b      	addge	r3, r3, r0
 800d536:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d53a:	bfac      	ite	ge
 800d53c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d53e:	81a3      	strhlt	r3, [r4, #12]
 800d540:	bd10      	pop	{r4, pc}

0800d542 <__swrite>:
 800d542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d546:	461f      	mov	r7, r3
 800d548:	898b      	ldrh	r3, [r1, #12]
 800d54a:	05db      	lsls	r3, r3, #23
 800d54c:	4605      	mov	r5, r0
 800d54e:	460c      	mov	r4, r1
 800d550:	4616      	mov	r6, r2
 800d552:	d505      	bpl.n	800d560 <__swrite+0x1e>
 800d554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d558:	2302      	movs	r3, #2
 800d55a:	2200      	movs	r2, #0
 800d55c:	f000 f868 	bl	800d630 <_lseek_r>
 800d560:	89a3      	ldrh	r3, [r4, #12]
 800d562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d566:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d56a:	81a3      	strh	r3, [r4, #12]
 800d56c:	4632      	mov	r2, r6
 800d56e:	463b      	mov	r3, r7
 800d570:	4628      	mov	r0, r5
 800d572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d576:	f000 b817 	b.w	800d5a8 <_write_r>

0800d57a <__sseek>:
 800d57a:	b510      	push	{r4, lr}
 800d57c:	460c      	mov	r4, r1
 800d57e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d582:	f000 f855 	bl	800d630 <_lseek_r>
 800d586:	1c43      	adds	r3, r0, #1
 800d588:	89a3      	ldrh	r3, [r4, #12]
 800d58a:	bf15      	itete	ne
 800d58c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d58e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d592:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d596:	81a3      	strheq	r3, [r4, #12]
 800d598:	bf18      	it	ne
 800d59a:	81a3      	strhne	r3, [r4, #12]
 800d59c:	bd10      	pop	{r4, pc}

0800d59e <__sclose>:
 800d59e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5a2:	f000 b813 	b.w	800d5cc <_close_r>
	...

0800d5a8 <_write_r>:
 800d5a8:	b538      	push	{r3, r4, r5, lr}
 800d5aa:	4d07      	ldr	r5, [pc, #28]	; (800d5c8 <_write_r+0x20>)
 800d5ac:	4604      	mov	r4, r0
 800d5ae:	4608      	mov	r0, r1
 800d5b0:	4611      	mov	r1, r2
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	602a      	str	r2, [r5, #0]
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	f7f4 fbc7 	bl	8001d4a <_write>
 800d5bc:	1c43      	adds	r3, r0, #1
 800d5be:	d102      	bne.n	800d5c6 <_write_r+0x1e>
 800d5c0:	682b      	ldr	r3, [r5, #0]
 800d5c2:	b103      	cbz	r3, 800d5c6 <_write_r+0x1e>
 800d5c4:	6023      	str	r3, [r4, #0]
 800d5c6:	bd38      	pop	{r3, r4, r5, pc}
 800d5c8:	20002124 	.word	0x20002124

0800d5cc <_close_r>:
 800d5cc:	b538      	push	{r3, r4, r5, lr}
 800d5ce:	4d06      	ldr	r5, [pc, #24]	; (800d5e8 <_close_r+0x1c>)
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	4604      	mov	r4, r0
 800d5d4:	4608      	mov	r0, r1
 800d5d6:	602b      	str	r3, [r5, #0]
 800d5d8:	f7f4 fbd3 	bl	8001d82 <_close>
 800d5dc:	1c43      	adds	r3, r0, #1
 800d5de:	d102      	bne.n	800d5e6 <_close_r+0x1a>
 800d5e0:	682b      	ldr	r3, [r5, #0]
 800d5e2:	b103      	cbz	r3, 800d5e6 <_close_r+0x1a>
 800d5e4:	6023      	str	r3, [r4, #0]
 800d5e6:	bd38      	pop	{r3, r4, r5, pc}
 800d5e8:	20002124 	.word	0x20002124

0800d5ec <_fstat_r>:
 800d5ec:	b538      	push	{r3, r4, r5, lr}
 800d5ee:	4d07      	ldr	r5, [pc, #28]	; (800d60c <_fstat_r+0x20>)
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	4604      	mov	r4, r0
 800d5f4:	4608      	mov	r0, r1
 800d5f6:	4611      	mov	r1, r2
 800d5f8:	602b      	str	r3, [r5, #0]
 800d5fa:	f7f4 fbce 	bl	8001d9a <_fstat>
 800d5fe:	1c43      	adds	r3, r0, #1
 800d600:	d102      	bne.n	800d608 <_fstat_r+0x1c>
 800d602:	682b      	ldr	r3, [r5, #0]
 800d604:	b103      	cbz	r3, 800d608 <_fstat_r+0x1c>
 800d606:	6023      	str	r3, [r4, #0]
 800d608:	bd38      	pop	{r3, r4, r5, pc}
 800d60a:	bf00      	nop
 800d60c:	20002124 	.word	0x20002124

0800d610 <_isatty_r>:
 800d610:	b538      	push	{r3, r4, r5, lr}
 800d612:	4d06      	ldr	r5, [pc, #24]	; (800d62c <_isatty_r+0x1c>)
 800d614:	2300      	movs	r3, #0
 800d616:	4604      	mov	r4, r0
 800d618:	4608      	mov	r0, r1
 800d61a:	602b      	str	r3, [r5, #0]
 800d61c:	f7f4 fbcd 	bl	8001dba <_isatty>
 800d620:	1c43      	adds	r3, r0, #1
 800d622:	d102      	bne.n	800d62a <_isatty_r+0x1a>
 800d624:	682b      	ldr	r3, [r5, #0]
 800d626:	b103      	cbz	r3, 800d62a <_isatty_r+0x1a>
 800d628:	6023      	str	r3, [r4, #0]
 800d62a:	bd38      	pop	{r3, r4, r5, pc}
 800d62c:	20002124 	.word	0x20002124

0800d630 <_lseek_r>:
 800d630:	b538      	push	{r3, r4, r5, lr}
 800d632:	4d07      	ldr	r5, [pc, #28]	; (800d650 <_lseek_r+0x20>)
 800d634:	4604      	mov	r4, r0
 800d636:	4608      	mov	r0, r1
 800d638:	4611      	mov	r1, r2
 800d63a:	2200      	movs	r2, #0
 800d63c:	602a      	str	r2, [r5, #0]
 800d63e:	461a      	mov	r2, r3
 800d640:	f7f4 fbc6 	bl	8001dd0 <_lseek>
 800d644:	1c43      	adds	r3, r0, #1
 800d646:	d102      	bne.n	800d64e <_lseek_r+0x1e>
 800d648:	682b      	ldr	r3, [r5, #0]
 800d64a:	b103      	cbz	r3, 800d64e <_lseek_r+0x1e>
 800d64c:	6023      	str	r3, [r4, #0]
 800d64e:	bd38      	pop	{r3, r4, r5, pc}
 800d650:	20002124 	.word	0x20002124

0800d654 <_read_r>:
 800d654:	b538      	push	{r3, r4, r5, lr}
 800d656:	4d07      	ldr	r5, [pc, #28]	; (800d674 <_read_r+0x20>)
 800d658:	4604      	mov	r4, r0
 800d65a:	4608      	mov	r0, r1
 800d65c:	4611      	mov	r1, r2
 800d65e:	2200      	movs	r2, #0
 800d660:	602a      	str	r2, [r5, #0]
 800d662:	461a      	mov	r2, r3
 800d664:	f7f4 fb54 	bl	8001d10 <_read>
 800d668:	1c43      	adds	r3, r0, #1
 800d66a:	d102      	bne.n	800d672 <_read_r+0x1e>
 800d66c:	682b      	ldr	r3, [r5, #0]
 800d66e:	b103      	cbz	r3, 800d672 <_read_r+0x1e>
 800d670:	6023      	str	r3, [r4, #0]
 800d672:	bd38      	pop	{r3, r4, r5, pc}
 800d674:	20002124 	.word	0x20002124

0800d678 <atanf>:
 800d678:	b538      	push	{r3, r4, r5, lr}
 800d67a:	ee10 5a10 	vmov	r5, s0
 800d67e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800d682:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800d686:	eef0 7a40 	vmov.f32	s15, s0
 800d68a:	db10      	blt.n	800d6ae <atanf+0x36>
 800d68c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d690:	dd04      	ble.n	800d69c <atanf+0x24>
 800d692:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d696:	eeb0 0a67 	vmov.f32	s0, s15
 800d69a:	bd38      	pop	{r3, r4, r5, pc}
 800d69c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800d7d4 <atanf+0x15c>
 800d6a0:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800d7d8 <atanf+0x160>
 800d6a4:	2d00      	cmp	r5, #0
 800d6a6:	bfd8      	it	le
 800d6a8:	eef0 7a40 	vmovle.f32	s15, s0
 800d6ac:	e7f3      	b.n	800d696 <atanf+0x1e>
 800d6ae:	4b4b      	ldr	r3, [pc, #300]	; (800d7dc <atanf+0x164>)
 800d6b0:	429c      	cmp	r4, r3
 800d6b2:	dc10      	bgt.n	800d6d6 <atanf+0x5e>
 800d6b4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800d6b8:	da0a      	bge.n	800d6d0 <atanf+0x58>
 800d6ba:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800d7e0 <atanf+0x168>
 800d6be:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d6c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6c6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d6ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6ce:	dce2      	bgt.n	800d696 <atanf+0x1e>
 800d6d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d6d4:	e013      	b.n	800d6fe <atanf+0x86>
 800d6d6:	f000 f8a3 	bl	800d820 <fabsf>
 800d6da:	4b42      	ldr	r3, [pc, #264]	; (800d7e4 <atanf+0x16c>)
 800d6dc:	429c      	cmp	r4, r3
 800d6de:	dc4f      	bgt.n	800d780 <atanf+0x108>
 800d6e0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800d6e4:	429c      	cmp	r4, r3
 800d6e6:	dc41      	bgt.n	800d76c <atanf+0xf4>
 800d6e8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800d6ec:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d6f0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d6fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d6fe:	1c5a      	adds	r2, r3, #1
 800d700:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d704:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d7e8 <atanf+0x170>
 800d708:	eddf 5a38 	vldr	s11, [pc, #224]	; 800d7ec <atanf+0x174>
 800d70c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800d7f0 <atanf+0x178>
 800d710:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d714:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d718:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800d7f4 <atanf+0x17c>
 800d71c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d720:	eddf 5a35 	vldr	s11, [pc, #212]	; 800d7f8 <atanf+0x180>
 800d724:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d728:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800d7fc <atanf+0x184>
 800d72c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d730:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d800 <atanf+0x188>
 800d734:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d738:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800d804 <atanf+0x18c>
 800d73c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d740:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800d808 <atanf+0x190>
 800d744:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d748:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800d80c <atanf+0x194>
 800d74c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d750:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800d810 <atanf+0x198>
 800d754:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d758:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d75c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d760:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d764:	d121      	bne.n	800d7aa <atanf+0x132>
 800d766:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d76a:	e794      	b.n	800d696 <atanf+0x1e>
 800d76c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d770:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d774:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d778:	2301      	movs	r3, #1
 800d77a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d77e:	e7be      	b.n	800d6fe <atanf+0x86>
 800d780:	4b24      	ldr	r3, [pc, #144]	; (800d814 <atanf+0x19c>)
 800d782:	429c      	cmp	r4, r3
 800d784:	dc0b      	bgt.n	800d79e <atanf+0x126>
 800d786:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800d78a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d78e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d792:	2302      	movs	r3, #2
 800d794:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d79c:	e7af      	b.n	800d6fe <atanf+0x86>
 800d79e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d7a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d7a6:	2303      	movs	r3, #3
 800d7a8:	e7a9      	b.n	800d6fe <atanf+0x86>
 800d7aa:	4a1b      	ldr	r2, [pc, #108]	; (800d818 <atanf+0x1a0>)
 800d7ac:	491b      	ldr	r1, [pc, #108]	; (800d81c <atanf+0x1a4>)
 800d7ae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d7b2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d7b6:	ed93 0a00 	vldr	s0, [r3]
 800d7ba:	ee37 7a40 	vsub.f32	s14, s14, s0
 800d7be:	ed92 0a00 	vldr	s0, [r2]
 800d7c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d7c6:	2d00      	cmp	r5, #0
 800d7c8:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d7cc:	bfb8      	it	lt
 800d7ce:	eef1 7a67 	vneglt.f32	s15, s15
 800d7d2:	e760      	b.n	800d696 <atanf+0x1e>
 800d7d4:	3fc90fdb 	.word	0x3fc90fdb
 800d7d8:	bfc90fdb 	.word	0xbfc90fdb
 800d7dc:	3edfffff 	.word	0x3edfffff
 800d7e0:	7149f2ca 	.word	0x7149f2ca
 800d7e4:	3f97ffff 	.word	0x3f97ffff
 800d7e8:	3c8569d7 	.word	0x3c8569d7
 800d7ec:	3d4bda59 	.word	0x3d4bda59
 800d7f0:	bd6ef16b 	.word	0xbd6ef16b
 800d7f4:	3d886b35 	.word	0x3d886b35
 800d7f8:	3dba2e6e 	.word	0x3dba2e6e
 800d7fc:	3e124925 	.word	0x3e124925
 800d800:	3eaaaaab 	.word	0x3eaaaaab
 800d804:	bd15a221 	.word	0xbd15a221
 800d808:	bd9d8795 	.word	0xbd9d8795
 800d80c:	bde38e38 	.word	0xbde38e38
 800d810:	be4ccccd 	.word	0xbe4ccccd
 800d814:	401bffff 	.word	0x401bffff
 800d818:	0800dec4 	.word	0x0800dec4
 800d81c:	0800ded4 	.word	0x0800ded4

0800d820 <fabsf>:
 800d820:	ee10 3a10 	vmov	r3, s0
 800d824:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d828:	ee00 3a10 	vmov	s0, r3
 800d82c:	4770      	bx	lr
	...

0800d830 <asinf>:
 800d830:	b508      	push	{r3, lr}
 800d832:	ed2d 8b02 	vpush	{d8}
 800d836:	eeb0 8a40 	vmov.f32	s16, s0
 800d83a:	f000 f825 	bl	800d888 <__ieee754_asinf>
 800d83e:	eeb4 8a48 	vcmp.f32	s16, s16
 800d842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d846:	eef0 8a40 	vmov.f32	s17, s0
 800d84a:	d615      	bvs.n	800d878 <asinf+0x48>
 800d84c:	eeb0 0a48 	vmov.f32	s0, s16
 800d850:	f7ff ffe6 	bl	800d820 <fabsf>
 800d854:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d858:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d860:	dd0a      	ble.n	800d878 <asinf+0x48>
 800d862:	f7fc ffdf 	bl	800a824 <__errno>
 800d866:	ecbd 8b02 	vpop	{d8}
 800d86a:	2321      	movs	r3, #33	; 0x21
 800d86c:	6003      	str	r3, [r0, #0]
 800d86e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d872:	4804      	ldr	r0, [pc, #16]	; (800d884 <asinf+0x54>)
 800d874:	f000 b8f2 	b.w	800da5c <nanf>
 800d878:	eeb0 0a68 	vmov.f32	s0, s17
 800d87c:	ecbd 8b02 	vpop	{d8}
 800d880:	bd08      	pop	{r3, pc}
 800d882:	bf00      	nop
 800d884:	0800dd58 	.word	0x0800dd58

0800d888 <__ieee754_asinf>:
 800d888:	b538      	push	{r3, r4, r5, lr}
 800d88a:	ee10 5a10 	vmov	r5, s0
 800d88e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800d892:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800d896:	ed2d 8b04 	vpush	{d8-d9}
 800d89a:	d10c      	bne.n	800d8b6 <__ieee754_asinf+0x2e>
 800d89c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800da14 <__ieee754_asinf+0x18c>
 800d8a0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800da18 <__ieee754_asinf+0x190>
 800d8a4:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d8a8:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d8ac:	eeb0 0a67 	vmov.f32	s0, s15
 800d8b0:	ecbd 8b04 	vpop	{d8-d9}
 800d8b4:	bd38      	pop	{r3, r4, r5, pc}
 800d8b6:	dd04      	ble.n	800d8c2 <__ieee754_asinf+0x3a>
 800d8b8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d8bc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d8c0:	e7f6      	b.n	800d8b0 <__ieee754_asinf+0x28>
 800d8c2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800d8c6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800d8ca:	da0b      	bge.n	800d8e4 <__ieee754_asinf+0x5c>
 800d8cc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800d8d0:	da52      	bge.n	800d978 <__ieee754_asinf+0xf0>
 800d8d2:	eddf 7a52 	vldr	s15, [pc, #328]	; 800da1c <__ieee754_asinf+0x194>
 800d8d6:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d8da:	eef4 7ae8 	vcmpe.f32	s15, s17
 800d8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8e2:	dce5      	bgt.n	800d8b0 <__ieee754_asinf+0x28>
 800d8e4:	f7ff ff9c 	bl	800d820 <fabsf>
 800d8e8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800d8ec:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800d8f0:	ee20 8a08 	vmul.f32	s16, s0, s16
 800d8f4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800da20 <__ieee754_asinf+0x198>
 800d8f8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800da24 <__ieee754_asinf+0x19c>
 800d8fc:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800da28 <__ieee754_asinf+0x1a0>
 800d900:	eea8 7a27 	vfma.f32	s14, s16, s15
 800d904:	eddf 7a49 	vldr	s15, [pc, #292]	; 800da2c <__ieee754_asinf+0x1a4>
 800d908:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d90c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800da30 <__ieee754_asinf+0x1a8>
 800d910:	eea7 7a88 	vfma.f32	s14, s15, s16
 800d914:	eddf 7a47 	vldr	s15, [pc, #284]	; 800da34 <__ieee754_asinf+0x1ac>
 800d918:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d91c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800da38 <__ieee754_asinf+0x1b0>
 800d920:	eea7 9a88 	vfma.f32	s18, s15, s16
 800d924:	eddf 7a45 	vldr	s15, [pc, #276]	; 800da3c <__ieee754_asinf+0x1b4>
 800d928:	eee8 7a07 	vfma.f32	s15, s16, s14
 800d92c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800da40 <__ieee754_asinf+0x1b8>
 800d930:	eea7 7a88 	vfma.f32	s14, s15, s16
 800d934:	eddf 7a43 	vldr	s15, [pc, #268]	; 800da44 <__ieee754_asinf+0x1bc>
 800d938:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d93c:	eeb0 0a48 	vmov.f32	s0, s16
 800d940:	eee7 8a88 	vfma.f32	s17, s15, s16
 800d944:	f000 f886 	bl	800da54 <__ieee754_sqrtf>
 800d948:	4b3f      	ldr	r3, [pc, #252]	; (800da48 <__ieee754_asinf+0x1c0>)
 800d94a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800d94e:	429c      	cmp	r4, r3
 800d950:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800d954:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d958:	dd3d      	ble.n	800d9d6 <__ieee754_asinf+0x14e>
 800d95a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800d95e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800da4c <__ieee754_asinf+0x1c4>
 800d962:	eee0 7a26 	vfma.f32	s15, s0, s13
 800d966:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800da18 <__ieee754_asinf+0x190>
 800d96a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d96e:	2d00      	cmp	r5, #0
 800d970:	bfd8      	it	le
 800d972:	eeb1 0a40 	vnegle.f32	s0, s0
 800d976:	e79b      	b.n	800d8b0 <__ieee754_asinf+0x28>
 800d978:	ee60 7a00 	vmul.f32	s15, s0, s0
 800d97c:	eddf 6a28 	vldr	s13, [pc, #160]	; 800da20 <__ieee754_asinf+0x198>
 800d980:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800da24 <__ieee754_asinf+0x19c>
 800d984:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800da38 <__ieee754_asinf+0x1b0>
 800d988:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800d98c:	eddf 6a27 	vldr	s13, [pc, #156]	; 800da2c <__ieee754_asinf+0x1a4>
 800d990:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d994:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800da30 <__ieee754_asinf+0x1a8>
 800d998:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d99c:	eddf 6a25 	vldr	s13, [pc, #148]	; 800da34 <__ieee754_asinf+0x1ac>
 800d9a0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d9a4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800da28 <__ieee754_asinf+0x1a0>
 800d9a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d9ac:	eddf 6a23 	vldr	s13, [pc, #140]	; 800da3c <__ieee754_asinf+0x1b4>
 800d9b0:	eee7 6a86 	vfma.f32	s13, s15, s12
 800d9b4:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800da40 <__ieee754_asinf+0x1b8>
 800d9b8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800d9bc:	eddf 6a21 	vldr	s13, [pc, #132]	; 800da44 <__ieee754_asinf+0x1bc>
 800d9c0:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d9c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9c8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800d9cc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800d9d0:	eea0 0a27 	vfma.f32	s0, s0, s15
 800d9d4:	e76c      	b.n	800d8b0 <__ieee754_asinf+0x28>
 800d9d6:	ee10 3a10 	vmov	r3, s0
 800d9da:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d9de:	f023 030f 	bic.w	r3, r3, #15
 800d9e2:	ee07 3a10 	vmov	s14, r3
 800d9e6:	eea7 8a47 	vfms.f32	s16, s14, s14
 800d9ea:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d9ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d9f2:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800d9f6:	eddf 7a07 	vldr	s15, [pc, #28]	; 800da14 <__ieee754_asinf+0x18c>
 800d9fa:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800d9fe:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800da02:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800da50 <__ieee754_asinf+0x1c8>
 800da06:	eeb0 6a40 	vmov.f32	s12, s0
 800da0a:	eea7 6a66 	vfms.f32	s12, s14, s13
 800da0e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800da12:	e7aa      	b.n	800d96a <__ieee754_asinf+0xe2>
 800da14:	b33bbd2e 	.word	0xb33bbd2e
 800da18:	3fc90fdb 	.word	0x3fc90fdb
 800da1c:	7149f2ca 	.word	0x7149f2ca
 800da20:	3811ef08 	.word	0x3811ef08
 800da24:	3a4f7f04 	.word	0x3a4f7f04
 800da28:	3e2aaaab 	.word	0x3e2aaaab
 800da2c:	bd241146 	.word	0xbd241146
 800da30:	3e4e0aa8 	.word	0x3e4e0aa8
 800da34:	bea6b090 	.word	0xbea6b090
 800da38:	3d9dc62e 	.word	0x3d9dc62e
 800da3c:	bf303361 	.word	0xbf303361
 800da40:	4001572d 	.word	0x4001572d
 800da44:	c019d139 	.word	0xc019d139
 800da48:	3f799999 	.word	0x3f799999
 800da4c:	333bbd2e 	.word	0x333bbd2e
 800da50:	3f490fdb 	.word	0x3f490fdb

0800da54 <__ieee754_sqrtf>:
 800da54:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800da58:	4770      	bx	lr
	...

0800da5c <nanf>:
 800da5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800da64 <nanf+0x8>
 800da60:	4770      	bx	lr
 800da62:	bf00      	nop
 800da64:	7fc00000 	.word	0x7fc00000

0800da68 <_init>:
 800da68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da6a:	bf00      	nop
 800da6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da6e:	bc08      	pop	{r3}
 800da70:	469e      	mov	lr, r3
 800da72:	4770      	bx	lr

0800da74 <_fini>:
 800da74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da76:	bf00      	nop
 800da78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da7a:	bc08      	pop	{r3}
 800da7c:	469e      	mov	lr, r3
 800da7e:	4770      	bx	lr
