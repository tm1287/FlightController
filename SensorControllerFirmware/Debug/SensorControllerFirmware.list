
SensorControllerFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800a0f4  0800a0f4  0001a0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a194  0800a194  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800a194  0800a194  0001a194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a19c  0800a19c  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a19c  0800a19c  0001a19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1a0  0800a1a0  0001a1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800a1a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020168  2**0
                  CONTENTS
 10 .bss          00001e58  20000168  20000168  00020168  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001fc0  20001fc0  00020168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b472  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037df  00000000  00000000  0003b60a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001780  00000000  00000000  0003edf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001630  00000000  00000000  00040570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023458  00000000  00000000  00041ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d56d  00000000  00000000  00064ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8666  00000000  00000000  00082565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014abcb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006884  00000000  00000000  0014ac1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a0dc 	.word	0x0800a0dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	0800a0dc 	.word	0x0800a0dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08e      	sub	sp, #56	; 0x38
 8000578:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fe21 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f83d 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 facf 	bl	8000b24 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000586:	f000 f8a3 	bl	80006d0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800058a:	f000 faa1 	bl	8000ad0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800058e:	f008 fbc3 	bl	8008d18 <MX_USB_DEVICE_Init>
  MX_I2C2_Init();
 8000592:	f000 f8cb 	bl	800072c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000596:	f000 fa71 	bl	8000a7c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800059a:	f000 f92b 	bl	80007f4 <MX_TIM3_Init>
  MX_TIM8_Init();
 800059e:	f000 f9c1 	bl	8000924 <MX_TIM8_Init>
  MX_SPI1_Init();
 80005a2:	f000 f8f1 	bl	8000788 <MX_SPI1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  imuStatus = HAL_I2C_Mem_Read(&hi2c1, (0x68 << 1), 0x75, I2C_MEMADD_SIZE_8BIT, &regData, 1, 100);
 80005a6:	2364      	movs	r3, #100	; 0x64
 80005a8:	9302      	str	r3, [sp, #8]
 80005aa:	2301      	movs	r3, #1
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	f107 0325 	add.w	r3, r7, #37	; 0x25
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2301      	movs	r3, #1
 80005b6:	2275      	movs	r2, #117	; 0x75
 80005b8:	21d0      	movs	r1, #208	; 0xd0
 80005ba:	480e      	ldr	r0, [pc, #56]	; (80005f4 <main+0x80>)
 80005bc:	f001 faa2 	bl	8001b04 <HAL_I2C_Mem_Read>
 80005c0:	4603      	mov	r3, r0
 80005c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  bufLen = snprintf(logBuf, 32, "Data = %u\r\n", regData);
 80005c6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80005ca:	1d38      	adds	r0, r7, #4
 80005cc:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <main+0x84>)
 80005ce:	2120      	movs	r1, #32
 80005d0:	f009 f902 	bl	80097d8 <sniprintf>
 80005d4:	4603      	mov	r3, r0
 80005d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  CDC_Transmit_FS((uint8_t *) logBuf, bufLen);
 80005da:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	4611      	mov	r1, r2
 80005e2:	4618      	mov	r0, r3
 80005e4:	f008 fc6a 	bl	8008ebc <CDC_Transmit_FS>

	  HAL_Delay(500);
 80005e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ec:	f000 fe5a 	bl	80012a4 <HAL_Delay>
  {
 80005f0:	e7d9      	b.n	80005a6 <main+0x32>
 80005f2:	bf00      	nop
 80005f4:	20000184 	.word	0x20000184
 80005f8:	0800a0f4 	.word	0x0800a0f4

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f009 f8dc 	bl	80097c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <SystemClock_Config+0xcc>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <SystemClock_Config+0xd0>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000658:	2301      	movs	r3, #1
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800066c:	2308      	movs	r3, #8
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000670:	2360      	movs	r3, #96	; 0x60
 8000672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 0320 	add.w	r3, r7, #32
 8000680:	4618      	mov	r0, r3
 8000682:	f003 f967 	bl	8003954 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800068c:	f000 faaa 	bl	8000be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2302      	movs	r3, #2
 8000696:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2103      	movs	r1, #3
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 fbc8 	bl	8003e44 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ba:	f000 fa93 	bl	8000be4 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	; 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_I2C1_Init+0x50>)
 80006d6:	4a13      	ldr	r2, [pc, #76]	; (8000724 <MX_I2C1_Init+0x54>)
 80006d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_I2C1_Init+0x50>)
 80006dc:	4a12      	ldr	r2, [pc, #72]	; (8000728 <MX_I2C1_Init+0x58>)
 80006de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_I2C1_Init+0x50>)
 80006ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_I2C1_Init+0x50>)
 800070e:	f001 f8b5 	bl	800187c <HAL_I2C_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000718:	f000 fa64 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000184 	.word	0x20000184
 8000724:	40005400 	.word	0x40005400
 8000728:	000186a0 	.word	0x000186a0

0800072c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_I2C2_Init+0x50>)
 8000732:	4a13      	ldr	r2, [pc, #76]	; (8000780 <MX_I2C2_Init+0x54>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_I2C2_Init+0x50>)
 8000738:	4a12      	ldr	r2, [pc, #72]	; (8000784 <MX_I2C2_Init+0x58>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_I2C2_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_I2C2_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_I2C2_Init+0x50>)
 800074a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800074e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_I2C2_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_I2C2_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <MX_I2C2_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_I2C2_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_I2C2_Init+0x50>)
 800076a:	f001 f887 	bl	800187c <HAL_I2C_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000774:	f000 fa36 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200001d8 	.word	0x200001d8
 8000780:	40005800 	.word	0x40005800
 8000784:	000186a0 	.word	0x000186a0

08000788 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_SPI1_Init+0x64>)
 800078e:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <MX_SPI1_Init+0x68>)
 8000790:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <MX_SPI1_Init+0x64>)
 8000794:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000798:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_SPI1_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_SPI1_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_SPI1_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_SPI1_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_SPI1_Init+0x64>)
 80007b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_SPI1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <MX_SPI1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_SPI1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <MX_SPI1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_SPI1_Init+0x64>)
 80007d4:	220a      	movs	r2, #10
 80007d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_SPI1_Init+0x64>)
 80007da:	f003 fd51 	bl	8004280 <HAL_SPI_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007e4:	f000 f9fe 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2000022c 	.word	0x2000022c
 80007f0:	40013000 	.word	0x40013000

080007f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08e      	sub	sp, #56	; 0x38
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000808:	f107 0320 	add.w	r3, r7, #32
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
 8000820:	615a      	str	r2, [r3, #20]
 8000822:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000824:	4b3d      	ldr	r3, [pc, #244]	; (800091c <MX_TIM3_Init+0x128>)
 8000826:	4a3e      	ldr	r2, [pc, #248]	; (8000920 <MX_TIM3_Init+0x12c>)
 8000828:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800082a:	4b3c      	ldr	r3, [pc, #240]	; (800091c <MX_TIM3_Init+0x128>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000830:	4b3a      	ldr	r3, [pc, #232]	; (800091c <MX_TIM3_Init+0x128>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000836:	4b39      	ldr	r3, [pc, #228]	; (800091c <MX_TIM3_Init+0x128>)
 8000838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800083c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083e:	4b37      	ldr	r3, [pc, #220]	; (800091c <MX_TIM3_Init+0x128>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000844:	4b35      	ldr	r3, [pc, #212]	; (800091c <MX_TIM3_Init+0x128>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800084a:	4834      	ldr	r0, [pc, #208]	; (800091c <MX_TIM3_Init+0x128>)
 800084c:	f003 fda1 	bl	8004392 <HAL_TIM_Base_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000856:	f000 f9c5 	bl	8000be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000860:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000864:	4619      	mov	r1, r3
 8000866:	482d      	ldr	r0, [pc, #180]	; (800091c <MX_TIM3_Init+0x128>)
 8000868:	f003 fefe 	bl	8004668 <HAL_TIM_ConfigClockSource>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000872:	f000 f9b7 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000876:	4829      	ldr	r0, [pc, #164]	; (800091c <MX_TIM3_Init+0x128>)
 8000878:	f003 fdda 	bl	8004430 <HAL_TIM_PWM_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000882:	f000 f9af 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800088e:	f107 0320 	add.w	r3, r7, #32
 8000892:	4619      	mov	r1, r3
 8000894:	4821      	ldr	r0, [pc, #132]	; (800091c <MX_TIM3_Init+0x128>)
 8000896:	f004 fa99 	bl	8004dcc <HAL_TIMEx_MasterConfigSynchronization>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80008a0:	f000 f9a0 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a4:	2360      	movs	r3, #96	; 0x60
 80008a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	4619      	mov	r1, r3
 80008ba:	4818      	ldr	r0, [pc, #96]	; (800091c <MX_TIM3_Init+0x128>)
 80008bc:	f003 fe12 	bl	80044e4 <HAL_TIM_PWM_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80008c6:	f000 f98d 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2204      	movs	r2, #4
 80008ce:	4619      	mov	r1, r3
 80008d0:	4812      	ldr	r0, [pc, #72]	; (800091c <MX_TIM3_Init+0x128>)
 80008d2:	f003 fe07 	bl	80044e4 <HAL_TIM_PWM_ConfigChannel>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80008dc:	f000 f982 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2208      	movs	r2, #8
 80008e4:	4619      	mov	r1, r3
 80008e6:	480d      	ldr	r0, [pc, #52]	; (800091c <MX_TIM3_Init+0x128>)
 80008e8:	f003 fdfc 	bl	80044e4 <HAL_TIM_PWM_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80008f2:	f000 f977 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	220c      	movs	r2, #12
 80008fa:	4619      	mov	r1, r3
 80008fc:	4807      	ldr	r0, [pc, #28]	; (800091c <MX_TIM3_Init+0x128>)
 80008fe:	f003 fdf1 	bl	80044e4 <HAL_TIM_PWM_ConfigChannel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000908:	f000 f96c 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800090c:	4803      	ldr	r0, [pc, #12]	; (800091c <MX_TIM3_Init+0x128>)
 800090e:	f000 fab3 	bl	8000e78 <HAL_TIM_MspPostInit>

}
 8000912:	bf00      	nop
 8000914:	3738      	adds	r7, #56	; 0x38
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000284 	.word	0x20000284
 8000920:	40000400 	.word	0x40000400

08000924 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b096      	sub	sp, #88	; 0x58
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000938:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
 8000952:	615a      	str	r2, [r3, #20]
 8000954:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2220      	movs	r2, #32
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f008 ff33 	bl	80097c8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000962:	4b44      	ldr	r3, [pc, #272]	; (8000a74 <MX_TIM8_Init+0x150>)
 8000964:	4a44      	ldr	r2, [pc, #272]	; (8000a78 <MX_TIM8_Init+0x154>)
 8000966:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000968:	4b42      	ldr	r3, [pc, #264]	; (8000a74 <MX_TIM8_Init+0x150>)
 800096a:	2200      	movs	r2, #0
 800096c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096e:	4b41      	ldr	r3, [pc, #260]	; (8000a74 <MX_TIM8_Init+0x150>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000974:	4b3f      	ldr	r3, [pc, #252]	; (8000a74 <MX_TIM8_Init+0x150>)
 8000976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800097a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097c:	4b3d      	ldr	r3, [pc, #244]	; (8000a74 <MX_TIM8_Init+0x150>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000982:	4b3c      	ldr	r3, [pc, #240]	; (8000a74 <MX_TIM8_Init+0x150>)
 8000984:	2200      	movs	r2, #0
 8000986:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000988:	4b3a      	ldr	r3, [pc, #232]	; (8000a74 <MX_TIM8_Init+0x150>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800098e:	4839      	ldr	r0, [pc, #228]	; (8000a74 <MX_TIM8_Init+0x150>)
 8000990:	f003 fcff 	bl	8004392 <HAL_TIM_Base_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800099a:	f000 f923 	bl	8000be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80009a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009a8:	4619      	mov	r1, r3
 80009aa:	4832      	ldr	r0, [pc, #200]	; (8000a74 <MX_TIM8_Init+0x150>)
 80009ac:	f003 fe5c 	bl	8004668 <HAL_TIM_ConfigClockSource>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80009b6:	f000 f915 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80009ba:	482e      	ldr	r0, [pc, #184]	; (8000a74 <MX_TIM8_Init+0x150>)
 80009bc:	f003 fd38 	bl	8004430 <HAL_TIM_PWM_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80009c6:	f000 f90d 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80009d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009d6:	4619      	mov	r1, r3
 80009d8:	4826      	ldr	r0, [pc, #152]	; (8000a74 <MX_TIM8_Init+0x150>)
 80009da:	f004 f9f7 	bl	8004dcc <HAL_TIMEx_MasterConfigSynchronization>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80009e4:	f000 f8fe 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e8:	2360      	movs	r3, #96	; 0x60
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009f4:	2300      	movs	r3, #0
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009fc:	2300      	movs	r3, #0
 80009fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a00:	2300      	movs	r3, #0
 8000a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a08:	2200      	movs	r2, #0
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4819      	ldr	r0, [pc, #100]	; (8000a74 <MX_TIM8_Init+0x150>)
 8000a0e:	f003 fd69 	bl	80044e4 <HAL_TIM_PWM_ConfigChannel>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000a18:	f000 f8e4 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	2204      	movs	r2, #4
 8000a22:	4619      	mov	r1, r3
 8000a24:	4813      	ldr	r0, [pc, #76]	; (8000a74 <MX_TIM8_Init+0x150>)
 8000a26:	f003 fd5d 	bl	80044e4 <HAL_TIM_PWM_ConfigChannel>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000a30:	f000 f8d8 	bl	8000be4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a4c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	4619      	mov	r1, r3
 8000a56:	4807      	ldr	r0, [pc, #28]	; (8000a74 <MX_TIM8_Init+0x150>)
 8000a58:	f004 fa34 	bl	8004ec4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8000a62:	f000 f8bf 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000a66:	4803      	ldr	r0, [pc, #12]	; (8000a74 <MX_TIM8_Init+0x150>)
 8000a68:	f000 fa06 	bl	8000e78 <HAL_TIM_MspPostInit>

}
 8000a6c:	bf00      	nop
 8000a6e:	3758      	adds	r7, #88	; 0x58
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200002cc 	.word	0x200002cc
 8000a78:	40010400 	.word	0x40010400

08000a7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	; (8000acc <MX_USART1_UART_Init+0x50>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000ab4:	f004 fa58 	bl	8004f68 <HAL_UART_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000abe:	f000 f891 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000314 	.word	0x20000314
 8000acc:	40011000 	.word	0x40011000

08000ad0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <MX_USART2_UART_Init+0x50>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000b08:	f004 fa2e 	bl	8004f68 <HAL_UART_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b12:	f000 f867 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000358 	.word	0x20000358
 8000b20:	40004400 	.word	0x40004400

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <MX_GPIO_Init+0xb8>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a26      	ldr	r2, [pc, #152]	; (8000bdc <MX_GPIO_Init+0xb8>)
 8000b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <MX_GPIO_Init+0xb8>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <MX_GPIO_Init+0xb8>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a1f      	ldr	r2, [pc, #124]	; (8000bdc <MX_GPIO_Init+0xb8>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <MX_GPIO_Init+0xb8>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <MX_GPIO_Init+0xb8>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a18      	ldr	r2, [pc, #96]	; (8000bdc <MX_GPIO_Init+0xb8>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <MX_GPIO_Init+0xb8>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_GPIO_Init+0xb8>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a11      	ldr	r2, [pc, #68]	; (8000bdc <MX_GPIO_Init+0xb8>)
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_GPIO_Init+0xb8>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <MX_GPIO_Init+0xbc>)
 8000bb2:	f000 fe49 	bl	8001848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EEPROM_CS_Pin */
  GPIO_InitStruct.Pin = EEPROM_CS_Pin;
 8000bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EEPROM_CS_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4804      	ldr	r0, [pc, #16]	; (8000be0 <MX_GPIO_Init+0xbc>)
 8000bd0:	f000 fc9e 	bl	8001510 <HAL_GPIO_Init>

}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	; 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020400 	.word	0x40020400

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	e7fe      	b.n	8000bec <Error_Handler+0x8>
	...

08000bf0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <HAL_MspInit+0x4c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800

08000c40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a32      	ldr	r2, [pc, #200]	; (8000d28 <HAL_I2C_MspInit+0xe8>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d12c      	bne.n	8000cbc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
 8000c66:	4b31      	ldr	r3, [pc, #196]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a30      	ldr	r2, [pc, #192]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b2e      	ldr	r3, [pc, #184]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
 8000c7c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c7e:	23c0      	movs	r3, #192	; 0xc0
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c82:	2312      	movs	r3, #18
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	4825      	ldr	r0, [pc, #148]	; (8000d30 <HAL_I2C_MspInit+0xf0>)
 8000c9a:	f000 fc39 	bl	8001510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000ca8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000cba:	e031      	b.n	8000d20 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a1c      	ldr	r2, [pc, #112]	; (8000d34 <HAL_I2C_MspInit+0xf4>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d12c      	bne.n	8000d20 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ce2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce8:	2312      	movs	r3, #18
 8000cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480c      	ldr	r0, [pc, #48]	; (8000d30 <HAL_I2C_MspInit+0xf0>)
 8000d00:	f000 fc06 	bl	8001510 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000d0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d12:	6413      	str	r3, [r2, #64]	; 0x40
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3730      	adds	r7, #48	; 0x30
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40005400 	.word	0x40005400
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020400 	.word	0x40020400
 8000d34:	40005800 	.word	0x40005800

08000d38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a28      	ldr	r2, [pc, #160]	; (8000df8 <HAL_SPI_MspInit+0xc0>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d149      	bne.n	8000dee <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <HAL_SPI_MspInit+0xc4>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a26      	ldr	r2, [pc, #152]	; (8000dfc <HAL_SPI_MspInit+0xc4>)
 8000d64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <HAL_SPI_MspInit+0xc4>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <HAL_SPI_MspInit+0xc4>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a1f      	ldr	r2, [pc, #124]	; (8000dfc <HAL_SPI_MspInit+0xc4>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <HAL_SPI_MspInit+0xc4>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <HAL_SPI_MspInit+0xc4>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a18      	ldr	r2, [pc, #96]	; (8000dfc <HAL_SPI_MspInit+0xc4>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <HAL_SPI_MspInit+0xc4>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dae:	2320      	movs	r3, #32
 8000db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <HAL_SPI_MspInit+0xc8>)
 8000dca:	f000 fba1 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000dce:	2330      	movs	r3, #48	; 0x30
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dde:	2305      	movs	r3, #5
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4806      	ldr	r0, [pc, #24]	; (8000e04 <HAL_SPI_MspInit+0xcc>)
 8000dea:	f000 fb91 	bl	8001510 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dee:	bf00      	nop
 8000df0:	3728      	adds	r7, #40	; 0x28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40013000 	.word	0x40013000
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000
 8000e04:	40020400 	.word	0x40020400

08000e08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a15      	ldr	r2, [pc, #84]	; (8000e6c <HAL_TIM_Base_MspInit+0x64>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d10e      	bne.n	8000e38 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <HAL_TIM_Base_MspInit+0x68>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	4a13      	ldr	r2, [pc, #76]	; (8000e70 <HAL_TIM_Base_MspInit+0x68>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <HAL_TIM_Base_MspInit+0x68>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000e36:	e012      	b.n	8000e5e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <HAL_TIM_Base_MspInit+0x6c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d10d      	bne.n	8000e5e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <HAL_TIM_Base_MspInit+0x68>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	4a09      	ldr	r2, [pc, #36]	; (8000e70 <HAL_TIM_Base_MspInit+0x68>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6453      	str	r3, [r2, #68]	; 0x44
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <HAL_TIM_Base_MspInit+0x68>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
}
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40000400 	.word	0x40000400
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40010400 	.word	0x40010400

08000e78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a33      	ldr	r2, [pc, #204]	; (8000f64 <HAL_TIM_MspPostInit+0xec>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d13c      	bne.n	8000f14 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	4b32      	ldr	r3, [pc, #200]	; (8000f68 <HAL_TIM_MspPostInit+0xf0>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a31      	ldr	r2, [pc, #196]	; (8000f68 <HAL_TIM_MspPostInit+0xf0>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <HAL_TIM_MspPostInit+0xf0>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b2b      	ldr	r3, [pc, #172]	; (8000f68 <HAL_TIM_MspPostInit+0xf0>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a2a      	ldr	r2, [pc, #168]	; (8000f68 <HAL_TIM_MspPostInit+0xf0>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <HAL_TIM_MspPostInit+0xf0>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ed2:	23c0      	movs	r3, #192	; 0xc0
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	481f      	ldr	r0, [pc, #124]	; (8000f6c <HAL_TIM_MspPostInit+0xf4>)
 8000eee:	f000 fb0f 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f02:	2302      	movs	r3, #2
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4818      	ldr	r0, [pc, #96]	; (8000f70 <HAL_TIM_MspPostInit+0xf8>)
 8000f0e:	f000 faff 	bl	8001510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000f12:	e022      	b.n	8000f5a <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM8)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <HAL_TIM_MspPostInit+0xfc>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d11d      	bne.n	8000f5a <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_TIM_MspPostInit+0xf0>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a10      	ldr	r2, [pc, #64]	; (8000f68 <HAL_TIM_MspPostInit+0xf0>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_TIM_MspPostInit+0xf0>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f3a:	23c0      	movs	r3, #192	; 0xc0
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4808      	ldr	r0, [pc, #32]	; (8000f78 <HAL_TIM_MspPostInit+0x100>)
 8000f56:	f000 fadb 	bl	8001510 <HAL_GPIO_Init>
}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	; 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40000400 	.word	0x40000400
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	40020400 	.word	0x40020400
 8000f74:	40010400 	.word	0x40010400
 8000f78:	40020800 	.word	0x40020800

08000f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08c      	sub	sp, #48	; 0x30
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a32      	ldr	r2, [pc, #200]	; (8001064 <HAL_UART_MspInit+0xe8>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d12d      	bne.n	8000ffa <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
 8000fa2:	4b31      	ldr	r3, [pc, #196]	; (8001068 <HAL_UART_MspInit+0xec>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	4a30      	ldr	r2, [pc, #192]	; (8001068 <HAL_UART_MspInit+0xec>)
 8000fa8:	f043 0310 	orr.w	r3, r3, #16
 8000fac:	6453      	str	r3, [r2, #68]	; 0x44
 8000fae:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <HAL_UART_MspInit+0xec>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	f003 0310 	and.w	r3, r3, #16
 8000fb6:	61bb      	str	r3, [r7, #24]
 8000fb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	4b2a      	ldr	r3, [pc, #168]	; (8001068 <HAL_UART_MspInit+0xec>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a29      	ldr	r2, [pc, #164]	; (8001068 <HAL_UART_MspInit+0xec>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b27      	ldr	r3, [pc, #156]	; (8001068 <HAL_UART_MspInit+0xec>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fd6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fe8:	2307      	movs	r3, #7
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	481e      	ldr	r0, [pc, #120]	; (800106c <HAL_UART_MspInit+0xf0>)
 8000ff4:	f000 fa8c 	bl	8001510 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ff8:	e030      	b.n	800105c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a1c      	ldr	r2, [pc, #112]	; (8001070 <HAL_UART_MspInit+0xf4>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d12b      	bne.n	800105c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <HAL_UART_MspInit+0xec>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	4a16      	ldr	r2, [pc, #88]	; (8001068 <HAL_UART_MspInit+0xec>)
 800100e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001012:	6413      	str	r3, [r2, #64]	; 0x40
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <HAL_UART_MspInit+0xec>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	4b10      	ldr	r3, [pc, #64]	; (8001068 <HAL_UART_MspInit+0xec>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	4a0f      	ldr	r2, [pc, #60]	; (8001068 <HAL_UART_MspInit+0xec>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6313      	str	r3, [r2, #48]	; 0x30
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <HAL_UART_MspInit+0xec>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800103c:	230c      	movs	r3, #12
 800103e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800104c:	2307      	movs	r3, #7
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4619      	mov	r1, r3
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <HAL_UART_MspInit+0xf0>)
 8001058:	f000 fa5a 	bl	8001510 <HAL_GPIO_Init>
}
 800105c:	bf00      	nop
 800105e:	3730      	adds	r7, #48	; 0x30
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40011000 	.word	0x40011000
 8001068:	40023800 	.word	0x40023800
 800106c:	40020000 	.word	0x40020000
 8001070:	40004400 	.word	0x40004400

08001074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <NMI_Handler+0x4>

0800107a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <HardFault_Handler+0x4>

08001080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <MemManage_Handler+0x4>

08001086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <BusFault_Handler+0x4>

0800108c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <UsageFault_Handler+0x4>

08001092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c0:	f000 f8d0 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <OTG_FS_IRQHandler+0x10>)
 80010ce:	f001 fb13 	bl	80026f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
	}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20001884 	.word	0x20001884

080010dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e4:	4a14      	ldr	r2, [pc, #80]	; (8001138 <_sbrk+0x5c>)
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <_sbrk+0x60>)
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f0:	4b13      	ldr	r3, [pc, #76]	; (8001140 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <_sbrk+0x64>)
 80010fa:	4a12      	ldr	r2, [pc, #72]	; (8001144 <_sbrk+0x68>)
 80010fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	429a      	cmp	r2, r3
 800110a:	d207      	bcs.n	800111c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800110c:	f008 fb32 	bl	8009774 <__errno>
 8001110:	4603      	mov	r3, r0
 8001112:	220c      	movs	r2, #12
 8001114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	e009      	b.n	8001130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	4a05      	ldr	r2, [pc, #20]	; (8001140 <_sbrk+0x64>)
 800112c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20020000 	.word	0x20020000
 800113c:	00000400 	.word	0x00000400
 8001140:	2000039c 	.word	0x2000039c
 8001144:	20001fc0 	.word	0x20001fc0

08001148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <SystemInit+0x20>)
 800114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <SystemInit+0x20>)
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800116c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001172:	490e      	ldr	r1, [pc, #56]	; (80011ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001174:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001188:	4c0b      	ldr	r4, [pc, #44]	; (80011b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001196:	f7ff ffd7 	bl	8001148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800119a:	f008 faf1 	bl	8009780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119e:	f7ff f9e9 	bl	8000574 <main>
  bx  lr    
 80011a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 80011b0:	0800a1a4 	.word	0x0800a1a4
  ldr r2, =_sbss
 80011b4:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80011b8:	20001fc0 	.word	0x20001fc0

080011bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_Init+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <HAL_Init+0x40>)
 80011ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <HAL_Init+0x40>)
 80011d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_Init+0x40>)
 80011e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e8:	2003      	movs	r0, #3
 80011ea:	f000 f94f 	bl	800148c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ee:	200f      	movs	r0, #15
 80011f0:	f000 f808 	bl	8001204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f4:	f7ff fcfc 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023c00 	.word	0x40023c00

08001204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_InitTick+0x54>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x58>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f967 	bl	80014f6 <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f000 f92f 	bl	80014a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <HAL_InitTick+0x5c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000000 	.word	0x20000000
 800125c:	20000008 	.word	0x20000008
 8001260:	20000004 	.word	0x20000004

08001264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x20>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x24>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <HAL_IncTick+0x24>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000008 	.word	0x20000008
 8001288:	200003a0 	.word	0x200003a0

0800128c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_GetTick+0x14>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	200003a0 	.word	0x200003a0

080012a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff ffee 	bl	800128c <HAL_GetTick>
 80012b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012bc:	d005      	beq.n	80012ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_Delay+0x44>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ca:	bf00      	nop
 80012cc:	f7ff ffde 	bl	800128c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d8f7      	bhi.n	80012cc <HAL_Delay+0x28>
  {
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000008 	.word	0x20000008

080012ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001308:	4013      	ands	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131e:	4a04      	ldr	r2, [pc, #16]	; (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	60d3      	str	r3, [r2, #12]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <__NVIC_GetPriorityGrouping+0x18>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	f003 0307 	and.w	r3, r3, #7
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	2b00      	cmp	r3, #0
 8001360:	db0b      	blt.n	800137a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	f003 021f 	and.w	r2, r3, #31
 8001368:	4907      	ldr	r1, [pc, #28]	; (8001388 <__NVIC_EnableIRQ+0x38>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	2001      	movs	r0, #1
 8001372:	fa00 f202 	lsl.w	r2, r0, r2
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000e100 	.word	0xe000e100

0800138c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	2b00      	cmp	r3, #0
 800139e:	db0a      	blt.n	80013b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	490c      	ldr	r1, [pc, #48]	; (80013d8 <__NVIC_SetPriority+0x4c>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	0112      	lsls	r2, r2, #4
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	440b      	add	r3, r1
 80013b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b4:	e00a      	b.n	80013cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4908      	ldr	r1, [pc, #32]	; (80013dc <__NVIC_SetPriority+0x50>)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	3b04      	subs	r3, #4
 80013c4:	0112      	lsls	r2, r2, #4
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	440b      	add	r3, r1
 80013ca:	761a      	strb	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b089      	sub	sp, #36	; 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f1c3 0307 	rsb	r3, r3, #7
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	bf28      	it	cs
 80013fe:	2304      	movcs	r3, #4
 8001400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3304      	adds	r3, #4
 8001406:	2b06      	cmp	r3, #6
 8001408:	d902      	bls.n	8001410 <NVIC_EncodePriority+0x30>
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3b03      	subs	r3, #3
 800140e:	e000      	b.n	8001412 <NVIC_EncodePriority+0x32>
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	f04f 32ff 	mov.w	r2, #4294967295
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	401a      	ands	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001428:	f04f 31ff 	mov.w	r1, #4294967295
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	43d9      	mvns	r1, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	4313      	orrs	r3, r2
         );
}
 800143a:	4618      	mov	r0, r3
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001458:	d301      	bcc.n	800145e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145a:	2301      	movs	r3, #1
 800145c:	e00f      	b.n	800147e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <SysTick_Config+0x40>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001466:	210f      	movs	r1, #15
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f7ff ff8e 	bl	800138c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <SysTick_Config+0x40>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <SysTick_Config+0x40>)
 8001478:	2207      	movs	r2, #7
 800147a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	e000e010 	.word	0xe000e010

0800148c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff29 	bl	80012ec <__NVIC_SetPriorityGrouping>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b4:	f7ff ff3e 	bl	8001334 <__NVIC_GetPriorityGrouping>
 80014b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff ff8e 	bl	80013e0 <NVIC_EncodePriority>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff5d 	bl	800138c <__NVIC_SetPriority>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff31 	bl	8001350 <__NVIC_EnableIRQ>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ffa2 	bl	8001448 <SysTick_Config>
 8001504:	4603      	mov	r3, r0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
 800152a:	e16b      	b.n	8001804 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800152c:	2201      	movs	r2, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	429a      	cmp	r2, r3
 8001546:	f040 815a 	bne.w	80017fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	2b01      	cmp	r3, #1
 8001554:	d005      	beq.n	8001562 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800155e:	2b02      	cmp	r3, #2
 8001560:	d130      	bne.n	80015c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	2203      	movs	r2, #3
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001598:	2201      	movs	r2, #1
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	f003 0201 	and.w	r2, r3, #1
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d017      	beq.n	8001600 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d123      	bne.n	8001654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	08da      	lsrs	r2, r3, #3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3208      	adds	r2, #8
 8001614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	220f      	movs	r2, #15
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	691a      	ldr	r2, [r3, #16]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	08da      	lsrs	r2, r3, #3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3208      	adds	r2, #8
 800164e:	69b9      	ldr	r1, [r7, #24]
 8001650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	2203      	movs	r2, #3
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0203 	and.w	r2, r3, #3
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80b4 	beq.w	80017fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b60      	ldr	r3, [pc, #384]	; (800181c <HAL_GPIO_Init+0x30c>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	4a5f      	ldr	r2, [pc, #380]	; (800181c <HAL_GPIO_Init+0x30c>)
 80016a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a4:	6453      	str	r3, [r2, #68]	; 0x44
 80016a6:	4b5d      	ldr	r3, [pc, #372]	; (800181c <HAL_GPIO_Init+0x30c>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016b2:	4a5b      	ldr	r2, [pc, #364]	; (8001820 <HAL_GPIO_Init+0x310>)
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	3302      	adds	r3, #2
 80016ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	220f      	movs	r2, #15
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a52      	ldr	r2, [pc, #328]	; (8001824 <HAL_GPIO_Init+0x314>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d02b      	beq.n	8001736 <HAL_GPIO_Init+0x226>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a51      	ldr	r2, [pc, #324]	; (8001828 <HAL_GPIO_Init+0x318>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d025      	beq.n	8001732 <HAL_GPIO_Init+0x222>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a50      	ldr	r2, [pc, #320]	; (800182c <HAL_GPIO_Init+0x31c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d01f      	beq.n	800172e <HAL_GPIO_Init+0x21e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4f      	ldr	r2, [pc, #316]	; (8001830 <HAL_GPIO_Init+0x320>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d019      	beq.n	800172a <HAL_GPIO_Init+0x21a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4e      	ldr	r2, [pc, #312]	; (8001834 <HAL_GPIO_Init+0x324>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d013      	beq.n	8001726 <HAL_GPIO_Init+0x216>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4d      	ldr	r2, [pc, #308]	; (8001838 <HAL_GPIO_Init+0x328>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d00d      	beq.n	8001722 <HAL_GPIO_Init+0x212>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4c      	ldr	r2, [pc, #304]	; (800183c <HAL_GPIO_Init+0x32c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d007      	beq.n	800171e <HAL_GPIO_Init+0x20e>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4b      	ldr	r2, [pc, #300]	; (8001840 <HAL_GPIO_Init+0x330>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d101      	bne.n	800171a <HAL_GPIO_Init+0x20a>
 8001716:	2307      	movs	r3, #7
 8001718:	e00e      	b.n	8001738 <HAL_GPIO_Init+0x228>
 800171a:	2308      	movs	r3, #8
 800171c:	e00c      	b.n	8001738 <HAL_GPIO_Init+0x228>
 800171e:	2306      	movs	r3, #6
 8001720:	e00a      	b.n	8001738 <HAL_GPIO_Init+0x228>
 8001722:	2305      	movs	r3, #5
 8001724:	e008      	b.n	8001738 <HAL_GPIO_Init+0x228>
 8001726:	2304      	movs	r3, #4
 8001728:	e006      	b.n	8001738 <HAL_GPIO_Init+0x228>
 800172a:	2303      	movs	r3, #3
 800172c:	e004      	b.n	8001738 <HAL_GPIO_Init+0x228>
 800172e:	2302      	movs	r3, #2
 8001730:	e002      	b.n	8001738 <HAL_GPIO_Init+0x228>
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_GPIO_Init+0x228>
 8001736:	2300      	movs	r3, #0
 8001738:	69fa      	ldr	r2, [r7, #28]
 800173a:	f002 0203 	and.w	r2, r2, #3
 800173e:	0092      	lsls	r2, r2, #2
 8001740:	4093      	lsls	r3, r2
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001748:	4935      	ldr	r1, [pc, #212]	; (8001820 <HAL_GPIO_Init+0x310>)
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	089b      	lsrs	r3, r3, #2
 800174e:	3302      	adds	r3, #2
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001756:	4b3b      	ldr	r3, [pc, #236]	; (8001844 <HAL_GPIO_Init+0x334>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800177a:	4a32      	ldr	r2, [pc, #200]	; (8001844 <HAL_GPIO_Init+0x334>)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001780:	4b30      	ldr	r3, [pc, #192]	; (8001844 <HAL_GPIO_Init+0x334>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017a4:	4a27      	ldr	r2, [pc, #156]	; (8001844 <HAL_GPIO_Init+0x334>)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017aa:	4b26      	ldr	r3, [pc, #152]	; (8001844 <HAL_GPIO_Init+0x334>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ce:	4a1d      	ldr	r2, [pc, #116]	; (8001844 <HAL_GPIO_Init+0x334>)
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <HAL_GPIO_Init+0x334>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017f8:	4a12      	ldr	r2, [pc, #72]	; (8001844 <HAL_GPIO_Init+0x334>)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3301      	adds	r3, #1
 8001802:	61fb      	str	r3, [r7, #28]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	2b0f      	cmp	r3, #15
 8001808:	f67f ae90 	bls.w	800152c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3724      	adds	r7, #36	; 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	40013800 	.word	0x40013800
 8001824:	40020000 	.word	0x40020000
 8001828:	40020400 	.word	0x40020400
 800182c:	40020800 	.word	0x40020800
 8001830:	40020c00 	.word	0x40020c00
 8001834:	40021000 	.word	0x40021000
 8001838:	40021400 	.word	0x40021400
 800183c:	40021800 	.word	0x40021800
 8001840:	40021c00 	.word	0x40021c00
 8001844:	40013c00 	.word	0x40013c00

08001848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
 8001854:	4613      	mov	r3, r2
 8001856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001858:	787b      	ldrb	r3, [r7, #1]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800185e:	887a      	ldrh	r2, [r7, #2]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001864:	e003      	b.n	800186e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001866:	887b      	ldrh	r3, [r7, #2]
 8001868:	041a      	lsls	r2, r3, #16
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	619a      	str	r2, [r3, #24]
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e12b      	b.n	8001ae6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d106      	bne.n	80018a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff f9cc 	bl	8000c40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2224      	movs	r2, #36	; 0x24
 80018ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0201 	bic.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018e0:	f002 fca6 	bl	8004230 <HAL_RCC_GetPCLK1Freq>
 80018e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	4a81      	ldr	r2, [pc, #516]	; (8001af0 <HAL_I2C_Init+0x274>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d807      	bhi.n	8001900 <HAL_I2C_Init+0x84>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4a80      	ldr	r2, [pc, #512]	; (8001af4 <HAL_I2C_Init+0x278>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	bf94      	ite	ls
 80018f8:	2301      	movls	r3, #1
 80018fa:	2300      	movhi	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	e006      	b.n	800190e <HAL_I2C_Init+0x92>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4a7d      	ldr	r2, [pc, #500]	; (8001af8 <HAL_I2C_Init+0x27c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	bf94      	ite	ls
 8001908:	2301      	movls	r3, #1
 800190a:	2300      	movhi	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e0e7      	b.n	8001ae6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4a78      	ldr	r2, [pc, #480]	; (8001afc <HAL_I2C_Init+0x280>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	0c9b      	lsrs	r3, r3, #18
 8001920:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	430a      	orrs	r2, r1
 8001934:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4a6a      	ldr	r2, [pc, #424]	; (8001af0 <HAL_I2C_Init+0x274>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d802      	bhi.n	8001950 <HAL_I2C_Init+0xd4>
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	3301      	adds	r3, #1
 800194e:	e009      	b.n	8001964 <HAL_I2C_Init+0xe8>
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001956:	fb02 f303 	mul.w	r3, r2, r3
 800195a:	4a69      	ldr	r2, [pc, #420]	; (8001b00 <HAL_I2C_Init+0x284>)
 800195c:	fba2 2303 	umull	r2, r3, r2, r3
 8001960:	099b      	lsrs	r3, r3, #6
 8001962:	3301      	adds	r3, #1
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	430b      	orrs	r3, r1
 800196a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001976:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	495c      	ldr	r1, [pc, #368]	; (8001af0 <HAL_I2C_Init+0x274>)
 8001980:	428b      	cmp	r3, r1
 8001982:	d819      	bhi.n	80019b8 <HAL_I2C_Init+0x13c>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1e59      	subs	r1, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001992:	1c59      	adds	r1, r3, #1
 8001994:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001998:	400b      	ands	r3, r1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00a      	beq.n	80019b4 <HAL_I2C_Init+0x138>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1e59      	subs	r1, r3, #1
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ac:	3301      	adds	r3, #1
 80019ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b2:	e051      	b.n	8001a58 <HAL_I2C_Init+0x1dc>
 80019b4:	2304      	movs	r3, #4
 80019b6:	e04f      	b.n	8001a58 <HAL_I2C_Init+0x1dc>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d111      	bne.n	80019e4 <HAL_I2C_Init+0x168>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	1e58      	subs	r0, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6859      	ldr	r1, [r3, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	440b      	add	r3, r1
 80019ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d2:	3301      	adds	r3, #1
 80019d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf0c      	ite	eq
 80019dc:	2301      	moveq	r3, #1
 80019de:	2300      	movne	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	e012      	b.n	8001a0a <HAL_I2C_Init+0x18e>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	1e58      	subs	r0, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6859      	ldr	r1, [r3, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	0099      	lsls	r1, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019fa:	3301      	adds	r3, #1
 80019fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bf0c      	ite	eq
 8001a04:	2301      	moveq	r3, #1
 8001a06:	2300      	movne	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_I2C_Init+0x196>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e022      	b.n	8001a58 <HAL_I2C_Init+0x1dc>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10e      	bne.n	8001a38 <HAL_I2C_Init+0x1bc>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1e58      	subs	r0, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6859      	ldr	r1, [r3, #4]
 8001a22:	460b      	mov	r3, r1
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	440b      	add	r3, r1
 8001a28:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a36:	e00f      	b.n	8001a58 <HAL_I2C_Init+0x1dc>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1e58      	subs	r0, r3, #1
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6859      	ldr	r1, [r3, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	0099      	lsls	r1, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	6809      	ldr	r1, [r1, #0]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69da      	ldr	r2, [r3, #28]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6911      	ldr	r1, [r2, #16]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68d2      	ldr	r2, [r2, #12]
 8001a92:	4311      	orrs	r1, r2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	000186a0 	.word	0x000186a0
 8001af4:	001e847f 	.word	0x001e847f
 8001af8:	003d08ff 	.word	0x003d08ff
 8001afc:	431bde83 	.word	0x431bde83
 8001b00:	10624dd3 	.word	0x10624dd3

08001b04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	; 0x30
 8001b08:	af02      	add	r7, sp, #8
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	4608      	mov	r0, r1
 8001b0e:	4611      	mov	r1, r2
 8001b10:	461a      	mov	r2, r3
 8001b12:	4603      	mov	r3, r0
 8001b14:	817b      	strh	r3, [r7, #10]
 8001b16:	460b      	mov	r3, r1
 8001b18:	813b      	strh	r3, [r7, #8]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b1e:	f7ff fbb5 	bl	800128c <HAL_GetTick>
 8001b22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b20      	cmp	r3, #32
 8001b2e:	f040 8208 	bne.w	8001f42 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2319      	movs	r3, #25
 8001b38:	2201      	movs	r2, #1
 8001b3a:	497b      	ldr	r1, [pc, #492]	; (8001d28 <HAL_I2C_Mem_Read+0x224>)
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 faef 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e1fb      	b.n	8001f44 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_I2C_Mem_Read+0x56>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e1f4      	b.n	8001f44 <HAL_I2C_Mem_Read+0x440>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d007      	beq.n	8001b80 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2222      	movs	r2, #34	; 0x22
 8001b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2240      	movs	r2, #64	; 0x40
 8001b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001baa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a5b      	ldr	r2, [pc, #364]	; (8001d2c <HAL_I2C_Mem_Read+0x228>)
 8001bc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bc2:	88f8      	ldrh	r0, [r7, #6]
 8001bc4:	893a      	ldrh	r2, [r7, #8]
 8001bc6:	8979      	ldrh	r1, [r7, #10]
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 f9bc 	bl	8001f50 <I2C_RequestMemoryRead>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e1b0      	b.n	8001f44 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d113      	bne.n	8001c12 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	623b      	str	r3, [r7, #32]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	623b      	str	r3, [r7, #32]
 8001bfe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	e184      	b.n	8001f1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d11b      	bne.n	8001c52 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	e164      	b.n	8001f1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d11b      	bne.n	8001c92 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	61bb      	str	r3, [r7, #24]
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	e144      	b.n	8001f1c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ca8:	e138      	b.n	8001f1c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	f200 80f1 	bhi.w	8001e96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d123      	bne.n	8001d04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 fb44 	bl	800234e <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e139      	b.n	8001f44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691a      	ldr	r2, [r3, #16]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d02:	e10b      	b.n	8001f1c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d14e      	bne.n	8001daa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d12:	2200      	movs	r2, #0
 8001d14:	4906      	ldr	r1, [pc, #24]	; (8001d30 <HAL_I2C_Mem_Read+0x22c>)
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 fa02 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d008      	beq.n	8001d34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e10e      	b.n	8001f44 <HAL_I2C_Mem_Read+0x440>
 8001d26:	bf00      	nop
 8001d28:	00100002 	.word	0x00100002
 8001d2c:	ffff0000 	.word	0xffff0000
 8001d30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d60:	3b01      	subs	r3, #1
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	691a      	ldr	r2, [r3, #16]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	3b01      	subs	r3, #1
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001da8:	e0b8      	b.n	8001f1c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001db0:	2200      	movs	r2, #0
 8001db2:	4966      	ldr	r1, [pc, #408]	; (8001f4c <HAL_I2C_Mem_Read+0x448>)
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f000 f9b3 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0bf      	b.n	8001f44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	494f      	ldr	r1, [pc, #316]	; (8001f4c <HAL_I2C_Mem_Read+0x448>)
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 f985 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e091      	b.n	8001f44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691a      	ldr	r2, [r3, #16]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e94:	e042      	b.n	8001f1c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 fa57 	bl	800234e <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e04c      	b.n	8001f44 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d118      	bne.n	8001f1c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f47f aec2 	bne.w	8001caa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e000      	b.n	8001f44 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001f42:	2302      	movs	r3, #2
  }
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3728      	adds	r7, #40	; 0x28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	00010004 	.word	0x00010004

08001f50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	4608      	mov	r0, r1
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4603      	mov	r3, r0
 8001f60:	817b      	strh	r3, [r7, #10]
 8001f62:	460b      	mov	r3, r1
 8001f64:	813b      	strh	r3, [r7, #8]
 8001f66:	4613      	mov	r3, r2
 8001f68:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f78:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 f8c2 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00d      	beq.n	8001fbe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fb0:	d103      	bne.n	8001fba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e0aa      	b.n	8002114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fbe:	897b      	ldrh	r3, [r7, #10]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fcc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	6a3a      	ldr	r2, [r7, #32]
 8001fd2:	4952      	ldr	r1, [pc, #328]	; (800211c <I2C_RequestMemoryRead+0x1cc>)
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 f8fa 	bl	80021ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e097      	b.n	8002114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffc:	6a39      	ldr	r1, [r7, #32]
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 f964 	bl	80022cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00d      	beq.n	8002026 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	2b04      	cmp	r3, #4
 8002010:	d107      	bne.n	8002022 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002020:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e076      	b.n	8002114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d105      	bne.n	8002038 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800202c:	893b      	ldrh	r3, [r7, #8]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	611a      	str	r2, [r3, #16]
 8002036:	e021      	b.n	800207c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002038:	893b      	ldrh	r3, [r7, #8]
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	b29b      	uxth	r3, r3
 800203e:	b2da      	uxtb	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002048:	6a39      	ldr	r1, [r7, #32]
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f93e 	bl	80022cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00d      	beq.n	8002072 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	2b04      	cmp	r3, #4
 800205c:	d107      	bne.n	800206e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800206c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e050      	b.n	8002114 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002072:	893b      	ldrh	r3, [r7, #8]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800207c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800207e:	6a39      	ldr	r1, [r7, #32]
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 f923 	bl	80022cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00d      	beq.n	80020a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	2b04      	cmp	r3, #4
 8002092:	d107      	bne.n	80020a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e035      	b.n	8002114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	2200      	movs	r2, #0
 80020c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 f82b 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00d      	beq.n	80020ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020de:	d103      	bne.n	80020e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e013      	b.n	8002114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80020ec:	897b      	ldrh	r3, [r7, #10]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	6a3a      	ldr	r2, [r7, #32]
 8002100:	4906      	ldr	r1, [pc, #24]	; (800211c <I2C_RequestMemoryRead+0x1cc>)
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f863 	bl	80021ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	00010002 	.word	0x00010002

08002120 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	4613      	mov	r3, r2
 800212e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002130:	e025      	b.n	800217e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d021      	beq.n	800217e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800213a:	f7ff f8a7 	bl	800128c <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d302      	bcc.n	8002150 <I2C_WaitOnFlagUntilTimeout+0x30>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d116      	bne.n	800217e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2220      	movs	r2, #32
 800215a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f043 0220 	orr.w	r2, r3, #32
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e023      	b.n	80021c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	0c1b      	lsrs	r3, r3, #16
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b01      	cmp	r3, #1
 8002186:	d10d      	bne.n	80021a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	43da      	mvns	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4013      	ands	r3, r2
 8002194:	b29b      	uxth	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	bf0c      	ite	eq
 800219a:	2301      	moveq	r3, #1
 800219c:	2300      	movne	r3, #0
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	e00c      	b.n	80021be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	43da      	mvns	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	4013      	ands	r3, r2
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	bf0c      	ite	eq
 80021b6:	2301      	moveq	r3, #1
 80021b8:	2300      	movne	r3, #0
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	461a      	mov	r2, r3
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d0b6      	beq.n	8002132 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021dc:	e051      	b.n	8002282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ec:	d123      	bne.n	8002236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002206:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f043 0204 	orr.w	r2, r3, #4
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e046      	b.n	80022c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223c:	d021      	beq.n	8002282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800223e:	f7ff f825 	bl	800128c <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	429a      	cmp	r2, r3
 800224c:	d302      	bcc.n	8002254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d116      	bne.n	8002282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2220      	movs	r2, #32
 800225e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f043 0220 	orr.w	r2, r3, #32
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e020      	b.n	80022c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	0c1b      	lsrs	r3, r3, #16
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b01      	cmp	r3, #1
 800228a:	d10c      	bne.n	80022a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	43da      	mvns	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4013      	ands	r3, r2
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	bf14      	ite	ne
 800229e:	2301      	movne	r3, #1
 80022a0:	2300      	moveq	r3, #0
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	e00b      	b.n	80022be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	43da      	mvns	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	4013      	ands	r3, r2
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf14      	ite	ne
 80022b8:	2301      	movne	r3, #1
 80022ba:	2300      	moveq	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d18d      	bne.n	80021de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022d8:	e02d      	b.n	8002336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f88d 	bl	80023fa <I2C_IsAcknowledgeFailed>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e02d      	b.n	8002346 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f0:	d021      	beq.n	8002336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f2:	f7fe ffcb 	bl	800128c <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d302      	bcc.n	8002308 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d116      	bne.n	8002336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f043 0220 	orr.w	r2, r3, #32
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e007      	b.n	8002346 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002340:	2b80      	cmp	r3, #128	; 0x80
 8002342:	d1ca      	bne.n	80022da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800235a:	e042      	b.n	80023e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	2b10      	cmp	r3, #16
 8002368:	d119      	bne.n	800239e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f06f 0210 	mvn.w	r2, #16
 8002372:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2220      	movs	r2, #32
 800237e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e029      	b.n	80023f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239e:	f7fe ff75 	bl	800128c <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d302      	bcc.n	80023b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d116      	bne.n	80023e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2220      	movs	r2, #32
 80023be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f043 0220 	orr.w	r2, r3, #32
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e007      	b.n	80023f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ec:	2b40      	cmp	r3, #64	; 0x40
 80023ee:	d1b5      	bne.n	800235c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002410:	d11b      	bne.n	800244a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800241a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2220      	movs	r2, #32
 8002426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f043 0204 	orr.w	r2, r3, #4
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245a:	b08f      	sub	sp, #60	; 0x3c
 800245c:	af0a      	add	r7, sp, #40	; 0x28
 800245e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e10f      	b.n	800268a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d106      	bne.n	800248a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f006 fe61 	bl	800914c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2203      	movs	r2, #3
 800248e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d102      	bne.n	80024a4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f003 f934 	bl	8005716 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	687e      	ldr	r6, [r7, #4]
 80024b6:	466d      	mov	r5, sp
 80024b8:	f106 0410 	add.w	r4, r6, #16
 80024bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80024cc:	1d33      	adds	r3, r6, #4
 80024ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024d0:	6838      	ldr	r0, [r7, #0]
 80024d2:	f003 f80b 	bl	80054ec <USB_CoreInit>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0d0      	b.n	800268a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f003 f922 	bl	8005738 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f4:	2300      	movs	r3, #0
 80024f6:	73fb      	strb	r3, [r7, #15]
 80024f8:	e04a      	b.n	8002590 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	333d      	adds	r3, #61	; 0x3d
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	333c      	adds	r3, #60	; 0x3c
 800251e:	7bfa      	ldrb	r2, [r7, #15]
 8002520:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	b298      	uxth	r0, r3
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	3344      	adds	r3, #68	; 0x44
 8002536:	4602      	mov	r2, r0
 8002538:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	3340      	adds	r3, #64	; 0x40
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	3348      	adds	r3, #72	; 0x48
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	334c      	adds	r3, #76	; 0x4c
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	3354      	adds	r3, #84	; 0x54
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	3301      	adds	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
 8002590:	7bfa      	ldrb	r2, [r7, #15]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	429a      	cmp	r2, r3
 8002598:	d3af      	bcc.n	80024fa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	e044      	b.n	800262a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80025c8:	7bfa      	ldrb	r2, [r7, #15]
 80025ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025e2:	7bfa      	ldrb	r2, [r7, #15]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800260e:	7bfa      	ldrb	r2, [r7, #15]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	3301      	adds	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
 800262a:	7bfa      	ldrb	r2, [r7, #15]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	429a      	cmp	r2, r3
 8002632:	d3b5      	bcc.n	80025a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	603b      	str	r3, [r7, #0]
 800263a:	687e      	ldr	r6, [r7, #4]
 800263c:	466d      	mov	r5, sp
 800263e:	f106 0410 	add.w	r4, r6, #16
 8002642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800264a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800264e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002652:	1d33      	adds	r3, r6, #4
 8002654:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002656:	6838      	ldr	r0, [r7, #0]
 8002658:	f003 f8ba 	bl	80057d0 <USB_DevInit>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2202      	movs	r2, #2
 8002666:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e00d      	b.n	800268a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f004 fa09 	bl	8006a9a <USB_DevDisconnect>

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002692 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_PCD_Start+0x1c>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e020      	b.n	80026f0 <HAL_PCD_Start+0x5e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d109      	bne.n	80026d2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d005      	beq.n	80026d2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f003 f80c 	bl	80056f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f004 f9b9 	bl	8006a58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026f8:	b590      	push	{r4, r7, lr}
 80026fa:	b08d      	sub	sp, #52	; 0x34
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f004 fa77 	bl	8006c02 <USB_GetMode>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	f040 848a 	bne.w	8003030 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f004 f9db 	bl	8006adc <USB_ReadInterrupts>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8480 	beq.w	800302e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f004 f9c8 	bl	8006adc <USB_ReadInterrupts>
 800274c:	4603      	mov	r3, r0
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b02      	cmp	r3, #2
 8002754:	d107      	bne.n	8002766 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f002 0202 	and.w	r2, r2, #2
 8002764:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f004 f9b6 	bl	8006adc <USB_ReadInterrupts>
 8002770:	4603      	mov	r3, r0
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	2b10      	cmp	r3, #16
 8002778:	d161      	bne.n	800283e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699a      	ldr	r2, [r3, #24]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0210 	bic.w	r2, r2, #16
 8002788:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	f003 020f 	and.w	r2, r3, #15
 8002796:	4613      	mov	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	3304      	adds	r3, #4
 80027a8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	0c5b      	lsrs	r3, r3, #17
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d124      	bne.n	8002800 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80027bc:	4013      	ands	r3, r2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d035      	beq.n	800282e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	6a38      	ldr	r0, [r7, #32]
 80027d6:	f003 ffed 	bl	80067b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027e6:	441a      	add	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	6a1a      	ldr	r2, [r3, #32]
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	091b      	lsrs	r3, r3, #4
 80027f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027f8:	441a      	add	r2, r3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	621a      	str	r2, [r3, #32]
 80027fe:	e016      	b.n	800282e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	0c5b      	lsrs	r3, r3, #17
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	2b06      	cmp	r3, #6
 800280a:	d110      	bne.n	800282e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002812:	2208      	movs	r2, #8
 8002814:	4619      	mov	r1, r3
 8002816:	6a38      	ldr	r0, [r7, #32]
 8002818:	f003 ffcc 	bl	80067b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	6a1a      	ldr	r2, [r3, #32]
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	091b      	lsrs	r3, r3, #4
 8002824:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002828:	441a      	add	r2, r3
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699a      	ldr	r2, [r3, #24]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0210 	orr.w	r2, r2, #16
 800283c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f004 f94a 	bl	8006adc <USB_ReadInterrupts>
 8002848:	4603      	mov	r3, r0
 800284a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800284e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002852:	f040 80a7 	bne.w	80029a4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f004 f94f 	bl	8006b02 <USB_ReadDevAllOutEpInterrupt>
 8002864:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002866:	e099      	b.n	800299c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 808e 	beq.w	8002990 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f004 f973 	bl	8006b6a <USB_ReadDevOutEPInterrupt>
 8002884:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00c      	beq.n	80028aa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	4413      	add	r3, r2
 8002898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800289c:	461a      	mov	r2, r3
 800289e:	2301      	movs	r3, #1
 80028a0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 fec3 	bl	8003630 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00c      	beq.n	80028ce <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c0:	461a      	mov	r2, r3
 80028c2:	2308      	movs	r3, #8
 80028c4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 ff99 	bl	8003800 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e4:	461a      	mov	r2, r3
 80028e6:	2310      	movs	r3, #16
 80028e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d030      	beq.n	8002956 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fc:	2b80      	cmp	r3, #128	; 0x80
 80028fe:	d109      	bne.n	8002914 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	69fa      	ldr	r2, [r7, #28]
 800290a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800290e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002912:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	4413      	add	r3, r2
 8002926:	3304      	adds	r3, #4
 8002928:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	78db      	ldrb	r3, [r3, #3]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d108      	bne.n	8002944 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2200      	movs	r2, #0
 8002936:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	b2db      	uxtb	r3, r3
 800293c:	4619      	mov	r1, r3
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f006 fd0a 	bl	8009358 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	4413      	add	r3, r2
 800294c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002950:	461a      	mov	r2, r3
 8002952:	2302      	movs	r3, #2
 8002954:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	4413      	add	r3, r2
 8002968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800296c:	461a      	mov	r2, r3
 800296e:	2320      	movs	r3, #32
 8002970:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d009      	beq.n	8002990 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	015a      	lsls	r2, r3, #5
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	4413      	add	r3, r2
 8002984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002988:	461a      	mov	r2, r3
 800298a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800298e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	3301      	adds	r3, #1
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002998:	085b      	lsrs	r3, r3, #1
 800299a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800299c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f47f af62 	bne.w	8002868 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f004 f897 	bl	8006adc <USB_ReadInterrupts>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029b8:	f040 80db 	bne.w	8002b72 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f004 f8b8 	bl	8006b36 <USB_ReadDevAllInEpInterrupt>
 80029c6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80029cc:	e0cd      	b.n	8002b6a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80c2 	beq.w	8002b5e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f004 f8de 	bl	8006ba6 <USB_ReadDevInEPInterrupt>
 80029ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d057      	beq.n	8002aa6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	2201      	movs	r2, #1
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69f9      	ldr	r1, [r7, #28]
 8002a12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a16:	4013      	ands	r3, r2
 8002a18:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a26:	461a      	mov	r2, r3
 8002a28:	2301      	movs	r3, #1
 8002a2a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d132      	bne.n	8002a9a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	334c      	adds	r3, #76	; 0x4c
 8002a44:	6819      	ldr	r1, [r3, #0]
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4403      	add	r3, r0
 8002a54:	3348      	adds	r3, #72	; 0x48
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4419      	add	r1, r3
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5e:	4613      	mov	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4403      	add	r3, r0
 8002a68:	334c      	adds	r3, #76	; 0x4c
 8002a6a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d113      	bne.n	8002a9a <HAL_PCD_IRQHandler+0x3a2>
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a76:	4613      	mov	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	440b      	add	r3, r1
 8002a80:	3354      	adds	r3, #84	; 0x54
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d108      	bne.n	8002a9a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a92:	461a      	mov	r2, r3
 8002a94:	2101      	movs	r1, #1
 8002a96:	f004 f8e5 	bl	8006c64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f006 fbd4 	bl	800924e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002abc:	461a      	mov	r2, r3
 8002abe:	2308      	movs	r3, #8
 8002ac0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ad8:	461a      	mov	r2, r3
 8002ada:	2310      	movs	r3, #16
 8002adc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002af4:	461a      	mov	r2, r3
 8002af6:	2340      	movs	r3, #64	; 0x40
 8002af8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d023      	beq.n	8002b4c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b06:	6a38      	ldr	r0, [r7, #32]
 8002b08:	f002 ffc6 	bl	8005a98 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	3338      	adds	r3, #56	; 0x38
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	78db      	ldrb	r3, [r3, #3]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d108      	bne.n	8002b3a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	4619      	mov	r1, r3
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f006 fc21 	bl	800937c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b46:	461a      	mov	r2, r3
 8002b48:	2302      	movs	r3, #2
 8002b4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 fcdb 	bl	8003514 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	3301      	adds	r3, #1
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b66:	085b      	lsrs	r3, r3, #1
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f47f af2e 	bne.w	80029ce <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f003 ffb0 	bl	8006adc <USB_ReadInterrupts>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b86:	d122      	bne.n	8002bce <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	69fa      	ldr	r2, [r7, #28]
 8002b92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d108      	bne.n	8002bb8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002bae:	2100      	movs	r1, #0
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fec3 	bl	800393c <HAL_PCDEx_LPM_Callback>
 8002bb6:	e002      	b.n	8002bbe <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f006 fbbf 	bl	800933c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002bcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f003 ff82 	bl	8006adc <USB_ReadInterrupts>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002be2:	d112      	bne.n	8002c0a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d102      	bne.n	8002bfa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f006 fb7b 	bl	80092f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002c08:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f003 ff64 	bl	8006adc <USB_ReadInterrupts>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1e:	f040 80b7 	bne.w	8002d90 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c30:	f023 0301 	bic.w	r3, r3, #1
 8002c34:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2110      	movs	r1, #16
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f002 ff2b 	bl	8005a98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c42:	2300      	movs	r3, #0
 8002c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c46:	e046      	b.n	8002cd6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c54:	461a      	mov	r2, r3
 8002c56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c5a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c6c:	0151      	lsls	r1, r2, #5
 8002c6e:	69fa      	ldr	r2, [r7, #28]
 8002c70:	440a      	add	r2, r1
 8002c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c7a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c88:	461a      	mov	r2, r3
 8002c8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c8e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca0:	0151      	lsls	r1, r2, #5
 8002ca2:	69fa      	ldr	r2, [r7, #28]
 8002ca4:	440a      	add	r2, r1
 8002ca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002caa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc0:	0151      	lsls	r1, r2, #5
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	440a      	add	r2, r1
 8002cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002cce:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d3b3      	bcc.n	8002c48 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cee:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002cf2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d016      	beq.n	8002d2a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d0c:	f043 030b 	orr.w	r3, r3, #11
 8002d10:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d22:	f043 030b 	orr.w	r3, r3, #11
 8002d26:	6453      	str	r3, [r2, #68]	; 0x44
 8002d28:	e015      	b.n	8002d56 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d3c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002d40:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	69fa      	ldr	r2, [r7, #28]
 8002d4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d50:	f043 030b 	orr.w	r3, r3, #11
 8002d54:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d64:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d68:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f003 ff72 	bl	8006c64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f003 fea1 	bl	8006adc <USB_ReadInterrupts>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002da4:	d124      	bne.n	8002df0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f003 ff37 	bl	8006c1e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f002 feec 	bl	8005b92 <USB_GetDevSpeed>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681c      	ldr	r4, [r3, #0]
 8002dc6:	f001 fa27 	bl	8004218 <HAL_RCC_GetHCLKFreq>
 8002dca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	f002 fbeb 	bl	80055b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f006 fa5f 	bl	800929e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002dee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f003 fe71 	bl	8006adc <USB_ReadInterrupts>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d10a      	bne.n	8002e1a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f006 fa3c 	bl	8009282 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f002 0208 	and.w	r2, r2, #8
 8002e18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f003 fe5c 	bl	8006adc <USB_ReadInterrupts>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2a:	2b80      	cmp	r3, #128	; 0x80
 8002e2c:	d122      	bne.n	8002e74 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3e:	e014      	b.n	8002e6a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e44:	4613      	mov	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d105      	bne.n	8002e64 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fb27 	bl	80034b2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	3301      	adds	r3, #1
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d3e5      	bcc.n	8002e40 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f003 fe2f 	bl	8006adc <USB_ReadInterrupts>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e88:	d13b      	bne.n	8002f02 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8e:	e02b      	b.n	8002ee8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	3340      	adds	r3, #64	; 0x40
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d115      	bne.n	8002ee2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002eb6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	da12      	bge.n	8002ee2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	333f      	adds	r3, #63	; 0x3f
 8002ecc:	2201      	movs	r2, #1
 8002ece:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	4619      	mov	r1, r3
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 fae8 	bl	80034b2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d3ce      	bcc.n	8002e90 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695a      	ldr	r2, [r3, #20]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f003 fde8 	bl	8006adc <USB_ReadInterrupts>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f16:	d155      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f18:	2301      	movs	r3, #1
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1c:	e045      	b.n	8002faa <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f32:	4613      	mov	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d12e      	bne.n	8002fa4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f46:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	da2b      	bge.n	8002fa4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002f58:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d121      	bne.n	8002fa4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002f72:	2201      	movs	r2, #1
 8002f74:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fa0:	6053      	str	r3, [r2, #4]
            break;
 8002fa2:	e007      	b.n	8002fb4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d3b4      	bcc.n	8002f1e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002fc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f003 fd87 	bl	8006adc <USB_ReadInterrupts>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd8:	d10a      	bne.n	8002ff0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f006 f9e0 	bl	80093a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002fee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f003 fd71 	bl	8006adc <USB_ReadInterrupts>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b04      	cmp	r3, #4
 8003002:	d115      	bne.n	8003030 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f006 f9d0 	bl	80093bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6859      	ldr	r1, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	430a      	orrs	r2, r1
 800302a:	605a      	str	r2, [r3, #4]
 800302c:	e000      	b.n	8003030 <HAL_PCD_IRQHandler+0x938>
      return;
 800302e:	bf00      	nop
    }
  }
}
 8003030:	3734      	adds	r7, #52	; 0x34
 8003032:	46bd      	mov	sp, r7
 8003034:	bd90      	pop	{r4, r7, pc}

08003036 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	460b      	mov	r3, r1
 8003040:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_PCD_SetAddress+0x1a>
 800304c:	2302      	movs	r3, #2
 800304e:	e013      	b.n	8003078 <HAL_PCD_SetAddress+0x42>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	4611      	mov	r1, r2
 8003068:	4618      	mov	r0, r3
 800306a:	f003 fccf 	bl	8006a0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	4608      	mov	r0, r1
 800308a:	4611      	mov	r1, r2
 800308c:	461a      	mov	r2, r3
 800308e:	4603      	mov	r3, r0
 8003090:	70fb      	strb	r3, [r7, #3]
 8003092:	460b      	mov	r3, r1
 8003094:	803b      	strh	r3, [r7, #0]
 8003096:	4613      	mov	r3, r2
 8003098:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800309e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	da0f      	bge.n	80030c6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	f003 020f 	and.w	r2, r3, #15
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	3338      	adds	r3, #56	; 0x38
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	4413      	add	r3, r2
 80030ba:	3304      	adds	r3, #4
 80030bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2201      	movs	r2, #1
 80030c2:	705a      	strb	r2, [r3, #1]
 80030c4:	e00f      	b.n	80030e6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	f003 020f 	and.w	r2, r3, #15
 80030cc:	4613      	mov	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4413      	add	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	4413      	add	r3, r2
 80030dc:	3304      	adds	r3, #4
 80030de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030f2:	883a      	ldrh	r2, [r7, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	78ba      	ldrb	r2, [r7, #2]
 80030fc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	785b      	ldrb	r3, [r3, #1]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d004      	beq.n	8003110 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003110:	78bb      	ldrb	r3, [r7, #2]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d102      	bne.n	800311c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_PCD_EP_Open+0xaa>
 8003126:	2302      	movs	r3, #2
 8003128:	e00e      	b.n	8003148 <HAL_PCD_EP_Open+0xc8>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68f9      	ldr	r1, [r7, #12]
 8003138:	4618      	mov	r0, r3
 800313a:	f002 fd4f 	bl	8005bdc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003146:	7afb      	ldrb	r3, [r7, #11]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800315c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003160:	2b00      	cmp	r3, #0
 8003162:	da0f      	bge.n	8003184 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	f003 020f 	and.w	r2, r3, #15
 800316a:	4613      	mov	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	3338      	adds	r3, #56	; 0x38
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	4413      	add	r3, r2
 8003178:	3304      	adds	r3, #4
 800317a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	705a      	strb	r2, [r3, #1]
 8003182:	e00f      	b.n	80031a4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	f003 020f 	and.w	r2, r3, #15
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	3304      	adds	r3, #4
 800319c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_PCD_EP_Close+0x6e>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e00e      	b.n	80031dc <HAL_PCD_EP_Close+0x8c>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68f9      	ldr	r1, [r7, #12]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f002 fd8d 	bl	8005cec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	460b      	mov	r3, r1
 80031f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031f4:	7afb      	ldrb	r3, [r7, #11]
 80031f6:	f003 020f 	and.w	r2, r3, #15
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4413      	add	r3, r2
 800320a:	3304      	adds	r3, #4
 800320c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2200      	movs	r2, #0
 800321e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2200      	movs	r2, #0
 8003224:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003226:	7afb      	ldrb	r3, [r7, #11]
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	b2da      	uxtb	r2, r3
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d102      	bne.n	8003240 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003240:	7afb      	ldrb	r3, [r7, #11]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	2b00      	cmp	r3, #0
 8003248:	d109      	bne.n	800325e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	6979      	ldr	r1, [r7, #20]
 8003258:	f003 f86c 	bl	8006334 <USB_EP0StartXfer>
 800325c:	e008      	b.n	8003270 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	461a      	mov	r2, r3
 800326a:	6979      	ldr	r1, [r7, #20]
 800326c:	f002 fe1a 	bl	8005ea4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	460b      	mov	r3, r1
 8003284:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	f003 020f 	and.w	r2, r3, #15
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800329c:	681b      	ldr	r3, [r3, #0]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
 80032b6:	460b      	mov	r3, r1
 80032b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ba:	7afb      	ldrb	r3, [r7, #11]
 80032bc:	f003 020f 	and.w	r2, r3, #15
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	3338      	adds	r3, #56	; 0x38
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4413      	add	r3, r2
 80032ce:	3304      	adds	r3, #4
 80032d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2200      	movs	r2, #0
 80032e2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	2201      	movs	r2, #1
 80032e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ea:	7afb      	ldrb	r3, [r7, #11]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d102      	bne.n	8003304 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003304:	7afb      	ldrb	r3, [r7, #11]
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	6979      	ldr	r1, [r7, #20]
 800331c:	f003 f80a 	bl	8006334 <USB_EP0StartXfer>
 8003320:	e008      	b.n	8003334 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	6979      	ldr	r1, [r7, #20]
 8003330:	f002 fdb8 	bl	8005ea4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	f003 020f 	and.w	r2, r3, #15
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	429a      	cmp	r2, r3
 8003356:	d901      	bls.n	800335c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e050      	b.n	80033fe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800335c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003360:	2b00      	cmp	r3, #0
 8003362:	da0f      	bge.n	8003384 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	f003 020f 	and.w	r2, r3, #15
 800336a:	4613      	mov	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	3338      	adds	r3, #56	; 0x38
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	4413      	add	r3, r2
 8003378:	3304      	adds	r3, #4
 800337a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	705a      	strb	r2, [r3, #1]
 8003382:	e00d      	b.n	80033a0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	4613      	mov	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	4413      	add	r3, r2
 8003396:	3304      	adds	r3, #4
 8003398:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_PCD_EP_SetStall+0x82>
 80033bc:	2302      	movs	r3, #2
 80033be:	e01e      	b.n	80033fe <HAL_PCD_EP_SetStall+0xc0>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68f9      	ldr	r1, [r7, #12]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f003 fa48 	bl	8006864 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10a      	bne.n	80033f4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	b2d9      	uxtb	r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033ee:	461a      	mov	r2, r3
 80033f0:	f003 fc38 	bl	8006c64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b084      	sub	sp, #16
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	460b      	mov	r3, r1
 8003410:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	f003 020f 	and.w	r2, r3, #15
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	429a      	cmp	r2, r3
 800341e:	d901      	bls.n	8003424 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e042      	b.n	80034aa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003424:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003428:	2b00      	cmp	r3, #0
 800342a:	da0f      	bge.n	800344c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	f003 020f 	and.w	r2, r3, #15
 8003432:	4613      	mov	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	3338      	adds	r3, #56	; 0x38
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	4413      	add	r3, r2
 8003440:	3304      	adds	r3, #4
 8003442:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2201      	movs	r2, #1
 8003448:	705a      	strb	r2, [r3, #1]
 800344a:	e00f      	b.n	800346c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	f003 020f 	and.w	r2, r3, #15
 8003452:	4613      	mov	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4413      	add	r3, r2
 8003462:	3304      	adds	r3, #4
 8003464:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003472:	78fb      	ldrb	r3, [r7, #3]
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_PCD_EP_ClrStall+0x86>
 8003488:	2302      	movs	r3, #2
 800348a:	e00e      	b.n	80034aa <HAL_PCD_EP_ClrStall+0xa4>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68f9      	ldr	r1, [r7, #12]
 800349a:	4618      	mov	r0, r3
 800349c:	f003 fa50 	bl	8006940 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b084      	sub	sp, #16
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	460b      	mov	r3, r1
 80034bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80034be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	da0c      	bge.n	80034e0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	f003 020f 	and.w	r2, r3, #15
 80034cc:	4613      	mov	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	3338      	adds	r3, #56	; 0x38
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	3304      	adds	r3, #4
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	e00c      	b.n	80034fa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	f003 020f 	and.w	r2, r3, #15
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	3304      	adds	r3, #4
 80034f8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68f9      	ldr	r1, [r7, #12]
 8003500:	4618      	mov	r0, r3
 8003502:	f003 f86f 	bl	80065e4 <USB_EPStopXfer>
 8003506:	4603      	mov	r3, r0
 8003508:	72fb      	strb	r3, [r7, #11]

  return ret;
 800350a:	7afb      	ldrb	r3, [r7, #11]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	; 0x28
 8003518:	af02      	add	r7, sp, #8
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	3338      	adds	r3, #56	; 0x38
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	4413      	add	r3, r2
 8003538:	3304      	adds	r3, #4
 800353a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a1a      	ldr	r2, [r3, #32]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	429a      	cmp	r2, r3
 8003546:	d901      	bls.n	800354c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e06c      	b.n	8003626 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	699a      	ldr	r2, [r3, #24]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	429a      	cmp	r2, r3
 8003560:	d902      	bls.n	8003568 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	3303      	adds	r3, #3
 800356c:	089b      	lsrs	r3, r3, #2
 800356e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003570:	e02b      	b.n	80035ca <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	429a      	cmp	r2, r3
 8003586:	d902      	bls.n	800358e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3303      	adds	r3, #3
 8003592:	089b      	lsrs	r3, r3, #2
 8003594:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6919      	ldr	r1, [r3, #16]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	b2da      	uxtb	r2, r3
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	4603      	mov	r3, r0
 80035ac:	6978      	ldr	r0, [r7, #20]
 80035ae:	f003 f8c3 	bl	8006738 <USB_WritePacket>

    ep->xfer_buff  += len;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	441a      	add	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a1a      	ldr	r2, [r3, #32]
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	441a      	add	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	b29b      	uxth	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d809      	bhi.n	80035f4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a1a      	ldr	r2, [r3, #32]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d203      	bcs.n	80035f4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1be      	bne.n	8003572 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	699a      	ldr	r2, [r3, #24]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d811      	bhi.n	8003624 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	2201      	movs	r2, #1
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	43db      	mvns	r3, r3
 800361a:	6939      	ldr	r1, [r7, #16]
 800361c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003620:	4013      	ands	r3, r2
 8003622:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3720      	adds	r7, #32
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	333c      	adds	r3, #60	; 0x3c
 8003648:	3304      	adds	r3, #4
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	4413      	add	r3, r2
 8003656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d17b      	bne.n	800375e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d015      	beq.n	800369c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	4a61      	ldr	r2, [pc, #388]	; (80037f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	f240 80b9 	bls.w	80037ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 80b3 	beq.w	80037ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	015a      	lsls	r2, r3, #5
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	4413      	add	r3, r2
 800368e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003692:	461a      	mov	r2, r3
 8003694:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003698:	6093      	str	r3, [r2, #8]
 800369a:	e0a7      	b.n	80037ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b2:	461a      	mov	r2, r3
 80036b4:	2320      	movs	r3, #32
 80036b6:	6093      	str	r3, [r2, #8]
 80036b8:	e098      	b.n	80037ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f040 8093 	bne.w	80037ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	4a4b      	ldr	r2, [pc, #300]	; (80037f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d90f      	bls.n	80036ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e4:	461a      	mov	r2, r3
 80036e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ea:	6093      	str	r3, [r2, #8]
 80036ec:	e07e      	b.n	80037ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	4413      	add	r3, r2
 8003700:	3304      	adds	r3, #4
 8003702:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	0159      	lsls	r1, r3, #5
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	440b      	add	r3, r1
 8003710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371a:	1ad2      	subs	r2, r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d114      	bne.n	8003750 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d109      	bne.n	8003742 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6818      	ldr	r0, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003738:	461a      	mov	r2, r3
 800373a:	2101      	movs	r1, #1
 800373c:	f003 fa92 	bl	8006c64 <USB_EP0_OutStart>
 8003740:	e006      	b.n	8003750 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	441a      	add	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	4619      	mov	r1, r3
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f005 fd5e 	bl	8009218 <HAL_PCD_DataOutStageCallback>
 800375c:	e046      	b.n	80037ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	4a26      	ldr	r2, [pc, #152]	; (80037fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d124      	bne.n	80037b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800377c:	461a      	mov	r2, r3
 800377e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003782:	6093      	str	r3, [r2, #8]
 8003784:	e032      	b.n	80037ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379c:	461a      	mov	r2, r3
 800379e:	2320      	movs	r3, #32
 80037a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	4619      	mov	r1, r3
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f005 fd35 	bl	8009218 <HAL_PCD_DataOutStageCallback>
 80037ae:	e01d      	b.n	80037ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d114      	bne.n	80037e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	4613      	mov	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d108      	bne.n	80037e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037d8:	461a      	mov	r2, r3
 80037da:	2100      	movs	r1, #0
 80037dc:	f003 fa42 	bl	8006c64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	4619      	mov	r1, r3
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f005 fd16 	bl	8009218 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3720      	adds	r7, #32
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	4f54300a 	.word	0x4f54300a
 80037fc:	4f54310a 	.word	0x4f54310a

08003800 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	333c      	adds	r3, #60	; 0x3c
 8003818:	3304      	adds	r3, #4
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4a15      	ldr	r2, [pc, #84]	; (8003888 <PCD_EP_OutSetupPacket_int+0x88>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d90e      	bls.n	8003854 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800383c:	2b00      	cmp	r3, #0
 800383e:	d009      	beq.n	8003854 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4413      	add	r3, r2
 8003848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384c:	461a      	mov	r2, r3
 800384e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003852:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f005 fccd 	bl	80091f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4a0a      	ldr	r2, [pc, #40]	; (8003888 <PCD_EP_OutSetupPacket_int+0x88>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d90c      	bls.n	800387c <PCD_EP_OutSetupPacket_int+0x7c>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d108      	bne.n	800387c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003874:	461a      	mov	r2, r3
 8003876:	2101      	movs	r1, #1
 8003878:	f003 f9f4 	bl	8006c64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	4f54300a 	.word	0x4f54300a

0800388c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	70fb      	strb	r3, [r7, #3]
 8003898:	4613      	mov	r3, r2
 800389a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d107      	bne.n	80038ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038aa:	883b      	ldrh	r3, [r7, #0]
 80038ac:	0419      	lsls	r1, r3, #16
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	629a      	str	r2, [r3, #40]	; 0x28
 80038b8:	e028      	b.n	800390c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c0:	0c1b      	lsrs	r3, r3, #16
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	4413      	add	r3, r2
 80038c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038c8:	2300      	movs	r3, #0
 80038ca:	73fb      	strb	r3, [r7, #15]
 80038cc:	e00d      	b.n	80038ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	3340      	adds	r3, #64	; 0x40
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	0c1b      	lsrs	r3, r3, #16
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	4413      	add	r3, r2
 80038e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	3301      	adds	r3, #1
 80038e8:	73fb      	strb	r3, [r7, #15]
 80038ea:	7bfa      	ldrb	r2, [r7, #15]
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d3ec      	bcc.n	80038ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038f4:	883b      	ldrh	r3, [r7, #0]
 80038f6:	0418      	lsls	r0, r3, #16
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6819      	ldr	r1, [r3, #0]
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	3b01      	subs	r3, #1
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	4302      	orrs	r2, r0
 8003904:	3340      	adds	r3, #64	; 0x40
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	460b      	mov	r3, r1
 8003924:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	887a      	ldrh	r2, [r7, #2]
 800392c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e267      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d075      	beq.n	8003a5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003972:	4b88      	ldr	r3, [pc, #544]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b04      	cmp	r3, #4
 800397c:	d00c      	beq.n	8003998 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397e:	4b85      	ldr	r3, [pc, #532]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003986:	2b08      	cmp	r3, #8
 8003988:	d112      	bne.n	80039b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398a:	4b82      	ldr	r3, [pc, #520]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003996:	d10b      	bne.n	80039b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003998:	4b7e      	ldr	r3, [pc, #504]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d05b      	beq.n	8003a5c <HAL_RCC_OscConfig+0x108>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d157      	bne.n	8003a5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e242      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b8:	d106      	bne.n	80039c8 <HAL_RCC_OscConfig+0x74>
 80039ba:	4b76      	ldr	r3, [pc, #472]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a75      	ldr	r2, [pc, #468]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e01d      	b.n	8003a04 <HAL_RCC_OscConfig+0xb0>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0x98>
 80039d2:	4b70      	ldr	r3, [pc, #448]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a6f      	ldr	r2, [pc, #444]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b6d      	ldr	r3, [pc, #436]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6c      	ldr	r2, [pc, #432]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e00b      	b.n	8003a04 <HAL_RCC_OscConfig+0xb0>
 80039ec:	4b69      	ldr	r3, [pc, #420]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a68      	ldr	r2, [pc, #416]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	4b66      	ldr	r3, [pc, #408]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a65      	ldr	r2, [pc, #404]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fd fc3e 	bl	800128c <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a14:	f7fd fc3a 	bl	800128c <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	; 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e207      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	4b5b      	ldr	r3, [pc, #364]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0xc0>
 8003a32:	e014      	b.n	8003a5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fd fc2a 	bl	800128c <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fd fc26 	bl	800128c <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	; 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e1f3      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4e:	4b51      	ldr	r3, [pc, #324]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0xe8>
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d063      	beq.n	8003b32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a6a:	4b4a      	ldr	r3, [pc, #296]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00b      	beq.n	8003a8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a76:	4b47      	ldr	r3, [pc, #284]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d11c      	bne.n	8003abc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a82:	4b44      	ldr	r3, [pc, #272]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d116      	bne.n	8003abc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8e:	4b41      	ldr	r3, [pc, #260]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x152>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e1c7      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa6:	4b3b      	ldr	r3, [pc, #236]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4937      	ldr	r1, [pc, #220]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aba:	e03a      	b.n	8003b32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac4:	4b34      	ldr	r3, [pc, #208]	; (8003b98 <HAL_RCC_OscConfig+0x244>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aca:	f7fd fbdf 	bl	800128c <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad2:	f7fd fbdb 	bl	800128c <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e1a8      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae4:	4b2b      	ldr	r3, [pc, #172]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af0:	4b28      	ldr	r3, [pc, #160]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4925      	ldr	r1, [pc, #148]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	600b      	str	r3, [r1, #0]
 8003b04:	e015      	b.n	8003b32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b06:	4b24      	ldr	r3, [pc, #144]	; (8003b98 <HAL_RCC_OscConfig+0x244>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fd fbbe 	bl	800128c <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b14:	f7fd fbba 	bl	800128c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e187      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b26:	4b1b      	ldr	r3, [pc, #108]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d036      	beq.n	8003bac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d016      	beq.n	8003b74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b46:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <HAL_RCC_OscConfig+0x248>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7fd fb9e 	bl	800128c <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b54:	f7fd fb9a 	bl	800128c <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e167      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b66:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x200>
 8003b72:	e01b      	b.n	8003bac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b74:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <HAL_RCC_OscConfig+0x248>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7a:	f7fd fb87 	bl	800128c <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b80:	e00e      	b.n	8003ba0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b82:	f7fd fb83 	bl	800128c <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d907      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e150      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
 8003b94:	40023800 	.word	0x40023800
 8003b98:	42470000 	.word	0x42470000
 8003b9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba0:	4b88      	ldr	r3, [pc, #544]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1ea      	bne.n	8003b82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8097 	beq.w	8003ce8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bbe:	4b81      	ldr	r3, [pc, #516]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10f      	bne.n	8003bea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	4b7d      	ldr	r3, [pc, #500]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	4a7c      	ldr	r2, [pc, #496]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bda:	4b7a      	ldr	r3, [pc, #488]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be6:	2301      	movs	r3, #1
 8003be8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bea:	4b77      	ldr	r3, [pc, #476]	; (8003dc8 <HAL_RCC_OscConfig+0x474>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d118      	bne.n	8003c28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf6:	4b74      	ldr	r3, [pc, #464]	; (8003dc8 <HAL_RCC_OscConfig+0x474>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a73      	ldr	r2, [pc, #460]	; (8003dc8 <HAL_RCC_OscConfig+0x474>)
 8003bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c02:	f7fd fb43 	bl	800128c <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0a:	f7fd fb3f 	bl	800128c <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e10c      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1c:	4b6a      	ldr	r3, [pc, #424]	; (8003dc8 <HAL_RCC_OscConfig+0x474>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d106      	bne.n	8003c3e <HAL_RCC_OscConfig+0x2ea>
 8003c30:	4b64      	ldr	r3, [pc, #400]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c34:	4a63      	ldr	r2, [pc, #396]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c3c:	e01c      	b.n	8003c78 <HAL_RCC_OscConfig+0x324>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2b05      	cmp	r3, #5
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCC_OscConfig+0x30c>
 8003c46:	4b5f      	ldr	r3, [pc, #380]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4a:	4a5e      	ldr	r2, [pc, #376]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c4c:	f043 0304 	orr.w	r3, r3, #4
 8003c50:	6713      	str	r3, [r2, #112]	; 0x70
 8003c52:	4b5c      	ldr	r3, [pc, #368]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	4a5b      	ldr	r2, [pc, #364]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5e:	e00b      	b.n	8003c78 <HAL_RCC_OscConfig+0x324>
 8003c60:	4b58      	ldr	r3, [pc, #352]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c64:	4a57      	ldr	r2, [pc, #348]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c66:	f023 0301 	bic.w	r3, r3, #1
 8003c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6c:	4b55      	ldr	r3, [pc, #340]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	4a54      	ldr	r2, [pc, #336]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c72:	f023 0304 	bic.w	r3, r3, #4
 8003c76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d015      	beq.n	8003cac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c80:	f7fd fb04 	bl	800128c <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c88:	f7fd fb00 	bl	800128c <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e0cb      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9e:	4b49      	ldr	r3, [pc, #292]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0ee      	beq.n	8003c88 <HAL_RCC_OscConfig+0x334>
 8003caa:	e014      	b.n	8003cd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cac:	f7fd faee 	bl	800128c <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb4:	f7fd faea 	bl	800128c <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e0b5      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cca:	4b3e      	ldr	r3, [pc, #248]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1ee      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cd6:	7dfb      	ldrb	r3, [r7, #23]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d105      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cdc:	4b39      	ldr	r3, [pc, #228]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	4a38      	ldr	r2, [pc, #224]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 80a1 	beq.w	8003e34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cf2:	4b34      	ldr	r3, [pc, #208]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d05c      	beq.n	8003db8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d141      	bne.n	8003d8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d06:	4b31      	ldr	r3, [pc, #196]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fd fabe 	bl	800128c <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d14:	f7fd faba 	bl	800128c <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e087      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d26:	4b27      	ldr	r3, [pc, #156]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69da      	ldr	r2, [r3, #28]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	019b      	lsls	r3, r3, #6
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	085b      	lsrs	r3, r3, #1
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	041b      	lsls	r3, r3, #16
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	061b      	lsls	r3, r3, #24
 8003d56:	491b      	ldr	r1, [pc, #108]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d62:	f7fd fa93 	bl	800128c <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d6a:	f7fd fa8f 	bl	800128c <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e05c      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x416>
 8003d88:	e054      	b.n	8003e34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8a:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d90:	f7fd fa7c 	bl	800128c <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d98:	f7fd fa78 	bl	800128c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e045      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003daa:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x444>
 8003db6:	e03d      	b.n	8003e34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d107      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e038      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40007000 	.word	0x40007000
 8003dcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dd0:	4b1b      	ldr	r3, [pc, #108]	; (8003e40 <HAL_RCC_OscConfig+0x4ec>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d028      	beq.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d121      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d11a      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e00:	4013      	ands	r3, r2
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d111      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d107      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40023800 	.word	0x40023800

08003e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0cc      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e58:	4b68      	ldr	r3, [pc, #416]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d90c      	bls.n	8003e80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b65      	ldr	r3, [pc, #404]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6e:	4b63      	ldr	r3, [pc, #396]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e0b8      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d020      	beq.n	8003ece <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e98:	4b59      	ldr	r3, [pc, #356]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4a58      	ldr	r2, [pc, #352]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ea2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eb0:	4b53      	ldr	r3, [pc, #332]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	4a52      	ldr	r2, [pc, #328]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003eba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ebc:	4b50      	ldr	r3, [pc, #320]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	494d      	ldr	r1, [pc, #308]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d044      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d107      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee2:	4b47      	ldr	r3, [pc, #284]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d119      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e07f      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d107      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f02:	4b3f      	ldr	r3, [pc, #252]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e06f      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f12:	4b3b      	ldr	r3, [pc, #236]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e067      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f22:	4b37      	ldr	r3, [pc, #220]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f023 0203 	bic.w	r2, r3, #3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4934      	ldr	r1, [pc, #208]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f34:	f7fd f9aa 	bl	800128c <HAL_GetTick>
 8003f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3a:	e00a      	b.n	8003f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f3c:	f7fd f9a6 	bl	800128c <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e04f      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f52:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 020c 	and.w	r2, r3, #12
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d1eb      	bne.n	8003f3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f64:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d20c      	bcs.n	8003f8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f72:	4b22      	ldr	r3, [pc, #136]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7a:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d001      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e032      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f98:	4b19      	ldr	r3, [pc, #100]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4916      	ldr	r1, [pc, #88]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fb6:	4b12      	ldr	r3, [pc, #72]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	490e      	ldr	r1, [pc, #56]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fca:	f000 f821 	bl	8004010 <HAL_RCC_GetSysClockFreq>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	490a      	ldr	r1, [pc, #40]	; (8004004 <HAL_RCC_ClockConfig+0x1c0>)
 8003fdc:	5ccb      	ldrb	r3, [r1, r3]
 8003fde:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe2:	4a09      	ldr	r2, [pc, #36]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fe6:	4b09      	ldr	r3, [pc, #36]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd f90a 	bl	8001204 <HAL_InitTick>

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40023c00 	.word	0x40023c00
 8004000:	40023800 	.word	0x40023800
 8004004:	0800a148 	.word	0x0800a148
 8004008:	20000000 	.word	0x20000000
 800400c:	20000004 	.word	0x20000004

08004010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004014:	b094      	sub	sp, #80	; 0x50
 8004016:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	647b      	str	r3, [r7, #68]	; 0x44
 800401c:	2300      	movs	r3, #0
 800401e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004020:	2300      	movs	r3, #0
 8004022:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004028:	4b79      	ldr	r3, [pc, #484]	; (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 030c 	and.w	r3, r3, #12
 8004030:	2b08      	cmp	r3, #8
 8004032:	d00d      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0x40>
 8004034:	2b08      	cmp	r3, #8
 8004036:	f200 80e1 	bhi.w	80041fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <HAL_RCC_GetSysClockFreq+0x34>
 800403e:	2b04      	cmp	r3, #4
 8004040:	d003      	beq.n	800404a <HAL_RCC_GetSysClockFreq+0x3a>
 8004042:	e0db      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004044:	4b73      	ldr	r3, [pc, #460]	; (8004214 <HAL_RCC_GetSysClockFreq+0x204>)
 8004046:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004048:	e0db      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800404a:	4b72      	ldr	r3, [pc, #456]	; (8004214 <HAL_RCC_GetSysClockFreq+0x204>)
 800404c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800404e:	e0d8      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004050:	4b6f      	ldr	r3, [pc, #444]	; (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004058:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800405a:	4b6d      	ldr	r3, [pc, #436]	; (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d063      	beq.n	800412e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004066:	4b6a      	ldr	r3, [pc, #424]	; (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	099b      	lsrs	r3, r3, #6
 800406c:	2200      	movs	r2, #0
 800406e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004070:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004078:	633b      	str	r3, [r7, #48]	; 0x30
 800407a:	2300      	movs	r3, #0
 800407c:	637b      	str	r3, [r7, #52]	; 0x34
 800407e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004082:	4622      	mov	r2, r4
 8004084:	462b      	mov	r3, r5
 8004086:	f04f 0000 	mov.w	r0, #0
 800408a:	f04f 0100 	mov.w	r1, #0
 800408e:	0159      	lsls	r1, r3, #5
 8004090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004094:	0150      	lsls	r0, r2, #5
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4621      	mov	r1, r4
 800409c:	1a51      	subs	r1, r2, r1
 800409e:	6139      	str	r1, [r7, #16]
 80040a0:	4629      	mov	r1, r5
 80040a2:	eb63 0301 	sbc.w	r3, r3, r1
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040b4:	4659      	mov	r1, fp
 80040b6:	018b      	lsls	r3, r1, #6
 80040b8:	4651      	mov	r1, sl
 80040ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040be:	4651      	mov	r1, sl
 80040c0:	018a      	lsls	r2, r1, #6
 80040c2:	4651      	mov	r1, sl
 80040c4:	ebb2 0801 	subs.w	r8, r2, r1
 80040c8:	4659      	mov	r1, fp
 80040ca:	eb63 0901 	sbc.w	r9, r3, r1
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040e2:	4690      	mov	r8, r2
 80040e4:	4699      	mov	r9, r3
 80040e6:	4623      	mov	r3, r4
 80040e8:	eb18 0303 	adds.w	r3, r8, r3
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	462b      	mov	r3, r5
 80040f0:	eb49 0303 	adc.w	r3, r9, r3
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004102:	4629      	mov	r1, r5
 8004104:	028b      	lsls	r3, r1, #10
 8004106:	4621      	mov	r1, r4
 8004108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800410c:	4621      	mov	r1, r4
 800410e:	028a      	lsls	r2, r1, #10
 8004110:	4610      	mov	r0, r2
 8004112:	4619      	mov	r1, r3
 8004114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004116:	2200      	movs	r2, #0
 8004118:	62bb      	str	r3, [r7, #40]	; 0x28
 800411a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800411c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004120:	f7fc f8a6 	bl	8000270 <__aeabi_uldivmod>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4613      	mov	r3, r2
 800412a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800412c:	e058      	b.n	80041e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800412e:	4b38      	ldr	r3, [pc, #224]	; (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	099b      	lsrs	r3, r3, #6
 8004134:	2200      	movs	r2, #0
 8004136:	4618      	mov	r0, r3
 8004138:	4611      	mov	r1, r2
 800413a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800413e:	623b      	str	r3, [r7, #32]
 8004140:	2300      	movs	r3, #0
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
 8004144:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004148:	4642      	mov	r2, r8
 800414a:	464b      	mov	r3, r9
 800414c:	f04f 0000 	mov.w	r0, #0
 8004150:	f04f 0100 	mov.w	r1, #0
 8004154:	0159      	lsls	r1, r3, #5
 8004156:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800415a:	0150      	lsls	r0, r2, #5
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4641      	mov	r1, r8
 8004162:	ebb2 0a01 	subs.w	sl, r2, r1
 8004166:	4649      	mov	r1, r9
 8004168:	eb63 0b01 	sbc.w	fp, r3, r1
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	f04f 0300 	mov.w	r3, #0
 8004174:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004178:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800417c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004180:	ebb2 040a 	subs.w	r4, r2, sl
 8004184:	eb63 050b 	sbc.w	r5, r3, fp
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	00eb      	lsls	r3, r5, #3
 8004192:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004196:	00e2      	lsls	r2, r4, #3
 8004198:	4614      	mov	r4, r2
 800419a:	461d      	mov	r5, r3
 800419c:	4643      	mov	r3, r8
 800419e:	18e3      	adds	r3, r4, r3
 80041a0:	603b      	str	r3, [r7, #0]
 80041a2:	464b      	mov	r3, r9
 80041a4:	eb45 0303 	adc.w	r3, r5, r3
 80041a8:	607b      	str	r3, [r7, #4]
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041b6:	4629      	mov	r1, r5
 80041b8:	028b      	lsls	r3, r1, #10
 80041ba:	4621      	mov	r1, r4
 80041bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041c0:	4621      	mov	r1, r4
 80041c2:	028a      	lsls	r2, r1, #10
 80041c4:	4610      	mov	r0, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ca:	2200      	movs	r2, #0
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	61fa      	str	r2, [r7, #28]
 80041d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041d4:	f7fc f84c 	bl	8000270 <__aeabi_uldivmod>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4613      	mov	r3, r2
 80041de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041e0:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	0c1b      	lsrs	r3, r3, #16
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	3301      	adds	r3, #1
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80041f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041fa:	e002      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041fc:	4b05      	ldr	r3, [pc, #20]	; (8004214 <HAL_RCC_GetSysClockFreq+0x204>)
 80041fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004204:	4618      	mov	r0, r3
 8004206:	3750      	adds	r7, #80	; 0x50
 8004208:	46bd      	mov	sp, r7
 800420a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800420e:	bf00      	nop
 8004210:	40023800 	.word	0x40023800
 8004214:	00f42400 	.word	0x00f42400

08004218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800421c:	4b03      	ldr	r3, [pc, #12]	; (800422c <HAL_RCC_GetHCLKFreq+0x14>)
 800421e:	681b      	ldr	r3, [r3, #0]
}
 8004220:	4618      	mov	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	20000000 	.word	0x20000000

08004230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004234:	f7ff fff0 	bl	8004218 <HAL_RCC_GetHCLKFreq>
 8004238:	4602      	mov	r2, r0
 800423a:	4b05      	ldr	r3, [pc, #20]	; (8004250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	0a9b      	lsrs	r3, r3, #10
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	4903      	ldr	r1, [pc, #12]	; (8004254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004246:	5ccb      	ldrb	r3, [r1, r3]
 8004248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800424c:	4618      	mov	r0, r3
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40023800 	.word	0x40023800
 8004254:	0800a158 	.word	0x0800a158

08004258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800425c:	f7ff ffdc 	bl	8004218 <HAL_RCC_GetHCLKFreq>
 8004260:	4602      	mov	r2, r0
 8004262:	4b05      	ldr	r3, [pc, #20]	; (8004278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	0b5b      	lsrs	r3, r3, #13
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	4903      	ldr	r1, [pc, #12]	; (800427c <HAL_RCC_GetPCLK2Freq+0x24>)
 800426e:	5ccb      	ldrb	r3, [r1, r3]
 8004270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004274:	4618      	mov	r0, r3
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40023800 	.word	0x40023800
 800427c:	0800a158 	.word	0x0800a158

08004280 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e07b      	b.n	800438a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	2b00      	cmp	r3, #0
 8004298:	d108      	bne.n	80042ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042a2:	d009      	beq.n	80042b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	61da      	str	r2, [r3, #28]
 80042aa:	e005      	b.n	80042b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fc fd30 	bl	8000d38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433c:	ea42 0103 	orr.w	r1, r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	0c1b      	lsrs	r3, r3, #16
 8004356:	f003 0104 	and.w	r1, r3, #4
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	f003 0210 	and.w	r2, r3, #16
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004378:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e041      	b.n	8004428 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d106      	bne.n	80043be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7fc fd25 	bl	8000e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2202      	movs	r2, #2
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3304      	adds	r3, #4
 80043ce:	4619      	mov	r1, r3
 80043d0:	4610      	mov	r0, r2
 80043d2:	f000 fa11 	bl	80047f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e041      	b.n	80044c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f839 	bl	80044ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3304      	adds	r3, #4
 800446c:	4619      	mov	r1, r3
 800446e:	4610      	mov	r0, r2
 8004470:	f000 f9c2 	bl	80047f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
	...

080044e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044fe:	2302      	movs	r3, #2
 8004500:	e0ae      	b.n	8004660 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b0c      	cmp	r3, #12
 800450e:	f200 809f 	bhi.w	8004650 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004512:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004518:	0800454d 	.word	0x0800454d
 800451c:	08004651 	.word	0x08004651
 8004520:	08004651 	.word	0x08004651
 8004524:	08004651 	.word	0x08004651
 8004528:	0800458d 	.word	0x0800458d
 800452c:	08004651 	.word	0x08004651
 8004530:	08004651 	.word	0x08004651
 8004534:	08004651 	.word	0x08004651
 8004538:	080045cf 	.word	0x080045cf
 800453c:	08004651 	.word	0x08004651
 8004540:	08004651 	.word	0x08004651
 8004544:	08004651 	.word	0x08004651
 8004548:	0800460f 	.word	0x0800460f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68b9      	ldr	r1, [r7, #8]
 8004552:	4618      	mov	r0, r3
 8004554:	f000 f9f0 	bl	8004938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0208 	orr.w	r2, r2, #8
 8004566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0204 	bic.w	r2, r2, #4
 8004576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6999      	ldr	r1, [r3, #24]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	619a      	str	r2, [r3, #24]
      break;
 800458a:	e064      	b.n	8004656 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fa40 	bl	8004a18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699a      	ldr	r2, [r3, #24]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6999      	ldr	r1, [r3, #24]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	021a      	lsls	r2, r3, #8
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	619a      	str	r2, [r3, #24]
      break;
 80045cc:	e043      	b.n	8004656 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68b9      	ldr	r1, [r7, #8]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fa95 	bl	8004b04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	69da      	ldr	r2, [r3, #28]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0208 	orr.w	r2, r2, #8
 80045e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69da      	ldr	r2, [r3, #28]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0204 	bic.w	r2, r2, #4
 80045f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69d9      	ldr	r1, [r3, #28]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	61da      	str	r2, [r3, #28]
      break;
 800460c:	e023      	b.n	8004656 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68b9      	ldr	r1, [r7, #8]
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fae9 	bl	8004bec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69da      	ldr	r2, [r3, #28]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69da      	ldr	r2, [r3, #28]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69d9      	ldr	r1, [r3, #28]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	021a      	lsls	r2, r3, #8
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	61da      	str	r2, [r3, #28]
      break;
 800464e:	e002      	b.n	8004656 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	75fb      	strb	r3, [r7, #23]
      break;
 8004654:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800465e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_TIM_ConfigClockSource+0x1c>
 8004680:	2302      	movs	r3, #2
 8004682:	e0b4      	b.n	80047ee <HAL_TIM_ConfigClockSource+0x186>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046bc:	d03e      	beq.n	800473c <HAL_TIM_ConfigClockSource+0xd4>
 80046be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c2:	f200 8087 	bhi.w	80047d4 <HAL_TIM_ConfigClockSource+0x16c>
 80046c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ca:	f000 8086 	beq.w	80047da <HAL_TIM_ConfigClockSource+0x172>
 80046ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d2:	d87f      	bhi.n	80047d4 <HAL_TIM_ConfigClockSource+0x16c>
 80046d4:	2b70      	cmp	r3, #112	; 0x70
 80046d6:	d01a      	beq.n	800470e <HAL_TIM_ConfigClockSource+0xa6>
 80046d8:	2b70      	cmp	r3, #112	; 0x70
 80046da:	d87b      	bhi.n	80047d4 <HAL_TIM_ConfigClockSource+0x16c>
 80046dc:	2b60      	cmp	r3, #96	; 0x60
 80046de:	d050      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x11a>
 80046e0:	2b60      	cmp	r3, #96	; 0x60
 80046e2:	d877      	bhi.n	80047d4 <HAL_TIM_ConfigClockSource+0x16c>
 80046e4:	2b50      	cmp	r3, #80	; 0x50
 80046e6:	d03c      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0xfa>
 80046e8:	2b50      	cmp	r3, #80	; 0x50
 80046ea:	d873      	bhi.n	80047d4 <HAL_TIM_ConfigClockSource+0x16c>
 80046ec:	2b40      	cmp	r3, #64	; 0x40
 80046ee:	d058      	beq.n	80047a2 <HAL_TIM_ConfigClockSource+0x13a>
 80046f0:	2b40      	cmp	r3, #64	; 0x40
 80046f2:	d86f      	bhi.n	80047d4 <HAL_TIM_ConfigClockSource+0x16c>
 80046f4:	2b30      	cmp	r3, #48	; 0x30
 80046f6:	d064      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x15a>
 80046f8:	2b30      	cmp	r3, #48	; 0x30
 80046fa:	d86b      	bhi.n	80047d4 <HAL_TIM_ConfigClockSource+0x16c>
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d060      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004700:	2b20      	cmp	r3, #32
 8004702:	d867      	bhi.n	80047d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004704:	2b00      	cmp	r3, #0
 8004706:	d05c      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004708:	2b10      	cmp	r3, #16
 800470a:	d05a      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x15a>
 800470c:	e062      	b.n	80047d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	6899      	ldr	r1, [r3, #8]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f000 fb35 	bl	8004d8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004730:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	609a      	str	r2, [r3, #8]
      break;
 800473a:	e04f      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	6899      	ldr	r1, [r3, #8]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f000 fb1e 	bl	8004d8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800475e:	609a      	str	r2, [r3, #8]
      break;
 8004760:	e03c      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6818      	ldr	r0, [r3, #0]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	6859      	ldr	r1, [r3, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	461a      	mov	r2, r3
 8004770:	f000 fa92 	bl	8004c98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2150      	movs	r1, #80	; 0x50
 800477a:	4618      	mov	r0, r3
 800477c:	f000 faeb 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 8004780:	e02c      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6859      	ldr	r1, [r3, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	461a      	mov	r2, r3
 8004790:	f000 fab1 	bl	8004cf6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2160      	movs	r1, #96	; 0x60
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fadb 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 80047a0:	e01c      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	6859      	ldr	r1, [r3, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	461a      	mov	r2, r3
 80047b0:	f000 fa72 	bl	8004c98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2140      	movs	r1, #64	; 0x40
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 facb 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 80047c0:	e00c      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4619      	mov	r1, r3
 80047cc:	4610      	mov	r0, r2
 80047ce:	f000 fac2 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 80047d2:	e003      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]
      break;
 80047d8:	e000      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a40      	ldr	r2, [pc, #256]	; (800490c <TIM_Base_SetConfig+0x114>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d013      	beq.n	8004838 <TIM_Base_SetConfig+0x40>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004816:	d00f      	beq.n	8004838 <TIM_Base_SetConfig+0x40>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a3d      	ldr	r2, [pc, #244]	; (8004910 <TIM_Base_SetConfig+0x118>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00b      	beq.n	8004838 <TIM_Base_SetConfig+0x40>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a3c      	ldr	r2, [pc, #240]	; (8004914 <TIM_Base_SetConfig+0x11c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d007      	beq.n	8004838 <TIM_Base_SetConfig+0x40>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a3b      	ldr	r2, [pc, #236]	; (8004918 <TIM_Base_SetConfig+0x120>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d003      	beq.n	8004838 <TIM_Base_SetConfig+0x40>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a3a      	ldr	r2, [pc, #232]	; (800491c <TIM_Base_SetConfig+0x124>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d108      	bne.n	800484a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a2f      	ldr	r2, [pc, #188]	; (800490c <TIM_Base_SetConfig+0x114>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d02b      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004858:	d027      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2c      	ldr	r2, [pc, #176]	; (8004910 <TIM_Base_SetConfig+0x118>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d023      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a2b      	ldr	r2, [pc, #172]	; (8004914 <TIM_Base_SetConfig+0x11c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d01f      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a2a      	ldr	r2, [pc, #168]	; (8004918 <TIM_Base_SetConfig+0x120>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d01b      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a29      	ldr	r2, [pc, #164]	; (800491c <TIM_Base_SetConfig+0x124>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d017      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a28      	ldr	r2, [pc, #160]	; (8004920 <TIM_Base_SetConfig+0x128>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d013      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a27      	ldr	r2, [pc, #156]	; (8004924 <TIM_Base_SetConfig+0x12c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00f      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a26      	ldr	r2, [pc, #152]	; (8004928 <TIM_Base_SetConfig+0x130>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00b      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a25      	ldr	r2, [pc, #148]	; (800492c <TIM_Base_SetConfig+0x134>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d007      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a24      	ldr	r2, [pc, #144]	; (8004930 <TIM_Base_SetConfig+0x138>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d003      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a23      	ldr	r2, [pc, #140]	; (8004934 <TIM_Base_SetConfig+0x13c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d108      	bne.n	80048bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a0a      	ldr	r2, [pc, #40]	; (800490c <TIM_Base_SetConfig+0x114>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d003      	beq.n	80048f0 <TIM_Base_SetConfig+0xf8>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a0c      	ldr	r2, [pc, #48]	; (800491c <TIM_Base_SetConfig+0x124>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d103      	bne.n	80048f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	615a      	str	r2, [r3, #20]
}
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	40010000 	.word	0x40010000
 8004910:	40000400 	.word	0x40000400
 8004914:	40000800 	.word	0x40000800
 8004918:	40000c00 	.word	0x40000c00
 800491c:	40010400 	.word	0x40010400
 8004920:	40014000 	.word	0x40014000
 8004924:	40014400 	.word	0x40014400
 8004928:	40014800 	.word	0x40014800
 800492c:	40001800 	.word	0x40001800
 8004930:	40001c00 	.word	0x40001c00
 8004934:	40002000 	.word	0x40002000

08004938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	f023 0201 	bic.w	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0303 	bic.w	r3, r3, #3
 800496e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f023 0302 	bic.w	r3, r3, #2
 8004980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a20      	ldr	r2, [pc, #128]	; (8004a10 <TIM_OC1_SetConfig+0xd8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d003      	beq.n	800499c <TIM_OC1_SetConfig+0x64>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a1f      	ldr	r2, [pc, #124]	; (8004a14 <TIM_OC1_SetConfig+0xdc>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d10c      	bne.n	80049b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f023 0308 	bic.w	r3, r3, #8
 80049a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f023 0304 	bic.w	r3, r3, #4
 80049b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a15      	ldr	r2, [pc, #84]	; (8004a10 <TIM_OC1_SetConfig+0xd8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d003      	beq.n	80049c6 <TIM_OC1_SetConfig+0x8e>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a14      	ldr	r2, [pc, #80]	; (8004a14 <TIM_OC1_SetConfig+0xdc>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d111      	bne.n	80049ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	621a      	str	r2, [r3, #32]
}
 8004a04:	bf00      	nop
 8004a06:	371c      	adds	r7, #28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	40010000 	.word	0x40010000
 8004a14:	40010400 	.word	0x40010400

08004a18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	f023 0210 	bic.w	r2, r3, #16
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f023 0320 	bic.w	r3, r3, #32
 8004a62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a22      	ldr	r2, [pc, #136]	; (8004afc <TIM_OC2_SetConfig+0xe4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_OC2_SetConfig+0x68>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a21      	ldr	r2, [pc, #132]	; (8004b00 <TIM_OC2_SetConfig+0xe8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d10d      	bne.n	8004a9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a17      	ldr	r2, [pc, #92]	; (8004afc <TIM_OC2_SetConfig+0xe4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d003      	beq.n	8004aac <TIM_OC2_SetConfig+0x94>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a16      	ldr	r2, [pc, #88]	; (8004b00 <TIM_OC2_SetConfig+0xe8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d113      	bne.n	8004ad4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ab2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	621a      	str	r2, [r3, #32]
}
 8004aee:	bf00      	nop
 8004af0:	371c      	adds	r7, #28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40010000 	.word	0x40010000
 8004b00:	40010400 	.word	0x40010400

08004b04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0303 	bic.w	r3, r3, #3
 8004b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a21      	ldr	r2, [pc, #132]	; (8004be4 <TIM_OC3_SetConfig+0xe0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d003      	beq.n	8004b6a <TIM_OC3_SetConfig+0x66>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a20      	ldr	r2, [pc, #128]	; (8004be8 <TIM_OC3_SetConfig+0xe4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d10d      	bne.n	8004b86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a16      	ldr	r2, [pc, #88]	; (8004be4 <TIM_OC3_SetConfig+0xe0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d003      	beq.n	8004b96 <TIM_OC3_SetConfig+0x92>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a15      	ldr	r2, [pc, #84]	; (8004be8 <TIM_OC3_SetConfig+0xe4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d113      	bne.n	8004bbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	621a      	str	r2, [r3, #32]
}
 8004bd8:	bf00      	nop
 8004bda:	371c      	adds	r7, #28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	40010000 	.word	0x40010000
 8004be8:	40010400 	.word	0x40010400

08004bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	021b      	lsls	r3, r3, #8
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	031b      	lsls	r3, r3, #12
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a12      	ldr	r2, [pc, #72]	; (8004c90 <TIM_OC4_SetConfig+0xa4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d003      	beq.n	8004c54 <TIM_OC4_SetConfig+0x68>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a11      	ldr	r2, [pc, #68]	; (8004c94 <TIM_OC4_SetConfig+0xa8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d109      	bne.n	8004c68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	019b      	lsls	r3, r3, #6
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	621a      	str	r2, [r3, #32]
}
 8004c82:	bf00      	nop
 8004c84:	371c      	adds	r7, #28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40010400 	.word	0x40010400

08004c98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f023 0201 	bic.w	r2, r3, #1
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f023 030a 	bic.w	r3, r3, #10
 8004cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	621a      	str	r2, [r3, #32]
}
 8004cea:	bf00      	nop
 8004cec:	371c      	adds	r7, #28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b087      	sub	sp, #28
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	60f8      	str	r0, [r7, #12]
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	f023 0210 	bic.w	r2, r3, #16
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	031b      	lsls	r3, r3, #12
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	621a      	str	r2, [r3, #32]
}
 8004d4a:	bf00      	nop
 8004d4c:	371c      	adds	r7, #28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b085      	sub	sp, #20
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f043 0307 	orr.w	r3, r3, #7
 8004d78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	609a      	str	r2, [r3, #8]
}
 8004d80:	bf00      	nop
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004da6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	021a      	lsls	r2, r3, #8
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	609a      	str	r2, [r3, #8]
}
 8004dc0:	bf00      	nop
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e05a      	b.n	8004e9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a21      	ldr	r2, [pc, #132]	; (8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d022      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e30:	d01d      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a1d      	ldr	r2, [pc, #116]	; (8004eac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d018      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a1b      	ldr	r2, [pc, #108]	; (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1a      	ldr	r2, [pc, #104]	; (8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00e      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a18      	ldr	r2, [pc, #96]	; (8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d009      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a17      	ldr	r2, [pc, #92]	; (8004ebc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d004      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a15      	ldr	r2, [pc, #84]	; (8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d10c      	bne.n	8004e88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40010000 	.word	0x40010000
 8004eac:	40000400 	.word	0x40000400
 8004eb0:	40000800 	.word	0x40000800
 8004eb4:	40000c00 	.word	0x40000c00
 8004eb8:	40010400 	.word	0x40010400
 8004ebc:	40014000 	.word	0x40014000
 8004ec0:	40001800 	.word	0x40001800

08004ec4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e03d      	b.n	8004f5c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e03f      	b.n	8004ffa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fb fff4 	bl	8000f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2224      	movs	r2, #36	; 0x24
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004faa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f829 	bl	8005004 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	691a      	ldr	r2, [r3, #16]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695a      	ldr	r2, [r3, #20]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fe0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2220      	movs	r2, #32
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
	...

08005004 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005008:	b0c0      	sub	sp, #256	; 0x100
 800500a:	af00      	add	r7, sp, #0
 800500c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800501c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005020:	68d9      	ldr	r1, [r3, #12]
 8005022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	ea40 0301 	orr.w	r3, r0, r1
 800502c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800502e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	431a      	orrs	r2, r3
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	431a      	orrs	r2, r3
 8005044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800505c:	f021 010c 	bic.w	r1, r1, #12
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800506a:	430b      	orrs	r3, r1
 800506c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800506e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800507a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507e:	6999      	ldr	r1, [r3, #24]
 8005080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	ea40 0301 	orr.w	r3, r0, r1
 800508a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800508c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	4b8f      	ldr	r3, [pc, #572]	; (80052d0 <UART_SetConfig+0x2cc>)
 8005094:	429a      	cmp	r2, r3
 8005096:	d005      	beq.n	80050a4 <UART_SetConfig+0xa0>
 8005098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	4b8d      	ldr	r3, [pc, #564]	; (80052d4 <UART_SetConfig+0x2d0>)
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d104      	bne.n	80050ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050a4:	f7ff f8d8 	bl	8004258 <HAL_RCC_GetPCLK2Freq>
 80050a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050ac:	e003      	b.n	80050b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050ae:	f7ff f8bf 	bl	8004230 <HAL_RCC_GetPCLK1Freq>
 80050b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c0:	f040 810c 	bne.w	80052dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050c8:	2200      	movs	r2, #0
 80050ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050d6:	4622      	mov	r2, r4
 80050d8:	462b      	mov	r3, r5
 80050da:	1891      	adds	r1, r2, r2
 80050dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80050de:	415b      	adcs	r3, r3
 80050e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050e6:	4621      	mov	r1, r4
 80050e8:	eb12 0801 	adds.w	r8, r2, r1
 80050ec:	4629      	mov	r1, r5
 80050ee:	eb43 0901 	adc.w	r9, r3, r1
 80050f2:	f04f 0200 	mov.w	r2, #0
 80050f6:	f04f 0300 	mov.w	r3, #0
 80050fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005102:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005106:	4690      	mov	r8, r2
 8005108:	4699      	mov	r9, r3
 800510a:	4623      	mov	r3, r4
 800510c:	eb18 0303 	adds.w	r3, r8, r3
 8005110:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005114:	462b      	mov	r3, r5
 8005116:	eb49 0303 	adc.w	r3, r9, r3
 800511a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800511e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800512a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800512e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005132:	460b      	mov	r3, r1
 8005134:	18db      	adds	r3, r3, r3
 8005136:	653b      	str	r3, [r7, #80]	; 0x50
 8005138:	4613      	mov	r3, r2
 800513a:	eb42 0303 	adc.w	r3, r2, r3
 800513e:	657b      	str	r3, [r7, #84]	; 0x54
 8005140:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005144:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005148:	f7fb f892 	bl	8000270 <__aeabi_uldivmod>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4b61      	ldr	r3, [pc, #388]	; (80052d8 <UART_SetConfig+0x2d4>)
 8005152:	fba3 2302 	umull	r2, r3, r3, r2
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	011c      	lsls	r4, r3, #4
 800515a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800515e:	2200      	movs	r2, #0
 8005160:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005164:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005168:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800516c:	4642      	mov	r2, r8
 800516e:	464b      	mov	r3, r9
 8005170:	1891      	adds	r1, r2, r2
 8005172:	64b9      	str	r1, [r7, #72]	; 0x48
 8005174:	415b      	adcs	r3, r3
 8005176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005178:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800517c:	4641      	mov	r1, r8
 800517e:	eb12 0a01 	adds.w	sl, r2, r1
 8005182:	4649      	mov	r1, r9
 8005184:	eb43 0b01 	adc.w	fp, r3, r1
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005194:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005198:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800519c:	4692      	mov	sl, r2
 800519e:	469b      	mov	fp, r3
 80051a0:	4643      	mov	r3, r8
 80051a2:	eb1a 0303 	adds.w	r3, sl, r3
 80051a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051aa:	464b      	mov	r3, r9
 80051ac:	eb4b 0303 	adc.w	r3, fp, r3
 80051b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051c8:	460b      	mov	r3, r1
 80051ca:	18db      	adds	r3, r3, r3
 80051cc:	643b      	str	r3, [r7, #64]	; 0x40
 80051ce:	4613      	mov	r3, r2
 80051d0:	eb42 0303 	adc.w	r3, r2, r3
 80051d4:	647b      	str	r3, [r7, #68]	; 0x44
 80051d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051de:	f7fb f847 	bl	8000270 <__aeabi_uldivmod>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4611      	mov	r1, r2
 80051e8:	4b3b      	ldr	r3, [pc, #236]	; (80052d8 <UART_SetConfig+0x2d4>)
 80051ea:	fba3 2301 	umull	r2, r3, r3, r1
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	2264      	movs	r2, #100	; 0x64
 80051f2:	fb02 f303 	mul.w	r3, r2, r3
 80051f6:	1acb      	subs	r3, r1, r3
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051fe:	4b36      	ldr	r3, [pc, #216]	; (80052d8 <UART_SetConfig+0x2d4>)
 8005200:	fba3 2302 	umull	r2, r3, r3, r2
 8005204:	095b      	lsrs	r3, r3, #5
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800520c:	441c      	add	r4, r3
 800520e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005212:	2200      	movs	r2, #0
 8005214:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005218:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800521c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005220:	4642      	mov	r2, r8
 8005222:	464b      	mov	r3, r9
 8005224:	1891      	adds	r1, r2, r2
 8005226:	63b9      	str	r1, [r7, #56]	; 0x38
 8005228:	415b      	adcs	r3, r3
 800522a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800522c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005230:	4641      	mov	r1, r8
 8005232:	1851      	adds	r1, r2, r1
 8005234:	6339      	str	r1, [r7, #48]	; 0x30
 8005236:	4649      	mov	r1, r9
 8005238:	414b      	adcs	r3, r1
 800523a:	637b      	str	r3, [r7, #52]	; 0x34
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005248:	4659      	mov	r1, fp
 800524a:	00cb      	lsls	r3, r1, #3
 800524c:	4651      	mov	r1, sl
 800524e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005252:	4651      	mov	r1, sl
 8005254:	00ca      	lsls	r2, r1, #3
 8005256:	4610      	mov	r0, r2
 8005258:	4619      	mov	r1, r3
 800525a:	4603      	mov	r3, r0
 800525c:	4642      	mov	r2, r8
 800525e:	189b      	adds	r3, r3, r2
 8005260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005264:	464b      	mov	r3, r9
 8005266:	460a      	mov	r2, r1
 8005268:	eb42 0303 	adc.w	r3, r2, r3
 800526c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800527c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005280:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005284:	460b      	mov	r3, r1
 8005286:	18db      	adds	r3, r3, r3
 8005288:	62bb      	str	r3, [r7, #40]	; 0x28
 800528a:	4613      	mov	r3, r2
 800528c:	eb42 0303 	adc.w	r3, r2, r3
 8005290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005292:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005296:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800529a:	f7fa ffe9 	bl	8000270 <__aeabi_uldivmod>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4b0d      	ldr	r3, [pc, #52]	; (80052d8 <UART_SetConfig+0x2d4>)
 80052a4:	fba3 1302 	umull	r1, r3, r3, r2
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	2164      	movs	r1, #100	; 0x64
 80052ac:	fb01 f303 	mul.w	r3, r1, r3
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	3332      	adds	r3, #50	; 0x32
 80052b6:	4a08      	ldr	r2, [pc, #32]	; (80052d8 <UART_SetConfig+0x2d4>)
 80052b8:	fba2 2303 	umull	r2, r3, r2, r3
 80052bc:	095b      	lsrs	r3, r3, #5
 80052be:	f003 0207 	and.w	r2, r3, #7
 80052c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4422      	add	r2, r4
 80052ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052cc:	e105      	b.n	80054da <UART_SetConfig+0x4d6>
 80052ce:	bf00      	nop
 80052d0:	40011000 	.word	0x40011000
 80052d4:	40011400 	.word	0x40011400
 80052d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052e0:	2200      	movs	r2, #0
 80052e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052ee:	4642      	mov	r2, r8
 80052f0:	464b      	mov	r3, r9
 80052f2:	1891      	adds	r1, r2, r2
 80052f4:	6239      	str	r1, [r7, #32]
 80052f6:	415b      	adcs	r3, r3
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
 80052fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052fe:	4641      	mov	r1, r8
 8005300:	1854      	adds	r4, r2, r1
 8005302:	4649      	mov	r1, r9
 8005304:	eb43 0501 	adc.w	r5, r3, r1
 8005308:	f04f 0200 	mov.w	r2, #0
 800530c:	f04f 0300 	mov.w	r3, #0
 8005310:	00eb      	lsls	r3, r5, #3
 8005312:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005316:	00e2      	lsls	r2, r4, #3
 8005318:	4614      	mov	r4, r2
 800531a:	461d      	mov	r5, r3
 800531c:	4643      	mov	r3, r8
 800531e:	18e3      	adds	r3, r4, r3
 8005320:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005324:	464b      	mov	r3, r9
 8005326:	eb45 0303 	adc.w	r3, r5, r3
 800532a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800532e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800533a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800534a:	4629      	mov	r1, r5
 800534c:	008b      	lsls	r3, r1, #2
 800534e:	4621      	mov	r1, r4
 8005350:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005354:	4621      	mov	r1, r4
 8005356:	008a      	lsls	r2, r1, #2
 8005358:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800535c:	f7fa ff88 	bl	8000270 <__aeabi_uldivmod>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4b60      	ldr	r3, [pc, #384]	; (80054e8 <UART_SetConfig+0x4e4>)
 8005366:	fba3 2302 	umull	r2, r3, r3, r2
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	011c      	lsls	r4, r3, #4
 800536e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005372:	2200      	movs	r2, #0
 8005374:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005378:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800537c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005380:	4642      	mov	r2, r8
 8005382:	464b      	mov	r3, r9
 8005384:	1891      	adds	r1, r2, r2
 8005386:	61b9      	str	r1, [r7, #24]
 8005388:	415b      	adcs	r3, r3
 800538a:	61fb      	str	r3, [r7, #28]
 800538c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005390:	4641      	mov	r1, r8
 8005392:	1851      	adds	r1, r2, r1
 8005394:	6139      	str	r1, [r7, #16]
 8005396:	4649      	mov	r1, r9
 8005398:	414b      	adcs	r3, r1
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053a8:	4659      	mov	r1, fp
 80053aa:	00cb      	lsls	r3, r1, #3
 80053ac:	4651      	mov	r1, sl
 80053ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053b2:	4651      	mov	r1, sl
 80053b4:	00ca      	lsls	r2, r1, #3
 80053b6:	4610      	mov	r0, r2
 80053b8:	4619      	mov	r1, r3
 80053ba:	4603      	mov	r3, r0
 80053bc:	4642      	mov	r2, r8
 80053be:	189b      	adds	r3, r3, r2
 80053c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053c4:	464b      	mov	r3, r9
 80053c6:	460a      	mov	r2, r1
 80053c8:	eb42 0303 	adc.w	r3, r2, r3
 80053cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80053da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053e8:	4649      	mov	r1, r9
 80053ea:	008b      	lsls	r3, r1, #2
 80053ec:	4641      	mov	r1, r8
 80053ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053f2:	4641      	mov	r1, r8
 80053f4:	008a      	lsls	r2, r1, #2
 80053f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053fa:	f7fa ff39 	bl	8000270 <__aeabi_uldivmod>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	4b39      	ldr	r3, [pc, #228]	; (80054e8 <UART_SetConfig+0x4e4>)
 8005404:	fba3 1302 	umull	r1, r3, r3, r2
 8005408:	095b      	lsrs	r3, r3, #5
 800540a:	2164      	movs	r1, #100	; 0x64
 800540c:	fb01 f303 	mul.w	r3, r1, r3
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	3332      	adds	r3, #50	; 0x32
 8005416:	4a34      	ldr	r2, [pc, #208]	; (80054e8 <UART_SetConfig+0x4e4>)
 8005418:	fba2 2303 	umull	r2, r3, r2, r3
 800541c:	095b      	lsrs	r3, r3, #5
 800541e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005422:	441c      	add	r4, r3
 8005424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005428:	2200      	movs	r2, #0
 800542a:	673b      	str	r3, [r7, #112]	; 0x70
 800542c:	677a      	str	r2, [r7, #116]	; 0x74
 800542e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005432:	4642      	mov	r2, r8
 8005434:	464b      	mov	r3, r9
 8005436:	1891      	adds	r1, r2, r2
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	415b      	adcs	r3, r3
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005442:	4641      	mov	r1, r8
 8005444:	1851      	adds	r1, r2, r1
 8005446:	6039      	str	r1, [r7, #0]
 8005448:	4649      	mov	r1, r9
 800544a:	414b      	adcs	r3, r1
 800544c:	607b      	str	r3, [r7, #4]
 800544e:	f04f 0200 	mov.w	r2, #0
 8005452:	f04f 0300 	mov.w	r3, #0
 8005456:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800545a:	4659      	mov	r1, fp
 800545c:	00cb      	lsls	r3, r1, #3
 800545e:	4651      	mov	r1, sl
 8005460:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005464:	4651      	mov	r1, sl
 8005466:	00ca      	lsls	r2, r1, #3
 8005468:	4610      	mov	r0, r2
 800546a:	4619      	mov	r1, r3
 800546c:	4603      	mov	r3, r0
 800546e:	4642      	mov	r2, r8
 8005470:	189b      	adds	r3, r3, r2
 8005472:	66bb      	str	r3, [r7, #104]	; 0x68
 8005474:	464b      	mov	r3, r9
 8005476:	460a      	mov	r2, r1
 8005478:	eb42 0303 	adc.w	r3, r2, r3
 800547c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800547e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	663b      	str	r3, [r7, #96]	; 0x60
 8005488:	667a      	str	r2, [r7, #100]	; 0x64
 800548a:	f04f 0200 	mov.w	r2, #0
 800548e:	f04f 0300 	mov.w	r3, #0
 8005492:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005496:	4649      	mov	r1, r9
 8005498:	008b      	lsls	r3, r1, #2
 800549a:	4641      	mov	r1, r8
 800549c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054a0:	4641      	mov	r1, r8
 80054a2:	008a      	lsls	r2, r1, #2
 80054a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054a8:	f7fa fee2 	bl	8000270 <__aeabi_uldivmod>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4b0d      	ldr	r3, [pc, #52]	; (80054e8 <UART_SetConfig+0x4e4>)
 80054b2:	fba3 1302 	umull	r1, r3, r3, r2
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	2164      	movs	r1, #100	; 0x64
 80054ba:	fb01 f303 	mul.w	r3, r1, r3
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	3332      	adds	r3, #50	; 0x32
 80054c4:	4a08      	ldr	r2, [pc, #32]	; (80054e8 <UART_SetConfig+0x4e4>)
 80054c6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ca:	095b      	lsrs	r3, r3, #5
 80054cc:	f003 020f 	and.w	r2, r3, #15
 80054d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4422      	add	r2, r4
 80054d8:	609a      	str	r2, [r3, #8]
}
 80054da:	bf00      	nop
 80054dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054e0:	46bd      	mov	sp, r7
 80054e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054e6:	bf00      	nop
 80054e8:	51eb851f 	.word	0x51eb851f

080054ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054ec:	b084      	sub	sp, #16
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	f107 001c 	add.w	r0, r7, #28
 80054fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005500:	2b01      	cmp	r3, #1
 8005502:	d122      	bne.n	800554a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005508:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800552c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800552e:	2b01      	cmp	r3, #1
 8005530:	d105      	bne.n	800553e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f001 fbee 	bl	8006d20 <USB_CoreReset>
 8005544:	4603      	mov	r3, r0
 8005546:	73fb      	strb	r3, [r7, #15]
 8005548:	e01a      	b.n	8005580 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f001 fbe2 	bl	8006d20 <USB_CoreReset>
 800555c:	4603      	mov	r3, r0
 800555e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	639a      	str	r2, [r3, #56]	; 0x38
 8005572:	e005      	b.n	8005580 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005578:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005582:	2b01      	cmp	r3, #1
 8005584:	d10b      	bne.n	800559e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f043 0206 	orr.w	r2, r3, #6
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f043 0220 	orr.w	r2, r3, #32
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800559e:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055aa:	b004      	add	sp, #16
 80055ac:	4770      	bx	lr
	...

080055b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	4613      	mov	r3, r2
 80055bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80055be:	79fb      	ldrb	r3, [r7, #7]
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d165      	bne.n	8005690 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4a41      	ldr	r2, [pc, #260]	; (80056cc <USB_SetTurnaroundTime+0x11c>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d906      	bls.n	80055da <USB_SetTurnaroundTime+0x2a>
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4a40      	ldr	r2, [pc, #256]	; (80056d0 <USB_SetTurnaroundTime+0x120>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d202      	bcs.n	80055da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80055d4:	230f      	movs	r3, #15
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	e062      	b.n	80056a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	4a3c      	ldr	r2, [pc, #240]	; (80056d0 <USB_SetTurnaroundTime+0x120>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d306      	bcc.n	80055f0 <USB_SetTurnaroundTime+0x40>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	4a3b      	ldr	r2, [pc, #236]	; (80056d4 <USB_SetTurnaroundTime+0x124>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d202      	bcs.n	80055f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80055ea:	230e      	movs	r3, #14
 80055ec:	617b      	str	r3, [r7, #20]
 80055ee:	e057      	b.n	80056a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	4a38      	ldr	r2, [pc, #224]	; (80056d4 <USB_SetTurnaroundTime+0x124>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d306      	bcc.n	8005606 <USB_SetTurnaroundTime+0x56>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4a37      	ldr	r2, [pc, #220]	; (80056d8 <USB_SetTurnaroundTime+0x128>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d202      	bcs.n	8005606 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005600:	230d      	movs	r3, #13
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	e04c      	b.n	80056a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	4a33      	ldr	r2, [pc, #204]	; (80056d8 <USB_SetTurnaroundTime+0x128>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d306      	bcc.n	800561c <USB_SetTurnaroundTime+0x6c>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	4a32      	ldr	r2, [pc, #200]	; (80056dc <USB_SetTurnaroundTime+0x12c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d802      	bhi.n	800561c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005616:	230c      	movs	r3, #12
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	e041      	b.n	80056a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4a2f      	ldr	r2, [pc, #188]	; (80056dc <USB_SetTurnaroundTime+0x12c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d906      	bls.n	8005632 <USB_SetTurnaroundTime+0x82>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	4a2e      	ldr	r2, [pc, #184]	; (80056e0 <USB_SetTurnaroundTime+0x130>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d802      	bhi.n	8005632 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800562c:	230b      	movs	r3, #11
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	e036      	b.n	80056a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	4a2a      	ldr	r2, [pc, #168]	; (80056e0 <USB_SetTurnaroundTime+0x130>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d906      	bls.n	8005648 <USB_SetTurnaroundTime+0x98>
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	4a29      	ldr	r2, [pc, #164]	; (80056e4 <USB_SetTurnaroundTime+0x134>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d802      	bhi.n	8005648 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005642:	230a      	movs	r3, #10
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	e02b      	b.n	80056a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	4a26      	ldr	r2, [pc, #152]	; (80056e4 <USB_SetTurnaroundTime+0x134>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d906      	bls.n	800565e <USB_SetTurnaroundTime+0xae>
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	4a25      	ldr	r2, [pc, #148]	; (80056e8 <USB_SetTurnaroundTime+0x138>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d202      	bcs.n	800565e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005658:	2309      	movs	r3, #9
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	e020      	b.n	80056a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	4a21      	ldr	r2, [pc, #132]	; (80056e8 <USB_SetTurnaroundTime+0x138>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d306      	bcc.n	8005674 <USB_SetTurnaroundTime+0xc4>
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	4a20      	ldr	r2, [pc, #128]	; (80056ec <USB_SetTurnaroundTime+0x13c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d802      	bhi.n	8005674 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800566e:	2308      	movs	r3, #8
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	e015      	b.n	80056a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4a1d      	ldr	r2, [pc, #116]	; (80056ec <USB_SetTurnaroundTime+0x13c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d906      	bls.n	800568a <USB_SetTurnaroundTime+0xda>
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	4a1c      	ldr	r2, [pc, #112]	; (80056f0 <USB_SetTurnaroundTime+0x140>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d202      	bcs.n	800568a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005684:	2307      	movs	r3, #7
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	e00a      	b.n	80056a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800568a:	2306      	movs	r3, #6
 800568c:	617b      	str	r3, [r7, #20]
 800568e:	e007      	b.n	80056a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005690:	79fb      	ldrb	r3, [r7, #7]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d102      	bne.n	800569c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005696:	2309      	movs	r3, #9
 8005698:	617b      	str	r3, [r7, #20]
 800569a:	e001      	b.n	80056a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800569c:	2309      	movs	r3, #9
 800569e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	68da      	ldr	r2, [r3, #12]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	029b      	lsls	r3, r3, #10
 80056b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80056b8:	431a      	orrs	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	371c      	adds	r7, #28
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	00d8acbf 	.word	0x00d8acbf
 80056d0:	00e4e1c0 	.word	0x00e4e1c0
 80056d4:	00f42400 	.word	0x00f42400
 80056d8:	01067380 	.word	0x01067380
 80056dc:	011a499f 	.word	0x011a499f
 80056e0:	01312cff 	.word	0x01312cff
 80056e4:	014ca43f 	.word	0x014ca43f
 80056e8:	016e3600 	.word	0x016e3600
 80056ec:	01a6ab1f 	.word	0x01a6ab1f
 80056f0:	01e84800 	.word	0x01e84800

080056f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f043 0201 	orr.w	r2, r3, #1
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f023 0201 	bic.w	r2, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	460b      	mov	r3, r1
 8005742:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005754:	78fb      	ldrb	r3, [r7, #3]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d115      	bne.n	8005786 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005766:	2001      	movs	r0, #1
 8005768:	f7fb fd9c 	bl	80012a4 <HAL_Delay>
      ms++;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3301      	adds	r3, #1
 8005770:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f001 fa45 	bl	8006c02 <USB_GetMode>
 8005778:	4603      	mov	r3, r0
 800577a:	2b01      	cmp	r3, #1
 800577c:	d01e      	beq.n	80057bc <USB_SetCurrentMode+0x84>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2b31      	cmp	r3, #49	; 0x31
 8005782:	d9f0      	bls.n	8005766 <USB_SetCurrentMode+0x2e>
 8005784:	e01a      	b.n	80057bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005786:	78fb      	ldrb	r3, [r7, #3]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d115      	bne.n	80057b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005798:	2001      	movs	r0, #1
 800579a:	f7fb fd83 	bl	80012a4 <HAL_Delay>
      ms++;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3301      	adds	r3, #1
 80057a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f001 fa2c 	bl	8006c02 <USB_GetMode>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d005      	beq.n	80057bc <USB_SetCurrentMode+0x84>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b31      	cmp	r3, #49	; 0x31
 80057b4:	d9f0      	bls.n	8005798 <USB_SetCurrentMode+0x60>
 80057b6:	e001      	b.n	80057bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e005      	b.n	80057c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2b32      	cmp	r3, #50	; 0x32
 80057c0:	d101      	bne.n	80057c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e000      	b.n	80057c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057d0:	b084      	sub	sp, #16
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b086      	sub	sp, #24
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80057de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80057ea:	2300      	movs	r3, #0
 80057ec:	613b      	str	r3, [r7, #16]
 80057ee:	e009      	b.n	8005804 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	3340      	adds	r3, #64	; 0x40
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	2200      	movs	r2, #0
 80057fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	3301      	adds	r3, #1
 8005802:	613b      	str	r3, [r7, #16]
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	2b0e      	cmp	r3, #14
 8005808:	d9f2      	bls.n	80057f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800580a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800580c:	2b00      	cmp	r3, #0
 800580e:	d11c      	bne.n	800584a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800581e:	f043 0302 	orr.w	r3, r3, #2
 8005822:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005840:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	639a      	str	r2, [r3, #56]	; 0x38
 8005848:	e00b      	b.n	8005862 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005868:	461a      	mov	r2, r3
 800586a:	2300      	movs	r3, #0
 800586c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005874:	4619      	mov	r1, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587c:	461a      	mov	r2, r3
 800587e:	680b      	ldr	r3, [r1, #0]
 8005880:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005884:	2b01      	cmp	r3, #1
 8005886:	d10c      	bne.n	80058a2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d104      	bne.n	8005898 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800588e:	2100      	movs	r1, #0
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f965 	bl	8005b60 <USB_SetDevSpeed>
 8005896:	e008      	b.n	80058aa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005898:	2101      	movs	r1, #1
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f960 	bl	8005b60 <USB_SetDevSpeed>
 80058a0:	e003      	b.n	80058aa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058a2:	2103      	movs	r1, #3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f95b 	bl	8005b60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058aa:	2110      	movs	r1, #16
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f8f3 	bl	8005a98 <USB_FlushTxFifo>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f91f 	bl	8005b00 <USB_FlushRxFifo>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d2:	461a      	mov	r2, r3
 80058d4:	2300      	movs	r3, #0
 80058d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058de:	461a      	mov	r2, r3
 80058e0:	2300      	movs	r3, #0
 80058e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ea:	461a      	mov	r2, r3
 80058ec:	2300      	movs	r3, #0
 80058ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058f0:	2300      	movs	r3, #0
 80058f2:	613b      	str	r3, [r7, #16]
 80058f4:	e043      	b.n	800597e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800590c:	d118      	bne.n	8005940 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10a      	bne.n	800592a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005920:	461a      	mov	r2, r3
 8005922:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005926:	6013      	str	r3, [r2, #0]
 8005928:	e013      	b.n	8005952 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005936:	461a      	mov	r2, r3
 8005938:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	e008      	b.n	8005952 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594c:	461a      	mov	r2, r3
 800594e:	2300      	movs	r3, #0
 8005950:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595e:	461a      	mov	r2, r3
 8005960:	2300      	movs	r3, #0
 8005962:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005970:	461a      	mov	r2, r3
 8005972:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005976:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	3301      	adds	r3, #1
 800597c:	613b      	str	r3, [r7, #16]
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	429a      	cmp	r2, r3
 8005984:	d3b7      	bcc.n	80058f6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005986:	2300      	movs	r3, #0
 8005988:	613b      	str	r3, [r7, #16]
 800598a:	e043      	b.n	8005a14 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800599e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059a2:	d118      	bne.n	80059d6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10a      	bne.n	80059c0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b6:	461a      	mov	r2, r3
 80059b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059bc:	6013      	str	r3, [r2, #0]
 80059be:	e013      	b.n	80059e8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059cc:	461a      	mov	r2, r3
 80059ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	e008      	b.n	80059e8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e2:	461a      	mov	r2, r3
 80059e4:	2300      	movs	r3, #0
 80059e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f4:	461a      	mov	r2, r3
 80059f6:	2300      	movs	r3, #0
 80059f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a06:	461a      	mov	r2, r3
 8005a08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	3301      	adds	r3, #1
 8005a12:	613b      	str	r3, [r7, #16]
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d3b7      	bcc.n	800598c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d105      	bne.n	8005a50 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	f043 0210 	orr.w	r2, r3, #16
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	699a      	ldr	r2, [r3, #24]
 8005a54:	4b0f      	ldr	r3, [pc, #60]	; (8005a94 <USB_DevInit+0x2c4>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d005      	beq.n	8005a6e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	f043 0208 	orr.w	r2, r3, #8
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d107      	bne.n	8005a84 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a7c:	f043 0304 	orr.w	r3, r3, #4
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a90:	b004      	add	sp, #16
 8005a92:	4770      	bx	lr
 8005a94:	803c3800 	.word	0x803c3800

08005a98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4a13      	ldr	r2, [pc, #76]	; (8005afc <USB_FlushTxFifo+0x64>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d901      	bls.n	8005ab8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e01b      	b.n	8005af0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	daf2      	bge.n	8005aa6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	019b      	lsls	r3, r3, #6
 8005ac8:	f043 0220 	orr.w	r2, r3, #32
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	4a08      	ldr	r2, [pc, #32]	; (8005afc <USB_FlushTxFifo+0x64>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d901      	bls.n	8005ae2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e006      	b.n	8005af0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b20      	cmp	r3, #32
 8005aec:	d0f0      	beq.n	8005ad0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	00030d40 	.word	0x00030d40

08005b00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4a11      	ldr	r2, [pc, #68]	; (8005b5c <USB_FlushRxFifo+0x5c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d901      	bls.n	8005b1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e018      	b.n	8005b50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	daf2      	bge.n	8005b0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2210      	movs	r2, #16
 8005b2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3301      	adds	r3, #1
 8005b34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4a08      	ldr	r2, [pc, #32]	; (8005b5c <USB_FlushRxFifo+0x5c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d901      	bls.n	8005b42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e006      	b.n	8005b50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0310 	and.w	r3, r3, #16
 8005b4a:	2b10      	cmp	r3, #16
 8005b4c:	d0f0      	beq.n	8005b30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	00030d40 	.word	0x00030d40

08005b60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	78fb      	ldrb	r3, [r7, #3]
 8005b7a:	68f9      	ldr	r1, [r7, #12]
 8005b7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b80:	4313      	orrs	r3, r2
 8005b82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b087      	sub	sp, #28
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f003 0306 	and.w	r3, r3, #6
 8005baa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d102      	bne.n	8005bb8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	75fb      	strb	r3, [r7, #23]
 8005bb6:	e00a      	b.n	8005bce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d002      	beq.n	8005bc4 <USB_GetDevSpeed+0x32>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b06      	cmp	r3, #6
 8005bc2:	d102      	bne.n	8005bca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	75fb      	strb	r3, [r7, #23]
 8005bc8:	e001      	b.n	8005bce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005bca:	230f      	movs	r3, #15
 8005bcc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	371c      	adds	r7, #28
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	785b      	ldrb	r3, [r3, #1]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d13a      	bne.n	8005c6e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfe:	69da      	ldr	r2, [r3, #28]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	f003 030f 	and.w	r3, r3, #15
 8005c08:	2101      	movs	r1, #1
 8005c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	68f9      	ldr	r1, [r7, #12]
 8005c12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c16:	4313      	orrs	r3, r2
 8005c18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d155      	bne.n	8005cdc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	791b      	ldrb	r3, [r3, #4]
 8005c4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	059b      	lsls	r3, r3, #22
 8005c52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c54:	4313      	orrs	r3, r2
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	0151      	lsls	r1, r2, #5
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	440a      	add	r2, r1
 8005c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	e036      	b.n	8005cdc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c74:	69da      	ldr	r2, [r3, #28]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	f003 030f 	and.w	r3, r3, #15
 8005c7e:	2101      	movs	r1, #1
 8005c80:	fa01 f303 	lsl.w	r3, r1, r3
 8005c84:	041b      	lsls	r3, r3, #16
 8005c86:	68f9      	ldr	r1, [r7, #12]
 8005c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d11a      	bne.n	8005cdc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	791b      	ldrb	r3, [r3, #4]
 8005cc0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005cc2:	430b      	orrs	r3, r1
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	0151      	lsls	r1, r2, #5
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	440a      	add	r2, r1
 8005cce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cda:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
	...

08005cec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	785b      	ldrb	r3, [r3, #1]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d161      	bne.n	8005dcc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d1e:	d11f      	bne.n	8005d60 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	0151      	lsls	r1, r2, #5
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	440a      	add	r2, r1
 8005d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d3e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	0151      	lsls	r1, r2, #5
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	440a      	add	r2, r1
 8005d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	f003 030f 	and.w	r3, r3, #15
 8005d70:	2101      	movs	r1, #1
 8005d72:	fa01 f303 	lsl.w	r3, r1, r3
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	43db      	mvns	r3, r3
 8005d7a:	68f9      	ldr	r1, [r7, #12]
 8005d7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d80:	4013      	ands	r3, r2
 8005d82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8a:	69da      	ldr	r2, [r3, #28]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	f003 030f 	and.w	r3, r3, #15
 8005d94:	2101      	movs	r1, #1
 8005d96:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	43db      	mvns	r3, r3
 8005d9e:	68f9      	ldr	r1, [r7, #12]
 8005da0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005da4:	4013      	ands	r3, r2
 8005da6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	0159      	lsls	r1, r3, #5
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	440b      	add	r3, r1
 8005dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4b35      	ldr	r3, [pc, #212]	; (8005e9c <USB_DeactivateEndpoint+0x1b0>)
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	600b      	str	r3, [r1, #0]
 8005dca:	e060      	b.n	8005e8e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005de2:	d11f      	bne.n	8005e24 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	0151      	lsls	r1, r2, #5
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	440a      	add	r2, r1
 8005dfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e02:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	0151      	lsls	r1, r2, #5
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	440a      	add	r2, r1
 8005e1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	2101      	movs	r1, #1
 8005e36:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3a:	041b      	lsls	r3, r3, #16
 8005e3c:	43db      	mvns	r3, r3
 8005e3e:	68f9      	ldr	r1, [r7, #12]
 8005e40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e44:	4013      	ands	r3, r2
 8005e46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4e:	69da      	ldr	r2, [r3, #28]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	f003 030f 	and.w	r3, r3, #15
 8005e58:	2101      	movs	r1, #1
 8005e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e5e:	041b      	lsls	r3, r3, #16
 8005e60:	43db      	mvns	r3, r3
 8005e62:	68f9      	ldr	r1, [r7, #12]
 8005e64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e68:	4013      	ands	r3, r2
 8005e6a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	0159      	lsls	r1, r3, #5
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	440b      	add	r3, r1
 8005e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e86:	4619      	mov	r1, r3
 8005e88:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <USB_DeactivateEndpoint+0x1b4>)
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	ec337800 	.word	0xec337800
 8005ea0:	eff37800 	.word	0xeff37800

08005ea4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b08a      	sub	sp, #40	; 0x28
 8005ea8:	af02      	add	r7, sp, #8
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	785b      	ldrb	r3, [r3, #1]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	f040 815c 	bne.w	800617e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d132      	bne.n	8005f34 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	0151      	lsls	r1, r2, #5
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005eec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ef0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	0151      	lsls	r1, r2, #5
 8005f04:	69fa      	ldr	r2, [r7, #28]
 8005f06:	440a      	add	r2, r1
 8005f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	0151      	lsls	r1, r2, #5
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	440a      	add	r2, r1
 8005f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f2c:	0cdb      	lsrs	r3, r3, #19
 8005f2e:	04db      	lsls	r3, r3, #19
 8005f30:	6113      	str	r3, [r2, #16]
 8005f32:	e074      	b.n	800601e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	0151      	lsls	r1, r2, #5
 8005f46:	69fa      	ldr	r2, [r7, #28]
 8005f48:	440a      	add	r2, r1
 8005f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f4e:	0cdb      	lsrs	r3, r3, #19
 8005f50:	04db      	lsls	r3, r3, #19
 8005f52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	0151      	lsls	r1, r2, #5
 8005f66:	69fa      	ldr	r2, [r7, #28]
 8005f68:	440a      	add	r2, r1
 8005f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f84:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	6999      	ldr	r1, [r3, #24]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	440b      	add	r3, r1
 8005f90:	1e59      	subs	r1, r3, #1
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f9a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005f9c:	4b9d      	ldr	r3, [pc, #628]	; (8006214 <USB_EPStartXfer+0x370>)
 8005f9e:	400b      	ands	r3, r1
 8005fa0:	69b9      	ldr	r1, [r7, #24]
 8005fa2:	0148      	lsls	r0, r1, #5
 8005fa4:	69f9      	ldr	r1, [r7, #28]
 8005fa6:	4401      	add	r1, r0
 8005fa8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005fac:	4313      	orrs	r3, r2
 8005fae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fc6:	69b9      	ldr	r1, [r7, #24]
 8005fc8:	0148      	lsls	r0, r1, #5
 8005fca:	69f9      	ldr	r1, [r7, #28]
 8005fcc:	4401      	add	r1, r0
 8005fce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	791b      	ldrb	r3, [r3, #4]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d11f      	bne.n	800601e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	0151      	lsls	r1, r2, #5
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	440a      	add	r2, r1
 8005ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005ffc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	0151      	lsls	r1, r2, #5
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	440a      	add	r2, r1
 8006014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006018:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800601c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800601e:	79fb      	ldrb	r3, [r7, #7]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d14b      	bne.n	80060bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d009      	beq.n	8006040 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006038:	461a      	mov	r2, r3
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	791b      	ldrb	r3, [r3, #4]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d128      	bne.n	800609a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006054:	2b00      	cmp	r3, #0
 8006056:	d110      	bne.n	800607a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	0151      	lsls	r1, r2, #5
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	440a      	add	r2, r1
 800606e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006072:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006076:	6013      	str	r3, [r2, #0]
 8006078:	e00f      	b.n	800609a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	0151      	lsls	r1, r2, #5
 800608c:	69fa      	ldr	r2, [r7, #28]
 800608e:	440a      	add	r2, r1
 8006090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006098:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	0151      	lsls	r1, r2, #5
 80060ac:	69fa      	ldr	r2, [r7, #28]
 80060ae:	440a      	add	r2, r1
 80060b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060b8:	6013      	str	r3, [r2, #0]
 80060ba:	e133      	b.n	8006324 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	0151      	lsls	r1, r2, #5
 80060ce:	69fa      	ldr	r2, [r7, #28]
 80060d0:	440a      	add	r2, r1
 80060d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	791b      	ldrb	r3, [r3, #4]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d015      	beq.n	8006110 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 811b 	beq.w	8006324 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	2101      	movs	r1, #1
 8006100:	fa01 f303 	lsl.w	r3, r1, r3
 8006104:	69f9      	ldr	r1, [r7, #28]
 8006106:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800610a:	4313      	orrs	r3, r2
 800610c:	634b      	str	r3, [r1, #52]	; 0x34
 800610e:	e109      	b.n	8006324 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611c:	2b00      	cmp	r3, #0
 800611e:	d110      	bne.n	8006142 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	440a      	add	r2, r1
 8006136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800613a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	e00f      	b.n	8006162 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	0151      	lsls	r1, r2, #5
 8006154:	69fa      	ldr	r2, [r7, #28]
 8006156:	440a      	add	r2, r1
 8006158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800615c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006160:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	6919      	ldr	r1, [r3, #16]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	781a      	ldrb	r2, [r3, #0]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	b298      	uxth	r0, r3
 8006170:	79fb      	ldrb	r3, [r7, #7]
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	4603      	mov	r3, r0
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 fade 	bl	8006738 <USB_WritePacket>
 800617c:	e0d2      	b.n	8006324 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	0151      	lsls	r1, r2, #5
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	440a      	add	r2, r1
 8006194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006198:	0cdb      	lsrs	r3, r3, #19
 800619a:	04db      	lsls	r3, r3, #19
 800619c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	69fa      	ldr	r2, [r7, #28]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d126      	bne.n	8006218 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d6:	691a      	ldr	r2, [r3, #16]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061e0:	69b9      	ldr	r1, [r7, #24]
 80061e2:	0148      	lsls	r0, r1, #5
 80061e4:	69f9      	ldr	r1, [r7, #28]
 80061e6:	4401      	add	r1, r0
 80061e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061ec:	4313      	orrs	r3, r2
 80061ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	0151      	lsls	r1, r2, #5
 8006202:	69fa      	ldr	r2, [r7, #28]
 8006204:	440a      	add	r2, r1
 8006206:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800620a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800620e:	6113      	str	r3, [r2, #16]
 8006210:	e03a      	b.n	8006288 <USB_EPStartXfer+0x3e4>
 8006212:	bf00      	nop
 8006214:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	699a      	ldr	r2, [r3, #24]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	4413      	add	r3, r2
 8006222:	1e5a      	subs	r2, r3, #1
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	fbb2 f3f3 	udiv	r3, r2, r3
 800622c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	8afa      	ldrh	r2, [r7, #22]
 8006234:	fb03 f202 	mul.w	r2, r3, r2
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006248:	691a      	ldr	r2, [r3, #16]
 800624a:	8afb      	ldrh	r3, [r7, #22]
 800624c:	04d9      	lsls	r1, r3, #19
 800624e:	4b38      	ldr	r3, [pc, #224]	; (8006330 <USB_EPStartXfer+0x48c>)
 8006250:	400b      	ands	r3, r1
 8006252:	69b9      	ldr	r1, [r7, #24]
 8006254:	0148      	lsls	r0, r1, #5
 8006256:	69f9      	ldr	r1, [r7, #28]
 8006258:	4401      	add	r1, r0
 800625a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800625e:	4313      	orrs	r3, r2
 8006260:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	4413      	add	r3, r2
 800626a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626e:	691a      	ldr	r2, [r3, #16]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006278:	69b9      	ldr	r1, [r7, #24]
 800627a:	0148      	lsls	r0, r1, #5
 800627c:	69f9      	ldr	r1, [r7, #28]
 800627e:	4401      	add	r1, r0
 8006280:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006284:	4313      	orrs	r3, r2
 8006286:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006288:	79fb      	ldrb	r3, [r7, #7]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d10d      	bne.n	80062aa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d009      	beq.n	80062aa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	6919      	ldr	r1, [r3, #16]
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a6:	460a      	mov	r2, r1
 80062a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	791b      	ldrb	r3, [r3, #4]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d128      	bne.n	8006304 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d110      	bne.n	80062e4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	0151      	lsls	r1, r2, #5
 80062d4:	69fa      	ldr	r2, [r7, #28]
 80062d6:	440a      	add	r2, r1
 80062d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062e0:	6013      	str	r3, [r2, #0]
 80062e2:	e00f      	b.n	8006304 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	0151      	lsls	r1, r2, #5
 80062f6:	69fa      	ldr	r2, [r7, #28]
 80062f8:	440a      	add	r2, r1
 80062fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006302:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	4413      	add	r3, r2
 800630c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	0151      	lsls	r1, r2, #5
 8006316:	69fa      	ldr	r2, [r7, #28]
 8006318:	440a      	add	r2, r1
 800631a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800631e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006322:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3720      	adds	r7, #32
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	1ff80000 	.word	0x1ff80000

08006334 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	4613      	mov	r3, r2
 8006340:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	785b      	ldrb	r3, [r3, #1]
 8006350:	2b01      	cmp	r3, #1
 8006352:	f040 80ce 	bne.w	80064f2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d132      	bne.n	80063c4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	4413      	add	r3, r2
 8006366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	0151      	lsls	r1, r2, #5
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	440a      	add	r2, r1
 8006374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006378:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800637c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006380:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	0151      	lsls	r1, r2, #5
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	440a      	add	r2, r1
 8006398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800639c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	0151      	lsls	r1, r2, #5
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	440a      	add	r2, r1
 80063b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063bc:	0cdb      	lsrs	r3, r3, #19
 80063be:	04db      	lsls	r3, r3, #19
 80063c0:	6113      	str	r3, [r2, #16]
 80063c2:	e04e      	b.n	8006462 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	0151      	lsls	r1, r2, #5
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	440a      	add	r2, r1
 80063da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063de:	0cdb      	lsrs	r3, r3, #19
 80063e0:	04db      	lsls	r3, r3, #19
 80063e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	0151      	lsls	r1, r2, #5
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	440a      	add	r2, r1
 80063fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006402:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006406:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	699a      	ldr	r2, [r3, #24]
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	429a      	cmp	r2, r3
 8006412:	d903      	bls.n	800641c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	68da      	ldr	r2, [r3, #12]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	0151      	lsls	r1, r2, #5
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	440a      	add	r2, r1
 8006432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006436:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800643a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006448:	691a      	ldr	r2, [r3, #16]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006452:	6939      	ldr	r1, [r7, #16]
 8006454:	0148      	lsls	r0, r1, #5
 8006456:	6979      	ldr	r1, [r7, #20]
 8006458:	4401      	add	r1, r0
 800645a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800645e:	4313      	orrs	r3, r2
 8006460:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006462:	79fb      	ldrb	r3, [r7, #7]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d11e      	bne.n	80064a6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d009      	beq.n	8006484 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647c:	461a      	mov	r2, r3
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	0151      	lsls	r1, r2, #5
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	440a      	add	r2, r1
 800649a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800649e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	e097      	b.n	80065d6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	0151      	lsls	r1, r2, #5
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	440a      	add	r2, r1
 80064bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064c4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 8083 	beq.w	80065d6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	f003 030f 	and.w	r3, r3, #15
 80064e0:	2101      	movs	r1, #1
 80064e2:	fa01 f303 	lsl.w	r3, r1, r3
 80064e6:	6979      	ldr	r1, [r7, #20]
 80064e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064ec:	4313      	orrs	r3, r2
 80064ee:	634b      	str	r3, [r1, #52]	; 0x34
 80064f0:	e071      	b.n	80065d6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	0151      	lsls	r1, r2, #5
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	440a      	add	r2, r1
 8006508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800650c:	0cdb      	lsrs	r3, r3, #19
 800650e:	04db      	lsls	r3, r3, #19
 8006510:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	0151      	lsls	r1, r2, #5
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	440a      	add	r2, r1
 8006528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800652c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006530:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006534:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	68da      	ldr	r2, [r3, #12]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	4413      	add	r3, r2
 8006556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	0151      	lsls	r1, r2, #5
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	440a      	add	r2, r1
 8006564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006568:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800656c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	4413      	add	r3, r2
 8006576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657a:	691a      	ldr	r2, [r3, #16]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006584:	6939      	ldr	r1, [r7, #16]
 8006586:	0148      	lsls	r0, r1, #5
 8006588:	6979      	ldr	r1, [r7, #20]
 800658a:	4401      	add	r1, r0
 800658c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006590:	4313      	orrs	r3, r2
 8006592:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006594:	79fb      	ldrb	r3, [r7, #7]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d10d      	bne.n	80065b6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d009      	beq.n	80065b6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	6919      	ldr	r1, [r3, #16]
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b2:	460a      	mov	r2, r1
 80065b4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	0151      	lsls	r1, r2, #5
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	440a      	add	r2, r1
 80065cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	371c      	adds	r7, #28
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	785b      	ldrb	r3, [r3, #1]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d14a      	bne.n	8006698 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006616:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800661a:	f040 8086 	bne.w	800672a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	7812      	ldrb	r2, [r2, #0]
 8006632:	0151      	lsls	r1, r2, #5
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	440a      	add	r2, r1
 8006638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800663c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006640:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	7812      	ldrb	r2, [r2, #0]
 8006656:	0151      	lsls	r1, r2, #5
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	440a      	add	r2, r1
 800665c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006660:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006664:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3301      	adds	r3, #1
 800666a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006672:	4293      	cmp	r3, r2
 8006674:	d902      	bls.n	800667c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	75fb      	strb	r3, [r7, #23]
          break;
 800667a:	e056      	b.n	800672a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006690:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006694:	d0e7      	beq.n	8006666 <USB_EPStopXfer+0x82>
 8006696:	e048      	b.n	800672a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066b0:	d13b      	bne.n	800672a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	7812      	ldrb	r2, [r2, #0]
 80066c6:	0151      	lsls	r1, r2, #5
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	440a      	add	r2, r1
 80066cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	7812      	ldrb	r2, [r2, #0]
 80066ea:	0151      	lsls	r1, r2, #5
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	440a      	add	r2, r1
 80066f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3301      	adds	r3, #1
 80066fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f242 7210 	movw	r2, #10000	; 0x2710
 8006706:	4293      	cmp	r3, r2
 8006708:	d902      	bls.n	8006710 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	75fb      	strb	r3, [r7, #23]
          break;
 800670e:	e00c      	b.n	800672a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006724:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006728:	d0e7      	beq.n	80066fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800672a:	7dfb      	ldrb	r3, [r7, #23]
}
 800672c:	4618      	mov	r0, r3
 800672e:	371c      	adds	r7, #28
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006738:	b480      	push	{r7}
 800673a:	b089      	sub	sp, #36	; 0x24
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	4611      	mov	r1, r2
 8006744:	461a      	mov	r2, r3
 8006746:	460b      	mov	r3, r1
 8006748:	71fb      	strb	r3, [r7, #7]
 800674a:	4613      	mov	r3, r2
 800674c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006756:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800675a:	2b00      	cmp	r3, #0
 800675c:	d123      	bne.n	80067a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800675e:	88bb      	ldrh	r3, [r7, #4]
 8006760:	3303      	adds	r3, #3
 8006762:	089b      	lsrs	r3, r3, #2
 8006764:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006766:	2300      	movs	r3, #0
 8006768:	61bb      	str	r3, [r7, #24]
 800676a:	e018      	b.n	800679e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800676c:	79fb      	ldrb	r3, [r7, #7]
 800676e:	031a      	lsls	r2, r3, #12
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	4413      	add	r3, r2
 8006774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006778:	461a      	mov	r2, r3
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	3301      	adds	r3, #1
 8006784:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	3301      	adds	r3, #1
 800678a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	3301      	adds	r3, #1
 8006790:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	3301      	adds	r3, #1
 8006796:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	3301      	adds	r3, #1
 800679c:	61bb      	str	r3, [r7, #24]
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d3e2      	bcc.n	800676c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3724      	adds	r7, #36	; 0x24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b08b      	sub	sp, #44	; 0x2c
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	4613      	mov	r3, r2
 80067c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80067ca:	88fb      	ldrh	r3, [r7, #6]
 80067cc:	089b      	lsrs	r3, r3, #2
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80067d2:	88fb      	ldrh	r3, [r7, #6]
 80067d4:	f003 0303 	and.w	r3, r3, #3
 80067d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80067da:	2300      	movs	r3, #0
 80067dc:	623b      	str	r3, [r7, #32]
 80067de:	e014      	b.n	800680a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	3301      	adds	r3, #1
 80067f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	3301      	adds	r3, #1
 80067f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	3301      	adds	r3, #1
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	3301      	adds	r3, #1
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	3301      	adds	r3, #1
 8006808:	623b      	str	r3, [r7, #32]
 800680a:	6a3a      	ldr	r2, [r7, #32]
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	429a      	cmp	r2, r3
 8006810:	d3e6      	bcc.n	80067e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006812:	8bfb      	ldrh	r3, [r7, #30]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d01e      	beq.n	8006856 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006822:	461a      	mov	r2, r3
 8006824:	f107 0310 	add.w	r3, r7, #16
 8006828:	6812      	ldr	r2, [r2, #0]
 800682a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	b2db      	uxtb	r3, r3
 8006832:	00db      	lsls	r3, r3, #3
 8006834:	fa22 f303 	lsr.w	r3, r2, r3
 8006838:	b2da      	uxtb	r2, r3
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	701a      	strb	r2, [r3, #0]
      i++;
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	3301      	adds	r3, #1
 8006842:	623b      	str	r3, [r7, #32]
      pDest++;
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	3301      	adds	r3, #1
 8006848:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800684a:	8bfb      	ldrh	r3, [r7, #30]
 800684c:	3b01      	subs	r3, #1
 800684e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006850:	8bfb      	ldrh	r3, [r7, #30]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1ea      	bne.n	800682c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006858:	4618      	mov	r0, r3
 800685a:	372c      	adds	r7, #44	; 0x2c
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	785b      	ldrb	r3, [r3, #1]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d12c      	bne.n	80068da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	db12      	blt.n	80068b8 <USB_EPSetStall+0x54>
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00f      	beq.n	80068b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	0151      	lsls	r1, r2, #5
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	440a      	add	r2, r1
 80068ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	0151      	lsls	r1, r2, #5
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	440a      	add	r2, r1
 80068ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068d6:	6013      	str	r3, [r2, #0]
 80068d8:	e02b      	b.n	8006932 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	db12      	blt.n	8006912 <USB_EPSetStall+0xae>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00f      	beq.n	8006912 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	0151      	lsls	r1, r2, #5
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	440a      	add	r2, r1
 8006908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800690c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006910:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	0151      	lsls	r1, r2, #5
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	440a      	add	r2, r1
 8006928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800692c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006930:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	785b      	ldrb	r3, [r3, #1]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d128      	bne.n	80069ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	0151      	lsls	r1, r2, #5
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	440a      	add	r2, r1
 8006972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006976:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800697a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	791b      	ldrb	r3, [r3, #4]
 8006980:	2b03      	cmp	r3, #3
 8006982:	d003      	beq.n	800698c <USB_EPClearStall+0x4c>
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	791b      	ldrb	r3, [r3, #4]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d138      	bne.n	80069fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	0151      	lsls	r1, r2, #5
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	440a      	add	r2, r1
 80069a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069aa:	6013      	str	r3, [r2, #0]
 80069ac:	e027      	b.n	80069fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	0151      	lsls	r1, r2, #5
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	440a      	add	r2, r1
 80069c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	791b      	ldrb	r3, [r3, #4]
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d003      	beq.n	80069de <USB_EPClearStall+0x9e>
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	791b      	ldrb	r3, [r3, #4]
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d10f      	bne.n	80069fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	0151      	lsls	r1, r2, #5
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	440a      	add	r2, r1
 80069f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	460b      	mov	r3, r1
 8006a16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a2a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006a2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	78fb      	ldrb	r3, [r7, #3]
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006a40:	68f9      	ldr	r1, [r7, #12]
 8006a42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a46:	4313      	orrs	r3, r2
 8006a48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a72:	f023 0303 	bic.w	r3, r3, #3
 8006a76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a86:	f023 0302 	bic.w	r3, r3, #2
 8006a8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b085      	sub	sp, #20
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ab4:	f023 0303 	bic.w	r3, r3, #3
 8006ab8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ac8:	f043 0302 	orr.w	r3, r3, #2
 8006acc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4013      	ands	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006af4:	68fb      	ldr	r3, [r7, #12]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b085      	sub	sp, #20
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b1e:	69db      	ldr	r3, [r3, #28]
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	4013      	ands	r3, r2
 8006b24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	0c1b      	lsrs	r3, r3, #16
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b085      	sub	sp, #20
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	68ba      	ldr	r2, [r7, #8]
 8006b56:	4013      	ands	r3, r2
 8006b58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	b29b      	uxth	r3, r3
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b085      	sub	sp, #20
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	460b      	mov	r3, r1
 8006b74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b7a:	78fb      	ldrb	r3, [r7, #3]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	4013      	ands	r3, r2
 8006b96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b98:	68bb      	ldr	r3, [r7, #8]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b087      	sub	sp, #28
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006bca:	78fb      	ldrb	r3, [r7, #3]
 8006bcc:	f003 030f 	and.w	r3, r3, #15
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd6:	01db      	lsls	r3, r3, #7
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006be0:	78fb      	ldrb	r3, [r7, #3]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	371c      	adds	r7, #28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b083      	sub	sp, #12
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	f003 0301 	and.w	r3, r3, #1
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b085      	sub	sp, #20
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c38:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006c3c:	f023 0307 	bic.w	r3, r3, #7
 8006c40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	333c      	adds	r3, #60	; 0x3c
 8006c7a:	3304      	adds	r3, #4
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	4a26      	ldr	r2, [pc, #152]	; (8006d1c <USB_EP0_OutStart+0xb8>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d90a      	bls.n	8006c9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c98:	d101      	bne.n	8006c9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	e037      	b.n	8006d0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ccc:	f043 0318 	orr.w	r3, r3, #24
 8006cd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ce0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006ce4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006ce6:	7afb      	ldrb	r3, [r7, #11]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d10f      	bne.n	8006d0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d06:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006d0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	371c      	adds	r7, #28
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	4f54300a 	.word	0x4f54300a

08006d20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4a13      	ldr	r2, [pc, #76]	; (8006d84 <USB_CoreReset+0x64>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d901      	bls.n	8006d3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e01b      	b.n	8006d76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	daf2      	bge.n	8006d2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	f043 0201 	orr.w	r2, r3, #1
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4a09      	ldr	r2, [pc, #36]	; (8006d84 <USB_CoreReset+0x64>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d901      	bls.n	8006d68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e006      	b.n	8006d76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d0f0      	beq.n	8006d56 <USB_CoreReset+0x36>

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	00030d40 	.word	0x00030d40

08006d88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d94:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d98:	f002 fca8 	bl	80096ec <USBD_static_malloc>
 8006d9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d109      	bne.n	8006db8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	32b0      	adds	r2, #176	; 0xb0
 8006dae:	2100      	movs	r1, #0
 8006db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006db4:	2302      	movs	r3, #2
 8006db6:	e0d4      	b.n	8006f62 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006db8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f002 fd02 	bl	80097c8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	32b0      	adds	r2, #176	; 0xb0
 8006dce:	68f9      	ldr	r1, [r7, #12]
 8006dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	32b0      	adds	r2, #176	; 0xb0
 8006dde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	7c1b      	ldrb	r3, [r3, #16]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d138      	bne.n	8006e62 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006df0:	4b5e      	ldr	r3, [pc, #376]	; (8006f6c <USBD_CDC_Init+0x1e4>)
 8006df2:	7819      	ldrb	r1, [r3, #0]
 8006df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006df8:	2202      	movs	r2, #2
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f002 fb53 	bl	80094a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e00:	4b5a      	ldr	r3, [pc, #360]	; (8006f6c <USBD_CDC_Init+0x1e4>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	f003 020f 	and.w	r2, r3, #15
 8006e08:	6879      	ldr	r1, [r7, #4]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	440b      	add	r3, r1
 8006e14:	3324      	adds	r3, #36	; 0x24
 8006e16:	2201      	movs	r2, #1
 8006e18:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e1a:	4b55      	ldr	r3, [pc, #340]	; (8006f70 <USBD_CDC_Init+0x1e8>)
 8006e1c:	7819      	ldrb	r1, [r3, #0]
 8006e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e22:	2202      	movs	r2, #2
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f002 fb3e 	bl	80094a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e2a:	4b51      	ldr	r3, [pc, #324]	; (8006f70 <USBD_CDC_Init+0x1e8>)
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	f003 020f 	and.w	r2, r3, #15
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	440b      	add	r3, r1
 8006e3e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e42:	2201      	movs	r2, #1
 8006e44:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006e46:	4b4b      	ldr	r3, [pc, #300]	; (8006f74 <USBD_CDC_Init+0x1ec>)
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	f003 020f 	and.w	r2, r3, #15
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	4613      	mov	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	440b      	add	r3, r1
 8006e5a:	3326      	adds	r3, #38	; 0x26
 8006e5c:	2210      	movs	r2, #16
 8006e5e:	801a      	strh	r2, [r3, #0]
 8006e60:	e035      	b.n	8006ece <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e62:	4b42      	ldr	r3, [pc, #264]	; (8006f6c <USBD_CDC_Init+0x1e4>)
 8006e64:	7819      	ldrb	r1, [r3, #0]
 8006e66:	2340      	movs	r3, #64	; 0x40
 8006e68:	2202      	movs	r2, #2
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f002 fb1b 	bl	80094a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e70:	4b3e      	ldr	r3, [pc, #248]	; (8006f6c <USBD_CDC_Init+0x1e4>)
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	f003 020f 	and.w	r2, r3, #15
 8006e78:	6879      	ldr	r1, [r7, #4]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	440b      	add	r3, r1
 8006e84:	3324      	adds	r3, #36	; 0x24
 8006e86:	2201      	movs	r2, #1
 8006e88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e8a:	4b39      	ldr	r3, [pc, #228]	; (8006f70 <USBD_CDC_Init+0x1e8>)
 8006e8c:	7819      	ldrb	r1, [r3, #0]
 8006e8e:	2340      	movs	r3, #64	; 0x40
 8006e90:	2202      	movs	r2, #2
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f002 fb07 	bl	80094a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e98:	4b35      	ldr	r3, [pc, #212]	; (8006f70 <USBD_CDC_Init+0x1e8>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	f003 020f 	and.w	r2, r3, #15
 8006ea0:	6879      	ldr	r1, [r7, #4]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	440b      	add	r3, r1
 8006eac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006eb4:	4b2f      	ldr	r3, [pc, #188]	; (8006f74 <USBD_CDC_Init+0x1ec>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	f003 020f 	and.w	r2, r3, #15
 8006ebc:	6879      	ldr	r1, [r7, #4]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	440b      	add	r3, r1
 8006ec8:	3326      	adds	r3, #38	; 0x26
 8006eca:	2210      	movs	r2, #16
 8006ecc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ece:	4b29      	ldr	r3, [pc, #164]	; (8006f74 <USBD_CDC_Init+0x1ec>)
 8006ed0:	7819      	ldrb	r1, [r3, #0]
 8006ed2:	2308      	movs	r3, #8
 8006ed4:	2203      	movs	r2, #3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f002 fae5 	bl	80094a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006edc:	4b25      	ldr	r3, [pc, #148]	; (8006f74 <USBD_CDC_Init+0x1ec>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	f003 020f 	and.w	r2, r3, #15
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	440b      	add	r3, r1
 8006ef0:	3324      	adds	r3, #36	; 0x24
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	33b0      	adds	r3, #176	; 0xb0
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	e018      	b.n	8006f62 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	7c1b      	ldrb	r3, [r3, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f38:	4b0d      	ldr	r3, [pc, #52]	; (8006f70 <USBD_CDC_Init+0x1e8>)
 8006f3a:	7819      	ldrb	r1, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f002 fb9c 	bl	8009684 <USBD_LL_PrepareReceive>
 8006f4c:	e008      	b.n	8006f60 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f4e:	4b08      	ldr	r3, [pc, #32]	; (8006f70 <USBD_CDC_Init+0x1e8>)
 8006f50:	7819      	ldrb	r1, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f58:	2340      	movs	r3, #64	; 0x40
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f002 fb92 	bl	8009684 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	20000093 	.word	0x20000093
 8006f70:	20000094 	.word	0x20000094
 8006f74:	20000095 	.word	0x20000095

08006f78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	460b      	mov	r3, r1
 8006f82:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006f84:	4b3a      	ldr	r3, [pc, #232]	; (8007070 <USBD_CDC_DeInit+0xf8>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	4619      	mov	r1, r3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f002 fab1 	bl	80094f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006f90:	4b37      	ldr	r3, [pc, #220]	; (8007070 <USBD_CDC_DeInit+0xf8>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	f003 020f 	and.w	r2, r3, #15
 8006f98:	6879      	ldr	r1, [r7, #4]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	440b      	add	r3, r1
 8006fa4:	3324      	adds	r3, #36	; 0x24
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006faa:	4b32      	ldr	r3, [pc, #200]	; (8007074 <USBD_CDC_DeInit+0xfc>)
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f002 fa9e 	bl	80094f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006fb6:	4b2f      	ldr	r3, [pc, #188]	; (8007074 <USBD_CDC_DeInit+0xfc>)
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	f003 020f 	and.w	r2, r3, #15
 8006fbe:	6879      	ldr	r1, [r7, #4]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	440b      	add	r3, r1
 8006fca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006fce:	2200      	movs	r2, #0
 8006fd0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006fd2:	4b29      	ldr	r3, [pc, #164]	; (8007078 <USBD_CDC_DeInit+0x100>)
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f002 fa8a 	bl	80094f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006fde:	4b26      	ldr	r3, [pc, #152]	; (8007078 <USBD_CDC_DeInit+0x100>)
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	f003 020f 	and.w	r2, r3, #15
 8006fe6:	6879      	ldr	r1, [r7, #4]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4413      	add	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	440b      	add	r3, r1
 8006ff2:	3324      	adds	r3, #36	; 0x24
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006ff8:	4b1f      	ldr	r3, [pc, #124]	; (8007078 <USBD_CDC_DeInit+0x100>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	f003 020f 	and.w	r2, r3, #15
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	4613      	mov	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	440b      	add	r3, r1
 800700c:	3326      	adds	r3, #38	; 0x26
 800700e:	2200      	movs	r2, #0
 8007010:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	32b0      	adds	r2, #176	; 0xb0
 800701c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d01f      	beq.n	8007064 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	33b0      	adds	r3, #176	; 0xb0
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	32b0      	adds	r2, #176	; 0xb0
 8007042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007046:	4618      	mov	r0, r3
 8007048:	f002 fb5e 	bl	8009708 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	32b0      	adds	r2, #176	; 0xb0
 8007056:	2100      	movs	r1, #0
 8007058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20000093 	.word	0x20000093
 8007074:	20000094 	.word	0x20000094
 8007078:	20000095 	.word	0x20000095

0800707c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	32b0      	adds	r2, #176	; 0xb0
 8007090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007094:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d101      	bne.n	80070ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e0bf      	b.n	800722c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d050      	beq.n	800715a <USBD_CDC_Setup+0xde>
 80070b8:	2b20      	cmp	r3, #32
 80070ba:	f040 80af 	bne.w	800721c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	88db      	ldrh	r3, [r3, #6]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d03a      	beq.n	800713c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	b25b      	sxtb	r3, r3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	da1b      	bge.n	8007108 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	33b0      	adds	r3, #176	; 0xb0
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80070e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	88d2      	ldrh	r2, [r2, #6]
 80070ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	88db      	ldrh	r3, [r3, #6]
 80070f2:	2b07      	cmp	r3, #7
 80070f4:	bf28      	it	cs
 80070f6:	2307      	movcs	r3, #7
 80070f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	89fa      	ldrh	r2, [r7, #14]
 80070fe:	4619      	mov	r1, r3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f001 fd89 	bl	8008c18 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007106:	e090      	b.n	800722a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	785a      	ldrb	r2, [r3, #1]
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	88db      	ldrh	r3, [r3, #6]
 8007116:	2b3f      	cmp	r3, #63	; 0x3f
 8007118:	d803      	bhi.n	8007122 <USBD_CDC_Setup+0xa6>
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	88db      	ldrh	r3, [r3, #6]
 800711e:	b2da      	uxtb	r2, r3
 8007120:	e000      	b.n	8007124 <USBD_CDC_Setup+0xa8>
 8007122:	2240      	movs	r2, #64	; 0x40
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800712a:	6939      	ldr	r1, [r7, #16]
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007132:	461a      	mov	r2, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f001 fd9b 	bl	8008c70 <USBD_CtlPrepareRx>
      break;
 800713a:	e076      	b.n	800722a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	33b0      	adds	r3, #176	; 0xb0
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	7850      	ldrb	r0, [r2, #1]
 8007152:	2200      	movs	r2, #0
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	4798      	blx	r3
      break;
 8007158:	e067      	b.n	800722a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	785b      	ldrb	r3, [r3, #1]
 800715e:	2b0b      	cmp	r3, #11
 8007160:	d851      	bhi.n	8007206 <USBD_CDC_Setup+0x18a>
 8007162:	a201      	add	r2, pc, #4	; (adr r2, 8007168 <USBD_CDC_Setup+0xec>)
 8007164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007168:	08007199 	.word	0x08007199
 800716c:	08007215 	.word	0x08007215
 8007170:	08007207 	.word	0x08007207
 8007174:	08007207 	.word	0x08007207
 8007178:	08007207 	.word	0x08007207
 800717c:	08007207 	.word	0x08007207
 8007180:	08007207 	.word	0x08007207
 8007184:	08007207 	.word	0x08007207
 8007188:	08007207 	.word	0x08007207
 800718c:	08007207 	.word	0x08007207
 8007190:	080071c3 	.word	0x080071c3
 8007194:	080071ed 	.word	0x080071ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b03      	cmp	r3, #3
 80071a2:	d107      	bne.n	80071b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80071a4:	f107 030a 	add.w	r3, r7, #10
 80071a8:	2202      	movs	r2, #2
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 fd33 	bl	8008c18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071b2:	e032      	b.n	800721a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f001 fcbd 	bl	8008b36 <USBD_CtlError>
            ret = USBD_FAIL;
 80071bc:	2303      	movs	r3, #3
 80071be:	75fb      	strb	r3, [r7, #23]
          break;
 80071c0:	e02b      	b.n	800721a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	d107      	bne.n	80071de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80071ce:	f107 030d 	add.w	r3, r7, #13
 80071d2:	2201      	movs	r2, #1
 80071d4:	4619      	mov	r1, r3
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f001 fd1e 	bl	8008c18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071dc:	e01d      	b.n	800721a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f001 fca8 	bl	8008b36 <USBD_CtlError>
            ret = USBD_FAIL;
 80071e6:	2303      	movs	r3, #3
 80071e8:	75fb      	strb	r3, [r7, #23]
          break;
 80071ea:	e016      	b.n	800721a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	d00f      	beq.n	8007218 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80071f8:	6839      	ldr	r1, [r7, #0]
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f001 fc9b 	bl	8008b36 <USBD_CtlError>
            ret = USBD_FAIL;
 8007200:	2303      	movs	r3, #3
 8007202:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007204:	e008      	b.n	8007218 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 fc94 	bl	8008b36 <USBD_CtlError>
          ret = USBD_FAIL;
 800720e:	2303      	movs	r3, #3
 8007210:	75fb      	strb	r3, [r7, #23]
          break;
 8007212:	e002      	b.n	800721a <USBD_CDC_Setup+0x19e>
          break;
 8007214:	bf00      	nop
 8007216:	e008      	b.n	800722a <USBD_CDC_Setup+0x1ae>
          break;
 8007218:	bf00      	nop
      }
      break;
 800721a:	e006      	b.n	800722a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f001 fc89 	bl	8008b36 <USBD_CtlError>
      ret = USBD_FAIL;
 8007224:	2303      	movs	r3, #3
 8007226:	75fb      	strb	r3, [r7, #23]
      break;
 8007228:	bf00      	nop
  }

  return (uint8_t)ret;
 800722a:	7dfb      	ldrb	r3, [r7, #23]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	460b      	mov	r3, r1
 800723e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007246:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	32b0      	adds	r2, #176	; 0xb0
 8007252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800725a:	2303      	movs	r3, #3
 800725c:	e065      	b.n	800732a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	32b0      	adds	r2, #176	; 0xb0
 8007268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800726e:	78fb      	ldrb	r3, [r7, #3]
 8007270:	f003 020f 	and.w	r2, r3, #15
 8007274:	6879      	ldr	r1, [r7, #4]
 8007276:	4613      	mov	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	440b      	add	r3, r1
 8007280:	3318      	adds	r3, #24
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d02f      	beq.n	80072e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007288:	78fb      	ldrb	r3, [r7, #3]
 800728a:	f003 020f 	and.w	r2, r3, #15
 800728e:	6879      	ldr	r1, [r7, #4]
 8007290:	4613      	mov	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	440b      	add	r3, r1
 800729a:	3318      	adds	r3, #24
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	78fb      	ldrb	r3, [r7, #3]
 80072a0:	f003 010f 	and.w	r1, r3, #15
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	460b      	mov	r3, r1
 80072a8:	00db      	lsls	r3, r3, #3
 80072aa:	440b      	add	r3, r1
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4403      	add	r3, r0
 80072b0:	3348      	adds	r3, #72	; 0x48
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80072b8:	fb01 f303 	mul.w	r3, r1, r3
 80072bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d112      	bne.n	80072e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80072c2:	78fb      	ldrb	r3, [r7, #3]
 80072c4:	f003 020f 	and.w	r2, r3, #15
 80072c8:	6879      	ldr	r1, [r7, #4]
 80072ca:	4613      	mov	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	440b      	add	r3, r1
 80072d4:	3318      	adds	r3, #24
 80072d6:	2200      	movs	r2, #0
 80072d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80072da:	78f9      	ldrb	r1, [r7, #3]
 80072dc:	2300      	movs	r3, #0
 80072de:	2200      	movs	r2, #0
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f002 f9ae 	bl	8009642 <USBD_LL_Transmit>
 80072e6:	e01f      	b.n	8007328 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	33b0      	adds	r3, #176	; 0xb0
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d010      	beq.n	8007328 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	33b0      	adds	r3, #176	; 0xb0
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007324:	78fa      	ldrb	r2, [r7, #3]
 8007326:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b084      	sub	sp, #16
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	460b      	mov	r3, r1
 800733c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	32b0      	adds	r2, #176	; 0xb0
 8007348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	32b0      	adds	r2, #176	; 0xb0
 8007358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d101      	bne.n	8007364 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007360:	2303      	movs	r3, #3
 8007362:	e01a      	b.n	800739a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007364:	78fb      	ldrb	r3, [r7, #3]
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f002 f9ac 	bl	80096c6 <USBD_LL_GetRxDataSize>
 800736e:	4602      	mov	r2, r0
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	33b0      	adds	r3, #176	; 0xb0
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4413      	add	r3, r2
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007394:	4611      	mov	r1, r2
 8007396:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	32b0      	adds	r2, #176	; 0xb0
 80073b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e025      	b.n	8007410 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	33b0      	adds	r3, #176	; 0xb0
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d01a      	beq.n	800740e <USBD_CDC_EP0_RxReady+0x6c>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80073de:	2bff      	cmp	r3, #255	; 0xff
 80073e0:	d015      	beq.n	800740e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	33b0      	adds	r3, #176	; 0xb0
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80073fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007402:	b292      	uxth	r2, r2
 8007404:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	22ff      	movs	r2, #255	; 0xff
 800740a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007420:	2182      	movs	r1, #130	; 0x82
 8007422:	4818      	ldr	r0, [pc, #96]	; (8007484 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007424:	f000 fd4f 	bl	8007ec6 <USBD_GetEpDesc>
 8007428:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800742a:	2101      	movs	r1, #1
 800742c:	4815      	ldr	r0, [pc, #84]	; (8007484 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800742e:	f000 fd4a 	bl	8007ec6 <USBD_GetEpDesc>
 8007432:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007434:	2181      	movs	r1, #129	; 0x81
 8007436:	4813      	ldr	r0, [pc, #76]	; (8007484 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007438:	f000 fd45 	bl	8007ec6 <USBD_GetEpDesc>
 800743c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d002      	beq.n	800744a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	2210      	movs	r2, #16
 8007448:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d006      	beq.n	800745e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	2200      	movs	r2, #0
 8007454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007458:	711a      	strb	r2, [r3, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d006      	beq.n	8007472 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800746c:	711a      	strb	r2, [r3, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2243      	movs	r2, #67	; 0x43
 8007476:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007478:	4b02      	ldr	r3, [pc, #8]	; (8007484 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800747a:	4618      	mov	r0, r3
 800747c:	3718      	adds	r7, #24
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	20000050 	.word	0x20000050

08007488 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007490:	2182      	movs	r1, #130	; 0x82
 8007492:	4818      	ldr	r0, [pc, #96]	; (80074f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007494:	f000 fd17 	bl	8007ec6 <USBD_GetEpDesc>
 8007498:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800749a:	2101      	movs	r1, #1
 800749c:	4815      	ldr	r0, [pc, #84]	; (80074f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800749e:	f000 fd12 	bl	8007ec6 <USBD_GetEpDesc>
 80074a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074a4:	2181      	movs	r1, #129	; 0x81
 80074a6:	4813      	ldr	r0, [pc, #76]	; (80074f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074a8:	f000 fd0d 	bl	8007ec6 <USBD_GetEpDesc>
 80074ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d002      	beq.n	80074ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2210      	movs	r2, #16
 80074b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d006      	beq.n	80074ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	2200      	movs	r2, #0
 80074c4:	711a      	strb	r2, [r3, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f042 0202 	orr.w	r2, r2, #2
 80074cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d006      	beq.n	80074e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	711a      	strb	r2, [r3, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f042 0202 	orr.w	r2, r2, #2
 80074e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2243      	movs	r2, #67	; 0x43
 80074e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074e8:	4b02      	ldr	r3, [pc, #8]	; (80074f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3718      	adds	r7, #24
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	20000050 	.word	0x20000050

080074f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007500:	2182      	movs	r1, #130	; 0x82
 8007502:	4818      	ldr	r0, [pc, #96]	; (8007564 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007504:	f000 fcdf 	bl	8007ec6 <USBD_GetEpDesc>
 8007508:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800750a:	2101      	movs	r1, #1
 800750c:	4815      	ldr	r0, [pc, #84]	; (8007564 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800750e:	f000 fcda 	bl	8007ec6 <USBD_GetEpDesc>
 8007512:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007514:	2181      	movs	r1, #129	; 0x81
 8007516:	4813      	ldr	r0, [pc, #76]	; (8007564 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007518:	f000 fcd5 	bl	8007ec6 <USBD_GetEpDesc>
 800751c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	2210      	movs	r2, #16
 8007528:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d006      	beq.n	800753e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	2200      	movs	r2, #0
 8007534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007538:	711a      	strb	r2, [r3, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d006      	beq.n	8007552 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800754c:	711a      	strb	r2, [r3, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2243      	movs	r2, #67	; 0x43
 8007556:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007558:	4b02      	ldr	r3, [pc, #8]	; (8007564 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800755a:	4618      	mov	r0, r3
 800755c:	3718      	adds	r7, #24
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	20000050 	.word	0x20000050

08007568 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	220a      	movs	r2, #10
 8007574:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007576:	4b03      	ldr	r3, [pc, #12]	; (8007584 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007578:	4618      	mov	r0, r3
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	2000000c 	.word	0x2000000c

08007588 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d101      	bne.n	800759c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007598:	2303      	movs	r3, #3
 800759a:	e009      	b.n	80075b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	33b0      	adds	r3, #176	; 0xb0
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	32b0      	adds	r2, #176	; 0xb0
 80075d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80075de:	2303      	movs	r3, #3
 80075e0:	e008      	b.n	80075f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	371c      	adds	r7, #28
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	32b0      	adds	r2, #176	; 0xb0
 8007614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007618:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007620:	2303      	movs	r3, #3
 8007622:	e004      	b.n	800762e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
	...

0800763c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	32b0      	adds	r2, #176	; 0xb0
 800764e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007652:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007654:	2301      	movs	r3, #1
 8007656:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	32b0      	adds	r2, #176	; 0xb0
 8007662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800766a:	2303      	movs	r3, #3
 800766c:	e025      	b.n	80076ba <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007674:	2b00      	cmp	r3, #0
 8007676:	d11f      	bne.n	80076b8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2201      	movs	r2, #1
 800767c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007680:	4b10      	ldr	r3, [pc, #64]	; (80076c4 <USBD_CDC_TransmitPacket+0x88>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	f003 020f 	and.w	r2, r3, #15
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	4613      	mov	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4403      	add	r3, r0
 800769a:	3318      	adds	r3, #24
 800769c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800769e:	4b09      	ldr	r3, [pc, #36]	; (80076c4 <USBD_CDC_TransmitPacket+0x88>)
 80076a0:	7819      	ldrb	r1, [r3, #0]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f001 ffc7 	bl	8009642 <USBD_LL_Transmit>

    ret = USBD_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	20000093 	.word	0x20000093

080076c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	32b0      	adds	r2, #176	; 0xb0
 80076da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	32b0      	adds	r2, #176	; 0xb0
 80076ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e018      	b.n	8007728 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	7c1b      	ldrb	r3, [r3, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10a      	bne.n	8007714 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076fe:	4b0c      	ldr	r3, [pc, #48]	; (8007730 <USBD_CDC_ReceivePacket+0x68>)
 8007700:	7819      	ldrb	r1, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f001 ffb9 	bl	8009684 <USBD_LL_PrepareReceive>
 8007712:	e008      	b.n	8007726 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007714:	4b06      	ldr	r3, [pc, #24]	; (8007730 <USBD_CDC_ReceivePacket+0x68>)
 8007716:	7819      	ldrb	r1, [r3, #0]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800771e:	2340      	movs	r3, #64	; 0x40
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f001 ffaf 	bl	8009684 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	20000094 	.word	0x20000094

08007734 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	4613      	mov	r3, r2
 8007740:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d101      	bne.n	800774c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007748:	2303      	movs	r3, #3
 800774a:	e01f      	b.n	800778c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	79fa      	ldrb	r2, [r7, #7]
 800777e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f001 fe29 	bl	80093d8 <USBD_LL_Init>
 8007786:	4603      	mov	r3, r0
 8007788:	75fb      	strb	r3, [r7, #23]

  return ret;
 800778a:	7dfb      	ldrb	r3, [r7, #23]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3718      	adds	r7, #24
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e025      	b.n	80077f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	32ae      	adds	r2, #174	; 0xae
 80077be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00f      	beq.n	80077e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	32ae      	adds	r2, #174	; 0xae
 80077d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d8:	f107 020e 	add.w	r2, r7, #14
 80077dc:	4610      	mov	r0, r2
 80077de:	4798      	blx	r3
 80077e0:	4602      	mov	r2, r0
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80077ee:	1c5a      	adds	r2, r3, #1
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f001 fe31 	bl	8009470 <USBD_LL_Start>
 800780e:	4603      	mov	r3, r0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007820:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007822:	4618      	mov	r0, r3
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	460b      	mov	r3, r1
 8007838:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007844:	2b00      	cmp	r3, #0
 8007846:	d009      	beq.n	800785c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	78fa      	ldrb	r2, [r7, #3]
 8007852:	4611      	mov	r1, r2
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	4798      	blx	r3
 8007858:	4603      	mov	r3, r0
 800785a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800785c:	7bfb      	ldrb	r3, [r7, #15]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	460b      	mov	r3, r1
 8007870:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	78fa      	ldrb	r2, [r7, #3]
 8007880:	4611      	mov	r1, r2
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	4798      	blx	r3
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800788c:	2303      	movs	r3, #3
 800788e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007890:	7bfb      	ldrb	r3, [r7, #15]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b084      	sub	sp, #16
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078aa:	6839      	ldr	r1, [r7, #0]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f001 f908 	bl	8008ac2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80078c0:	461a      	mov	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078ce:	f003 031f 	and.w	r3, r3, #31
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d01a      	beq.n	800790c <USBD_LL_SetupStage+0x72>
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d822      	bhi.n	8007920 <USBD_LL_SetupStage+0x86>
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d002      	beq.n	80078e4 <USBD_LL_SetupStage+0x4a>
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d00a      	beq.n	80078f8 <USBD_LL_SetupStage+0x5e>
 80078e2:	e01d      	b.n	8007920 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fb5f 	bl	8007fb0 <USBD_StdDevReq>
 80078f2:	4603      	mov	r3, r0
 80078f4:	73fb      	strb	r3, [r7, #15]
      break;
 80078f6:	e020      	b.n	800793a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fbc7 	bl	8008094 <USBD_StdItfReq>
 8007906:	4603      	mov	r3, r0
 8007908:	73fb      	strb	r3, [r7, #15]
      break;
 800790a:	e016      	b.n	800793a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fc29 	bl	800816c <USBD_StdEPReq>
 800791a:	4603      	mov	r3, r0
 800791c:	73fb      	strb	r3, [r7, #15]
      break;
 800791e:	e00c      	b.n	800793a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007926:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800792a:	b2db      	uxtb	r3, r3
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f001 fdfe 	bl	8009530 <USBD_LL_StallEP>
 8007934:	4603      	mov	r3, r0
 8007936:	73fb      	strb	r3, [r7, #15]
      break;
 8007938:	bf00      	nop
  }

  return ret;
 800793a:	7bfb      	ldrb	r3, [r7, #15]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	460b      	mov	r3, r1
 800794e:	607a      	str	r2, [r7, #4]
 8007950:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007956:	7afb      	ldrb	r3, [r7, #11]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d16e      	bne.n	8007a3a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007962:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800796a:	2b03      	cmp	r3, #3
 800796c:	f040 8098 	bne.w	8007aa0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	689a      	ldr	r2, [r3, #8]
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	429a      	cmp	r2, r3
 800797a:	d913      	bls.n	80079a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	1ad2      	subs	r2, r2, r3
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	68da      	ldr	r2, [r3, #12]
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	4293      	cmp	r3, r2
 8007994:	bf28      	it	cs
 8007996:	4613      	movcs	r3, r2
 8007998:	461a      	mov	r2, r3
 800799a:	6879      	ldr	r1, [r7, #4]
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f001 f984 	bl	8008caa <USBD_CtlContinueRx>
 80079a2:	e07d      	b.n	8007aa0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079aa:	f003 031f 	and.w	r3, r3, #31
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d014      	beq.n	80079dc <USBD_LL_DataOutStage+0x98>
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d81d      	bhi.n	80079f2 <USBD_LL_DataOutStage+0xae>
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d002      	beq.n	80079c0 <USBD_LL_DataOutStage+0x7c>
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d003      	beq.n	80079c6 <USBD_LL_DataOutStage+0x82>
 80079be:	e018      	b.n	80079f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	75bb      	strb	r3, [r7, #22]
            break;
 80079c4:	e018      	b.n	80079f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	4619      	mov	r1, r3
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f000 fa5e 	bl	8007e92 <USBD_CoreFindIF>
 80079d6:	4603      	mov	r3, r0
 80079d8:	75bb      	strb	r3, [r7, #22]
            break;
 80079da:	e00d      	b.n	80079f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	4619      	mov	r1, r3
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f000 fa60 	bl	8007eac <USBD_CoreFindEP>
 80079ec:	4603      	mov	r3, r0
 80079ee:	75bb      	strb	r3, [r7, #22]
            break;
 80079f0:	e002      	b.n	80079f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	75bb      	strb	r3, [r7, #22]
            break;
 80079f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80079f8:	7dbb      	ldrb	r3, [r7, #22]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d119      	bne.n	8007a32 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	d113      	bne.n	8007a32 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007a0a:	7dba      	ldrb	r2, [r7, #22]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	32ae      	adds	r2, #174	; 0xae
 8007a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00b      	beq.n	8007a32 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007a1a:	7dba      	ldrb	r2, [r7, #22]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007a22:	7dba      	ldrb	r2, [r7, #22]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	32ae      	adds	r2, #174	; 0xae
 8007a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f001 f94a 	bl	8008ccc <USBD_CtlSendStatus>
 8007a38:	e032      	b.n	8007aa0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007a3a:	7afb      	ldrb	r3, [r7, #11]
 8007a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	4619      	mov	r1, r3
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 fa31 	bl	8007eac <USBD_CoreFindEP>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a4e:	7dbb      	ldrb	r3, [r7, #22]
 8007a50:	2bff      	cmp	r3, #255	; 0xff
 8007a52:	d025      	beq.n	8007aa0 <USBD_LL_DataOutStage+0x15c>
 8007a54:	7dbb      	ldrb	r3, [r7, #22]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d122      	bne.n	8007aa0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b03      	cmp	r3, #3
 8007a64:	d117      	bne.n	8007a96 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007a66:	7dba      	ldrb	r2, [r7, #22]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	32ae      	adds	r2, #174	; 0xae
 8007a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00f      	beq.n	8007a96 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007a76:	7dba      	ldrb	r2, [r7, #22]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007a7e:	7dba      	ldrb	r2, [r7, #22]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	32ae      	adds	r2, #174	; 0xae
 8007a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	7afa      	ldrb	r2, [r7, #11]
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	4798      	blx	r3
 8007a92:	4603      	mov	r3, r0
 8007a94:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d001      	beq.n	8007aa0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
 8007a9e:	e000      	b.n	8007aa2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b086      	sub	sp, #24
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	60f8      	str	r0, [r7, #12]
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	607a      	str	r2, [r7, #4]
 8007ab6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007ab8:	7afb      	ldrb	r3, [r7, #11]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d16f      	bne.n	8007b9e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3314      	adds	r3, #20
 8007ac2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d15a      	bne.n	8007b84 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	689a      	ldr	r2, [r3, #8]
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d914      	bls.n	8007b04 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	689a      	ldr	r2, [r3, #8]
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	1ad2      	subs	r2, r2, r3
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	461a      	mov	r2, r3
 8007aee:	6879      	ldr	r1, [r7, #4]
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f001 f8ac 	bl	8008c4e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007af6:	2300      	movs	r3, #0
 8007af8:	2200      	movs	r2, #0
 8007afa:	2100      	movs	r1, #0
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f001 fdc1 	bl	8009684 <USBD_LL_PrepareReceive>
 8007b02:	e03f      	b.n	8007b84 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	68da      	ldr	r2, [r3, #12]
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d11c      	bne.n	8007b4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d316      	bcc.n	8007b4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d20f      	bcs.n	8007b4a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f001 f88d 	bl	8008c4e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	2200      	movs	r2, #0
 8007b40:	2100      	movs	r1, #0
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f001 fd9e 	bl	8009684 <USBD_LL_PrepareReceive>
 8007b48:	e01c      	b.n	8007b84 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b03      	cmp	r3, #3
 8007b54:	d10f      	bne.n	8007b76 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d009      	beq.n	8007b76 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b76:	2180      	movs	r1, #128	; 0x80
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f001 fcd9 	bl	8009530 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f001 f8b7 	bl	8008cf2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d03a      	beq.n	8007c04 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f7ff fe42 	bl	8007818 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007b9c:	e032      	b.n	8007c04 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007b9e:	7afb      	ldrb	r3, [r7, #11]
 8007ba0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 f97f 	bl	8007eac <USBD_CoreFindEP>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bb2:	7dfb      	ldrb	r3, [r7, #23]
 8007bb4:	2bff      	cmp	r3, #255	; 0xff
 8007bb6:	d025      	beq.n	8007c04 <USBD_LL_DataInStage+0x15a>
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d122      	bne.n	8007c04 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d11c      	bne.n	8007c04 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007bca:	7dfa      	ldrb	r2, [r7, #23]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	32ae      	adds	r2, #174	; 0xae
 8007bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d014      	beq.n	8007c04 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007bda:	7dfa      	ldrb	r2, [r7, #23]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007be2:	7dfa      	ldrb	r2, [r7, #23]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	32ae      	adds	r2, #174	; 0xae
 8007be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	7afa      	ldrb	r2, [r7, #11]
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	4798      	blx	r3
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007bfa:	7dbb      	ldrb	r3, [r7, #22]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007c00:	7dbb      	ldrb	r3, [r7, #22]
 8007c02:	e000      	b.n	8007c06 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b084      	sub	sp, #16
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d014      	beq.n	8007c74 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00e      	beq.n	8007c74 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	6852      	ldr	r2, [r2, #4]
 8007c62:	b2d2      	uxtb	r2, r2
 8007c64:	4611      	mov	r1, r2
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	4798      	blx	r3
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d001      	beq.n	8007c74 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007c70:	2303      	movs	r3, #3
 8007c72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c74:	2340      	movs	r3, #64	; 0x40
 8007c76:	2200      	movs	r2, #0
 8007c78:	2100      	movs	r1, #0
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f001 fc13 	bl	80094a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2240      	movs	r2, #64	; 0x40
 8007c8c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c90:	2340      	movs	r3, #64	; 0x40
 8007c92:	2200      	movs	r2, #0
 8007c94:	2180      	movs	r1, #128	; 0x80
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f001 fc05 	bl	80094a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2240      	movs	r2, #64	; 0x40
 8007ca6:	621a      	str	r2, [r3, #32]

  return ret;
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	460b      	mov	r3, r1
 8007cbc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	78fa      	ldrb	r2, [r7, #3]
 8007cc2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b083      	sub	sp, #12
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2204      	movs	r2, #4
 8007cec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b083      	sub	sp, #12
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b04      	cmp	r3, #4
 8007d10:	d106      	bne.n	8007d20 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b082      	sub	sp, #8
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	d110      	bne.n	8007d64 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00b      	beq.n	8007d64 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d52:	69db      	ldr	r3, [r3, #28]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d005      	beq.n	8007d64 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5e:	69db      	ldr	r3, [r3, #28]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b082      	sub	sp, #8
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	460b      	mov	r3, r1
 8007d78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	32ae      	adds	r2, #174	; 0xae
 8007d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d101      	bne.n	8007d90 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	e01c      	b.n	8007dca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b03      	cmp	r3, #3
 8007d9a:	d115      	bne.n	8007dc8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	32ae      	adds	r2, #174	; 0xae
 8007da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007daa:	6a1b      	ldr	r3, [r3, #32]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00b      	beq.n	8007dc8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	32ae      	adds	r2, #174	; 0xae
 8007dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	78fa      	ldrb	r2, [r7, #3]
 8007dc2:	4611      	mov	r1, r2
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	460b      	mov	r3, r1
 8007ddc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	32ae      	adds	r2, #174	; 0xae
 8007de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d101      	bne.n	8007df4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e01c      	b.n	8007e2e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b03      	cmp	r3, #3
 8007dfe:	d115      	bne.n	8007e2c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	32ae      	adds	r2, #174	; 0xae
 8007e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00b      	beq.n	8007e2c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	32ae      	adds	r2, #174	; 0xae
 8007e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e24:	78fa      	ldrb	r2, [r7, #3]
 8007e26:	4611      	mov	r1, r2
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b083      	sub	sp, #12
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00e      	beq.n	8007e88 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	6852      	ldr	r2, [r2, #4]
 8007e76:	b2d2      	uxtb	r2, r2
 8007e78:	4611      	mov	r1, r2
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	4798      	blx	r3
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d001      	beq.n	8007e88 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007e84:	2303      	movs	r3, #3
 8007e86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b083      	sub	sp, #12
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e9e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007eb8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b086      	sub	sp, #24
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007eda:	2300      	movs	r3, #0
 8007edc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	885b      	ldrh	r3, [r3, #2]
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d920      	bls.n	8007f30 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007ef6:	e013      	b.n	8007f20 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007ef8:	f107 030a 	add.w	r3, r7, #10
 8007efc:	4619      	mov	r1, r3
 8007efe:	6978      	ldr	r0, [r7, #20]
 8007f00:	f000 f81b 	bl	8007f3a <USBD_GetNextDesc>
 8007f04:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	785b      	ldrb	r3, [r3, #1]
 8007f0a:	2b05      	cmp	r3, #5
 8007f0c:	d108      	bne.n	8007f20 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	789b      	ldrb	r3, [r3, #2]
 8007f16:	78fa      	ldrb	r2, [r7, #3]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d008      	beq.n	8007f2e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	885b      	ldrh	r3, [r3, #2]
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	897b      	ldrh	r3, [r7, #10]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d8e5      	bhi.n	8007ef8 <USBD_GetEpDesc+0x32>
 8007f2c:	e000      	b.n	8007f30 <USBD_GetEpDesc+0x6a>
          break;
 8007f2e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007f30:	693b      	ldr	r3, [r7, #16]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3718      	adds	r7, #24
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b085      	sub	sp, #20
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	881a      	ldrh	r2, [r3, #0]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	4413      	add	r3, r2
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4413      	add	r3, r2
 8007f64:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f66:	68fb      	ldr	r3, [r7, #12]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b087      	sub	sp, #28
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007f92:	8a3b      	ldrh	r3, [r7, #16]
 8007f94:	021b      	lsls	r3, r3, #8
 8007f96:	b21a      	sxth	r2, r3
 8007f98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	b21b      	sxth	r3, r3
 8007fa0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007fa2:	89fb      	ldrh	r3, [r7, #14]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	371c      	adds	r7, #28
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fc6:	2b40      	cmp	r3, #64	; 0x40
 8007fc8:	d005      	beq.n	8007fd6 <USBD_StdDevReq+0x26>
 8007fca:	2b40      	cmp	r3, #64	; 0x40
 8007fcc:	d857      	bhi.n	800807e <USBD_StdDevReq+0xce>
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00f      	beq.n	8007ff2 <USBD_StdDevReq+0x42>
 8007fd2:	2b20      	cmp	r3, #32
 8007fd4:	d153      	bne.n	800807e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	32ae      	adds	r2, #174	; 0xae
 8007fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	4798      	blx	r3
 8007fec:	4603      	mov	r3, r0
 8007fee:	73fb      	strb	r3, [r7, #15]
      break;
 8007ff0:	e04a      	b.n	8008088 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	785b      	ldrb	r3, [r3, #1]
 8007ff6:	2b09      	cmp	r3, #9
 8007ff8:	d83b      	bhi.n	8008072 <USBD_StdDevReq+0xc2>
 8007ffa:	a201      	add	r2, pc, #4	; (adr r2, 8008000 <USBD_StdDevReq+0x50>)
 8007ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008000:	08008055 	.word	0x08008055
 8008004:	08008069 	.word	0x08008069
 8008008:	08008073 	.word	0x08008073
 800800c:	0800805f 	.word	0x0800805f
 8008010:	08008073 	.word	0x08008073
 8008014:	08008033 	.word	0x08008033
 8008018:	08008029 	.word	0x08008029
 800801c:	08008073 	.word	0x08008073
 8008020:	0800804b 	.word	0x0800804b
 8008024:	0800803d 	.word	0x0800803d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 fa3c 	bl	80084a8 <USBD_GetDescriptor>
          break;
 8008030:	e024      	b.n	800807c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fba1 	bl	800877c <USBD_SetAddress>
          break;
 800803a:	e01f      	b.n	800807c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fbe0 	bl	8008804 <USBD_SetConfig>
 8008044:	4603      	mov	r3, r0
 8008046:	73fb      	strb	r3, [r7, #15]
          break;
 8008048:	e018      	b.n	800807c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fc83 	bl	8008958 <USBD_GetConfig>
          break;
 8008052:	e013      	b.n	800807c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fcb4 	bl	80089c4 <USBD_GetStatus>
          break;
 800805c:	e00e      	b.n	800807c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fce3 	bl	8008a2c <USBD_SetFeature>
          break;
 8008066:	e009      	b.n	800807c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fd07 	bl	8008a7e <USBD_ClrFeature>
          break;
 8008070:	e004      	b.n	800807c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fd5e 	bl	8008b36 <USBD_CtlError>
          break;
 800807a:	bf00      	nop
      }
      break;
 800807c:	e004      	b.n	8008088 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fd58 	bl	8008b36 <USBD_CtlError>
      break;
 8008086:	bf00      	nop
  }

  return ret;
 8008088:	7bfb      	ldrb	r3, [r7, #15]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop

08008094 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800809e:	2300      	movs	r3, #0
 80080a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080aa:	2b40      	cmp	r3, #64	; 0x40
 80080ac:	d005      	beq.n	80080ba <USBD_StdItfReq+0x26>
 80080ae:	2b40      	cmp	r3, #64	; 0x40
 80080b0:	d852      	bhi.n	8008158 <USBD_StdItfReq+0xc4>
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <USBD_StdItfReq+0x26>
 80080b6:	2b20      	cmp	r3, #32
 80080b8:	d14e      	bne.n	8008158 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	3b01      	subs	r3, #1
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d840      	bhi.n	800814a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	889b      	ldrh	r3, [r3, #4]
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d836      	bhi.n	8008140 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	889b      	ldrh	r3, [r3, #4]
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	4619      	mov	r1, r3
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7ff fed9 	bl	8007e92 <USBD_CoreFindIF>
 80080e0:	4603      	mov	r3, r0
 80080e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080e4:	7bbb      	ldrb	r3, [r7, #14]
 80080e6:	2bff      	cmp	r3, #255	; 0xff
 80080e8:	d01d      	beq.n	8008126 <USBD_StdItfReq+0x92>
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d11a      	bne.n	8008126 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80080f0:	7bba      	ldrb	r2, [r7, #14]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	32ae      	adds	r2, #174	; 0xae
 80080f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00f      	beq.n	8008120 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008100:	7bba      	ldrb	r2, [r7, #14]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008108:	7bba      	ldrb	r2, [r7, #14]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	32ae      	adds	r2, #174	; 0xae
 800810e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	6839      	ldr	r1, [r7, #0]
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	4798      	blx	r3
 800811a:	4603      	mov	r3, r0
 800811c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800811e:	e004      	b.n	800812a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008120:	2303      	movs	r3, #3
 8008122:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008124:	e001      	b.n	800812a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008126:	2303      	movs	r3, #3
 8008128:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	88db      	ldrh	r3, [r3, #6]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d110      	bne.n	8008154 <USBD_StdItfReq+0xc0>
 8008132:	7bfb      	ldrb	r3, [r7, #15]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10d      	bne.n	8008154 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fdc7 	bl	8008ccc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800813e:	e009      	b.n	8008154 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fcf7 	bl	8008b36 <USBD_CtlError>
          break;
 8008148:	e004      	b.n	8008154 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fcf2 	bl	8008b36 <USBD_CtlError>
          break;
 8008152:	e000      	b.n	8008156 <USBD_StdItfReq+0xc2>
          break;
 8008154:	bf00      	nop
      }
      break;
 8008156:	e004      	b.n	8008162 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fceb 	bl	8008b36 <USBD_CtlError>
      break;
 8008160:	bf00      	nop
  }

  return ret;
 8008162:	7bfb      	ldrb	r3, [r7, #15]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	889b      	ldrh	r3, [r3, #4]
 800817e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008188:	2b40      	cmp	r3, #64	; 0x40
 800818a:	d007      	beq.n	800819c <USBD_StdEPReq+0x30>
 800818c:	2b40      	cmp	r3, #64	; 0x40
 800818e:	f200 817f 	bhi.w	8008490 <USBD_StdEPReq+0x324>
 8008192:	2b00      	cmp	r3, #0
 8008194:	d02a      	beq.n	80081ec <USBD_StdEPReq+0x80>
 8008196:	2b20      	cmp	r3, #32
 8008198:	f040 817a 	bne.w	8008490 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800819c:	7bbb      	ldrb	r3, [r7, #14]
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff fe83 	bl	8007eac <USBD_CoreFindEP>
 80081a6:	4603      	mov	r3, r0
 80081a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081aa:	7b7b      	ldrb	r3, [r7, #13]
 80081ac:	2bff      	cmp	r3, #255	; 0xff
 80081ae:	f000 8174 	beq.w	800849a <USBD_StdEPReq+0x32e>
 80081b2:	7b7b      	ldrb	r3, [r7, #13]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f040 8170 	bne.w	800849a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80081ba:	7b7a      	ldrb	r2, [r7, #13]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80081c2:	7b7a      	ldrb	r2, [r7, #13]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	32ae      	adds	r2, #174	; 0xae
 80081c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f000 8163 	beq.w	800849a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80081d4:	7b7a      	ldrb	r2, [r7, #13]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	32ae      	adds	r2, #174	; 0xae
 80081da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	4798      	blx	r3
 80081e6:	4603      	mov	r3, r0
 80081e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80081ea:	e156      	b.n	800849a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	785b      	ldrb	r3, [r3, #1]
 80081f0:	2b03      	cmp	r3, #3
 80081f2:	d008      	beq.n	8008206 <USBD_StdEPReq+0x9a>
 80081f4:	2b03      	cmp	r3, #3
 80081f6:	f300 8145 	bgt.w	8008484 <USBD_StdEPReq+0x318>
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 809b 	beq.w	8008336 <USBD_StdEPReq+0x1ca>
 8008200:	2b01      	cmp	r3, #1
 8008202:	d03c      	beq.n	800827e <USBD_StdEPReq+0x112>
 8008204:	e13e      	b.n	8008484 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800820c:	b2db      	uxtb	r3, r3
 800820e:	2b02      	cmp	r3, #2
 8008210:	d002      	beq.n	8008218 <USBD_StdEPReq+0xac>
 8008212:	2b03      	cmp	r3, #3
 8008214:	d016      	beq.n	8008244 <USBD_StdEPReq+0xd8>
 8008216:	e02c      	b.n	8008272 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008218:	7bbb      	ldrb	r3, [r7, #14]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00d      	beq.n	800823a <USBD_StdEPReq+0xce>
 800821e:	7bbb      	ldrb	r3, [r7, #14]
 8008220:	2b80      	cmp	r3, #128	; 0x80
 8008222:	d00a      	beq.n	800823a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008224:	7bbb      	ldrb	r3, [r7, #14]
 8008226:	4619      	mov	r1, r3
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f001 f981 	bl	8009530 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800822e:	2180      	movs	r1, #128	; 0x80
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f001 f97d 	bl	8009530 <USBD_LL_StallEP>
 8008236:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008238:	e020      	b.n	800827c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800823a:	6839      	ldr	r1, [r7, #0]
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fc7a 	bl	8008b36 <USBD_CtlError>
              break;
 8008242:	e01b      	b.n	800827c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	885b      	ldrh	r3, [r3, #2]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10e      	bne.n	800826a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800824c:	7bbb      	ldrb	r3, [r7, #14]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00b      	beq.n	800826a <USBD_StdEPReq+0xfe>
 8008252:	7bbb      	ldrb	r3, [r7, #14]
 8008254:	2b80      	cmp	r3, #128	; 0x80
 8008256:	d008      	beq.n	800826a <USBD_StdEPReq+0xfe>
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	88db      	ldrh	r3, [r3, #6]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d104      	bne.n	800826a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008260:	7bbb      	ldrb	r3, [r7, #14]
 8008262:	4619      	mov	r1, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f001 f963 	bl	8009530 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fd2e 	bl	8008ccc <USBD_CtlSendStatus>

              break;
 8008270:	e004      	b.n	800827c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fc5e 	bl	8008b36 <USBD_CtlError>
              break;
 800827a:	bf00      	nop
          }
          break;
 800827c:	e107      	b.n	800848e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b02      	cmp	r3, #2
 8008288:	d002      	beq.n	8008290 <USBD_StdEPReq+0x124>
 800828a:	2b03      	cmp	r3, #3
 800828c:	d016      	beq.n	80082bc <USBD_StdEPReq+0x150>
 800828e:	e04b      	b.n	8008328 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008290:	7bbb      	ldrb	r3, [r7, #14]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00d      	beq.n	80082b2 <USBD_StdEPReq+0x146>
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	2b80      	cmp	r3, #128	; 0x80
 800829a:	d00a      	beq.n	80082b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 f945 	bl	8009530 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082a6:	2180      	movs	r1, #128	; 0x80
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f001 f941 	bl	8009530 <USBD_LL_StallEP>
 80082ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082b0:	e040      	b.n	8008334 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fc3e 	bl	8008b36 <USBD_CtlError>
              break;
 80082ba:	e03b      	b.n	8008334 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	885b      	ldrh	r3, [r3, #2]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d136      	bne.n	8008332 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80082c4:	7bbb      	ldrb	r3, [r7, #14]
 80082c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d004      	beq.n	80082d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80082ce:	7bbb      	ldrb	r3, [r7, #14]
 80082d0:	4619      	mov	r1, r3
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 f94b 	bl	800956e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fcf7 	bl	8008ccc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80082de:	7bbb      	ldrb	r3, [r7, #14]
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7ff fde2 	bl	8007eac <USBD_CoreFindEP>
 80082e8:	4603      	mov	r3, r0
 80082ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082ec:	7b7b      	ldrb	r3, [r7, #13]
 80082ee:	2bff      	cmp	r3, #255	; 0xff
 80082f0:	d01f      	beq.n	8008332 <USBD_StdEPReq+0x1c6>
 80082f2:	7b7b      	ldrb	r3, [r7, #13]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d11c      	bne.n	8008332 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80082f8:	7b7a      	ldrb	r2, [r7, #13]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008300:	7b7a      	ldrb	r2, [r7, #13]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	32ae      	adds	r2, #174	; 0xae
 8008306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d010      	beq.n	8008332 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008310:	7b7a      	ldrb	r2, [r7, #13]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	32ae      	adds	r2, #174	; 0xae
 8008316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	4798      	blx	r3
 8008322:	4603      	mov	r3, r0
 8008324:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008326:	e004      	b.n	8008332 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fc03 	bl	8008b36 <USBD_CtlError>
              break;
 8008330:	e000      	b.n	8008334 <USBD_StdEPReq+0x1c8>
              break;
 8008332:	bf00      	nop
          }
          break;
 8008334:	e0ab      	b.n	800848e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b02      	cmp	r3, #2
 8008340:	d002      	beq.n	8008348 <USBD_StdEPReq+0x1dc>
 8008342:	2b03      	cmp	r3, #3
 8008344:	d032      	beq.n	80083ac <USBD_StdEPReq+0x240>
 8008346:	e097      	b.n	8008478 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008348:	7bbb      	ldrb	r3, [r7, #14]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d007      	beq.n	800835e <USBD_StdEPReq+0x1f2>
 800834e:	7bbb      	ldrb	r3, [r7, #14]
 8008350:	2b80      	cmp	r3, #128	; 0x80
 8008352:	d004      	beq.n	800835e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fbed 	bl	8008b36 <USBD_CtlError>
                break;
 800835c:	e091      	b.n	8008482 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800835e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008362:	2b00      	cmp	r3, #0
 8008364:	da0b      	bge.n	800837e <USBD_StdEPReq+0x212>
 8008366:	7bbb      	ldrb	r3, [r7, #14]
 8008368:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800836c:	4613      	mov	r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	3310      	adds	r3, #16
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	4413      	add	r3, r2
 800837a:	3304      	adds	r3, #4
 800837c:	e00b      	b.n	8008396 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800837e:	7bbb      	ldrb	r3, [r7, #14]
 8008380:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008384:	4613      	mov	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	4413      	add	r3, r2
 8008394:	3304      	adds	r3, #4
 8008396:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2200      	movs	r2, #0
 800839c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2202      	movs	r2, #2
 80083a2:	4619      	mov	r1, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fc37 	bl	8008c18 <USBD_CtlSendData>
              break;
 80083aa:	e06a      	b.n	8008482 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	da11      	bge.n	80083d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083b4:	7bbb      	ldrb	r3, [r7, #14]
 80083b6:	f003 020f 	and.w	r2, r3, #15
 80083ba:	6879      	ldr	r1, [r7, #4]
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	440b      	add	r3, r1
 80083c6:	3324      	adds	r3, #36	; 0x24
 80083c8:	881b      	ldrh	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d117      	bne.n	80083fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fbb0 	bl	8008b36 <USBD_CtlError>
                  break;
 80083d6:	e054      	b.n	8008482 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083d8:	7bbb      	ldrb	r3, [r7, #14]
 80083da:	f003 020f 	and.w	r2, r3, #15
 80083de:	6879      	ldr	r1, [r7, #4]
 80083e0:	4613      	mov	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	440b      	add	r3, r1
 80083ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d104      	bne.n	80083fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fb9d 	bl	8008b36 <USBD_CtlError>
                  break;
 80083fc:	e041      	b.n	8008482 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008402:	2b00      	cmp	r3, #0
 8008404:	da0b      	bge.n	800841e <USBD_StdEPReq+0x2b2>
 8008406:	7bbb      	ldrb	r3, [r7, #14]
 8008408:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800840c:	4613      	mov	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	3310      	adds	r3, #16
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	4413      	add	r3, r2
 800841a:	3304      	adds	r3, #4
 800841c:	e00b      	b.n	8008436 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800841e:	7bbb      	ldrb	r3, [r7, #14]
 8008420:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008424:	4613      	mov	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	4413      	add	r3, r2
 8008434:	3304      	adds	r3, #4
 8008436:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d002      	beq.n	8008444 <USBD_StdEPReq+0x2d8>
 800843e:	7bbb      	ldrb	r3, [r7, #14]
 8008440:	2b80      	cmp	r3, #128	; 0x80
 8008442:	d103      	bne.n	800844c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	2200      	movs	r2, #0
 8008448:	601a      	str	r2, [r3, #0]
 800844a:	e00e      	b.n	800846a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800844c:	7bbb      	ldrb	r3, [r7, #14]
 800844e:	4619      	mov	r1, r3
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f001 f8ab 	bl	80095ac <USBD_LL_IsStallEP>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d003      	beq.n	8008464 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2201      	movs	r2, #1
 8008460:	601a      	str	r2, [r3, #0]
 8008462:	e002      	b.n	800846a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2200      	movs	r2, #0
 8008468:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2202      	movs	r2, #2
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fbd1 	bl	8008c18 <USBD_CtlSendData>
              break;
 8008476:	e004      	b.n	8008482 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fb5b 	bl	8008b36 <USBD_CtlError>
              break;
 8008480:	bf00      	nop
          }
          break;
 8008482:	e004      	b.n	800848e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fb55 	bl	8008b36 <USBD_CtlError>
          break;
 800848c:	bf00      	nop
      }
      break;
 800848e:	e005      	b.n	800849c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fb4f 	bl	8008b36 <USBD_CtlError>
      break;
 8008498:	e000      	b.n	800849c <USBD_StdEPReq+0x330>
      break;
 800849a:	bf00      	nop
  }

  return ret;
 800849c:	7bfb      	ldrb	r3, [r7, #15]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
	...

080084a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084b6:	2300      	movs	r3, #0
 80084b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084ba:	2300      	movs	r3, #0
 80084bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	885b      	ldrh	r3, [r3, #2]
 80084c2:	0a1b      	lsrs	r3, r3, #8
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	3b01      	subs	r3, #1
 80084c8:	2b06      	cmp	r3, #6
 80084ca:	f200 8128 	bhi.w	800871e <USBD_GetDescriptor+0x276>
 80084ce:	a201      	add	r2, pc, #4	; (adr r2, 80084d4 <USBD_GetDescriptor+0x2c>)
 80084d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d4:	080084f1 	.word	0x080084f1
 80084d8:	08008509 	.word	0x08008509
 80084dc:	08008549 	.word	0x08008549
 80084e0:	0800871f 	.word	0x0800871f
 80084e4:	0800871f 	.word	0x0800871f
 80084e8:	080086bf 	.word	0x080086bf
 80084ec:	080086eb 	.word	0x080086eb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	7c12      	ldrb	r2, [r2, #16]
 80084fc:	f107 0108 	add.w	r1, r7, #8
 8008500:	4610      	mov	r0, r2
 8008502:	4798      	blx	r3
 8008504:	60f8      	str	r0, [r7, #12]
      break;
 8008506:	e112      	b.n	800872e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	7c1b      	ldrb	r3, [r3, #16]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10d      	bne.n	800852c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008518:	f107 0208 	add.w	r2, r7, #8
 800851c:	4610      	mov	r0, r2
 800851e:	4798      	blx	r3
 8008520:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	3301      	adds	r3, #1
 8008526:	2202      	movs	r2, #2
 8008528:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800852a:	e100      	b.n	800872e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008534:	f107 0208 	add.w	r2, r7, #8
 8008538:	4610      	mov	r0, r2
 800853a:	4798      	blx	r3
 800853c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	3301      	adds	r3, #1
 8008542:	2202      	movs	r2, #2
 8008544:	701a      	strb	r2, [r3, #0]
      break;
 8008546:	e0f2      	b.n	800872e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	885b      	ldrh	r3, [r3, #2]
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b05      	cmp	r3, #5
 8008550:	f200 80ac 	bhi.w	80086ac <USBD_GetDescriptor+0x204>
 8008554:	a201      	add	r2, pc, #4	; (adr r2, 800855c <USBD_GetDescriptor+0xb4>)
 8008556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855a:	bf00      	nop
 800855c:	08008575 	.word	0x08008575
 8008560:	080085a9 	.word	0x080085a9
 8008564:	080085dd 	.word	0x080085dd
 8008568:	08008611 	.word	0x08008611
 800856c:	08008645 	.word	0x08008645
 8008570:	08008679 	.word	0x08008679
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00b      	beq.n	8008598 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	7c12      	ldrb	r2, [r2, #16]
 800858c:	f107 0108 	add.w	r1, r7, #8
 8008590:	4610      	mov	r0, r2
 8008592:	4798      	blx	r3
 8008594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008596:	e091      	b.n	80086bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 facb 	bl	8008b36 <USBD_CtlError>
            err++;
 80085a0:	7afb      	ldrb	r3, [r7, #11]
 80085a2:	3301      	adds	r3, #1
 80085a4:	72fb      	strb	r3, [r7, #11]
          break;
 80085a6:	e089      	b.n	80086bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00b      	beq.n	80085cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	7c12      	ldrb	r2, [r2, #16]
 80085c0:	f107 0108 	add.w	r1, r7, #8
 80085c4:	4610      	mov	r0, r2
 80085c6:	4798      	blx	r3
 80085c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ca:	e077      	b.n	80086bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fab1 	bl	8008b36 <USBD_CtlError>
            err++;
 80085d4:	7afb      	ldrb	r3, [r7, #11]
 80085d6:	3301      	adds	r3, #1
 80085d8:	72fb      	strb	r3, [r7, #11]
          break;
 80085da:	e06f      	b.n	80086bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00b      	beq.n	8008600 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	7c12      	ldrb	r2, [r2, #16]
 80085f4:	f107 0108 	add.w	r1, r7, #8
 80085f8:	4610      	mov	r0, r2
 80085fa:	4798      	blx	r3
 80085fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085fe:	e05d      	b.n	80086bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fa97 	bl	8008b36 <USBD_CtlError>
            err++;
 8008608:	7afb      	ldrb	r3, [r7, #11]
 800860a:	3301      	adds	r3, #1
 800860c:	72fb      	strb	r3, [r7, #11]
          break;
 800860e:	e055      	b.n	80086bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00b      	beq.n	8008634 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	7c12      	ldrb	r2, [r2, #16]
 8008628:	f107 0108 	add.w	r1, r7, #8
 800862c:	4610      	mov	r0, r2
 800862e:	4798      	blx	r3
 8008630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008632:	e043      	b.n	80086bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fa7d 	bl	8008b36 <USBD_CtlError>
            err++;
 800863c:	7afb      	ldrb	r3, [r7, #11]
 800863e:	3301      	adds	r3, #1
 8008640:	72fb      	strb	r3, [r7, #11]
          break;
 8008642:	e03b      	b.n	80086bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800864a:	695b      	ldr	r3, [r3, #20]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00b      	beq.n	8008668 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008656:	695b      	ldr	r3, [r3, #20]
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	7c12      	ldrb	r2, [r2, #16]
 800865c:	f107 0108 	add.w	r1, r7, #8
 8008660:	4610      	mov	r0, r2
 8008662:	4798      	blx	r3
 8008664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008666:	e029      	b.n	80086bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008668:	6839      	ldr	r1, [r7, #0]
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fa63 	bl	8008b36 <USBD_CtlError>
            err++;
 8008670:	7afb      	ldrb	r3, [r7, #11]
 8008672:	3301      	adds	r3, #1
 8008674:	72fb      	strb	r3, [r7, #11]
          break;
 8008676:	e021      	b.n	80086bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00b      	beq.n	800869c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	7c12      	ldrb	r2, [r2, #16]
 8008690:	f107 0108 	add.w	r1, r7, #8
 8008694:	4610      	mov	r0, r2
 8008696:	4798      	blx	r3
 8008698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800869a:	e00f      	b.n	80086bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800869c:	6839      	ldr	r1, [r7, #0]
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fa49 	bl	8008b36 <USBD_CtlError>
            err++;
 80086a4:	7afb      	ldrb	r3, [r7, #11]
 80086a6:	3301      	adds	r3, #1
 80086a8:	72fb      	strb	r3, [r7, #11]
          break;
 80086aa:	e007      	b.n	80086bc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fa41 	bl	8008b36 <USBD_CtlError>
          err++;
 80086b4:	7afb      	ldrb	r3, [r7, #11]
 80086b6:	3301      	adds	r3, #1
 80086b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80086ba:	bf00      	nop
      }
      break;
 80086bc:	e037      	b.n	800872e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	7c1b      	ldrb	r3, [r3, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d109      	bne.n	80086da <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ce:	f107 0208 	add.w	r2, r7, #8
 80086d2:	4610      	mov	r0, r2
 80086d4:	4798      	blx	r3
 80086d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086d8:	e029      	b.n	800872e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fa2a 	bl	8008b36 <USBD_CtlError>
        err++;
 80086e2:	7afb      	ldrb	r3, [r7, #11]
 80086e4:	3301      	adds	r3, #1
 80086e6:	72fb      	strb	r3, [r7, #11]
      break;
 80086e8:	e021      	b.n	800872e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	7c1b      	ldrb	r3, [r3, #16]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10d      	bne.n	800870e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fa:	f107 0208 	add.w	r2, r7, #8
 80086fe:	4610      	mov	r0, r2
 8008700:	4798      	blx	r3
 8008702:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	3301      	adds	r3, #1
 8008708:	2207      	movs	r2, #7
 800870a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800870c:	e00f      	b.n	800872e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fa10 	bl	8008b36 <USBD_CtlError>
        err++;
 8008716:	7afb      	ldrb	r3, [r7, #11]
 8008718:	3301      	adds	r3, #1
 800871a:	72fb      	strb	r3, [r7, #11]
      break;
 800871c:	e007      	b.n	800872e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fa08 	bl	8008b36 <USBD_CtlError>
      err++;
 8008726:	7afb      	ldrb	r3, [r7, #11]
 8008728:	3301      	adds	r3, #1
 800872a:	72fb      	strb	r3, [r7, #11]
      break;
 800872c:	bf00      	nop
  }

  if (err != 0U)
 800872e:	7afb      	ldrb	r3, [r7, #11]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d11e      	bne.n	8008772 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	88db      	ldrh	r3, [r3, #6]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d016      	beq.n	800876a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800873c:	893b      	ldrh	r3, [r7, #8]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00e      	beq.n	8008760 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	88da      	ldrh	r2, [r3, #6]
 8008746:	893b      	ldrh	r3, [r7, #8]
 8008748:	4293      	cmp	r3, r2
 800874a:	bf28      	it	cs
 800874c:	4613      	movcs	r3, r2
 800874e:	b29b      	uxth	r3, r3
 8008750:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008752:	893b      	ldrh	r3, [r7, #8]
 8008754:	461a      	mov	r2, r3
 8008756:	68f9      	ldr	r1, [r7, #12]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fa5d 	bl	8008c18 <USBD_CtlSendData>
 800875e:	e009      	b.n	8008774 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f9e7 	bl	8008b36 <USBD_CtlError>
 8008768:	e004      	b.n	8008774 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 faae 	bl	8008ccc <USBD_CtlSendStatus>
 8008770:	e000      	b.n	8008774 <USBD_GetDescriptor+0x2cc>
    return;
 8008772:	bf00      	nop
  }
}
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop

0800877c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	889b      	ldrh	r3, [r3, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d131      	bne.n	80087f2 <USBD_SetAddress+0x76>
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	88db      	ldrh	r3, [r3, #6]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d12d      	bne.n	80087f2 <USBD_SetAddress+0x76>
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	885b      	ldrh	r3, [r3, #2]
 800879a:	2b7f      	cmp	r3, #127	; 0x7f
 800879c:	d829      	bhi.n	80087f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	885b      	ldrh	r3, [r3, #2]
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	2b03      	cmp	r3, #3
 80087b4:	d104      	bne.n	80087c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f9bc 	bl	8008b36 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087be:	e01d      	b.n	80087fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	7bfa      	ldrb	r2, [r7, #15]
 80087c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 ff19 	bl	8009604 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fa7a 	bl	8008ccc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d004      	beq.n	80087e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2202      	movs	r2, #2
 80087e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087e6:	e009      	b.n	80087fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087f0:	e004      	b.n	80087fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f99e 	bl	8008b36 <USBD_CtlError>
  }
}
 80087fa:	bf00      	nop
 80087fc:	bf00      	nop
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	885b      	ldrh	r3, [r3, #2]
 8008816:	b2da      	uxtb	r2, r3
 8008818:	4b4e      	ldr	r3, [pc, #312]	; (8008954 <USBD_SetConfig+0x150>)
 800881a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800881c:	4b4d      	ldr	r3, [pc, #308]	; (8008954 <USBD_SetConfig+0x150>)
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d905      	bls.n	8008830 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f985 	bl	8008b36 <USBD_CtlError>
    return USBD_FAIL;
 800882c:	2303      	movs	r3, #3
 800882e:	e08c      	b.n	800894a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b02      	cmp	r3, #2
 800883a:	d002      	beq.n	8008842 <USBD_SetConfig+0x3e>
 800883c:	2b03      	cmp	r3, #3
 800883e:	d029      	beq.n	8008894 <USBD_SetConfig+0x90>
 8008840:	e075      	b.n	800892e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008842:	4b44      	ldr	r3, [pc, #272]	; (8008954 <USBD_SetConfig+0x150>)
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d020      	beq.n	800888c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800884a:	4b42      	ldr	r3, [pc, #264]	; (8008954 <USBD_SetConfig+0x150>)
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	461a      	mov	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008854:	4b3f      	ldr	r3, [pc, #252]	; (8008954 <USBD_SetConfig+0x150>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	4619      	mov	r1, r3
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7fe ffe7 	bl	800782e <USBD_SetClassConfig>
 8008860:	4603      	mov	r3, r0
 8008862:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008864:	7bfb      	ldrb	r3, [r7, #15]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d008      	beq.n	800887c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f962 	bl	8008b36 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2202      	movs	r2, #2
 8008876:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800887a:	e065      	b.n	8008948 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fa25 	bl	8008ccc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2203      	movs	r2, #3
 8008886:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800888a:	e05d      	b.n	8008948 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fa1d 	bl	8008ccc <USBD_CtlSendStatus>
      break;
 8008892:	e059      	b.n	8008948 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008894:	4b2f      	ldr	r3, [pc, #188]	; (8008954 <USBD_SetConfig+0x150>)
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d112      	bne.n	80088c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2202      	movs	r2, #2
 80088a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80088a4:	4b2b      	ldr	r3, [pc, #172]	; (8008954 <USBD_SetConfig+0x150>)
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	461a      	mov	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088ae:	4b29      	ldr	r3, [pc, #164]	; (8008954 <USBD_SetConfig+0x150>)
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7fe ffd6 	bl	8007866 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 fa06 	bl	8008ccc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088c0:	e042      	b.n	8008948 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80088c2:	4b24      	ldr	r3, [pc, #144]	; (8008954 <USBD_SetConfig+0x150>)
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d02a      	beq.n	8008926 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	4619      	mov	r1, r3
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7fe ffc4 	bl	8007866 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80088de:	4b1d      	ldr	r3, [pc, #116]	; (8008954 <USBD_SetConfig+0x150>)
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	461a      	mov	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088e8:	4b1a      	ldr	r3, [pc, #104]	; (8008954 <USBD_SetConfig+0x150>)
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7fe ff9d 	bl	800782e <USBD_SetClassConfig>
 80088f4:	4603      	mov	r3, r0
 80088f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00f      	beq.n	800891e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 f918 	bl	8008b36 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	b2db      	uxtb	r3, r3
 800890c:	4619      	mov	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7fe ffa9 	bl	8007866 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2202      	movs	r2, #2
 8008918:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800891c:	e014      	b.n	8008948 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f9d4 	bl	8008ccc <USBD_CtlSendStatus>
      break;
 8008924:	e010      	b.n	8008948 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f9d0 	bl	8008ccc <USBD_CtlSendStatus>
      break;
 800892c:	e00c      	b.n	8008948 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f900 	bl	8008b36 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008936:	4b07      	ldr	r3, [pc, #28]	; (8008954 <USBD_SetConfig+0x150>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f7fe ff92 	bl	8007866 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008942:	2303      	movs	r3, #3
 8008944:	73fb      	strb	r3, [r7, #15]
      break;
 8008946:	bf00      	nop
  }

  return ret;
 8008948:	7bfb      	ldrb	r3, [r7, #15]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	200003a4 	.word	0x200003a4

08008958 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	88db      	ldrh	r3, [r3, #6]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d004      	beq.n	8008974 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f8e2 	bl	8008b36 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008972:	e023      	b.n	80089bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b02      	cmp	r3, #2
 800897e:	dc02      	bgt.n	8008986 <USBD_GetConfig+0x2e>
 8008980:	2b00      	cmp	r3, #0
 8008982:	dc03      	bgt.n	800898c <USBD_GetConfig+0x34>
 8008984:	e015      	b.n	80089b2 <USBD_GetConfig+0x5a>
 8008986:	2b03      	cmp	r3, #3
 8008988:	d00b      	beq.n	80089a2 <USBD_GetConfig+0x4a>
 800898a:	e012      	b.n	80089b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	3308      	adds	r3, #8
 8008996:	2201      	movs	r2, #1
 8008998:	4619      	mov	r1, r3
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f93c 	bl	8008c18 <USBD_CtlSendData>
        break;
 80089a0:	e00c      	b.n	80089bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	3304      	adds	r3, #4
 80089a6:	2201      	movs	r2, #1
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f934 	bl	8008c18 <USBD_CtlSendData>
        break;
 80089b0:	e004      	b.n	80089bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f8be 	bl	8008b36 <USBD_CtlError>
        break;
 80089ba:	bf00      	nop
}
 80089bc:	bf00      	nop
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	3b01      	subs	r3, #1
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d81e      	bhi.n	8008a1a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	88db      	ldrh	r3, [r3, #6]
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d004      	beq.n	80089ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f8a5 	bl	8008b36 <USBD_CtlError>
        break;
 80089ec:	e01a      	b.n	8008a24 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d005      	beq.n	8008a0a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	f043 0202 	orr.w	r2, r3, #2
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	330c      	adds	r3, #12
 8008a0e:	2202      	movs	r2, #2
 8008a10:	4619      	mov	r1, r3
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f900 	bl	8008c18 <USBD_CtlSendData>
      break;
 8008a18:	e004      	b.n	8008a24 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a1a:	6839      	ldr	r1, [r7, #0]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f88a 	bl	8008b36 <USBD_CtlError>
      break;
 8008a22:	bf00      	nop
  }
}
 8008a24:	bf00      	nop
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	885b      	ldrh	r3, [r3, #2]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d107      	bne.n	8008a4e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f940 	bl	8008ccc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008a4c:	e013      	b.n	8008a76 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	885b      	ldrh	r3, [r3, #2]
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d10b      	bne.n	8008a6e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	889b      	ldrh	r3, [r3, #4]
 8008a5a:	0a1b      	lsrs	r3, r3, #8
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	b2da      	uxtb	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f930 	bl	8008ccc <USBD_CtlSendStatus>
}
 8008a6c:	e003      	b.n	8008a76 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f860 	bl	8008b36 <USBD_CtlError>
}
 8008a76:	bf00      	nop
 8008a78:	3708      	adds	r7, #8
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b082      	sub	sp, #8
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	3b01      	subs	r3, #1
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d80b      	bhi.n	8008aae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	885b      	ldrh	r3, [r3, #2]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d10c      	bne.n	8008ab8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f910 	bl	8008ccc <USBD_CtlSendStatus>
      }
      break;
 8008aac:	e004      	b.n	8008ab8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008aae:	6839      	ldr	r1, [r7, #0]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f840 	bl	8008b36 <USBD_CtlError>
      break;
 8008ab6:	e000      	b.n	8008aba <USBD_ClrFeature+0x3c>
      break;
 8008ab8:	bf00      	nop
  }
}
 8008aba:	bf00      	nop
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b084      	sub	sp, #16
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	781a      	ldrb	r2, [r3, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	3301      	adds	r3, #1
 8008adc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	781a      	ldrb	r2, [r3, #0]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f7ff fa41 	bl	8007f74 <SWAPBYTE>
 8008af2:	4603      	mov	r3, r0
 8008af4:	461a      	mov	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	3301      	adds	r3, #1
 8008afe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	3301      	adds	r3, #1
 8008b04:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f7ff fa34 	bl	8007f74 <SWAPBYTE>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	461a      	mov	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	3301      	adds	r3, #1
 8008b18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f7ff fa27 	bl	8007f74 <SWAPBYTE>
 8008b26:	4603      	mov	r3, r0
 8008b28:	461a      	mov	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	80da      	strh	r2, [r3, #6]
}
 8008b2e:	bf00      	nop
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b082      	sub	sp, #8
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b40:	2180      	movs	r1, #128	; 0x80
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fcf4 	bl	8009530 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b48:	2100      	movs	r1, #0
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 fcf0 	bl	8009530 <USBD_LL_StallEP>
}
 8008b50:	bf00      	nop
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b086      	sub	sp, #24
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b64:	2300      	movs	r3, #0
 8008b66:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d036      	beq.n	8008bdc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008b72:	6938      	ldr	r0, [r7, #16]
 8008b74:	f000 f836 	bl	8008be4 <USBD_GetLen>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	005b      	lsls	r3, r3, #1
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008b86:	7dfb      	ldrb	r3, [r7, #23]
 8008b88:	68ba      	ldr	r2, [r7, #8]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	7812      	ldrb	r2, [r2, #0]
 8008b90:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b92:	7dfb      	ldrb	r3, [r7, #23]
 8008b94:	3301      	adds	r3, #1
 8008b96:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b98:	7dfb      	ldrb	r3, [r7, #23]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	2203      	movs	r2, #3
 8008ba0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ba8:	e013      	b.n	8008bd2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008baa:	7dfb      	ldrb	r3, [r7, #23]
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	4413      	add	r3, r2
 8008bb0:	693a      	ldr	r2, [r7, #16]
 8008bb2:	7812      	ldrb	r2, [r2, #0]
 8008bb4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	613b      	str	r3, [r7, #16]
    idx++;
 8008bbc:	7dfb      	ldrb	r3, [r7, #23]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	2200      	movs	r2, #0
 8008bca:	701a      	strb	r2, [r3, #0]
    idx++;
 8008bcc:	7dfb      	ldrb	r3, [r7, #23]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1e7      	bne.n	8008baa <USBD_GetString+0x52>
 8008bda:	e000      	b.n	8008bde <USBD_GetString+0x86>
    return;
 8008bdc:	bf00      	nop
  }
}
 8008bde:	3718      	adds	r7, #24
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008bec:	2300      	movs	r3, #0
 8008bee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008bf4:	e005      	b.n	8008c02 <USBD_GetLen+0x1e>
  {
    len++;
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1f5      	bne.n	8008bf6 <USBD_GetLen+0x12>
  }

  return len;
 8008c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2202      	movs	r2, #2
 8008c28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	68ba      	ldr	r2, [r7, #8]
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f000 fcff 	bl	8009642 <USBD_LL_Transmit>

  return USBD_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b084      	sub	sp, #16
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	60f8      	str	r0, [r7, #12]
 8008c56:	60b9      	str	r1, [r7, #8]
 8008c58:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	2100      	movs	r1, #0
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f000 fcee 	bl	8009642 <USBD_LL_Transmit>

  return USBD_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2203      	movs	r2, #3
 8008c80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	68ba      	ldr	r2, [r7, #8]
 8008c98:	2100      	movs	r1, #0
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f000 fcf2 	bl	8009684 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b084      	sub	sp, #16
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	60f8      	str	r0, [r7, #12]
 8008cb2:	60b9      	str	r1, [r7, #8]
 8008cb4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	68ba      	ldr	r2, [r7, #8]
 8008cba:	2100      	movs	r1, #0
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f000 fce1 	bl	8009684 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2204      	movs	r2, #4
 8008cd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008cdc:	2300      	movs	r3, #0
 8008cde:	2200      	movs	r2, #0
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fcad 	bl	8009642 <USBD_LL_Transmit>

  return USBD_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3708      	adds	r7, #8
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b082      	sub	sp, #8
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2205      	movs	r2, #5
 8008cfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d02:	2300      	movs	r3, #0
 8008d04:	2200      	movs	r2, #0
 8008d06:	2100      	movs	r1, #0
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fcbb 	bl	8009684 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	4912      	ldr	r1, [pc, #72]	; (8008d68 <MX_USB_DEVICE_Init+0x50>)
 8008d20:	4812      	ldr	r0, [pc, #72]	; (8008d6c <MX_USB_DEVICE_Init+0x54>)
 8008d22:	f7fe fd07 	bl	8007734 <USBD_Init>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d001      	beq.n	8008d30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d2c:	f7f7 ff5a 	bl	8000be4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d30:	490f      	ldr	r1, [pc, #60]	; (8008d70 <MX_USB_DEVICE_Init+0x58>)
 8008d32:	480e      	ldr	r0, [pc, #56]	; (8008d6c <MX_USB_DEVICE_Init+0x54>)
 8008d34:	f7fe fd2e 	bl	8007794 <USBD_RegisterClass>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d001      	beq.n	8008d42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d3e:	f7f7 ff51 	bl	8000be4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d42:	490c      	ldr	r1, [pc, #48]	; (8008d74 <MX_USB_DEVICE_Init+0x5c>)
 8008d44:	4809      	ldr	r0, [pc, #36]	; (8008d6c <MX_USB_DEVICE_Init+0x54>)
 8008d46:	f7fe fc1f 	bl	8007588 <USBD_CDC_RegisterInterface>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d001      	beq.n	8008d54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d50:	f7f7 ff48 	bl	8000be4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d54:	4805      	ldr	r0, [pc, #20]	; (8008d6c <MX_USB_DEVICE_Init+0x54>)
 8008d56:	f7fe fd53 	bl	8007800 <USBD_Start>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d60:	f7f7 ff40 	bl	8000be4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d64:	bf00      	nop
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	200000b4 	.word	0x200000b4
 8008d6c:	200003a8 	.word	0x200003a8
 8008d70:	20000018 	.word	0x20000018
 8008d74:	200000a0 	.word	0x200000a0

08008d78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	4905      	ldr	r1, [pc, #20]	; (8008d94 <CDC_Init_FS+0x1c>)
 8008d80:	4805      	ldr	r0, [pc, #20]	; (8008d98 <CDC_Init_FS+0x20>)
 8008d82:	f7fe fc1b 	bl	80075bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d86:	4905      	ldr	r1, [pc, #20]	; (8008d9c <CDC_Init_FS+0x24>)
 8008d88:	4803      	ldr	r0, [pc, #12]	; (8008d98 <CDC_Init_FS+0x20>)
 8008d8a:	f7fe fc39 	bl	8007600 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	20000e84 	.word	0x20000e84
 8008d98:	200003a8 	.word	0x200003a8
 8008d9c:	20000684 	.word	0x20000684

08008da0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008da0:	b480      	push	{r7}
 8008da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008da4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	4603      	mov	r3, r0
 8008db8:	6039      	str	r1, [r7, #0]
 8008dba:	71fb      	strb	r3, [r7, #7]
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008dc0:	79fb      	ldrb	r3, [r7, #7]
 8008dc2:	2b23      	cmp	r3, #35	; 0x23
 8008dc4:	d85c      	bhi.n	8008e80 <CDC_Control_FS+0xd0>
 8008dc6:	a201      	add	r2, pc, #4	; (adr r2, 8008dcc <CDC_Control_FS+0x1c>)
 8008dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dcc:	08008e81 	.word	0x08008e81
 8008dd0:	08008e81 	.word	0x08008e81
 8008dd4:	08008e81 	.word	0x08008e81
 8008dd8:	08008e81 	.word	0x08008e81
 8008ddc:	08008e81 	.word	0x08008e81
 8008de0:	08008e81 	.word	0x08008e81
 8008de4:	08008e81 	.word	0x08008e81
 8008de8:	08008e81 	.word	0x08008e81
 8008dec:	08008e81 	.word	0x08008e81
 8008df0:	08008e81 	.word	0x08008e81
 8008df4:	08008e81 	.word	0x08008e81
 8008df8:	08008e81 	.word	0x08008e81
 8008dfc:	08008e81 	.word	0x08008e81
 8008e00:	08008e81 	.word	0x08008e81
 8008e04:	08008e81 	.word	0x08008e81
 8008e08:	08008e81 	.word	0x08008e81
 8008e0c:	08008e81 	.word	0x08008e81
 8008e10:	08008e81 	.word	0x08008e81
 8008e14:	08008e81 	.word	0x08008e81
 8008e18:	08008e81 	.word	0x08008e81
 8008e1c:	08008e81 	.word	0x08008e81
 8008e20:	08008e81 	.word	0x08008e81
 8008e24:	08008e81 	.word	0x08008e81
 8008e28:	08008e81 	.word	0x08008e81
 8008e2c:	08008e81 	.word	0x08008e81
 8008e30:	08008e81 	.word	0x08008e81
 8008e34:	08008e81 	.word	0x08008e81
 8008e38:	08008e81 	.word	0x08008e81
 8008e3c:	08008e81 	.word	0x08008e81
 8008e40:	08008e81 	.word	0x08008e81
 8008e44:	08008e81 	.word	0x08008e81
 8008e48:	08008e81 	.word	0x08008e81
 8008e4c:	08008e5d 	.word	0x08008e5d
 8008e50:	08008e6f 	.word	0x08008e6f
 8008e54:	08008e81 	.word	0x08008e81
 8008e58:	08008e81 	.word	0x08008e81
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8008e5c:	4b0c      	ldr	r3, [pc, #48]	; (8008e90 <CDC_Control_FS+0xe0>)
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	6810      	ldr	r0, [r2, #0]
 8008e62:	6018      	str	r0, [r3, #0]
 8008e64:	8891      	ldrh	r1, [r2, #4]
 8008e66:	7992      	ldrb	r2, [r2, #6]
 8008e68:	8099      	strh	r1, [r3, #4]
 8008e6a:	719a      	strb	r2, [r3, #6]
    break;
 8008e6c:	e009      	b.n	8008e82 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	4a07      	ldr	r2, [pc, #28]	; (8008e90 <CDC_Control_FS+0xe0>)
 8008e72:	6810      	ldr	r0, [r2, #0]
 8008e74:	6018      	str	r0, [r3, #0]
 8008e76:	8891      	ldrh	r1, [r2, #4]
 8008e78:	7992      	ldrb	r2, [r2, #6]
 8008e7a:	8099      	strh	r1, [r3, #4]
 8008e7c:	719a      	strb	r2, [r3, #6]
    break;
 8008e7e:	e000      	b.n	8008e82 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e80:	bf00      	nop
  }

  return (USBD_OK);
 8008e82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr
 8008e90:	20000098 	.word	0x20000098

08008e94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e9e:	6879      	ldr	r1, [r7, #4]
 8008ea0:	4805      	ldr	r0, [pc, #20]	; (8008eb8 <CDC_Receive_FS+0x24>)
 8008ea2:	f7fe fbad 	bl	8007600 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008ea6:	4804      	ldr	r0, [pc, #16]	; (8008eb8 <CDC_Receive_FS+0x24>)
 8008ea8:	f7fe fc0e 	bl	80076c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008eac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	200003a8 	.word	0x200003a8

08008ebc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008ecc:	4b0d      	ldr	r3, [pc, #52]	; (8008f04 <CDC_Transmit_FS+0x48>)
 8008ece:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ed2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d001      	beq.n	8008ee2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e00b      	b.n	8008efa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008ee2:	887b      	ldrh	r3, [r7, #2]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	6879      	ldr	r1, [r7, #4]
 8008ee8:	4806      	ldr	r0, [pc, #24]	; (8008f04 <CDC_Transmit_FS+0x48>)
 8008eea:	f7fe fb67 	bl	80075bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008eee:	4805      	ldr	r0, [pc, #20]	; (8008f04 <CDC_Transmit_FS+0x48>)
 8008ef0:	f7fe fba4 	bl	800763c <USBD_CDC_TransmitPacket>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	200003a8 	.word	0x200003a8

08008f08 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b087      	sub	sp, #28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	4613      	mov	r3, r2
 8008f14:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008f16:	2300      	movs	r3, #0
 8008f18:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008f1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	371c      	adds	r7, #28
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
	...

08008f2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	4603      	mov	r3, r0
 8008f34:	6039      	str	r1, [r7, #0]
 8008f36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	2212      	movs	r2, #18
 8008f3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f3e:	4b03      	ldr	r3, [pc, #12]	; (8008f4c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	200000d0 	.word	0x200000d0

08008f50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	4603      	mov	r3, r0
 8008f58:	6039      	str	r1, [r7, #0]
 8008f5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	2204      	movs	r2, #4
 8008f60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f62:	4b03      	ldr	r3, [pc, #12]	; (8008f70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr
 8008f70:	200000e4 	.word	0x200000e4

08008f74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	6039      	str	r1, [r7, #0]
 8008f7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f80:	79fb      	ldrb	r3, [r7, #7]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d105      	bne.n	8008f92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f86:	683a      	ldr	r2, [r7, #0]
 8008f88:	4907      	ldr	r1, [pc, #28]	; (8008fa8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f8a:	4808      	ldr	r0, [pc, #32]	; (8008fac <USBD_FS_ProductStrDescriptor+0x38>)
 8008f8c:	f7ff fde4 	bl	8008b58 <USBD_GetString>
 8008f90:	e004      	b.n	8008f9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	4904      	ldr	r1, [pc, #16]	; (8008fa8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f96:	4805      	ldr	r0, [pc, #20]	; (8008fac <USBD_FS_ProductStrDescriptor+0x38>)
 8008f98:	f7ff fdde 	bl	8008b58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f9c:	4b02      	ldr	r3, [pc, #8]	; (8008fa8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20001684 	.word	0x20001684
 8008fac:	0800a100 	.word	0x0800a100

08008fb0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	6039      	str	r1, [r7, #0]
 8008fba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008fbc:	683a      	ldr	r2, [r7, #0]
 8008fbe:	4904      	ldr	r1, [pc, #16]	; (8008fd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008fc0:	4804      	ldr	r0, [pc, #16]	; (8008fd4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008fc2:	f7ff fdc9 	bl	8008b58 <USBD_GetString>
  return USBD_StrDesc;
 8008fc6:	4b02      	ldr	r3, [pc, #8]	; (8008fd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	20001684 	.word	0x20001684
 8008fd4:	0800a118 	.word	0x0800a118

08008fd8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	4603      	mov	r3, r0
 8008fe0:	6039      	str	r1, [r7, #0]
 8008fe2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	221a      	movs	r2, #26
 8008fe8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008fea:	f000 f843 	bl	8009074 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008fee:	4b02      	ldr	r3, [pc, #8]	; (8008ff8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	200000e8 	.word	0x200000e8

08008ffc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	4603      	mov	r3, r0
 8009004:	6039      	str	r1, [r7, #0]
 8009006:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009008:	79fb      	ldrb	r3, [r7, #7]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d105      	bne.n	800901a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	4907      	ldr	r1, [pc, #28]	; (8009030 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009012:	4808      	ldr	r0, [pc, #32]	; (8009034 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009014:	f7ff fda0 	bl	8008b58 <USBD_GetString>
 8009018:	e004      	b.n	8009024 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800901a:	683a      	ldr	r2, [r7, #0]
 800901c:	4904      	ldr	r1, [pc, #16]	; (8009030 <USBD_FS_ConfigStrDescriptor+0x34>)
 800901e:	4805      	ldr	r0, [pc, #20]	; (8009034 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009020:	f7ff fd9a 	bl	8008b58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009024:	4b02      	ldr	r3, [pc, #8]	; (8009030 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	20001684 	.word	0x20001684
 8009034:	0800a12c 	.word	0x0800a12c

08009038 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	4603      	mov	r3, r0
 8009040:	6039      	str	r1, [r7, #0]
 8009042:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009044:	79fb      	ldrb	r3, [r7, #7]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d105      	bne.n	8009056 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	4907      	ldr	r1, [pc, #28]	; (800906c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800904e:	4808      	ldr	r0, [pc, #32]	; (8009070 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009050:	f7ff fd82 	bl	8008b58 <USBD_GetString>
 8009054:	e004      	b.n	8009060 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009056:	683a      	ldr	r2, [r7, #0]
 8009058:	4904      	ldr	r1, [pc, #16]	; (800906c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800905a:	4805      	ldr	r0, [pc, #20]	; (8009070 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800905c:	f7ff fd7c 	bl	8008b58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009060:	4b02      	ldr	r3, [pc, #8]	; (800906c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009062:	4618      	mov	r0, r3
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	20001684 	.word	0x20001684
 8009070:	0800a138 	.word	0x0800a138

08009074 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800907a:	4b0f      	ldr	r3, [pc, #60]	; (80090b8 <Get_SerialNum+0x44>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009080:	4b0e      	ldr	r3, [pc, #56]	; (80090bc <Get_SerialNum+0x48>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009086:	4b0e      	ldr	r3, [pc, #56]	; (80090c0 <Get_SerialNum+0x4c>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4413      	add	r3, r2
 8009092:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d009      	beq.n	80090ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800909a:	2208      	movs	r2, #8
 800909c:	4909      	ldr	r1, [pc, #36]	; (80090c4 <Get_SerialNum+0x50>)
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	f000 f814 	bl	80090cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80090a4:	2204      	movs	r2, #4
 80090a6:	4908      	ldr	r1, [pc, #32]	; (80090c8 <Get_SerialNum+0x54>)
 80090a8:	68b8      	ldr	r0, [r7, #8]
 80090aa:	f000 f80f 	bl	80090cc <IntToUnicode>
  }
}
 80090ae:	bf00      	nop
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	1fff7a10 	.word	0x1fff7a10
 80090bc:	1fff7a14 	.word	0x1fff7a14
 80090c0:	1fff7a18 	.word	0x1fff7a18
 80090c4:	200000ea 	.word	0x200000ea
 80090c8:	200000fa 	.word	0x200000fa

080090cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b087      	sub	sp, #28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	4613      	mov	r3, r2
 80090d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80090da:	2300      	movs	r3, #0
 80090dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80090de:	2300      	movs	r3, #0
 80090e0:	75fb      	strb	r3, [r7, #23]
 80090e2:	e027      	b.n	8009134 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	0f1b      	lsrs	r3, r3, #28
 80090e8:	2b09      	cmp	r3, #9
 80090ea:	d80b      	bhi.n	8009104 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	0f1b      	lsrs	r3, r3, #28
 80090f0:	b2da      	uxtb	r2, r3
 80090f2:	7dfb      	ldrb	r3, [r7, #23]
 80090f4:	005b      	lsls	r3, r3, #1
 80090f6:	4619      	mov	r1, r3
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	440b      	add	r3, r1
 80090fc:	3230      	adds	r2, #48	; 0x30
 80090fe:	b2d2      	uxtb	r2, r2
 8009100:	701a      	strb	r2, [r3, #0]
 8009102:	e00a      	b.n	800911a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	0f1b      	lsrs	r3, r3, #28
 8009108:	b2da      	uxtb	r2, r3
 800910a:	7dfb      	ldrb	r3, [r7, #23]
 800910c:	005b      	lsls	r3, r3, #1
 800910e:	4619      	mov	r1, r3
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	440b      	add	r3, r1
 8009114:	3237      	adds	r2, #55	; 0x37
 8009116:	b2d2      	uxtb	r2, r2
 8009118:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	011b      	lsls	r3, r3, #4
 800911e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009120:	7dfb      	ldrb	r3, [r7, #23]
 8009122:	005b      	lsls	r3, r3, #1
 8009124:	3301      	adds	r3, #1
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	4413      	add	r3, r2
 800912a:	2200      	movs	r2, #0
 800912c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800912e:	7dfb      	ldrb	r3, [r7, #23]
 8009130:	3301      	adds	r3, #1
 8009132:	75fb      	strb	r3, [r7, #23]
 8009134:	7dfa      	ldrb	r2, [r7, #23]
 8009136:	79fb      	ldrb	r3, [r7, #7]
 8009138:	429a      	cmp	r2, r3
 800913a:	d3d3      	bcc.n	80090e4 <IntToUnicode+0x18>
  }
}
 800913c:	bf00      	nop
 800913e:	bf00      	nop
 8009140:	371c      	adds	r7, #28
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
	...

0800914c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b08a      	sub	sp, #40	; 0x28
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009154:	f107 0314 	add.w	r3, r7, #20
 8009158:	2200      	movs	r2, #0
 800915a:	601a      	str	r2, [r3, #0]
 800915c:	605a      	str	r2, [r3, #4]
 800915e:	609a      	str	r2, [r3, #8]
 8009160:	60da      	str	r2, [r3, #12]
 8009162:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800916c:	d13a      	bne.n	80091e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800916e:	2300      	movs	r3, #0
 8009170:	613b      	str	r3, [r7, #16]
 8009172:	4b1e      	ldr	r3, [pc, #120]	; (80091ec <HAL_PCD_MspInit+0xa0>)
 8009174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009176:	4a1d      	ldr	r2, [pc, #116]	; (80091ec <HAL_PCD_MspInit+0xa0>)
 8009178:	f043 0301 	orr.w	r3, r3, #1
 800917c:	6313      	str	r3, [r2, #48]	; 0x30
 800917e:	4b1b      	ldr	r3, [pc, #108]	; (80091ec <HAL_PCD_MspInit+0xa0>)
 8009180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009182:	f003 0301 	and.w	r3, r3, #1
 8009186:	613b      	str	r3, [r7, #16]
 8009188:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800918a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800918e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009190:	2302      	movs	r3, #2
 8009192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009194:	2300      	movs	r3, #0
 8009196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009198:	2303      	movs	r3, #3
 800919a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800919c:	230a      	movs	r3, #10
 800919e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091a0:	f107 0314 	add.w	r3, r7, #20
 80091a4:	4619      	mov	r1, r3
 80091a6:	4812      	ldr	r0, [pc, #72]	; (80091f0 <HAL_PCD_MspInit+0xa4>)
 80091a8:	f7f8 f9b2 	bl	8001510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091ac:	4b0f      	ldr	r3, [pc, #60]	; (80091ec <HAL_PCD_MspInit+0xa0>)
 80091ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b0:	4a0e      	ldr	r2, [pc, #56]	; (80091ec <HAL_PCD_MspInit+0xa0>)
 80091b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091b6:	6353      	str	r3, [r2, #52]	; 0x34
 80091b8:	2300      	movs	r3, #0
 80091ba:	60fb      	str	r3, [r7, #12]
 80091bc:	4b0b      	ldr	r3, [pc, #44]	; (80091ec <HAL_PCD_MspInit+0xa0>)
 80091be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091c0:	4a0a      	ldr	r2, [pc, #40]	; (80091ec <HAL_PCD_MspInit+0xa0>)
 80091c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80091c6:	6453      	str	r3, [r2, #68]	; 0x44
 80091c8:	4b08      	ldr	r3, [pc, #32]	; (80091ec <HAL_PCD_MspInit+0xa0>)
 80091ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091d0:	60fb      	str	r3, [r7, #12]
 80091d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80091d4:	2200      	movs	r2, #0
 80091d6:	2100      	movs	r1, #0
 80091d8:	2043      	movs	r0, #67	; 0x43
 80091da:	f7f8 f962 	bl	80014a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80091de:	2043      	movs	r0, #67	; 0x43
 80091e0:	f7f8 f97b 	bl	80014da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80091e4:	bf00      	nop
 80091e6:	3728      	adds	r7, #40	; 0x28
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	40023800 	.word	0x40023800
 80091f0:	40020000 	.word	0x40020000

080091f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009208:	4619      	mov	r1, r3
 800920a:	4610      	mov	r0, r2
 800920c:	f7fe fb45 	bl	800789a <USBD_LL_SetupStage>
}
 8009210:	bf00      	nop
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	460b      	mov	r3, r1
 8009222:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800922a:	78fa      	ldrb	r2, [r7, #3]
 800922c:	6879      	ldr	r1, [r7, #4]
 800922e:	4613      	mov	r3, r2
 8009230:	00db      	lsls	r3, r3, #3
 8009232:	4413      	add	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	440b      	add	r3, r1
 8009238:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	78fb      	ldrb	r3, [r7, #3]
 8009240:	4619      	mov	r1, r3
 8009242:	f7fe fb7f 	bl	8007944 <USBD_LL_DataOutStage>
}
 8009246:	bf00      	nop
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b082      	sub	sp, #8
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	460b      	mov	r3, r1
 8009258:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009260:	78fa      	ldrb	r2, [r7, #3]
 8009262:	6879      	ldr	r1, [r7, #4]
 8009264:	4613      	mov	r3, r2
 8009266:	00db      	lsls	r3, r3, #3
 8009268:	4413      	add	r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	440b      	add	r3, r1
 800926e:	334c      	adds	r3, #76	; 0x4c
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	78fb      	ldrb	r3, [r7, #3]
 8009274:	4619      	mov	r1, r3
 8009276:	f7fe fc18 	bl	8007aaa <USBD_LL_DataInStage>
}
 800927a:	bf00      	nop
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b082      	sub	sp, #8
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009290:	4618      	mov	r0, r3
 8009292:	f7fe fd4c 	bl	8007d2e <USBD_LL_SOF>
}
 8009296:	bf00      	nop
 8009298:	3708      	adds	r7, #8
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b084      	sub	sp, #16
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80092a6:	2301      	movs	r3, #1
 80092a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d102      	bne.n	80092b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80092b2:	2300      	movs	r3, #0
 80092b4:	73fb      	strb	r3, [r7, #15]
 80092b6:	e008      	b.n	80092ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d102      	bne.n	80092c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80092c0:	2301      	movs	r3, #1
 80092c2:	73fb      	strb	r3, [r7, #15]
 80092c4:	e001      	b.n	80092ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80092c6:	f7f7 fc8d 	bl	8000be4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092d0:	7bfa      	ldrb	r2, [r7, #15]
 80092d2:	4611      	mov	r1, r2
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7fe fcec 	bl	8007cb2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7fe fc94 	bl	8007c0e <USBD_LL_Reset>
}
 80092e6:	bf00      	nop
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
	...

080092f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092fe:	4618      	mov	r0, r3
 8009300:	f7fe fce7 	bl	8007cd2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	6812      	ldr	r2, [r2, #0]
 8009312:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009316:	f043 0301 	orr.w	r3, r3, #1
 800931a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6a1b      	ldr	r3, [r3, #32]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d005      	beq.n	8009330 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009324:	4b04      	ldr	r3, [pc, #16]	; (8009338 <HAL_PCD_SuspendCallback+0x48>)
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	4a03      	ldr	r2, [pc, #12]	; (8009338 <HAL_PCD_SuspendCallback+0x48>)
 800932a:	f043 0306 	orr.w	r3, r3, #6
 800932e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009330:	bf00      	nop
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	e000ed00 	.word	0xe000ed00

0800933c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800934a:	4618      	mov	r0, r3
 800934c:	f7fe fcd7 	bl	8007cfe <USBD_LL_Resume>
}
 8009350:	bf00      	nop
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	460b      	mov	r3, r1
 8009362:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800936a:	78fa      	ldrb	r2, [r7, #3]
 800936c:	4611      	mov	r1, r2
 800936e:	4618      	mov	r0, r3
 8009370:	f7fe fd2f 	bl	8007dd2 <USBD_LL_IsoOUTIncomplete>
}
 8009374:	bf00      	nop
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	460b      	mov	r3, r1
 8009386:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800938e:	78fa      	ldrb	r2, [r7, #3]
 8009390:	4611      	mov	r1, r2
 8009392:	4618      	mov	r0, r3
 8009394:	f7fe fceb 	bl	8007d6e <USBD_LL_IsoINIncomplete>
}
 8009398:	bf00      	nop
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fe fd41 	bl	8007e36 <USBD_LL_DevConnected>
}
 80093b4:	bf00      	nop
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe fd3e 	bl	8007e4c <USBD_LL_DevDisconnected>
}
 80093d0:	bf00      	nop
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d13c      	bne.n	8009462 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80093e8:	4a20      	ldr	r2, [pc, #128]	; (800946c <USBD_LL_Init+0x94>)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a1e      	ldr	r2, [pc, #120]	; (800946c <USBD_LL_Init+0x94>)
 80093f4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80093f8:	4b1c      	ldr	r3, [pc, #112]	; (800946c <USBD_LL_Init+0x94>)
 80093fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80093fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009400:	4b1a      	ldr	r3, [pc, #104]	; (800946c <USBD_LL_Init+0x94>)
 8009402:	2204      	movs	r2, #4
 8009404:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009406:	4b19      	ldr	r3, [pc, #100]	; (800946c <USBD_LL_Init+0x94>)
 8009408:	2202      	movs	r2, #2
 800940a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800940c:	4b17      	ldr	r3, [pc, #92]	; (800946c <USBD_LL_Init+0x94>)
 800940e:	2200      	movs	r2, #0
 8009410:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009412:	4b16      	ldr	r3, [pc, #88]	; (800946c <USBD_LL_Init+0x94>)
 8009414:	2202      	movs	r2, #2
 8009416:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009418:	4b14      	ldr	r3, [pc, #80]	; (800946c <USBD_LL_Init+0x94>)
 800941a:	2200      	movs	r2, #0
 800941c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800941e:	4b13      	ldr	r3, [pc, #76]	; (800946c <USBD_LL_Init+0x94>)
 8009420:	2200      	movs	r2, #0
 8009422:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009424:	4b11      	ldr	r3, [pc, #68]	; (800946c <USBD_LL_Init+0x94>)
 8009426:	2200      	movs	r2, #0
 8009428:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800942a:	4b10      	ldr	r3, [pc, #64]	; (800946c <USBD_LL_Init+0x94>)
 800942c:	2200      	movs	r2, #0
 800942e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009430:	4b0e      	ldr	r3, [pc, #56]	; (800946c <USBD_LL_Init+0x94>)
 8009432:	2200      	movs	r2, #0
 8009434:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009436:	480d      	ldr	r0, [pc, #52]	; (800946c <USBD_LL_Init+0x94>)
 8009438:	f7f9 f80e 	bl	8002458 <HAL_PCD_Init>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d001      	beq.n	8009446 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009442:	f7f7 fbcf 	bl	8000be4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009446:	2180      	movs	r1, #128	; 0x80
 8009448:	4808      	ldr	r0, [pc, #32]	; (800946c <USBD_LL_Init+0x94>)
 800944a:	f7fa fa66 	bl	800391a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800944e:	2240      	movs	r2, #64	; 0x40
 8009450:	2100      	movs	r1, #0
 8009452:	4806      	ldr	r0, [pc, #24]	; (800946c <USBD_LL_Init+0x94>)
 8009454:	f7fa fa1a 	bl	800388c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009458:	2280      	movs	r2, #128	; 0x80
 800945a:	2101      	movs	r1, #1
 800945c:	4803      	ldr	r0, [pc, #12]	; (800946c <USBD_LL_Init+0x94>)
 800945e:	f7fa fa15 	bl	800388c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	20001884 	.word	0x20001884

08009470 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009486:	4618      	mov	r0, r3
 8009488:	f7f9 f903 	bl	8002692 <HAL_PCD_Start>
 800948c:	4603      	mov	r3, r0
 800948e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009490:	7bfb      	ldrb	r3, [r7, #15]
 8009492:	4618      	mov	r0, r3
 8009494:	f000 f942 	bl	800971c <USBD_Get_USB_Status>
 8009498:	4603      	mov	r3, r0
 800949a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800949c:	7bbb      	ldrb	r3, [r7, #14]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b084      	sub	sp, #16
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
 80094ae:	4608      	mov	r0, r1
 80094b0:	4611      	mov	r1, r2
 80094b2:	461a      	mov	r2, r3
 80094b4:	4603      	mov	r3, r0
 80094b6:	70fb      	strb	r3, [r7, #3]
 80094b8:	460b      	mov	r3, r1
 80094ba:	70bb      	strb	r3, [r7, #2]
 80094bc:	4613      	mov	r3, r2
 80094be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80094ce:	78bb      	ldrb	r3, [r7, #2]
 80094d0:	883a      	ldrh	r2, [r7, #0]
 80094d2:	78f9      	ldrb	r1, [r7, #3]
 80094d4:	f7f9 fdd4 	bl	8003080 <HAL_PCD_EP_Open>
 80094d8:	4603      	mov	r3, r0
 80094da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094dc:	7bfb      	ldrb	r3, [r7, #15]
 80094de:	4618      	mov	r0, r3
 80094e0:	f000 f91c 	bl	800971c <USBD_Get_USB_Status>
 80094e4:	4603      	mov	r3, r0
 80094e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b084      	sub	sp, #16
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
 80094fa:	460b      	mov	r3, r1
 80094fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800950c:	78fa      	ldrb	r2, [r7, #3]
 800950e:	4611      	mov	r1, r2
 8009510:	4618      	mov	r0, r3
 8009512:	f7f9 fe1d 	bl	8003150 <HAL_PCD_EP_Close>
 8009516:	4603      	mov	r3, r0
 8009518:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800951a:	7bfb      	ldrb	r3, [r7, #15]
 800951c:	4618      	mov	r0, r3
 800951e:	f000 f8fd 	bl	800971c <USBD_Get_USB_Status>
 8009522:	4603      	mov	r3, r0
 8009524:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009526:	7bbb      	ldrb	r3, [r7, #14]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800953c:	2300      	movs	r3, #0
 800953e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800954a:	78fa      	ldrb	r2, [r7, #3]
 800954c:	4611      	mov	r1, r2
 800954e:	4618      	mov	r0, r3
 8009550:	f7f9 fef5 	bl	800333e <HAL_PCD_EP_SetStall>
 8009554:	4603      	mov	r3, r0
 8009556:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009558:	7bfb      	ldrb	r3, [r7, #15]
 800955a:	4618      	mov	r0, r3
 800955c:	f000 f8de 	bl	800971c <USBD_Get_USB_Status>
 8009560:	4603      	mov	r3, r0
 8009562:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009564:	7bbb      	ldrb	r3, [r7, #14]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b084      	sub	sp, #16
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
 8009576:	460b      	mov	r3, r1
 8009578:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009588:	78fa      	ldrb	r2, [r7, #3]
 800958a:	4611      	mov	r1, r2
 800958c:	4618      	mov	r0, r3
 800958e:	f7f9 ff3a 	bl	8003406 <HAL_PCD_EP_ClrStall>
 8009592:	4603      	mov	r3, r0
 8009594:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009596:	7bfb      	ldrb	r3, [r7, #15]
 8009598:	4618      	mov	r0, r3
 800959a:	f000 f8bf 	bl	800971c <USBD_Get_USB_Status>
 800959e:	4603      	mov	r3, r0
 80095a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	460b      	mov	r3, r1
 80095b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	da0b      	bge.n	80095e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095c8:	78fb      	ldrb	r3, [r7, #3]
 80095ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095ce:	68f9      	ldr	r1, [r7, #12]
 80095d0:	4613      	mov	r3, r2
 80095d2:	00db      	lsls	r3, r3, #3
 80095d4:	4413      	add	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	440b      	add	r3, r1
 80095da:	333e      	adds	r3, #62	; 0x3e
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	e00b      	b.n	80095f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095e0:	78fb      	ldrb	r3, [r7, #3]
 80095e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095e6:	68f9      	ldr	r1, [r7, #12]
 80095e8:	4613      	mov	r3, r2
 80095ea:	00db      	lsls	r3, r3, #3
 80095ec:	4413      	add	r3, r2
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	440b      	add	r3, r1
 80095f2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80095f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3714      	adds	r7, #20
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	460b      	mov	r3, r1
 800960e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009610:	2300      	movs	r3, #0
 8009612:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009614:	2300      	movs	r3, #0
 8009616:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800961e:	78fa      	ldrb	r2, [r7, #3]
 8009620:	4611      	mov	r1, r2
 8009622:	4618      	mov	r0, r3
 8009624:	f7f9 fd07 	bl	8003036 <HAL_PCD_SetAddress>
 8009628:	4603      	mov	r3, r0
 800962a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800962c:	7bfb      	ldrb	r3, [r7, #15]
 800962e:	4618      	mov	r0, r3
 8009630:	f000 f874 	bl	800971c <USBD_Get_USB_Status>
 8009634:	4603      	mov	r3, r0
 8009636:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009638:	7bbb      	ldrb	r3, [r7, #14]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b086      	sub	sp, #24
 8009646:	af00      	add	r7, sp, #0
 8009648:	60f8      	str	r0, [r7, #12]
 800964a:	607a      	str	r2, [r7, #4]
 800964c:	603b      	str	r3, [r7, #0]
 800964e:	460b      	mov	r3, r1
 8009650:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009652:	2300      	movs	r3, #0
 8009654:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009656:	2300      	movs	r3, #0
 8009658:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009660:	7af9      	ldrb	r1, [r7, #11]
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	f7f9 fe20 	bl	80032aa <HAL_PCD_EP_Transmit>
 800966a:	4603      	mov	r3, r0
 800966c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800966e:	7dfb      	ldrb	r3, [r7, #23]
 8009670:	4618      	mov	r0, r3
 8009672:	f000 f853 	bl	800971c <USBD_Get_USB_Status>
 8009676:	4603      	mov	r3, r0
 8009678:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800967a:	7dbb      	ldrb	r3, [r7, #22]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3718      	adds	r7, #24
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b086      	sub	sp, #24
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	607a      	str	r2, [r7, #4]
 800968e:	603b      	str	r3, [r7, #0]
 8009690:	460b      	mov	r3, r1
 8009692:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009694:	2300      	movs	r3, #0
 8009696:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009698:	2300      	movs	r3, #0
 800969a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80096a2:	7af9      	ldrb	r1, [r7, #11]
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	f7f9 fd9c 	bl	80031e4 <HAL_PCD_EP_Receive>
 80096ac:	4603      	mov	r3, r0
 80096ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096b0:	7dfb      	ldrb	r3, [r7, #23]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f000 f832 	bl	800971c <USBD_Get_USB_Status>
 80096b8:	4603      	mov	r3, r0
 80096ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3718      	adds	r7, #24
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b082      	sub	sp, #8
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
 80096ce:	460b      	mov	r3, r1
 80096d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096d8:	78fa      	ldrb	r2, [r7, #3]
 80096da:	4611      	mov	r1, r2
 80096dc:	4618      	mov	r0, r3
 80096de:	f7f9 fdcc 	bl	800327a <HAL_PCD_EP_GetRxCount>
 80096e2:	4603      	mov	r3, r0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3708      	adds	r7, #8
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096f4:	4b03      	ldr	r3, [pc, #12]	; (8009704 <USBD_static_malloc+0x18>)
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	370c      	adds	r7, #12
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	20001d90 	.word	0x20001d90

08009708 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]

}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	4603      	mov	r3, r0
 8009724:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800972a:	79fb      	ldrb	r3, [r7, #7]
 800972c:	2b03      	cmp	r3, #3
 800972e:	d817      	bhi.n	8009760 <USBD_Get_USB_Status+0x44>
 8009730:	a201      	add	r2, pc, #4	; (adr r2, 8009738 <USBD_Get_USB_Status+0x1c>)
 8009732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009736:	bf00      	nop
 8009738:	08009749 	.word	0x08009749
 800973c:	0800974f 	.word	0x0800974f
 8009740:	08009755 	.word	0x08009755
 8009744:	0800975b 	.word	0x0800975b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009748:	2300      	movs	r3, #0
 800974a:	73fb      	strb	r3, [r7, #15]
    break;
 800974c:	e00b      	b.n	8009766 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800974e:	2303      	movs	r3, #3
 8009750:	73fb      	strb	r3, [r7, #15]
    break;
 8009752:	e008      	b.n	8009766 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009754:	2301      	movs	r3, #1
 8009756:	73fb      	strb	r3, [r7, #15]
    break;
 8009758:	e005      	b.n	8009766 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800975a:	2303      	movs	r3, #3
 800975c:	73fb      	strb	r3, [r7, #15]
    break;
 800975e:	e002      	b.n	8009766 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009760:	2303      	movs	r3, #3
 8009762:	73fb      	strb	r3, [r7, #15]
    break;
 8009764:	bf00      	nop
  }
  return usb_status;
 8009766:	7bfb      	ldrb	r3, [r7, #15]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3714      	adds	r7, #20
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <__errno>:
 8009774:	4b01      	ldr	r3, [pc, #4]	; (800977c <__errno+0x8>)
 8009776:	6818      	ldr	r0, [r3, #0]
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	20000104 	.word	0x20000104

08009780 <__libc_init_array>:
 8009780:	b570      	push	{r4, r5, r6, lr}
 8009782:	4d0d      	ldr	r5, [pc, #52]	; (80097b8 <__libc_init_array+0x38>)
 8009784:	4c0d      	ldr	r4, [pc, #52]	; (80097bc <__libc_init_array+0x3c>)
 8009786:	1b64      	subs	r4, r4, r5
 8009788:	10a4      	asrs	r4, r4, #2
 800978a:	2600      	movs	r6, #0
 800978c:	42a6      	cmp	r6, r4
 800978e:	d109      	bne.n	80097a4 <__libc_init_array+0x24>
 8009790:	4d0b      	ldr	r5, [pc, #44]	; (80097c0 <__libc_init_array+0x40>)
 8009792:	4c0c      	ldr	r4, [pc, #48]	; (80097c4 <__libc_init_array+0x44>)
 8009794:	f000 fca2 	bl	800a0dc <_init>
 8009798:	1b64      	subs	r4, r4, r5
 800979a:	10a4      	asrs	r4, r4, #2
 800979c:	2600      	movs	r6, #0
 800979e:	42a6      	cmp	r6, r4
 80097a0:	d105      	bne.n	80097ae <__libc_init_array+0x2e>
 80097a2:	bd70      	pop	{r4, r5, r6, pc}
 80097a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80097a8:	4798      	blx	r3
 80097aa:	3601      	adds	r6, #1
 80097ac:	e7ee      	b.n	800978c <__libc_init_array+0xc>
 80097ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80097b2:	4798      	blx	r3
 80097b4:	3601      	adds	r6, #1
 80097b6:	e7f2      	b.n	800979e <__libc_init_array+0x1e>
 80097b8:	0800a19c 	.word	0x0800a19c
 80097bc:	0800a19c 	.word	0x0800a19c
 80097c0:	0800a19c 	.word	0x0800a19c
 80097c4:	0800a1a0 	.word	0x0800a1a0

080097c8 <memset>:
 80097c8:	4402      	add	r2, r0
 80097ca:	4603      	mov	r3, r0
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d100      	bne.n	80097d2 <memset+0xa>
 80097d0:	4770      	bx	lr
 80097d2:	f803 1b01 	strb.w	r1, [r3], #1
 80097d6:	e7f9      	b.n	80097cc <memset+0x4>

080097d8 <sniprintf>:
 80097d8:	b40c      	push	{r2, r3}
 80097da:	b530      	push	{r4, r5, lr}
 80097dc:	4b17      	ldr	r3, [pc, #92]	; (800983c <sniprintf+0x64>)
 80097de:	1e0c      	subs	r4, r1, #0
 80097e0:	681d      	ldr	r5, [r3, #0]
 80097e2:	b09d      	sub	sp, #116	; 0x74
 80097e4:	da08      	bge.n	80097f8 <sniprintf+0x20>
 80097e6:	238b      	movs	r3, #139	; 0x8b
 80097e8:	602b      	str	r3, [r5, #0]
 80097ea:	f04f 30ff 	mov.w	r0, #4294967295
 80097ee:	b01d      	add	sp, #116	; 0x74
 80097f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097f4:	b002      	add	sp, #8
 80097f6:	4770      	bx	lr
 80097f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80097fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009800:	bf14      	ite	ne
 8009802:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009806:	4623      	moveq	r3, r4
 8009808:	9304      	str	r3, [sp, #16]
 800980a:	9307      	str	r3, [sp, #28]
 800980c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009810:	9002      	str	r0, [sp, #8]
 8009812:	9006      	str	r0, [sp, #24]
 8009814:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009818:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800981a:	ab21      	add	r3, sp, #132	; 0x84
 800981c:	a902      	add	r1, sp, #8
 800981e:	4628      	mov	r0, r5
 8009820:	9301      	str	r3, [sp, #4]
 8009822:	f000 f869 	bl	80098f8 <_svfiprintf_r>
 8009826:	1c43      	adds	r3, r0, #1
 8009828:	bfbc      	itt	lt
 800982a:	238b      	movlt	r3, #139	; 0x8b
 800982c:	602b      	strlt	r3, [r5, #0]
 800982e:	2c00      	cmp	r4, #0
 8009830:	d0dd      	beq.n	80097ee <sniprintf+0x16>
 8009832:	9b02      	ldr	r3, [sp, #8]
 8009834:	2200      	movs	r2, #0
 8009836:	701a      	strb	r2, [r3, #0]
 8009838:	e7d9      	b.n	80097ee <sniprintf+0x16>
 800983a:	bf00      	nop
 800983c:	20000104 	.word	0x20000104

08009840 <__ssputs_r>:
 8009840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009844:	688e      	ldr	r6, [r1, #8]
 8009846:	429e      	cmp	r6, r3
 8009848:	4682      	mov	sl, r0
 800984a:	460c      	mov	r4, r1
 800984c:	4690      	mov	r8, r2
 800984e:	461f      	mov	r7, r3
 8009850:	d838      	bhi.n	80098c4 <__ssputs_r+0x84>
 8009852:	898a      	ldrh	r2, [r1, #12]
 8009854:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009858:	d032      	beq.n	80098c0 <__ssputs_r+0x80>
 800985a:	6825      	ldr	r5, [r4, #0]
 800985c:	6909      	ldr	r1, [r1, #16]
 800985e:	eba5 0901 	sub.w	r9, r5, r1
 8009862:	6965      	ldr	r5, [r4, #20]
 8009864:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009868:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800986c:	3301      	adds	r3, #1
 800986e:	444b      	add	r3, r9
 8009870:	106d      	asrs	r5, r5, #1
 8009872:	429d      	cmp	r5, r3
 8009874:	bf38      	it	cc
 8009876:	461d      	movcc	r5, r3
 8009878:	0553      	lsls	r3, r2, #21
 800987a:	d531      	bpl.n	80098e0 <__ssputs_r+0xa0>
 800987c:	4629      	mov	r1, r5
 800987e:	f000 fb63 	bl	8009f48 <_malloc_r>
 8009882:	4606      	mov	r6, r0
 8009884:	b950      	cbnz	r0, 800989c <__ssputs_r+0x5c>
 8009886:	230c      	movs	r3, #12
 8009888:	f8ca 3000 	str.w	r3, [sl]
 800988c:	89a3      	ldrh	r3, [r4, #12]
 800988e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009892:	81a3      	strh	r3, [r4, #12]
 8009894:	f04f 30ff 	mov.w	r0, #4294967295
 8009898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800989c:	6921      	ldr	r1, [r4, #16]
 800989e:	464a      	mov	r2, r9
 80098a0:	f000 fabe 	bl	8009e20 <memcpy>
 80098a4:	89a3      	ldrh	r3, [r4, #12]
 80098a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098ae:	81a3      	strh	r3, [r4, #12]
 80098b0:	6126      	str	r6, [r4, #16]
 80098b2:	6165      	str	r5, [r4, #20]
 80098b4:	444e      	add	r6, r9
 80098b6:	eba5 0509 	sub.w	r5, r5, r9
 80098ba:	6026      	str	r6, [r4, #0]
 80098bc:	60a5      	str	r5, [r4, #8]
 80098be:	463e      	mov	r6, r7
 80098c0:	42be      	cmp	r6, r7
 80098c2:	d900      	bls.n	80098c6 <__ssputs_r+0x86>
 80098c4:	463e      	mov	r6, r7
 80098c6:	6820      	ldr	r0, [r4, #0]
 80098c8:	4632      	mov	r2, r6
 80098ca:	4641      	mov	r1, r8
 80098cc:	f000 fab6 	bl	8009e3c <memmove>
 80098d0:	68a3      	ldr	r3, [r4, #8]
 80098d2:	1b9b      	subs	r3, r3, r6
 80098d4:	60a3      	str	r3, [r4, #8]
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	4433      	add	r3, r6
 80098da:	6023      	str	r3, [r4, #0]
 80098dc:	2000      	movs	r0, #0
 80098de:	e7db      	b.n	8009898 <__ssputs_r+0x58>
 80098e0:	462a      	mov	r2, r5
 80098e2:	f000 fba5 	bl	800a030 <_realloc_r>
 80098e6:	4606      	mov	r6, r0
 80098e8:	2800      	cmp	r0, #0
 80098ea:	d1e1      	bne.n	80098b0 <__ssputs_r+0x70>
 80098ec:	6921      	ldr	r1, [r4, #16]
 80098ee:	4650      	mov	r0, sl
 80098f0:	f000 fabe 	bl	8009e70 <_free_r>
 80098f4:	e7c7      	b.n	8009886 <__ssputs_r+0x46>
	...

080098f8 <_svfiprintf_r>:
 80098f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fc:	4698      	mov	r8, r3
 80098fe:	898b      	ldrh	r3, [r1, #12]
 8009900:	061b      	lsls	r3, r3, #24
 8009902:	b09d      	sub	sp, #116	; 0x74
 8009904:	4607      	mov	r7, r0
 8009906:	460d      	mov	r5, r1
 8009908:	4614      	mov	r4, r2
 800990a:	d50e      	bpl.n	800992a <_svfiprintf_r+0x32>
 800990c:	690b      	ldr	r3, [r1, #16]
 800990e:	b963      	cbnz	r3, 800992a <_svfiprintf_r+0x32>
 8009910:	2140      	movs	r1, #64	; 0x40
 8009912:	f000 fb19 	bl	8009f48 <_malloc_r>
 8009916:	6028      	str	r0, [r5, #0]
 8009918:	6128      	str	r0, [r5, #16]
 800991a:	b920      	cbnz	r0, 8009926 <_svfiprintf_r+0x2e>
 800991c:	230c      	movs	r3, #12
 800991e:	603b      	str	r3, [r7, #0]
 8009920:	f04f 30ff 	mov.w	r0, #4294967295
 8009924:	e0d1      	b.n	8009aca <_svfiprintf_r+0x1d2>
 8009926:	2340      	movs	r3, #64	; 0x40
 8009928:	616b      	str	r3, [r5, #20]
 800992a:	2300      	movs	r3, #0
 800992c:	9309      	str	r3, [sp, #36]	; 0x24
 800992e:	2320      	movs	r3, #32
 8009930:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009934:	f8cd 800c 	str.w	r8, [sp, #12]
 8009938:	2330      	movs	r3, #48	; 0x30
 800993a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ae4 <_svfiprintf_r+0x1ec>
 800993e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009942:	f04f 0901 	mov.w	r9, #1
 8009946:	4623      	mov	r3, r4
 8009948:	469a      	mov	sl, r3
 800994a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800994e:	b10a      	cbz	r2, 8009954 <_svfiprintf_r+0x5c>
 8009950:	2a25      	cmp	r2, #37	; 0x25
 8009952:	d1f9      	bne.n	8009948 <_svfiprintf_r+0x50>
 8009954:	ebba 0b04 	subs.w	fp, sl, r4
 8009958:	d00b      	beq.n	8009972 <_svfiprintf_r+0x7a>
 800995a:	465b      	mov	r3, fp
 800995c:	4622      	mov	r2, r4
 800995e:	4629      	mov	r1, r5
 8009960:	4638      	mov	r0, r7
 8009962:	f7ff ff6d 	bl	8009840 <__ssputs_r>
 8009966:	3001      	adds	r0, #1
 8009968:	f000 80aa 	beq.w	8009ac0 <_svfiprintf_r+0x1c8>
 800996c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800996e:	445a      	add	r2, fp
 8009970:	9209      	str	r2, [sp, #36]	; 0x24
 8009972:	f89a 3000 	ldrb.w	r3, [sl]
 8009976:	2b00      	cmp	r3, #0
 8009978:	f000 80a2 	beq.w	8009ac0 <_svfiprintf_r+0x1c8>
 800997c:	2300      	movs	r3, #0
 800997e:	f04f 32ff 	mov.w	r2, #4294967295
 8009982:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009986:	f10a 0a01 	add.w	sl, sl, #1
 800998a:	9304      	str	r3, [sp, #16]
 800998c:	9307      	str	r3, [sp, #28]
 800998e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009992:	931a      	str	r3, [sp, #104]	; 0x68
 8009994:	4654      	mov	r4, sl
 8009996:	2205      	movs	r2, #5
 8009998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800999c:	4851      	ldr	r0, [pc, #324]	; (8009ae4 <_svfiprintf_r+0x1ec>)
 800999e:	f7f6 fc17 	bl	80001d0 <memchr>
 80099a2:	9a04      	ldr	r2, [sp, #16]
 80099a4:	b9d8      	cbnz	r0, 80099de <_svfiprintf_r+0xe6>
 80099a6:	06d0      	lsls	r0, r2, #27
 80099a8:	bf44      	itt	mi
 80099aa:	2320      	movmi	r3, #32
 80099ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099b0:	0711      	lsls	r1, r2, #28
 80099b2:	bf44      	itt	mi
 80099b4:	232b      	movmi	r3, #43	; 0x2b
 80099b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099ba:	f89a 3000 	ldrb.w	r3, [sl]
 80099be:	2b2a      	cmp	r3, #42	; 0x2a
 80099c0:	d015      	beq.n	80099ee <_svfiprintf_r+0xf6>
 80099c2:	9a07      	ldr	r2, [sp, #28]
 80099c4:	4654      	mov	r4, sl
 80099c6:	2000      	movs	r0, #0
 80099c8:	f04f 0c0a 	mov.w	ip, #10
 80099cc:	4621      	mov	r1, r4
 80099ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099d2:	3b30      	subs	r3, #48	; 0x30
 80099d4:	2b09      	cmp	r3, #9
 80099d6:	d94e      	bls.n	8009a76 <_svfiprintf_r+0x17e>
 80099d8:	b1b0      	cbz	r0, 8009a08 <_svfiprintf_r+0x110>
 80099da:	9207      	str	r2, [sp, #28]
 80099dc:	e014      	b.n	8009a08 <_svfiprintf_r+0x110>
 80099de:	eba0 0308 	sub.w	r3, r0, r8
 80099e2:	fa09 f303 	lsl.w	r3, r9, r3
 80099e6:	4313      	orrs	r3, r2
 80099e8:	9304      	str	r3, [sp, #16]
 80099ea:	46a2      	mov	sl, r4
 80099ec:	e7d2      	b.n	8009994 <_svfiprintf_r+0x9c>
 80099ee:	9b03      	ldr	r3, [sp, #12]
 80099f0:	1d19      	adds	r1, r3, #4
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	9103      	str	r1, [sp, #12]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	bfbb      	ittet	lt
 80099fa:	425b      	neglt	r3, r3
 80099fc:	f042 0202 	orrlt.w	r2, r2, #2
 8009a00:	9307      	strge	r3, [sp, #28]
 8009a02:	9307      	strlt	r3, [sp, #28]
 8009a04:	bfb8      	it	lt
 8009a06:	9204      	strlt	r2, [sp, #16]
 8009a08:	7823      	ldrb	r3, [r4, #0]
 8009a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a0c:	d10c      	bne.n	8009a28 <_svfiprintf_r+0x130>
 8009a0e:	7863      	ldrb	r3, [r4, #1]
 8009a10:	2b2a      	cmp	r3, #42	; 0x2a
 8009a12:	d135      	bne.n	8009a80 <_svfiprintf_r+0x188>
 8009a14:	9b03      	ldr	r3, [sp, #12]
 8009a16:	1d1a      	adds	r2, r3, #4
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	9203      	str	r2, [sp, #12]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	bfb8      	it	lt
 8009a20:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a24:	3402      	adds	r4, #2
 8009a26:	9305      	str	r3, [sp, #20]
 8009a28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009af4 <_svfiprintf_r+0x1fc>
 8009a2c:	7821      	ldrb	r1, [r4, #0]
 8009a2e:	2203      	movs	r2, #3
 8009a30:	4650      	mov	r0, sl
 8009a32:	f7f6 fbcd 	bl	80001d0 <memchr>
 8009a36:	b140      	cbz	r0, 8009a4a <_svfiprintf_r+0x152>
 8009a38:	2340      	movs	r3, #64	; 0x40
 8009a3a:	eba0 000a 	sub.w	r0, r0, sl
 8009a3e:	fa03 f000 	lsl.w	r0, r3, r0
 8009a42:	9b04      	ldr	r3, [sp, #16]
 8009a44:	4303      	orrs	r3, r0
 8009a46:	3401      	adds	r4, #1
 8009a48:	9304      	str	r3, [sp, #16]
 8009a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a4e:	4826      	ldr	r0, [pc, #152]	; (8009ae8 <_svfiprintf_r+0x1f0>)
 8009a50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a54:	2206      	movs	r2, #6
 8009a56:	f7f6 fbbb 	bl	80001d0 <memchr>
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	d038      	beq.n	8009ad0 <_svfiprintf_r+0x1d8>
 8009a5e:	4b23      	ldr	r3, [pc, #140]	; (8009aec <_svfiprintf_r+0x1f4>)
 8009a60:	bb1b      	cbnz	r3, 8009aaa <_svfiprintf_r+0x1b2>
 8009a62:	9b03      	ldr	r3, [sp, #12]
 8009a64:	3307      	adds	r3, #7
 8009a66:	f023 0307 	bic.w	r3, r3, #7
 8009a6a:	3308      	adds	r3, #8
 8009a6c:	9303      	str	r3, [sp, #12]
 8009a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a70:	4433      	add	r3, r6
 8009a72:	9309      	str	r3, [sp, #36]	; 0x24
 8009a74:	e767      	b.n	8009946 <_svfiprintf_r+0x4e>
 8009a76:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	2001      	movs	r0, #1
 8009a7e:	e7a5      	b.n	80099cc <_svfiprintf_r+0xd4>
 8009a80:	2300      	movs	r3, #0
 8009a82:	3401      	adds	r4, #1
 8009a84:	9305      	str	r3, [sp, #20]
 8009a86:	4619      	mov	r1, r3
 8009a88:	f04f 0c0a 	mov.w	ip, #10
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a92:	3a30      	subs	r2, #48	; 0x30
 8009a94:	2a09      	cmp	r2, #9
 8009a96:	d903      	bls.n	8009aa0 <_svfiprintf_r+0x1a8>
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d0c5      	beq.n	8009a28 <_svfiprintf_r+0x130>
 8009a9c:	9105      	str	r1, [sp, #20]
 8009a9e:	e7c3      	b.n	8009a28 <_svfiprintf_r+0x130>
 8009aa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e7f0      	b.n	8009a8c <_svfiprintf_r+0x194>
 8009aaa:	ab03      	add	r3, sp, #12
 8009aac:	9300      	str	r3, [sp, #0]
 8009aae:	462a      	mov	r2, r5
 8009ab0:	4b0f      	ldr	r3, [pc, #60]	; (8009af0 <_svfiprintf_r+0x1f8>)
 8009ab2:	a904      	add	r1, sp, #16
 8009ab4:	4638      	mov	r0, r7
 8009ab6:	f3af 8000 	nop.w
 8009aba:	1c42      	adds	r2, r0, #1
 8009abc:	4606      	mov	r6, r0
 8009abe:	d1d6      	bne.n	8009a6e <_svfiprintf_r+0x176>
 8009ac0:	89ab      	ldrh	r3, [r5, #12]
 8009ac2:	065b      	lsls	r3, r3, #25
 8009ac4:	f53f af2c 	bmi.w	8009920 <_svfiprintf_r+0x28>
 8009ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009aca:	b01d      	add	sp, #116	; 0x74
 8009acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad0:	ab03      	add	r3, sp, #12
 8009ad2:	9300      	str	r3, [sp, #0]
 8009ad4:	462a      	mov	r2, r5
 8009ad6:	4b06      	ldr	r3, [pc, #24]	; (8009af0 <_svfiprintf_r+0x1f8>)
 8009ad8:	a904      	add	r1, sp, #16
 8009ada:	4638      	mov	r0, r7
 8009adc:	f000 f87a 	bl	8009bd4 <_printf_i>
 8009ae0:	e7eb      	b.n	8009aba <_svfiprintf_r+0x1c2>
 8009ae2:	bf00      	nop
 8009ae4:	0800a160 	.word	0x0800a160
 8009ae8:	0800a16a 	.word	0x0800a16a
 8009aec:	00000000 	.word	0x00000000
 8009af0:	08009841 	.word	0x08009841
 8009af4:	0800a166 	.word	0x0800a166

08009af8 <_printf_common>:
 8009af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009afc:	4616      	mov	r6, r2
 8009afe:	4699      	mov	r9, r3
 8009b00:	688a      	ldr	r2, [r1, #8]
 8009b02:	690b      	ldr	r3, [r1, #16]
 8009b04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	bfb8      	it	lt
 8009b0c:	4613      	movlt	r3, r2
 8009b0e:	6033      	str	r3, [r6, #0]
 8009b10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b14:	4607      	mov	r7, r0
 8009b16:	460c      	mov	r4, r1
 8009b18:	b10a      	cbz	r2, 8009b1e <_printf_common+0x26>
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	6033      	str	r3, [r6, #0]
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	0699      	lsls	r1, r3, #26
 8009b22:	bf42      	ittt	mi
 8009b24:	6833      	ldrmi	r3, [r6, #0]
 8009b26:	3302      	addmi	r3, #2
 8009b28:	6033      	strmi	r3, [r6, #0]
 8009b2a:	6825      	ldr	r5, [r4, #0]
 8009b2c:	f015 0506 	ands.w	r5, r5, #6
 8009b30:	d106      	bne.n	8009b40 <_printf_common+0x48>
 8009b32:	f104 0a19 	add.w	sl, r4, #25
 8009b36:	68e3      	ldr	r3, [r4, #12]
 8009b38:	6832      	ldr	r2, [r6, #0]
 8009b3a:	1a9b      	subs	r3, r3, r2
 8009b3c:	42ab      	cmp	r3, r5
 8009b3e:	dc26      	bgt.n	8009b8e <_printf_common+0x96>
 8009b40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b44:	1e13      	subs	r3, r2, #0
 8009b46:	6822      	ldr	r2, [r4, #0]
 8009b48:	bf18      	it	ne
 8009b4a:	2301      	movne	r3, #1
 8009b4c:	0692      	lsls	r2, r2, #26
 8009b4e:	d42b      	bmi.n	8009ba8 <_printf_common+0xb0>
 8009b50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b54:	4649      	mov	r1, r9
 8009b56:	4638      	mov	r0, r7
 8009b58:	47c0      	blx	r8
 8009b5a:	3001      	adds	r0, #1
 8009b5c:	d01e      	beq.n	8009b9c <_printf_common+0xa4>
 8009b5e:	6823      	ldr	r3, [r4, #0]
 8009b60:	68e5      	ldr	r5, [r4, #12]
 8009b62:	6832      	ldr	r2, [r6, #0]
 8009b64:	f003 0306 	and.w	r3, r3, #6
 8009b68:	2b04      	cmp	r3, #4
 8009b6a:	bf08      	it	eq
 8009b6c:	1aad      	subeq	r5, r5, r2
 8009b6e:	68a3      	ldr	r3, [r4, #8]
 8009b70:	6922      	ldr	r2, [r4, #16]
 8009b72:	bf0c      	ite	eq
 8009b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b78:	2500      	movne	r5, #0
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	bfc4      	itt	gt
 8009b7e:	1a9b      	subgt	r3, r3, r2
 8009b80:	18ed      	addgt	r5, r5, r3
 8009b82:	2600      	movs	r6, #0
 8009b84:	341a      	adds	r4, #26
 8009b86:	42b5      	cmp	r5, r6
 8009b88:	d11a      	bne.n	8009bc0 <_printf_common+0xc8>
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	e008      	b.n	8009ba0 <_printf_common+0xa8>
 8009b8e:	2301      	movs	r3, #1
 8009b90:	4652      	mov	r2, sl
 8009b92:	4649      	mov	r1, r9
 8009b94:	4638      	mov	r0, r7
 8009b96:	47c0      	blx	r8
 8009b98:	3001      	adds	r0, #1
 8009b9a:	d103      	bne.n	8009ba4 <_printf_common+0xac>
 8009b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ba4:	3501      	adds	r5, #1
 8009ba6:	e7c6      	b.n	8009b36 <_printf_common+0x3e>
 8009ba8:	18e1      	adds	r1, r4, r3
 8009baa:	1c5a      	adds	r2, r3, #1
 8009bac:	2030      	movs	r0, #48	; 0x30
 8009bae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bb2:	4422      	add	r2, r4
 8009bb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bbc:	3302      	adds	r3, #2
 8009bbe:	e7c7      	b.n	8009b50 <_printf_common+0x58>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	4622      	mov	r2, r4
 8009bc4:	4649      	mov	r1, r9
 8009bc6:	4638      	mov	r0, r7
 8009bc8:	47c0      	blx	r8
 8009bca:	3001      	adds	r0, #1
 8009bcc:	d0e6      	beq.n	8009b9c <_printf_common+0xa4>
 8009bce:	3601      	adds	r6, #1
 8009bd0:	e7d9      	b.n	8009b86 <_printf_common+0x8e>
	...

08009bd4 <_printf_i>:
 8009bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bd8:	7e0f      	ldrb	r7, [r1, #24]
 8009bda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bdc:	2f78      	cmp	r7, #120	; 0x78
 8009bde:	4691      	mov	r9, r2
 8009be0:	4680      	mov	r8, r0
 8009be2:	460c      	mov	r4, r1
 8009be4:	469a      	mov	sl, r3
 8009be6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009bea:	d807      	bhi.n	8009bfc <_printf_i+0x28>
 8009bec:	2f62      	cmp	r7, #98	; 0x62
 8009bee:	d80a      	bhi.n	8009c06 <_printf_i+0x32>
 8009bf0:	2f00      	cmp	r7, #0
 8009bf2:	f000 80d8 	beq.w	8009da6 <_printf_i+0x1d2>
 8009bf6:	2f58      	cmp	r7, #88	; 0x58
 8009bf8:	f000 80a3 	beq.w	8009d42 <_printf_i+0x16e>
 8009bfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c04:	e03a      	b.n	8009c7c <_printf_i+0xa8>
 8009c06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c0a:	2b15      	cmp	r3, #21
 8009c0c:	d8f6      	bhi.n	8009bfc <_printf_i+0x28>
 8009c0e:	a101      	add	r1, pc, #4	; (adr r1, 8009c14 <_printf_i+0x40>)
 8009c10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c14:	08009c6d 	.word	0x08009c6d
 8009c18:	08009c81 	.word	0x08009c81
 8009c1c:	08009bfd 	.word	0x08009bfd
 8009c20:	08009bfd 	.word	0x08009bfd
 8009c24:	08009bfd 	.word	0x08009bfd
 8009c28:	08009bfd 	.word	0x08009bfd
 8009c2c:	08009c81 	.word	0x08009c81
 8009c30:	08009bfd 	.word	0x08009bfd
 8009c34:	08009bfd 	.word	0x08009bfd
 8009c38:	08009bfd 	.word	0x08009bfd
 8009c3c:	08009bfd 	.word	0x08009bfd
 8009c40:	08009d8d 	.word	0x08009d8d
 8009c44:	08009cb1 	.word	0x08009cb1
 8009c48:	08009d6f 	.word	0x08009d6f
 8009c4c:	08009bfd 	.word	0x08009bfd
 8009c50:	08009bfd 	.word	0x08009bfd
 8009c54:	08009daf 	.word	0x08009daf
 8009c58:	08009bfd 	.word	0x08009bfd
 8009c5c:	08009cb1 	.word	0x08009cb1
 8009c60:	08009bfd 	.word	0x08009bfd
 8009c64:	08009bfd 	.word	0x08009bfd
 8009c68:	08009d77 	.word	0x08009d77
 8009c6c:	682b      	ldr	r3, [r5, #0]
 8009c6e:	1d1a      	adds	r2, r3, #4
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	602a      	str	r2, [r5, #0]
 8009c74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e0a3      	b.n	8009dc8 <_printf_i+0x1f4>
 8009c80:	6820      	ldr	r0, [r4, #0]
 8009c82:	6829      	ldr	r1, [r5, #0]
 8009c84:	0606      	lsls	r6, r0, #24
 8009c86:	f101 0304 	add.w	r3, r1, #4
 8009c8a:	d50a      	bpl.n	8009ca2 <_printf_i+0xce>
 8009c8c:	680e      	ldr	r6, [r1, #0]
 8009c8e:	602b      	str	r3, [r5, #0]
 8009c90:	2e00      	cmp	r6, #0
 8009c92:	da03      	bge.n	8009c9c <_printf_i+0xc8>
 8009c94:	232d      	movs	r3, #45	; 0x2d
 8009c96:	4276      	negs	r6, r6
 8009c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c9c:	485e      	ldr	r0, [pc, #376]	; (8009e18 <_printf_i+0x244>)
 8009c9e:	230a      	movs	r3, #10
 8009ca0:	e019      	b.n	8009cd6 <_printf_i+0x102>
 8009ca2:	680e      	ldr	r6, [r1, #0]
 8009ca4:	602b      	str	r3, [r5, #0]
 8009ca6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009caa:	bf18      	it	ne
 8009cac:	b236      	sxthne	r6, r6
 8009cae:	e7ef      	b.n	8009c90 <_printf_i+0xbc>
 8009cb0:	682b      	ldr	r3, [r5, #0]
 8009cb2:	6820      	ldr	r0, [r4, #0]
 8009cb4:	1d19      	adds	r1, r3, #4
 8009cb6:	6029      	str	r1, [r5, #0]
 8009cb8:	0601      	lsls	r1, r0, #24
 8009cba:	d501      	bpl.n	8009cc0 <_printf_i+0xec>
 8009cbc:	681e      	ldr	r6, [r3, #0]
 8009cbe:	e002      	b.n	8009cc6 <_printf_i+0xf2>
 8009cc0:	0646      	lsls	r6, r0, #25
 8009cc2:	d5fb      	bpl.n	8009cbc <_printf_i+0xe8>
 8009cc4:	881e      	ldrh	r6, [r3, #0]
 8009cc6:	4854      	ldr	r0, [pc, #336]	; (8009e18 <_printf_i+0x244>)
 8009cc8:	2f6f      	cmp	r7, #111	; 0x6f
 8009cca:	bf0c      	ite	eq
 8009ccc:	2308      	moveq	r3, #8
 8009cce:	230a      	movne	r3, #10
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cd6:	6865      	ldr	r5, [r4, #4]
 8009cd8:	60a5      	str	r5, [r4, #8]
 8009cda:	2d00      	cmp	r5, #0
 8009cdc:	bfa2      	ittt	ge
 8009cde:	6821      	ldrge	r1, [r4, #0]
 8009ce0:	f021 0104 	bicge.w	r1, r1, #4
 8009ce4:	6021      	strge	r1, [r4, #0]
 8009ce6:	b90e      	cbnz	r6, 8009cec <_printf_i+0x118>
 8009ce8:	2d00      	cmp	r5, #0
 8009cea:	d04d      	beq.n	8009d88 <_printf_i+0x1b4>
 8009cec:	4615      	mov	r5, r2
 8009cee:	fbb6 f1f3 	udiv	r1, r6, r3
 8009cf2:	fb03 6711 	mls	r7, r3, r1, r6
 8009cf6:	5dc7      	ldrb	r7, [r0, r7]
 8009cf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cfc:	4637      	mov	r7, r6
 8009cfe:	42bb      	cmp	r3, r7
 8009d00:	460e      	mov	r6, r1
 8009d02:	d9f4      	bls.n	8009cee <_printf_i+0x11a>
 8009d04:	2b08      	cmp	r3, #8
 8009d06:	d10b      	bne.n	8009d20 <_printf_i+0x14c>
 8009d08:	6823      	ldr	r3, [r4, #0]
 8009d0a:	07de      	lsls	r6, r3, #31
 8009d0c:	d508      	bpl.n	8009d20 <_printf_i+0x14c>
 8009d0e:	6923      	ldr	r3, [r4, #16]
 8009d10:	6861      	ldr	r1, [r4, #4]
 8009d12:	4299      	cmp	r1, r3
 8009d14:	bfde      	ittt	le
 8009d16:	2330      	movle	r3, #48	; 0x30
 8009d18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d20:	1b52      	subs	r2, r2, r5
 8009d22:	6122      	str	r2, [r4, #16]
 8009d24:	f8cd a000 	str.w	sl, [sp]
 8009d28:	464b      	mov	r3, r9
 8009d2a:	aa03      	add	r2, sp, #12
 8009d2c:	4621      	mov	r1, r4
 8009d2e:	4640      	mov	r0, r8
 8009d30:	f7ff fee2 	bl	8009af8 <_printf_common>
 8009d34:	3001      	adds	r0, #1
 8009d36:	d14c      	bne.n	8009dd2 <_printf_i+0x1fe>
 8009d38:	f04f 30ff 	mov.w	r0, #4294967295
 8009d3c:	b004      	add	sp, #16
 8009d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d42:	4835      	ldr	r0, [pc, #212]	; (8009e18 <_printf_i+0x244>)
 8009d44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d48:	6829      	ldr	r1, [r5, #0]
 8009d4a:	6823      	ldr	r3, [r4, #0]
 8009d4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d50:	6029      	str	r1, [r5, #0]
 8009d52:	061d      	lsls	r5, r3, #24
 8009d54:	d514      	bpl.n	8009d80 <_printf_i+0x1ac>
 8009d56:	07df      	lsls	r7, r3, #31
 8009d58:	bf44      	itt	mi
 8009d5a:	f043 0320 	orrmi.w	r3, r3, #32
 8009d5e:	6023      	strmi	r3, [r4, #0]
 8009d60:	b91e      	cbnz	r6, 8009d6a <_printf_i+0x196>
 8009d62:	6823      	ldr	r3, [r4, #0]
 8009d64:	f023 0320 	bic.w	r3, r3, #32
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	2310      	movs	r3, #16
 8009d6c:	e7b0      	b.n	8009cd0 <_printf_i+0xfc>
 8009d6e:	6823      	ldr	r3, [r4, #0]
 8009d70:	f043 0320 	orr.w	r3, r3, #32
 8009d74:	6023      	str	r3, [r4, #0]
 8009d76:	2378      	movs	r3, #120	; 0x78
 8009d78:	4828      	ldr	r0, [pc, #160]	; (8009e1c <_printf_i+0x248>)
 8009d7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d7e:	e7e3      	b.n	8009d48 <_printf_i+0x174>
 8009d80:	0659      	lsls	r1, r3, #25
 8009d82:	bf48      	it	mi
 8009d84:	b2b6      	uxthmi	r6, r6
 8009d86:	e7e6      	b.n	8009d56 <_printf_i+0x182>
 8009d88:	4615      	mov	r5, r2
 8009d8a:	e7bb      	b.n	8009d04 <_printf_i+0x130>
 8009d8c:	682b      	ldr	r3, [r5, #0]
 8009d8e:	6826      	ldr	r6, [r4, #0]
 8009d90:	6961      	ldr	r1, [r4, #20]
 8009d92:	1d18      	adds	r0, r3, #4
 8009d94:	6028      	str	r0, [r5, #0]
 8009d96:	0635      	lsls	r5, r6, #24
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	d501      	bpl.n	8009da0 <_printf_i+0x1cc>
 8009d9c:	6019      	str	r1, [r3, #0]
 8009d9e:	e002      	b.n	8009da6 <_printf_i+0x1d2>
 8009da0:	0670      	lsls	r0, r6, #25
 8009da2:	d5fb      	bpl.n	8009d9c <_printf_i+0x1c8>
 8009da4:	8019      	strh	r1, [r3, #0]
 8009da6:	2300      	movs	r3, #0
 8009da8:	6123      	str	r3, [r4, #16]
 8009daa:	4615      	mov	r5, r2
 8009dac:	e7ba      	b.n	8009d24 <_printf_i+0x150>
 8009dae:	682b      	ldr	r3, [r5, #0]
 8009db0:	1d1a      	adds	r2, r3, #4
 8009db2:	602a      	str	r2, [r5, #0]
 8009db4:	681d      	ldr	r5, [r3, #0]
 8009db6:	6862      	ldr	r2, [r4, #4]
 8009db8:	2100      	movs	r1, #0
 8009dba:	4628      	mov	r0, r5
 8009dbc:	f7f6 fa08 	bl	80001d0 <memchr>
 8009dc0:	b108      	cbz	r0, 8009dc6 <_printf_i+0x1f2>
 8009dc2:	1b40      	subs	r0, r0, r5
 8009dc4:	6060      	str	r0, [r4, #4]
 8009dc6:	6863      	ldr	r3, [r4, #4]
 8009dc8:	6123      	str	r3, [r4, #16]
 8009dca:	2300      	movs	r3, #0
 8009dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dd0:	e7a8      	b.n	8009d24 <_printf_i+0x150>
 8009dd2:	6923      	ldr	r3, [r4, #16]
 8009dd4:	462a      	mov	r2, r5
 8009dd6:	4649      	mov	r1, r9
 8009dd8:	4640      	mov	r0, r8
 8009dda:	47d0      	blx	sl
 8009ddc:	3001      	adds	r0, #1
 8009dde:	d0ab      	beq.n	8009d38 <_printf_i+0x164>
 8009de0:	6823      	ldr	r3, [r4, #0]
 8009de2:	079b      	lsls	r3, r3, #30
 8009de4:	d413      	bmi.n	8009e0e <_printf_i+0x23a>
 8009de6:	68e0      	ldr	r0, [r4, #12]
 8009de8:	9b03      	ldr	r3, [sp, #12]
 8009dea:	4298      	cmp	r0, r3
 8009dec:	bfb8      	it	lt
 8009dee:	4618      	movlt	r0, r3
 8009df0:	e7a4      	b.n	8009d3c <_printf_i+0x168>
 8009df2:	2301      	movs	r3, #1
 8009df4:	4632      	mov	r2, r6
 8009df6:	4649      	mov	r1, r9
 8009df8:	4640      	mov	r0, r8
 8009dfa:	47d0      	blx	sl
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	d09b      	beq.n	8009d38 <_printf_i+0x164>
 8009e00:	3501      	adds	r5, #1
 8009e02:	68e3      	ldr	r3, [r4, #12]
 8009e04:	9903      	ldr	r1, [sp, #12]
 8009e06:	1a5b      	subs	r3, r3, r1
 8009e08:	42ab      	cmp	r3, r5
 8009e0a:	dcf2      	bgt.n	8009df2 <_printf_i+0x21e>
 8009e0c:	e7eb      	b.n	8009de6 <_printf_i+0x212>
 8009e0e:	2500      	movs	r5, #0
 8009e10:	f104 0619 	add.w	r6, r4, #25
 8009e14:	e7f5      	b.n	8009e02 <_printf_i+0x22e>
 8009e16:	bf00      	nop
 8009e18:	0800a171 	.word	0x0800a171
 8009e1c:	0800a182 	.word	0x0800a182

08009e20 <memcpy>:
 8009e20:	440a      	add	r2, r1
 8009e22:	4291      	cmp	r1, r2
 8009e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e28:	d100      	bne.n	8009e2c <memcpy+0xc>
 8009e2a:	4770      	bx	lr
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e36:	4291      	cmp	r1, r2
 8009e38:	d1f9      	bne.n	8009e2e <memcpy+0xe>
 8009e3a:	bd10      	pop	{r4, pc}

08009e3c <memmove>:
 8009e3c:	4288      	cmp	r0, r1
 8009e3e:	b510      	push	{r4, lr}
 8009e40:	eb01 0402 	add.w	r4, r1, r2
 8009e44:	d902      	bls.n	8009e4c <memmove+0x10>
 8009e46:	4284      	cmp	r4, r0
 8009e48:	4623      	mov	r3, r4
 8009e4a:	d807      	bhi.n	8009e5c <memmove+0x20>
 8009e4c:	1e43      	subs	r3, r0, #1
 8009e4e:	42a1      	cmp	r1, r4
 8009e50:	d008      	beq.n	8009e64 <memmove+0x28>
 8009e52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e5a:	e7f8      	b.n	8009e4e <memmove+0x12>
 8009e5c:	4402      	add	r2, r0
 8009e5e:	4601      	mov	r1, r0
 8009e60:	428a      	cmp	r2, r1
 8009e62:	d100      	bne.n	8009e66 <memmove+0x2a>
 8009e64:	bd10      	pop	{r4, pc}
 8009e66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e6e:	e7f7      	b.n	8009e60 <memmove+0x24>

08009e70 <_free_r>:
 8009e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e72:	2900      	cmp	r1, #0
 8009e74:	d044      	beq.n	8009f00 <_free_r+0x90>
 8009e76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e7a:	9001      	str	r0, [sp, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f1a1 0404 	sub.w	r4, r1, #4
 8009e82:	bfb8      	it	lt
 8009e84:	18e4      	addlt	r4, r4, r3
 8009e86:	f000 f913 	bl	800a0b0 <__malloc_lock>
 8009e8a:	4a1e      	ldr	r2, [pc, #120]	; (8009f04 <_free_r+0x94>)
 8009e8c:	9801      	ldr	r0, [sp, #4]
 8009e8e:	6813      	ldr	r3, [r2, #0]
 8009e90:	b933      	cbnz	r3, 8009ea0 <_free_r+0x30>
 8009e92:	6063      	str	r3, [r4, #4]
 8009e94:	6014      	str	r4, [r2, #0]
 8009e96:	b003      	add	sp, #12
 8009e98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e9c:	f000 b90e 	b.w	800a0bc <__malloc_unlock>
 8009ea0:	42a3      	cmp	r3, r4
 8009ea2:	d908      	bls.n	8009eb6 <_free_r+0x46>
 8009ea4:	6825      	ldr	r5, [r4, #0]
 8009ea6:	1961      	adds	r1, r4, r5
 8009ea8:	428b      	cmp	r3, r1
 8009eaa:	bf01      	itttt	eq
 8009eac:	6819      	ldreq	r1, [r3, #0]
 8009eae:	685b      	ldreq	r3, [r3, #4]
 8009eb0:	1949      	addeq	r1, r1, r5
 8009eb2:	6021      	streq	r1, [r4, #0]
 8009eb4:	e7ed      	b.n	8009e92 <_free_r+0x22>
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	b10b      	cbz	r3, 8009ec0 <_free_r+0x50>
 8009ebc:	42a3      	cmp	r3, r4
 8009ebe:	d9fa      	bls.n	8009eb6 <_free_r+0x46>
 8009ec0:	6811      	ldr	r1, [r2, #0]
 8009ec2:	1855      	adds	r5, r2, r1
 8009ec4:	42a5      	cmp	r5, r4
 8009ec6:	d10b      	bne.n	8009ee0 <_free_r+0x70>
 8009ec8:	6824      	ldr	r4, [r4, #0]
 8009eca:	4421      	add	r1, r4
 8009ecc:	1854      	adds	r4, r2, r1
 8009ece:	42a3      	cmp	r3, r4
 8009ed0:	6011      	str	r1, [r2, #0]
 8009ed2:	d1e0      	bne.n	8009e96 <_free_r+0x26>
 8009ed4:	681c      	ldr	r4, [r3, #0]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	6053      	str	r3, [r2, #4]
 8009eda:	4421      	add	r1, r4
 8009edc:	6011      	str	r1, [r2, #0]
 8009ede:	e7da      	b.n	8009e96 <_free_r+0x26>
 8009ee0:	d902      	bls.n	8009ee8 <_free_r+0x78>
 8009ee2:	230c      	movs	r3, #12
 8009ee4:	6003      	str	r3, [r0, #0]
 8009ee6:	e7d6      	b.n	8009e96 <_free_r+0x26>
 8009ee8:	6825      	ldr	r5, [r4, #0]
 8009eea:	1961      	adds	r1, r4, r5
 8009eec:	428b      	cmp	r3, r1
 8009eee:	bf04      	itt	eq
 8009ef0:	6819      	ldreq	r1, [r3, #0]
 8009ef2:	685b      	ldreq	r3, [r3, #4]
 8009ef4:	6063      	str	r3, [r4, #4]
 8009ef6:	bf04      	itt	eq
 8009ef8:	1949      	addeq	r1, r1, r5
 8009efa:	6021      	streq	r1, [r4, #0]
 8009efc:	6054      	str	r4, [r2, #4]
 8009efe:	e7ca      	b.n	8009e96 <_free_r+0x26>
 8009f00:	b003      	add	sp, #12
 8009f02:	bd30      	pop	{r4, r5, pc}
 8009f04:	20001fb0 	.word	0x20001fb0

08009f08 <sbrk_aligned>:
 8009f08:	b570      	push	{r4, r5, r6, lr}
 8009f0a:	4e0e      	ldr	r6, [pc, #56]	; (8009f44 <sbrk_aligned+0x3c>)
 8009f0c:	460c      	mov	r4, r1
 8009f0e:	6831      	ldr	r1, [r6, #0]
 8009f10:	4605      	mov	r5, r0
 8009f12:	b911      	cbnz	r1, 8009f1a <sbrk_aligned+0x12>
 8009f14:	f000 f8bc 	bl	800a090 <_sbrk_r>
 8009f18:	6030      	str	r0, [r6, #0]
 8009f1a:	4621      	mov	r1, r4
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	f000 f8b7 	bl	800a090 <_sbrk_r>
 8009f22:	1c43      	adds	r3, r0, #1
 8009f24:	d00a      	beq.n	8009f3c <sbrk_aligned+0x34>
 8009f26:	1cc4      	adds	r4, r0, #3
 8009f28:	f024 0403 	bic.w	r4, r4, #3
 8009f2c:	42a0      	cmp	r0, r4
 8009f2e:	d007      	beq.n	8009f40 <sbrk_aligned+0x38>
 8009f30:	1a21      	subs	r1, r4, r0
 8009f32:	4628      	mov	r0, r5
 8009f34:	f000 f8ac 	bl	800a090 <_sbrk_r>
 8009f38:	3001      	adds	r0, #1
 8009f3a:	d101      	bne.n	8009f40 <sbrk_aligned+0x38>
 8009f3c:	f04f 34ff 	mov.w	r4, #4294967295
 8009f40:	4620      	mov	r0, r4
 8009f42:	bd70      	pop	{r4, r5, r6, pc}
 8009f44:	20001fb4 	.word	0x20001fb4

08009f48 <_malloc_r>:
 8009f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f4c:	1ccd      	adds	r5, r1, #3
 8009f4e:	f025 0503 	bic.w	r5, r5, #3
 8009f52:	3508      	adds	r5, #8
 8009f54:	2d0c      	cmp	r5, #12
 8009f56:	bf38      	it	cc
 8009f58:	250c      	movcc	r5, #12
 8009f5a:	2d00      	cmp	r5, #0
 8009f5c:	4607      	mov	r7, r0
 8009f5e:	db01      	blt.n	8009f64 <_malloc_r+0x1c>
 8009f60:	42a9      	cmp	r1, r5
 8009f62:	d905      	bls.n	8009f70 <_malloc_r+0x28>
 8009f64:	230c      	movs	r3, #12
 8009f66:	603b      	str	r3, [r7, #0]
 8009f68:	2600      	movs	r6, #0
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f70:	4e2e      	ldr	r6, [pc, #184]	; (800a02c <_malloc_r+0xe4>)
 8009f72:	f000 f89d 	bl	800a0b0 <__malloc_lock>
 8009f76:	6833      	ldr	r3, [r6, #0]
 8009f78:	461c      	mov	r4, r3
 8009f7a:	bb34      	cbnz	r4, 8009fca <_malloc_r+0x82>
 8009f7c:	4629      	mov	r1, r5
 8009f7e:	4638      	mov	r0, r7
 8009f80:	f7ff ffc2 	bl	8009f08 <sbrk_aligned>
 8009f84:	1c43      	adds	r3, r0, #1
 8009f86:	4604      	mov	r4, r0
 8009f88:	d14d      	bne.n	800a026 <_malloc_r+0xde>
 8009f8a:	6834      	ldr	r4, [r6, #0]
 8009f8c:	4626      	mov	r6, r4
 8009f8e:	2e00      	cmp	r6, #0
 8009f90:	d140      	bne.n	800a014 <_malloc_r+0xcc>
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	4631      	mov	r1, r6
 8009f96:	4638      	mov	r0, r7
 8009f98:	eb04 0803 	add.w	r8, r4, r3
 8009f9c:	f000 f878 	bl	800a090 <_sbrk_r>
 8009fa0:	4580      	cmp	r8, r0
 8009fa2:	d13a      	bne.n	800a01a <_malloc_r+0xd2>
 8009fa4:	6821      	ldr	r1, [r4, #0]
 8009fa6:	3503      	adds	r5, #3
 8009fa8:	1a6d      	subs	r5, r5, r1
 8009faa:	f025 0503 	bic.w	r5, r5, #3
 8009fae:	3508      	adds	r5, #8
 8009fb0:	2d0c      	cmp	r5, #12
 8009fb2:	bf38      	it	cc
 8009fb4:	250c      	movcc	r5, #12
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	4638      	mov	r0, r7
 8009fba:	f7ff ffa5 	bl	8009f08 <sbrk_aligned>
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	d02b      	beq.n	800a01a <_malloc_r+0xd2>
 8009fc2:	6823      	ldr	r3, [r4, #0]
 8009fc4:	442b      	add	r3, r5
 8009fc6:	6023      	str	r3, [r4, #0]
 8009fc8:	e00e      	b.n	8009fe8 <_malloc_r+0xa0>
 8009fca:	6822      	ldr	r2, [r4, #0]
 8009fcc:	1b52      	subs	r2, r2, r5
 8009fce:	d41e      	bmi.n	800a00e <_malloc_r+0xc6>
 8009fd0:	2a0b      	cmp	r2, #11
 8009fd2:	d916      	bls.n	800a002 <_malloc_r+0xba>
 8009fd4:	1961      	adds	r1, r4, r5
 8009fd6:	42a3      	cmp	r3, r4
 8009fd8:	6025      	str	r5, [r4, #0]
 8009fda:	bf18      	it	ne
 8009fdc:	6059      	strne	r1, [r3, #4]
 8009fde:	6863      	ldr	r3, [r4, #4]
 8009fe0:	bf08      	it	eq
 8009fe2:	6031      	streq	r1, [r6, #0]
 8009fe4:	5162      	str	r2, [r4, r5]
 8009fe6:	604b      	str	r3, [r1, #4]
 8009fe8:	4638      	mov	r0, r7
 8009fea:	f104 060b 	add.w	r6, r4, #11
 8009fee:	f000 f865 	bl	800a0bc <__malloc_unlock>
 8009ff2:	f026 0607 	bic.w	r6, r6, #7
 8009ff6:	1d23      	adds	r3, r4, #4
 8009ff8:	1af2      	subs	r2, r6, r3
 8009ffa:	d0b6      	beq.n	8009f6a <_malloc_r+0x22>
 8009ffc:	1b9b      	subs	r3, r3, r6
 8009ffe:	50a3      	str	r3, [r4, r2]
 800a000:	e7b3      	b.n	8009f6a <_malloc_r+0x22>
 800a002:	6862      	ldr	r2, [r4, #4]
 800a004:	42a3      	cmp	r3, r4
 800a006:	bf0c      	ite	eq
 800a008:	6032      	streq	r2, [r6, #0]
 800a00a:	605a      	strne	r2, [r3, #4]
 800a00c:	e7ec      	b.n	8009fe8 <_malloc_r+0xa0>
 800a00e:	4623      	mov	r3, r4
 800a010:	6864      	ldr	r4, [r4, #4]
 800a012:	e7b2      	b.n	8009f7a <_malloc_r+0x32>
 800a014:	4634      	mov	r4, r6
 800a016:	6876      	ldr	r6, [r6, #4]
 800a018:	e7b9      	b.n	8009f8e <_malloc_r+0x46>
 800a01a:	230c      	movs	r3, #12
 800a01c:	603b      	str	r3, [r7, #0]
 800a01e:	4638      	mov	r0, r7
 800a020:	f000 f84c 	bl	800a0bc <__malloc_unlock>
 800a024:	e7a1      	b.n	8009f6a <_malloc_r+0x22>
 800a026:	6025      	str	r5, [r4, #0]
 800a028:	e7de      	b.n	8009fe8 <_malloc_r+0xa0>
 800a02a:	bf00      	nop
 800a02c:	20001fb0 	.word	0x20001fb0

0800a030 <_realloc_r>:
 800a030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a034:	4680      	mov	r8, r0
 800a036:	4614      	mov	r4, r2
 800a038:	460e      	mov	r6, r1
 800a03a:	b921      	cbnz	r1, 800a046 <_realloc_r+0x16>
 800a03c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a040:	4611      	mov	r1, r2
 800a042:	f7ff bf81 	b.w	8009f48 <_malloc_r>
 800a046:	b92a      	cbnz	r2, 800a054 <_realloc_r+0x24>
 800a048:	f7ff ff12 	bl	8009e70 <_free_r>
 800a04c:	4625      	mov	r5, r4
 800a04e:	4628      	mov	r0, r5
 800a050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a054:	f000 f838 	bl	800a0c8 <_malloc_usable_size_r>
 800a058:	4284      	cmp	r4, r0
 800a05a:	4607      	mov	r7, r0
 800a05c:	d802      	bhi.n	800a064 <_realloc_r+0x34>
 800a05e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a062:	d812      	bhi.n	800a08a <_realloc_r+0x5a>
 800a064:	4621      	mov	r1, r4
 800a066:	4640      	mov	r0, r8
 800a068:	f7ff ff6e 	bl	8009f48 <_malloc_r>
 800a06c:	4605      	mov	r5, r0
 800a06e:	2800      	cmp	r0, #0
 800a070:	d0ed      	beq.n	800a04e <_realloc_r+0x1e>
 800a072:	42bc      	cmp	r4, r7
 800a074:	4622      	mov	r2, r4
 800a076:	4631      	mov	r1, r6
 800a078:	bf28      	it	cs
 800a07a:	463a      	movcs	r2, r7
 800a07c:	f7ff fed0 	bl	8009e20 <memcpy>
 800a080:	4631      	mov	r1, r6
 800a082:	4640      	mov	r0, r8
 800a084:	f7ff fef4 	bl	8009e70 <_free_r>
 800a088:	e7e1      	b.n	800a04e <_realloc_r+0x1e>
 800a08a:	4635      	mov	r5, r6
 800a08c:	e7df      	b.n	800a04e <_realloc_r+0x1e>
	...

0800a090 <_sbrk_r>:
 800a090:	b538      	push	{r3, r4, r5, lr}
 800a092:	4d06      	ldr	r5, [pc, #24]	; (800a0ac <_sbrk_r+0x1c>)
 800a094:	2300      	movs	r3, #0
 800a096:	4604      	mov	r4, r0
 800a098:	4608      	mov	r0, r1
 800a09a:	602b      	str	r3, [r5, #0]
 800a09c:	f7f7 f81e 	bl	80010dc <_sbrk>
 800a0a0:	1c43      	adds	r3, r0, #1
 800a0a2:	d102      	bne.n	800a0aa <_sbrk_r+0x1a>
 800a0a4:	682b      	ldr	r3, [r5, #0]
 800a0a6:	b103      	cbz	r3, 800a0aa <_sbrk_r+0x1a>
 800a0a8:	6023      	str	r3, [r4, #0]
 800a0aa:	bd38      	pop	{r3, r4, r5, pc}
 800a0ac:	20001fb8 	.word	0x20001fb8

0800a0b0 <__malloc_lock>:
 800a0b0:	4801      	ldr	r0, [pc, #4]	; (800a0b8 <__malloc_lock+0x8>)
 800a0b2:	f000 b811 	b.w	800a0d8 <__retarget_lock_acquire_recursive>
 800a0b6:	bf00      	nop
 800a0b8:	20001fbc 	.word	0x20001fbc

0800a0bc <__malloc_unlock>:
 800a0bc:	4801      	ldr	r0, [pc, #4]	; (800a0c4 <__malloc_unlock+0x8>)
 800a0be:	f000 b80c 	b.w	800a0da <__retarget_lock_release_recursive>
 800a0c2:	bf00      	nop
 800a0c4:	20001fbc 	.word	0x20001fbc

0800a0c8 <_malloc_usable_size_r>:
 800a0c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0cc:	1f18      	subs	r0, r3, #4
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	bfbc      	itt	lt
 800a0d2:	580b      	ldrlt	r3, [r1, r0]
 800a0d4:	18c0      	addlt	r0, r0, r3
 800a0d6:	4770      	bx	lr

0800a0d8 <__retarget_lock_acquire_recursive>:
 800a0d8:	4770      	bx	lr

0800a0da <__retarget_lock_release_recursive>:
 800a0da:	4770      	bx	lr

0800a0dc <_init>:
 800a0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0de:	bf00      	nop
 800a0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0e2:	bc08      	pop	{r3}
 800a0e4:	469e      	mov	lr, r3
 800a0e6:	4770      	bx	lr

0800a0e8 <_fini>:
 800a0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ea:	bf00      	nop
 800a0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ee:	bc08      	pop	{r3}
 800a0f0:	469e      	mov	lr, r3
 800a0f2:	4770      	bx	lr
