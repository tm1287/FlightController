
SensorControllerFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eac0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  0800ec50  0800ec50  0001ec50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f484  0800f484  000202d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f484  0800f484  0001f484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f48c  0800f48c  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f48c  0800f48c  0001f48c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f490  0800f490  0001f490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0800f494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202d4  2**0
                  CONTENTS
 10 .bss          00001e74  200002d4  200002d4  000202d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002148  20002148  000202d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c5d2  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b1a  00000000  00000000  0003c8d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001870  00000000  00000000  000403f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001700  00000000  00000000  00041c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243c3  00000000  00000000  00043360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e990  00000000  00000000  00067723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca325  00000000  00000000  000860b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001503d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d0c  00000000  00000000  00150428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ec38 	.word	0x0800ec38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	0800ec38 	.word	0x0800ec38

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MPU6050_Initialize>:
#include "MPU6050.h"
#include "constants.h"
#include <math.h>

uint8_t MPU6050_Initialize(MPU6050 *dev, I2C_HandleTypeDef *i2cHandle) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]

	dev->i2cHandle = i2cHandle;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	601a      	str	r2, [r3, #0]

	dev->acc_mps2[0] = 0.0f;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	605a      	str	r2, [r3, #4]
	dev->acc_mps2[1] = 0.0f;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
	dev->acc_mps2[2] = 0.0f;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]

	uint8_t errNum = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;

	uint8_t regData;

	status = MPU6050_ReadRegister(dev, MPU6050_REG_WHO_AM_I, &regData);
 8000f78:	f107 030d 	add.w	r3, r7, #13
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	2175      	movs	r1, #117	; 0x75
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 f99f 	bl	80012c4 <MPU6050_ReadRegister>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	bf14      	ite	ne
 8000f90:	2301      	movne	r3, #1
 8000f92:	2300      	moveq	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	461a      	mov	r2, r3
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	73fb      	strb	r3, [r7, #15]

	if (regData != 0x68) {
 8000f9e:	7b7b      	ldrb	r3, [r7, #13]
 8000fa0:	2b68      	cmp	r3, #104	; 0x68
 8000fa2:	d001      	beq.n	8000fa8 <MPU6050_Initialize+0x5c>
		return 255;
 8000fa4:	23ff      	movs	r3, #255	; 0xff
 8000fa6:	e052      	b.n	800104e <MPU6050_Initialize+0x102>
	}

	regData = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	737b      	strb	r3, [r7, #13]
	status = MPU6050_WriteRegister(dev, MPU6050_REG_PWR_MGMT_1, &regData);
 8000fac:	f107 030d 	add.w	r3, r7, #13
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	216b      	movs	r1, #107	; 0x6b
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f000 f9bf 	bl	8001338 <MPU6050_WriteRegister>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8000fbe:	7bbb      	ldrb	r3, [r7, #14]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	bf14      	ite	ne
 8000fc4:	2301      	movne	r3, #1
 8000fc6:	2300      	moveq	r3, #0
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	461a      	mov	r2, r3
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	4413      	add	r3, r2
 8000fd0:	73fb      	strb	r3, [r7, #15]

	regData = 0x07;
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	737b      	strb	r3, [r7, #13]
	status = MPU6050_WriteRegister(dev, MPU6050_REG_SMPLRT_DIV, &regData);
 8000fd6:	f107 030d 	add.w	r3, r7, #13
 8000fda:	461a      	mov	r2, r3
 8000fdc:	2119      	movs	r1, #25
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 f9aa 	bl	8001338 <MPU6050_WriteRegister>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8000fe8:	7bbb      	ldrb	r3, [r7, #14]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	bf14      	ite	ne
 8000fee:	2301      	movne	r3, #1
 8000ff0:	2300      	moveq	r3, #0
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	73fb      	strb	r3, [r7, #15]

	regData = 0x00;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	737b      	strb	r3, [r7, #13]
	status = MPU6050_WriteRegister(dev, MPU6050_REG_GYRO_CONFIG, &regData);
 8001000:	f107 030d 	add.w	r3, r7, #13
 8001004:	461a      	mov	r2, r3
 8001006:	211b      	movs	r1, #27
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 f995 	bl	8001338 <MPU6050_WriteRegister>
 800100e:	4603      	mov	r3, r0
 8001010:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8001012:	7bbb      	ldrb	r3, [r7, #14]
 8001014:	2b00      	cmp	r3, #0
 8001016:	bf14      	ite	ne
 8001018:	2301      	movne	r3, #1
 800101a:	2300      	moveq	r3, #0
 800101c:	b2db      	uxtb	r3, r3
 800101e:	461a      	mov	r2, r3
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	4413      	add	r3, r2
 8001024:	73fb      	strb	r3, [r7, #15]

	status = MPU6050_WriteRegister(dev, MPU6050_REG_ACCEL_CONFIG, &regData);
 8001026:	f107 030d 	add.w	r3, r7, #13
 800102a:	461a      	mov	r2, r3
 800102c:	211c      	movs	r1, #28
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 f982 	bl	8001338 <MPU6050_WriteRegister>
 8001034:	4603      	mov	r3, r0
 8001036:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8001038:	7bbb      	ldrb	r3, [r7, #14]
 800103a:	2b00      	cmp	r3, #0
 800103c:	bf14      	ite	ne
 800103e:	2301      	movne	r3, #1
 8001040:	2300      	moveq	r3, #0
 8001042:	b2db      	uxtb	r3, r3
 8001044:	461a      	mov	r2, r3
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	4413      	add	r3, r2
 800104a:	73fb      	strb	r3, [r7, #15]

	return errNum;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <MPU6050_ReadAccel>:

HAL_StatusTypeDef MPU6050_ReadAccel(MPU6050 *dev) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	uint8_t accelData[6];
	int16_t Accel_X_RAW = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	82fb      	strh	r3, [r7, #22]
	int16_t Accel_Y_RAW = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	82bb      	strh	r3, [r7, #20]
	int16_t Accel_Z_RAW = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	827b      	strh	r3, [r7, #18]
	HAL_StatusTypeDef status;

	status = MPU6050_ReadRegisters(dev, MPU6050_REG_ACCEL_XOUT_H, accelData, 6);
 800106c:	f107 0208 	add.w	r2, r7, #8
 8001070:	2306      	movs	r3, #6
 8001072:	213b      	movs	r1, #59	; 0x3b
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 f940 	bl	80012fa <MPU6050_ReadRegisters>
 800107a:	4603      	mov	r3, r0
 800107c:	747b      	strb	r3, [r7, #17]

	Accel_X_RAW = (int16_t)(accelData[0] << 8 | accelData [1]);
 800107e:	7a3b      	ldrb	r3, [r7, #8]
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	b21a      	sxth	r2, r3
 8001084:	7a7b      	ldrb	r3, [r7, #9]
 8001086:	b21b      	sxth	r3, r3
 8001088:	4313      	orrs	r3, r2
 800108a:	82fb      	strh	r3, [r7, #22]
	Accel_Y_RAW = (int16_t)(accelData[2] << 8 | accelData [3]);
 800108c:	7abb      	ldrb	r3, [r7, #10]
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	b21a      	sxth	r2, r3
 8001092:	7afb      	ldrb	r3, [r7, #11]
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	82bb      	strh	r3, [r7, #20]
	Accel_Z_RAW = (int16_t)(accelData[4] << 8 | accelData [5]);
 800109a:	7b3b      	ldrb	r3, [r7, #12]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	b21a      	sxth	r2, r3
 80010a0:	7b7b      	ldrb	r3, [r7, #13]
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	4313      	orrs	r3, r2
 80010a6:	827b      	strh	r3, [r7, #18]

	//Get approximate acceleration in m/s^2
	dev->acc_mps2[0] = Accel_X_RAW/16384.0 * G_MS2;
 80010a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa39 	bl	8000524 <__aeabi_i2d>
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <MPU6050_ReadAccel+0x110>)
 80010b8:	f7ff fbc8 	bl	800084c <__aeabi_ddiv>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	a326      	add	r3, pc, #152	; (adr r3, 8001160 <MPU6050_ReadAccel+0x108>)
 80010c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ca:	f7ff fa95 	bl	80005f8 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	f7ff fd67 	bl	8000ba8 <__aeabi_d2f>
 80010da:	4602      	mov	r2, r0
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	605a      	str	r2, [r3, #4]
	dev->acc_mps2[1] = Accel_Y_RAW/16384.0 * G_MS2;
 80010e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fa1d 	bl	8000524 <__aeabi_i2d>
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <MPU6050_ReadAccel+0x110>)
 80010f0:	f7ff fbac 	bl	800084c <__aeabi_ddiv>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4610      	mov	r0, r2
 80010fa:	4619      	mov	r1, r3
 80010fc:	a318      	add	r3, pc, #96	; (adr r3, 8001160 <MPU6050_ReadAccel+0x108>)
 80010fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001102:	f7ff fa79 	bl	80005f8 <__aeabi_dmul>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4610      	mov	r0, r2
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff fd4b 	bl	8000ba8 <__aeabi_d2f>
 8001112:	4602      	mov	r2, r0
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	609a      	str	r2, [r3, #8]
	dev->acc_mps2[2] = Accel_Z_RAW/16384.0 * G_MS2;
 8001118:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fa01 	bl	8000524 <__aeabi_i2d>
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <MPU6050_ReadAccel+0x110>)
 8001128:	f7ff fb90 	bl	800084c <__aeabi_ddiv>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	a30a      	add	r3, pc, #40	; (adr r3, 8001160 <MPU6050_ReadAccel+0x108>)
 8001136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113a:	f7ff fa5d 	bl	80005f8 <__aeabi_dmul>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	f7ff fd2f 	bl	8000ba8 <__aeabi_d2f>
 800114a:	4602      	mov	r2, r0
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	60da      	str	r2, [r3, #12]

	return status;
 8001150:	7c7b      	ldrb	r3, [r7, #17]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	f3af 8000 	nop.w
 8001160:	60000000 	.word	0x60000000
 8001164:	40239eb8 	.word	0x40239eb8
 8001168:	40d00000 	.word	0x40d00000
 800116c:	00000000 	.word	0x00000000

08001170 <MPU6050_ReadGyro>:

HAL_StatusTypeDef MPU6050_ReadGyro(MPU6050 *dev) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	uint8_t gyroData[6];
	int16_t Gyro_X_RAW = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	82fb      	strh	r3, [r7, #22]
	int16_t Gyro_Y_RAW = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	82bb      	strh	r3, [r7, #20]
	int16_t Gyro_Z_RAW = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	827b      	strh	r3, [r7, #18]
	HAL_StatusTypeDef status;

	status = MPU6050_ReadRegisters(dev, MPU6050_REG_GYRO_XOUT_H, gyroData, 6);
 8001184:	f107 0208 	add.w	r2, r7, #8
 8001188:	2306      	movs	r3, #6
 800118a:	2143      	movs	r1, #67	; 0x43
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f8b4 	bl	80012fa <MPU6050_ReadRegisters>
 8001192:	4603      	mov	r3, r0
 8001194:	747b      	strb	r3, [r7, #17]

	Gyro_X_RAW = (int16_t)(gyroData[0] << 8 | gyroData [1]);
 8001196:	7a3b      	ldrb	r3, [r7, #8]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	b21a      	sxth	r2, r3
 800119c:	7a7b      	ldrb	r3, [r7, #9]
 800119e:	b21b      	sxth	r3, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	82fb      	strh	r3, [r7, #22]
	Gyro_Y_RAW = (int16_t)(gyroData[2] << 8 | gyroData [3]);
 80011a4:	7abb      	ldrb	r3, [r7, #10]
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	7afb      	ldrb	r3, [r7, #11]
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	4313      	orrs	r3, r2
 80011b0:	82bb      	strh	r3, [r7, #20]
	Gyro_Z_RAW = (int16_t)(gyroData[4] << 8 | gyroData [5]);
 80011b2:	7b3b      	ldrb	r3, [r7, #12]
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	7b7b      	ldrb	r3, [r7, #13]
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	827b      	strh	r3, [r7, #18]

	//Convert to rads per second
	dev->gyr_rps[0] = Gyro_X_RAW/131.0 * M_PI / 180;
 80011c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f9ad 	bl	8000524 <__aeabi_i2d>
 80011ca:	a339      	add	r3, pc, #228	; (adr r3, 80012b0 <MPU6050_ReadGyro+0x140>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	f7ff fb3c 	bl	800084c <__aeabi_ddiv>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	a336      	add	r3, pc, #216	; (adr r3, 80012b8 <MPU6050_ReadGyro+0x148>)
 80011de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e2:	f7ff fa09 	bl	80005f8 <__aeabi_dmul>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	4b33      	ldr	r3, [pc, #204]	; (80012c0 <MPU6050_ReadGyro+0x150>)
 80011f4:	f7ff fb2a 	bl	800084c <__aeabi_ddiv>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	f7ff fcd2 	bl	8000ba8 <__aeabi_d2f>
 8001204:	4602      	mov	r2, r0
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	611a      	str	r2, [r3, #16]
	dev->gyr_rps[1] = -1 * Gyro_Y_RAW/131.0 * M_PI / 180;
 800120a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800120e:	425b      	negs	r3, r3
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f987 	bl	8000524 <__aeabi_i2d>
 8001216:	a326      	add	r3, pc, #152	; (adr r3, 80012b0 <MPU6050_ReadGyro+0x140>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	f7ff fb16 	bl	800084c <__aeabi_ddiv>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	a323      	add	r3, pc, #140	; (adr r3, 80012b8 <MPU6050_ReadGyro+0x148>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	f7ff f9e3 	bl	80005f8 <__aeabi_dmul>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <MPU6050_ReadGyro+0x150>)
 8001240:	f7ff fb04 	bl	800084c <__aeabi_ddiv>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	f7ff fcac 	bl	8000ba8 <__aeabi_d2f>
 8001250:	4602      	mov	r2, r0
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	615a      	str	r2, [r3, #20]
	dev->gyr_rps[2] = -1 * Gyro_Z_RAW/131.0 * M_PI / 180;
 8001256:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800125a:	425b      	negs	r3, r3
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f961 	bl	8000524 <__aeabi_i2d>
 8001262:	a313      	add	r3, pc, #76	; (adr r3, 80012b0 <MPU6050_ReadGyro+0x140>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff faf0 	bl	800084c <__aeabi_ddiv>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	a310      	add	r3, pc, #64	; (adr r3, 80012b8 <MPU6050_ReadGyro+0x148>)
 8001276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127a:	f7ff f9bd 	bl	80005f8 <__aeabi_dmul>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4610      	mov	r0, r2
 8001284:	4619      	mov	r1, r3
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <MPU6050_ReadGyro+0x150>)
 800128c:	f7ff fade 	bl	800084c <__aeabi_ddiv>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fc86 	bl	8000ba8 <__aeabi_d2f>
 800129c:	4602      	mov	r2, r0
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	619a      	str	r2, [r3, #24]

	return status;
 80012a2:	7c7b      	ldrb	r3, [r7, #17]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	f3af 8000 	nop.w
 80012b0:	00000000 	.word	0x00000000
 80012b4:	40606000 	.word	0x40606000
 80012b8:	54442d18 	.word	0x54442d18
 80012bc:	400921fb 	.word	0x400921fb
 80012c0:	40668000 	.word	0x40668000

080012c4 <MPU6050_ReadRegister>:

HAL_StatusTypeDef MPU6050_ReadRegister(MPU6050 *dev, uint8_t reg, uint8_t *data) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af04      	add	r7, sp, #16
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	460b      	mov	r3, r1
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(dev->i2cHandle, MPU6050_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 1000);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	7afb      	ldrb	r3, [r7, #11]
 80012d8:	b29a      	uxth	r2, r3
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	9302      	str	r3, [sp, #8]
 80012e0:	2301      	movs	r3, #1
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2301      	movs	r3, #1
 80012ea:	21d0      	movs	r1, #208	; 0xd0
 80012ec:	f001 fdd2 	bl	8002e94 <HAL_I2C_Mem_Read>
 80012f0:	4603      	mov	r3, r0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <MPU6050_ReadRegisters>:

HAL_StatusTypeDef MPU6050_ReadRegisters(MPU6050 *dev, uint8_t reg, uint8_t *data, uint8_t length){
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b088      	sub	sp, #32
 80012fe:	af04      	add	r7, sp, #16
 8001300:	60f8      	str	r0, [r7, #12]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	461a      	mov	r2, r3
 8001306:	460b      	mov	r3, r1
 8001308:	72fb      	strb	r3, [r7, #11]
 800130a:	4613      	mov	r3, r2
 800130c:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(dev->i2cHandle, MPU6050_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, 1000);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6818      	ldr	r0, [r3, #0]
 8001312:	7afb      	ldrb	r3, [r7, #11]
 8001314:	b29a      	uxth	r2, r3
 8001316:	7abb      	ldrb	r3, [r7, #10]
 8001318:	b29b      	uxth	r3, r3
 800131a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800131e:	9102      	str	r1, [sp, #8]
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2301      	movs	r3, #1
 8001328:	21d0      	movs	r1, #208	; 0xd0
 800132a:	f001 fdb3 	bl	8002e94 <HAL_I2C_Mem_Read>
 800132e:	4603      	mov	r3, r0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <MPU6050_WriteRegister>:
HAL_StatusTypeDef MPU6050_WriteRegister(MPU6050 *dev, uint8_t reg, uint8_t *data){
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af04      	add	r7, sp, #16
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	460b      	mov	r3, r1
 8001342:	607a      	str	r2, [r7, #4]
 8001344:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write(dev->i2cHandle, MPU6050_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 1000);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	7afb      	ldrb	r3, [r7, #11]
 800134c:	b29a      	uxth	r2, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	9302      	str	r3, [sp, #8]
 8001354:	2301      	movs	r3, #1
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2301      	movs	r3, #1
 800135e:	21d0      	movs	r1, #208	; 0xd0
 8001360:	f001 fc9e 	bl	8002ca0 <HAL_I2C_Mem_Write>
 8001364:	4603      	mov	r3, r0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001370:	b5b0      	push	{r4, r5, r7, lr}
 8001372:	ed2d 8b02 	vpush	{d8}
 8001376:	b09a      	sub	sp, #104	; 0x68
 8001378:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137a:	f000 ffef 	bl	800235c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137e:	f000 f97b 	bl	8001678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001382:	f000 fc0d 	bl	8001ba0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001386:	f000 f9e1 	bl	800174c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800138a:	f000 fbdf 	bl	8001b4c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800138e:	f008 ff61 	bl	800a254 <MX_USB_DEVICE_Init>
  MX_I2C2_Init();
 8001392:	f000 fa09 	bl	80017a8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001396:	f000 fbaf 	bl	8001af8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800139a:	f000 fa69 	bl	8001870 <MX_TIM3_Init>
  MX_TIM8_Init();
 800139e:	f000 faff 	bl	80019a0 <MX_TIM8_Init>
  MX_SPI1_Init();
 80013a2:	f000 fa2f 	bl	8001804 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MPU6050_Initialize(&imu, &hi2c1);
 80013a6:	49b0      	ldr	r1, [pc, #704]	; (8001668 <main+0x2f8>)
 80013a8:	48b0      	ldr	r0, [pc, #704]	; (800166c <main+0x2fc>)
 80013aa:	f7ff fdcf 	bl	8000f4c <MPU6050_Initialize>

  uint8_t logBuf[32];
  uint8_t bufLen;

  double phiHat_acc_rad = 0.0f;
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  double thetaHat_acc_rad = 0.0f;
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  double phiDot_rps = 0.0f;
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  double thetaDot_rps = 0.0f;
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	f04f 0300 	mov.w	r3, #0
 80013da:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  double phiHat_rad = 0.0f;
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	f04f 0300 	mov.w	r3, #0
 80013e6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  double thetaHat_rad = 0.0f;
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MPU6050_ReadAccel(&imu);
 80013f6:	489d      	ldr	r0, [pc, #628]	; (800166c <main+0x2fc>)
 80013f8:	f7ff fe2e 	bl	8001058 <MPU6050_ReadAccel>
	MPU6050_ReadGyro(&imu);
 80013fc:	489b      	ldr	r0, [pc, #620]	; (800166c <main+0x2fc>)
 80013fe:	f7ff feb7 	bl	8001170 <MPU6050_ReadGyro>

	phiHat_acc_rad = atanf(imu.acc_mps2[1] / imu.acc_mps2[2]);
 8001402:	4b9a      	ldr	r3, [pc, #616]	; (800166c <main+0x2fc>)
 8001404:	ed93 7a02 	vldr	s14, [r3, #8]
 8001408:	4b98      	ldr	r3, [pc, #608]	; (800166c <main+0x2fc>)
 800140a:	edd3 7a03 	vldr	s15, [r3, #12]
 800140e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001412:	eeb0 0a66 	vmov.f32	s0, s13
 8001416:	f00c fb73 	bl	800db00 <atanf>
 800141a:	ee10 3a10 	vmov	r3, s0
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f892 	bl	8000548 <__aeabi_f2d>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	thetaHat_acc_rad = asinf(imu.acc_mps2[0] / G_MS2);
 800142c:	4b8f      	ldr	r3, [pc, #572]	; (800166c <main+0x2fc>)
 800142e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001432:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8001670 <main+0x300>
 8001436:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800143a:	eeb0 0a47 	vmov.f32	s0, s14
 800143e:	f00c fcf1 	bl	800de24 <asinf>
 8001442:	ee10 3a10 	vmov	r3, s0
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f87e 	bl	8000548 <__aeabi_f2d>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38


	phiDot_rps = imu.gyr_rps[0] + (tanf(thetaHat_rad) * sinf(phiHat_rad) * imu.gyr_rps[1]) + (tanf(thetaHat_rad) * cosf(phiHat_rad) * imu.gyr_rps[2]);
 8001454:	4b85      	ldr	r3, [pc, #532]	; (800166c <main+0x2fc>)
 8001456:	ed93 8a04 	vldr	s16, [r3, #16]
 800145a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800145e:	f7ff fba3 	bl	8000ba8 <__aeabi_d2f>
 8001462:	4603      	mov	r3, r0
 8001464:	ee00 3a10 	vmov	s0, r3
 8001468:	f00c fcb0 	bl	800ddcc <tanf>
 800146c:	eef0 8a40 	vmov.f32	s17, s0
 8001470:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001474:	f7ff fb98 	bl	8000ba8 <__aeabi_d2f>
 8001478:	4603      	mov	r3, r0
 800147a:	ee00 3a10 	vmov	s0, r3
 800147e:	f00c fc5f 	bl	800dd40 <sinf>
 8001482:	eef0 7a40 	vmov.f32	s15, s0
 8001486:	ee28 7aa7 	vmul.f32	s14, s17, s15
 800148a:	4b78      	ldr	r3, [pc, #480]	; (800166c <main+0x2fc>)
 800148c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001494:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001498:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800149c:	f7ff fb84 	bl	8000ba8 <__aeabi_d2f>
 80014a0:	4603      	mov	r3, r0
 80014a2:	ee00 3a10 	vmov	s0, r3
 80014a6:	f00c fc91 	bl	800ddcc <tanf>
 80014aa:	eef0 8a40 	vmov.f32	s17, s0
 80014ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80014b2:	f7ff fb79 	bl	8000ba8 <__aeabi_d2f>
 80014b6:	4603      	mov	r3, r0
 80014b8:	ee00 3a10 	vmov	s0, r3
 80014bc:	f00c fbf4 	bl	800dca8 <cosf>
 80014c0:	eef0 7a40 	vmov.f32	s15, s0
 80014c4:	ee28 7aa7 	vmul.f32	s14, s17, s15
 80014c8:	4b68      	ldr	r3, [pc, #416]	; (800166c <main+0x2fc>)
 80014ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80014ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80014d6:	ee17 0a90 	vmov	r0, s15
 80014da:	f7ff f835 	bl	8000548 <__aeabi_f2d>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	thetaDot_rps = cosf(phiHat_rad) * imu.gyr_rps[1] - sinf(phiHat_rad) * imu.gyr_rps[2];
 80014e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80014ea:	f7ff fb5d 	bl	8000ba8 <__aeabi_d2f>
 80014ee:	4603      	mov	r3, r0
 80014f0:	ee00 3a10 	vmov	s0, r3
 80014f4:	f00c fbd8 	bl	800dca8 <cosf>
 80014f8:	eeb0 7a40 	vmov.f32	s14, s0
 80014fc:	4b5b      	ldr	r3, [pc, #364]	; (800166c <main+0x2fc>)
 80014fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8001502:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001506:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800150a:	f7ff fb4d 	bl	8000ba8 <__aeabi_d2f>
 800150e:	4603      	mov	r3, r0
 8001510:	ee00 3a10 	vmov	s0, r3
 8001514:	f00c fc14 	bl	800dd40 <sinf>
 8001518:	eeb0 7a40 	vmov.f32	s14, s0
 800151c:	4b53      	ldr	r3, [pc, #332]	; (800166c <main+0x2fc>)
 800151e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001526:	ee78 7a67 	vsub.f32	s15, s16, s15
 800152a:	ee17 0a90 	vmov	r0, s15
 800152e:	f7ff f80b 	bl	8000548 <__aeabi_f2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	phiHat_rad = CF_ALPHA * phiHat_acc_rad + (1.0f - CF_ALPHA) * (phiHat_rad + (20 / 1000.0f) * phiDot_rps);
 800153a:	a343      	add	r3, pc, #268	; (adr r3, 8001648 <main+0x2d8>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001544:	f7ff f858 	bl	80005f8 <__aeabi_dmul>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4614      	mov	r4, r2
 800154e:	461d      	mov	r5, r3
 8001550:	a33f      	add	r3, pc, #252	; (adr r3, 8001650 <main+0x2e0>)
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800155a:	f7ff f84d 	bl	80005f8 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800156a:	f7fe fe8f 	bl	800028c <__adddf3>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	a338      	add	r3, pc, #224	; (adr r3, 8001658 <main+0x2e8>)
 8001578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157c:	f7ff f83c 	bl	80005f8 <__aeabi_dmul>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4620      	mov	r0, r4
 8001586:	4629      	mov	r1, r5
 8001588:	f7fe fe80 	bl	800028c <__adddf3>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	thetaHat_rad = CF_ALPHA * thetaHat_acc_rad + (1.0f - CF_ALPHA) * (thetaHat_rad + (20 / 1000.0f) * thetaDot_rps);
 8001594:	a32c      	add	r3, pc, #176	; (adr r3, 8001648 <main+0x2d8>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800159e:	f7ff f82b 	bl	80005f8 <__aeabi_dmul>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4614      	mov	r4, r2
 80015a8:	461d      	mov	r5, r3
 80015aa:	a329      	add	r3, pc, #164	; (adr r3, 8001650 <main+0x2e0>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015b4:	f7ff f820 	bl	80005f8 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80015c4:	f7fe fe62 	bl	800028c <__adddf3>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	a321      	add	r3, pc, #132	; (adr r3, 8001658 <main+0x2e8>)
 80015d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d6:	f7ff f80f 	bl	80005f8 <__aeabi_dmul>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4620      	mov	r0, r4
 80015e0:	4629      	mov	r1, r5
 80015e2:	f7fe fe53 	bl	800028c <__adddf3>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	bufLen = snprintf(logBuf, 32, "%.3f,%.3f\r\n", phiHat_rad * RAD_TO_DEG, thetaHat_rad * RAD_TO_DEG);
 80015ee:	a31c      	add	r3, pc, #112	; (adr r3, 8001660 <main+0x2f0>)
 80015f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80015f8:	f7fe fffe 	bl	80005f8 <__aeabi_dmul>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4614      	mov	r4, r2
 8001602:	461d      	mov	r5, r3
 8001604:	a316      	add	r3, pc, #88	; (adr r3, 8001660 <main+0x2f0>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800160e:	f7fe fff3 	bl	80005f8 <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	1d38      	adds	r0, r7, #4
 8001618:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800161c:	e9cd 4500 	strd	r4, r5, [sp]
 8001620:	4a14      	ldr	r2, [pc, #80]	; (8001674 <main+0x304>)
 8001622:	2120      	movs	r1, #32
 8001624:	f009 ffe0 	bl	800b5e8 <sniprintf>
 8001628:	4603      	mov	r3, r0
 800162a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	//bufLen = snprintf(logBuf, 32, "%.3f,%.3f,%.3f\r\n", p, q, r);

	CDC_Transmit_FS((uint8_t *) logBuf, bufLen);
 800162e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001632:	b29a      	uxth	r2, r3
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f008 fedd 	bl	800a3f8 <CDC_Transmit_FS>

	HAL_Delay(20);
 800163e:	2014      	movs	r0, #20
 8001640:	f000 fefe 	bl	8002440 <HAL_Delay>
	MPU6050_ReadAccel(&imu);
 8001644:	e6d7      	b.n	80013f6 <main+0x86>
 8001646:	bf00      	nop
 8001648:	a0000000 	.word	0xa0000000
 800164c:	3f999999 	.word	0x3f999999
 8001650:	40000000 	.word	0x40000000
 8001654:	3f947ae1 	.word	0x3f947ae1
 8001658:	40000000 	.word	0x40000000
 800165c:	3fef3333 	.word	0x3fef3333
 8001660:	20000000 	.word	0x20000000
 8001664:	404ca5dc 	.word	0x404ca5dc
 8001668:	200002f0 	.word	0x200002f0
 800166c:	20000508 	.word	0x20000508
 8001670:	411cf5c3 	.word	0x411cf5c3
 8001674:	0800ec50 	.word	0x0800ec50

08001678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b094      	sub	sp, #80	; 0x50
 800167c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167e:	f107 0320 	add.w	r3, r7, #32
 8001682:	2230      	movs	r2, #48	; 0x30
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f009 fb3c 	bl	800ad04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	4b28      	ldr	r3, [pc, #160]	; (8001744 <SystemClock_Config+0xcc>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	4a27      	ldr	r2, [pc, #156]	; (8001744 <SystemClock_Config+0xcc>)
 80016a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016aa:	6413      	str	r3, [r2, #64]	; 0x40
 80016ac:	4b25      	ldr	r3, [pc, #148]	; (8001744 <SystemClock_Config+0xcc>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b8:	2300      	movs	r3, #0
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	4b22      	ldr	r3, [pc, #136]	; (8001748 <SystemClock_Config+0xd0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a21      	ldr	r2, [pc, #132]	; (8001748 <SystemClock_Config+0xd0>)
 80016c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <SystemClock_Config+0xd0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d4:	2301      	movs	r3, #1
 80016d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016de:	2302      	movs	r3, #2
 80016e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016e8:	2308      	movs	r3, #8
 80016ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80016ec:	2360      	movs	r3, #96	; 0x60
 80016ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f0:	2302      	movs	r3, #2
 80016f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016f4:	2304      	movs	r3, #4
 80016f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f8:	f107 0320 	add.w	r3, r7, #32
 80016fc:	4618      	mov	r0, r3
 80016fe:	f003 fbc7 	bl	8004e90 <HAL_RCC_OscConfig>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001708:	f000 faaa 	bl	8001c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800170c:	230f      	movs	r3, #15
 800170e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001710:	2302      	movs	r3, #2
 8001712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001718:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800171c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800171e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001722:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	2103      	movs	r1, #3
 800172a:	4618      	mov	r0, r3
 800172c:	f003 fe28 	bl	8005380 <HAL_RCC_ClockConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001736:	f000 fa93 	bl	8001c60 <Error_Handler>
  }
}
 800173a:	bf00      	nop
 800173c:	3750      	adds	r7, #80	; 0x50
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800
 8001748:	40007000 	.word	0x40007000

0800174c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <MX_I2C1_Init+0x50>)
 8001752:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <MX_I2C1_Init+0x54>)
 8001754:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_I2C1_Init+0x50>)
 8001758:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <MX_I2C1_Init+0x58>)
 800175a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_I2C1_Init+0x50>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_I2C1_Init+0x50>)
 8001764:	2200      	movs	r2, #0
 8001766:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_I2C1_Init+0x50>)
 800176a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800176e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <MX_I2C1_Init+0x50>)
 8001772:	2200      	movs	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_I2C1_Init+0x50>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <MX_I2C1_Init+0x50>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <MX_I2C1_Init+0x50>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001788:	4804      	ldr	r0, [pc, #16]	; (800179c <MX_I2C1_Init+0x50>)
 800178a:	f001 f945 	bl	8002a18 <HAL_I2C_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001794:	f000 fa64 	bl	8001c60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200002f0 	.word	0x200002f0
 80017a0:	40005400 	.word	0x40005400
 80017a4:	00061a80 	.word	0x00061a80

080017a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <MX_I2C2_Init+0x50>)
 80017ae:	4a13      	ldr	r2, [pc, #76]	; (80017fc <MX_I2C2_Init+0x54>)
 80017b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_I2C2_Init+0x50>)
 80017b4:	4a12      	ldr	r2, [pc, #72]	; (8001800 <MX_I2C2_Init+0x58>)
 80017b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_I2C2_Init+0x50>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_I2C2_Init+0x50>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_I2C2_Init+0x50>)
 80017c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <MX_I2C2_Init+0x50>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_I2C2_Init+0x50>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <MX_I2C2_Init+0x50>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_I2C2_Init+0x50>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017e4:	4804      	ldr	r0, [pc, #16]	; (80017f8 <MX_I2C2_Init+0x50>)
 80017e6:	f001 f917 	bl	8002a18 <HAL_I2C_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017f0:	f000 fa36 	bl	8001c60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000344 	.word	0x20000344
 80017fc:	40005800 	.word	0x40005800
 8001800:	000186a0 	.word	0x000186a0

08001804 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001808:	4b17      	ldr	r3, [pc, #92]	; (8001868 <MX_SPI1_Init+0x64>)
 800180a:	4a18      	ldr	r2, [pc, #96]	; (800186c <MX_SPI1_Init+0x68>)
 800180c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800180e:	4b16      	ldr	r3, [pc, #88]	; (8001868 <MX_SPI1_Init+0x64>)
 8001810:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001814:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001816:	4b14      	ldr	r3, [pc, #80]	; (8001868 <MX_SPI1_Init+0x64>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <MX_SPI1_Init+0x64>)
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <MX_SPI1_Init+0x64>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <MX_SPI1_Init+0x64>)
 800182a:	2200      	movs	r2, #0
 800182c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <MX_SPI1_Init+0x64>)
 8001830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001834:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <MX_SPI1_Init+0x64>)
 8001838:	2200      	movs	r2, #0
 800183a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800183c:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <MX_SPI1_Init+0x64>)
 800183e:	2200      	movs	r2, #0
 8001840:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_SPI1_Init+0x64>)
 8001844:	2200      	movs	r2, #0
 8001846:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001848:	4b07      	ldr	r3, [pc, #28]	; (8001868 <MX_SPI1_Init+0x64>)
 800184a:	2200      	movs	r2, #0
 800184c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <MX_SPI1_Init+0x64>)
 8001850:	220a      	movs	r2, #10
 8001852:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001854:	4804      	ldr	r0, [pc, #16]	; (8001868 <MX_SPI1_Init+0x64>)
 8001856:	f003 ffb1 	bl	80057bc <HAL_SPI_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001860:	f000 f9fe 	bl	8001c60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000398 	.word	0x20000398
 800186c:	40013000 	.word	0x40013000

08001870 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08e      	sub	sp, #56	; 0x38
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001876:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001884:	f107 0320 	add.w	r3, r7, #32
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
 800189c:	615a      	str	r2, [r3, #20]
 800189e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018a0:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <MX_TIM3_Init+0x128>)
 80018a2:	4a3e      	ldr	r2, [pc, #248]	; (800199c <MX_TIM3_Init+0x12c>)
 80018a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018a6:	4b3c      	ldr	r3, [pc, #240]	; (8001998 <MX_TIM3_Init+0x128>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ac:	4b3a      	ldr	r3, [pc, #232]	; (8001998 <MX_TIM3_Init+0x128>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018b2:	4b39      	ldr	r3, [pc, #228]	; (8001998 <MX_TIM3_Init+0x128>)
 80018b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ba:	4b37      	ldr	r3, [pc, #220]	; (8001998 <MX_TIM3_Init+0x128>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c0:	4b35      	ldr	r3, [pc, #212]	; (8001998 <MX_TIM3_Init+0x128>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018c6:	4834      	ldr	r0, [pc, #208]	; (8001998 <MX_TIM3_Init+0x128>)
 80018c8:	f004 f801 	bl	80058ce <HAL_TIM_Base_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80018d2:	f000 f9c5 	bl	8001c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018e0:	4619      	mov	r1, r3
 80018e2:	482d      	ldr	r0, [pc, #180]	; (8001998 <MX_TIM3_Init+0x128>)
 80018e4:	f004 f95e 	bl	8005ba4 <HAL_TIM_ConfigClockSource>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80018ee:	f000 f9b7 	bl	8001c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018f2:	4829      	ldr	r0, [pc, #164]	; (8001998 <MX_TIM3_Init+0x128>)
 80018f4:	f004 f83a 	bl	800596c <HAL_TIM_PWM_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80018fe:	f000 f9af 	bl	8001c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800190a:	f107 0320 	add.w	r3, r7, #32
 800190e:	4619      	mov	r1, r3
 8001910:	4821      	ldr	r0, [pc, #132]	; (8001998 <MX_TIM3_Init+0x128>)
 8001912:	f004 fcf9 	bl	8006308 <HAL_TIMEx_MasterConfigSynchronization>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800191c:	f000 f9a0 	bl	8001c60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001920:	2360      	movs	r3, #96	; 0x60
 8001922:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	2200      	movs	r2, #0
 8001934:	4619      	mov	r1, r3
 8001936:	4818      	ldr	r0, [pc, #96]	; (8001998 <MX_TIM3_Init+0x128>)
 8001938:	f004 f872 	bl	8005a20 <HAL_TIM_PWM_ConfigChannel>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001942:	f000 f98d 	bl	8001c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2204      	movs	r2, #4
 800194a:	4619      	mov	r1, r3
 800194c:	4812      	ldr	r0, [pc, #72]	; (8001998 <MX_TIM3_Init+0x128>)
 800194e:	f004 f867 	bl	8005a20 <HAL_TIM_PWM_ConfigChannel>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001958:	f000 f982 	bl	8001c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	2208      	movs	r2, #8
 8001960:	4619      	mov	r1, r3
 8001962:	480d      	ldr	r0, [pc, #52]	; (8001998 <MX_TIM3_Init+0x128>)
 8001964:	f004 f85c 	bl	8005a20 <HAL_TIM_PWM_ConfigChannel>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800196e:	f000 f977 	bl	8001c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	220c      	movs	r2, #12
 8001976:	4619      	mov	r1, r3
 8001978:	4807      	ldr	r0, [pc, #28]	; (8001998 <MX_TIM3_Init+0x128>)
 800197a:	f004 f851 	bl	8005a20 <HAL_TIM_PWM_ConfigChannel>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001984:	f000 f96c 	bl	8001c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001988:	4803      	ldr	r0, [pc, #12]	; (8001998 <MX_TIM3_Init+0x128>)
 800198a:	f000 fab3 	bl	8001ef4 <HAL_TIM_MspPostInit>

}
 800198e:	bf00      	nop
 8001990:	3738      	adds	r7, #56	; 0x38
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200003f0 	.word	0x200003f0
 800199c:	40000400 	.word	0x40000400

080019a0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b096      	sub	sp, #88	; 0x58
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	611a      	str	r2, [r3, #16]
 80019ce:	615a      	str	r2, [r3, #20]
 80019d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	2220      	movs	r2, #32
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f009 f993 	bl	800ad04 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019de:	4b44      	ldr	r3, [pc, #272]	; (8001af0 <MX_TIM8_Init+0x150>)
 80019e0:	4a44      	ldr	r2, [pc, #272]	; (8001af4 <MX_TIM8_Init+0x154>)
 80019e2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80019e4:	4b42      	ldr	r3, [pc, #264]	; (8001af0 <MX_TIM8_Init+0x150>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ea:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <MX_TIM8_Init+0x150>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80019f0:	4b3f      	ldr	r3, [pc, #252]	; (8001af0 <MX_TIM8_Init+0x150>)
 80019f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019f6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <MX_TIM8_Init+0x150>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019fe:	4b3c      	ldr	r3, [pc, #240]	; (8001af0 <MX_TIM8_Init+0x150>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a04:	4b3a      	ldr	r3, [pc, #232]	; (8001af0 <MX_TIM8_Init+0x150>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a0a:	4839      	ldr	r0, [pc, #228]	; (8001af0 <MX_TIM8_Init+0x150>)
 8001a0c:	f003 ff5f 	bl	80058ce <HAL_TIM_Base_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001a16:	f000 f923 	bl	8001c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a24:	4619      	mov	r1, r3
 8001a26:	4832      	ldr	r0, [pc, #200]	; (8001af0 <MX_TIM8_Init+0x150>)
 8001a28:	f004 f8bc 	bl	8005ba4 <HAL_TIM_ConfigClockSource>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001a32:	f000 f915 	bl	8001c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a36:	482e      	ldr	r0, [pc, #184]	; (8001af0 <MX_TIM8_Init+0x150>)
 8001a38:	f003 ff98 	bl	800596c <HAL_TIM_PWM_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001a42:	f000 f90d 	bl	8001c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a52:	4619      	mov	r1, r3
 8001a54:	4826      	ldr	r0, [pc, #152]	; (8001af0 <MX_TIM8_Init+0x150>)
 8001a56:	f004 fc57 	bl	8006308 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001a60:	f000 f8fe 	bl	8001c60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a64:	2360      	movs	r3, #96	; 0x60
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a70:	2300      	movs	r3, #0
 8001a72:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a84:	2200      	movs	r2, #0
 8001a86:	4619      	mov	r1, r3
 8001a88:	4819      	ldr	r0, [pc, #100]	; (8001af0 <MX_TIM8_Init+0x150>)
 8001a8a:	f003 ffc9 	bl	8005a20 <HAL_TIM_PWM_ConfigChannel>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001a94:	f000 f8e4 	bl	8001c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9c:	2204      	movs	r2, #4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4813      	ldr	r0, [pc, #76]	; (8001af0 <MX_TIM8_Init+0x150>)
 8001aa2:	f003 ffbd 	bl	8005a20 <HAL_TIM_PWM_ConfigChannel>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001aac:	f000 f8d8 	bl	8001c60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4807      	ldr	r0, [pc, #28]	; (8001af0 <MX_TIM8_Init+0x150>)
 8001ad4:	f004 fc94 	bl	8006400 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001ade:	f000 f8bf 	bl	8001c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001ae2:	4803      	ldr	r0, [pc, #12]	; (8001af0 <MX_TIM8_Init+0x150>)
 8001ae4:	f000 fa06 	bl	8001ef4 <HAL_TIM_MspPostInit>

}
 8001ae8:	bf00      	nop
 8001aea:	3758      	adds	r7, #88	; 0x58
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000438 	.word	0x20000438
 8001af4:	40010400 	.word	0x40010400

08001af8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_USART1_UART_Init+0x4c>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <MX_USART1_UART_Init+0x50>)
 8001b00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <MX_USART1_UART_Init+0x4c>)
 8001b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <MX_USART1_UART_Init+0x4c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <MX_USART1_UART_Init+0x4c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <MX_USART1_UART_Init+0x4c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_USART1_UART_Init+0x4c>)
 8001b1e:	220c      	movs	r2, #12
 8001b20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <MX_USART1_UART_Init+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <MX_USART1_UART_Init+0x4c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <MX_USART1_UART_Init+0x4c>)
 8001b30:	f004 fcb8 	bl	80064a4 <HAL_UART_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b3a:	f000 f891 	bl	8001c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000480 	.word	0x20000480
 8001b48:	40011000 	.word	0x40011000

08001b4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <MX_USART2_UART_Init+0x50>)
 8001b54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b72:	220c      	movs	r2, #12
 8001b74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b84:	f004 fc8e 	bl	80064a4 <HAL_UART_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b8e:	f000 f867 	bl	8001c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200004c4 	.word	0x200004c4
 8001b9c:	40004400 	.word	0x40004400

08001ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <MX_GPIO_Init+0xb8>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a26      	ldr	r2, [pc, #152]	; (8001c58 <MX_GPIO_Init+0xb8>)
 8001bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <MX_GPIO_Init+0xb8>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <MX_GPIO_Init+0xb8>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a1f      	ldr	r2, [pc, #124]	; (8001c58 <MX_GPIO_Init+0xb8>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <MX_GPIO_Init+0xb8>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <MX_GPIO_Init+0xb8>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a18      	ldr	r2, [pc, #96]	; (8001c58 <MX_GPIO_Init+0xb8>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <MX_GPIO_Init+0xb8>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <MX_GPIO_Init+0xb8>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a11      	ldr	r2, [pc, #68]	; (8001c58 <MX_GPIO_Init+0xb8>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <MX_GPIO_Init+0xb8>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, GPIO_PIN_RESET);
 8001c26:	2200      	movs	r2, #0
 8001c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c2c:	480b      	ldr	r0, [pc, #44]	; (8001c5c <MX_GPIO_Init+0xbc>)
 8001c2e:	f000 fed9 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EEPROM_CS_Pin */
  GPIO_InitStruct.Pin = EEPROM_CS_Pin;
 8001c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EEPROM_CS_GPIO_Port, &GPIO_InitStruct);
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4804      	ldr	r0, [pc, #16]	; (8001c5c <MX_GPIO_Init+0xbc>)
 8001c4c:	f000 fd2e 	bl	80026ac <HAL_GPIO_Init>

}
 8001c50:	bf00      	nop
 8001c52:	3728      	adds	r7, #40	; 0x28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020400 	.word	0x40020400

08001c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c64:	b672      	cpsid	i
}
 8001c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <Error_Handler+0x8>
	...

08001c6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <HAL_MspInit+0x4c>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <HAL_MspInit+0x4c>)
 8001c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c80:	6453      	str	r3, [r2, #68]	; 0x44
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <HAL_MspInit+0x4c>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	603b      	str	r3, [r7, #0]
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_MspInit+0x4c>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	4a08      	ldr	r2, [pc, #32]	; (8001cb8 <HAL_MspInit+0x4c>)
 8001c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_MspInit+0x4c>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800

08001cbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08c      	sub	sp, #48	; 0x30
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a32      	ldr	r2, [pc, #200]	; (8001da4 <HAL_I2C_MspInit+0xe8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d12c      	bne.n	8001d38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
 8001ce2:	4b31      	ldr	r3, [pc, #196]	; (8001da8 <HAL_I2C_MspInit+0xec>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a30      	ldr	r2, [pc, #192]	; (8001da8 <HAL_I2C_MspInit+0xec>)
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b2e      	ldr	r3, [pc, #184]	; (8001da8 <HAL_I2C_MspInit+0xec>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cfa:	23c0      	movs	r3, #192	; 0xc0
 8001cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cfe:	2312      	movs	r3, #18
 8001d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	4619      	mov	r1, r3
 8001d14:	4825      	ldr	r0, [pc, #148]	; (8001dac <HAL_I2C_MspInit+0xf0>)
 8001d16:	f000 fcc9 	bl	80026ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <HAL_I2C_MspInit+0xec>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	4a21      	ldr	r2, [pc, #132]	; (8001da8 <HAL_I2C_MspInit+0xec>)
 8001d24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d28:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2a:	4b1f      	ldr	r3, [pc, #124]	; (8001da8 <HAL_I2C_MspInit+0xec>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d36:	e031      	b.n	8001d9c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a1c      	ldr	r2, [pc, #112]	; (8001db0 <HAL_I2C_MspInit+0xf4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d12c      	bne.n	8001d9c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <HAL_I2C_MspInit+0xec>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a17      	ldr	r2, [pc, #92]	; (8001da8 <HAL_I2C_MspInit+0xec>)
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <HAL_I2C_MspInit+0xec>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d64:	2312      	movs	r3, #18
 8001d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d70:	2304      	movs	r3, #4
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d74:	f107 031c 	add.w	r3, r7, #28
 8001d78:	4619      	mov	r1, r3
 8001d7a:	480c      	ldr	r0, [pc, #48]	; (8001dac <HAL_I2C_MspInit+0xf0>)
 8001d7c:	f000 fc96 	bl	80026ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <HAL_I2C_MspInit+0xec>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <HAL_I2C_MspInit+0xec>)
 8001d8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_I2C_MspInit+0xec>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	3730      	adds	r7, #48	; 0x30
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40005400 	.word	0x40005400
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40020400 	.word	0x40020400
 8001db0:	40005800 	.word	0x40005800

08001db4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	; 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a28      	ldr	r2, [pc, #160]	; (8001e74 <HAL_SPI_MspInit+0xc0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d149      	bne.n	8001e6a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <HAL_SPI_MspInit+0xc4>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	4a26      	ldr	r2, [pc, #152]	; (8001e78 <HAL_SPI_MspInit+0xc4>)
 8001de0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001de4:	6453      	str	r3, [r2, #68]	; 0x44
 8001de6:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_SPI_MspInit+0xc4>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <HAL_SPI_MspInit+0xc4>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <HAL_SPI_MspInit+0xc4>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <HAL_SPI_MspInit+0xc4>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <HAL_SPI_MspInit+0xc4>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a18      	ldr	r2, [pc, #96]	; (8001e78 <HAL_SPI_MspInit+0xc4>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <HAL_SPI_MspInit+0xc4>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e2a:	2320      	movs	r3, #32
 8001e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e36:	2303      	movs	r3, #3
 8001e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e3a:	2305      	movs	r3, #5
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4619      	mov	r1, r3
 8001e44:	480d      	ldr	r0, [pc, #52]	; (8001e7c <HAL_SPI_MspInit+0xc8>)
 8001e46:	f000 fc31 	bl	80026ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e4a:	2330      	movs	r3, #48	; 0x30
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e56:	2303      	movs	r3, #3
 8001e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e5a:	2305      	movs	r3, #5
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	4806      	ldr	r0, [pc, #24]	; (8001e80 <HAL_SPI_MspInit+0xcc>)
 8001e66:	f000 fc21 	bl	80026ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e6a:	bf00      	nop
 8001e6c:	3728      	adds	r7, #40	; 0x28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40013000 	.word	0x40013000
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020000 	.word	0x40020000
 8001e80:	40020400 	.word	0x40020400

08001e84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a15      	ldr	r2, [pc, #84]	; (8001ee8 <HAL_TIM_Base_MspInit+0x64>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d10e      	bne.n	8001eb4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b14      	ldr	r3, [pc, #80]	; (8001eec <HAL_TIM_Base_MspInit+0x68>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	4a13      	ldr	r2, [pc, #76]	; (8001eec <HAL_TIM_Base_MspInit+0x68>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <HAL_TIM_Base_MspInit+0x68>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001eb2:	e012      	b.n	8001eda <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0d      	ldr	r2, [pc, #52]	; (8001ef0 <HAL_TIM_Base_MspInit+0x6c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d10d      	bne.n	8001eda <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_TIM_Base_MspInit+0x68>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <HAL_TIM_Base_MspInit+0x68>)
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <HAL_TIM_Base_MspInit+0x68>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
}
 8001eda:	bf00      	nop
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40010400 	.word	0x40010400

08001ef4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a33      	ldr	r2, [pc, #204]	; (8001fe0 <HAL_TIM_MspPostInit+0xec>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d13c      	bne.n	8001f90 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	4b32      	ldr	r3, [pc, #200]	; (8001fe4 <HAL_TIM_MspPostInit+0xf0>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a31      	ldr	r2, [pc, #196]	; (8001fe4 <HAL_TIM_MspPostInit+0xf0>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b2f      	ldr	r3, [pc, #188]	; (8001fe4 <HAL_TIM_MspPostInit+0xf0>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <HAL_TIM_MspPostInit+0xf0>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a2a      	ldr	r2, [pc, #168]	; (8001fe4 <HAL_TIM_MspPostInit+0xf0>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <HAL_TIM_MspPostInit+0xf0>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f4e:	23c0      	movs	r3, #192	; 0xc0
 8001f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4619      	mov	r1, r3
 8001f68:	481f      	ldr	r0, [pc, #124]	; (8001fe8 <HAL_TIM_MspPostInit+0xf4>)
 8001f6a:	f000 fb9f 	bl	80026ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	4818      	ldr	r0, [pc, #96]	; (8001fec <HAL_TIM_MspPostInit+0xf8>)
 8001f8a:	f000 fb8f 	bl	80026ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001f8e:	e022      	b.n	8001fd6 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM8)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a16      	ldr	r2, [pc, #88]	; (8001ff0 <HAL_TIM_MspPostInit+0xfc>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d11d      	bne.n	8001fd6 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <HAL_TIM_MspPostInit+0xf0>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <HAL_TIM_MspPostInit+0xf0>)
 8001fa4:	f043 0304 	orr.w	r3, r3, #4
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <HAL_TIM_MspPostInit+0xf0>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fb6:	23c0      	movs	r3, #192	; 0xc0
 8001fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4808      	ldr	r0, [pc, #32]	; (8001ff4 <HAL_TIM_MspPostInit+0x100>)
 8001fd2:	f000 fb6b 	bl	80026ac <HAL_GPIO_Init>
}
 8001fd6:	bf00      	nop
 8001fd8:	3728      	adds	r7, #40	; 0x28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40000400 	.word	0x40000400
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40020000 	.word	0x40020000
 8001fec:	40020400 	.word	0x40020400
 8001ff0:	40010400 	.word	0x40010400
 8001ff4:	40020800 	.word	0x40020800

08001ff8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08c      	sub	sp, #48	; 0x30
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 031c 	add.w	r3, r7, #28
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a32      	ldr	r2, [pc, #200]	; (80020e0 <HAL_UART_MspInit+0xe8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d12d      	bne.n	8002076 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <HAL_UART_MspInit+0xec>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	4a30      	ldr	r2, [pc, #192]	; (80020e4 <HAL_UART_MspInit+0xec>)
 8002024:	f043 0310 	orr.w	r3, r3, #16
 8002028:	6453      	str	r3, [r2, #68]	; 0x44
 800202a:	4b2e      	ldr	r3, [pc, #184]	; (80020e4 <HAL_UART_MspInit+0xec>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	61bb      	str	r3, [r7, #24]
 8002034:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <HAL_UART_MspInit+0xec>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	4a29      	ldr	r2, [pc, #164]	; (80020e4 <HAL_UART_MspInit+0xec>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6313      	str	r3, [r2, #48]	; 0x30
 8002046:	4b27      	ldr	r3, [pc, #156]	; (80020e4 <HAL_UART_MspInit+0xec>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002052:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002060:	2303      	movs	r3, #3
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002064:	2307      	movs	r3, #7
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002068:	f107 031c 	add.w	r3, r7, #28
 800206c:	4619      	mov	r1, r3
 800206e:	481e      	ldr	r0, [pc, #120]	; (80020e8 <HAL_UART_MspInit+0xf0>)
 8002070:	f000 fb1c 	bl	80026ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002074:	e030      	b.n	80020d8 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a1c      	ldr	r2, [pc, #112]	; (80020ec <HAL_UART_MspInit+0xf4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d12b      	bne.n	80020d8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002080:	2300      	movs	r3, #0
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <HAL_UART_MspInit+0xec>)
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	4a16      	ldr	r2, [pc, #88]	; (80020e4 <HAL_UART_MspInit+0xec>)
 800208a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800208e:	6413      	str	r3, [r2, #64]	; 0x40
 8002090:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_UART_MspInit+0xec>)
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <HAL_UART_MspInit+0xec>)
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	4a0f      	ldr	r2, [pc, #60]	; (80020e4 <HAL_UART_MspInit+0xec>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6313      	str	r3, [r2, #48]	; 0x30
 80020ac:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <HAL_UART_MspInit+0xec>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020b8:	230c      	movs	r3, #12
 80020ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020c8:	2307      	movs	r3, #7
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020cc:	f107 031c 	add.w	r3, r7, #28
 80020d0:	4619      	mov	r1, r3
 80020d2:	4805      	ldr	r0, [pc, #20]	; (80020e8 <HAL_UART_MspInit+0xf0>)
 80020d4:	f000 faea 	bl	80026ac <HAL_GPIO_Init>
}
 80020d8:	bf00      	nop
 80020da:	3730      	adds	r7, #48	; 0x30
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40011000 	.word	0x40011000
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40020000 	.word	0x40020000
 80020ec:	40004400 	.word	0x40004400

080020f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <NMI_Handler+0x4>

080020f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <HardFault_Handler+0x4>

080020fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <MemManage_Handler+0x4>

08002102 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002106:	e7fe      	b.n	8002106 <BusFault_Handler+0x4>

08002108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800210c:	e7fe      	b.n	800210c <UsageFault_Handler+0x4>

0800210e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800213c:	f000 f960 	bl	8002400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}

08002144 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <OTG_FS_IRQHandler+0x10>)
 800214a:	f001 fd74 	bl	8003c36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20001a0c 	.word	0x20001a0c

08002158 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
	return 1;
 800215c:	2301      	movs	r3, #1
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <_kill>:

int _kill(int pid, int sig)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002172:	f008 fd9d 	bl	800acb0 <__errno>
 8002176:	4603      	mov	r3, r0
 8002178:	2216      	movs	r2, #22
 800217a:	601a      	str	r2, [r3, #0]
	return -1;
 800217c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <_exit>:

void _exit (int status)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002190:	f04f 31ff 	mov.w	r1, #4294967295
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ffe7 	bl	8002168 <_kill>
	while (1) {}		/* Make sure we hang here */
 800219a:	e7fe      	b.n	800219a <_exit+0x12>

0800219c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	e00a      	b.n	80021c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021ae:	f3af 8000 	nop.w
 80021b2:	4601      	mov	r1, r0
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	60ba      	str	r2, [r7, #8]
 80021ba:	b2ca      	uxtb	r2, r1
 80021bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	3301      	adds	r3, #1
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	dbf0      	blt.n	80021ae <_read+0x12>
	}

return len;
 80021cc:	687b      	ldr	r3, [r7, #4]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b086      	sub	sp, #24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	e009      	b.n	80021fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	60ba      	str	r2, [r7, #8]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	3301      	adds	r3, #1
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	429a      	cmp	r2, r3
 8002202:	dbf1      	blt.n	80021e8 <_write+0x12>
	}
	return len;
 8002204:	687b      	ldr	r3, [r7, #4]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <_close>:

int _close(int file)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
	return -1;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002236:	605a      	str	r2, [r3, #4]
	return 0;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <_isatty>:

int _isatty(int file)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
	return 1;
 800224e:	2301      	movs	r3, #1
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
	return 0;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002280:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <_sbrk+0x5c>)
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <_sbrk+0x60>)
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800228c:	4b13      	ldr	r3, [pc, #76]	; (80022dc <_sbrk+0x64>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d102      	bne.n	800229a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <_sbrk+0x64>)
 8002296:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <_sbrk+0x68>)
 8002298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <_sbrk+0x64>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d207      	bcs.n	80022b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022a8:	f008 fd02 	bl	800acb0 <__errno>
 80022ac:	4603      	mov	r3, r0
 80022ae:	220c      	movs	r2, #12
 80022b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
 80022b6:	e009      	b.n	80022cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <_sbrk+0x64>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022be:	4b07      	ldr	r3, [pc, #28]	; (80022dc <_sbrk+0x64>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	4a05      	ldr	r2, [pc, #20]	; (80022dc <_sbrk+0x64>)
 80022c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ca:	68fb      	ldr	r3, [r7, #12]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20020000 	.word	0x20020000
 80022d8:	00000400 	.word	0x00000400
 80022dc:	20000524 	.word	0x20000524
 80022e0:	20002148 	.word	0x20002148

080022e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <SystemInit+0x20>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ee:	4a05      	ldr	r2, [pc, #20]	; (8002304 <SystemInit+0x20>)
 80022f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002340 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800230c:	480d      	ldr	r0, [pc, #52]	; (8002344 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800230e:	490e      	ldr	r1, [pc, #56]	; (8002348 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002310:	4a0e      	ldr	r2, [pc, #56]	; (800234c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002314:	e002      	b.n	800231c <LoopCopyDataInit>

08002316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231a:	3304      	adds	r3, #4

0800231c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800231c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002320:	d3f9      	bcc.n	8002316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002322:	4a0b      	ldr	r2, [pc, #44]	; (8002350 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002324:	4c0b      	ldr	r4, [pc, #44]	; (8002354 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002328:	e001      	b.n	800232e <LoopFillZerobss>

0800232a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800232c:	3204      	adds	r2, #4

0800232e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002330:	d3fb      	bcc.n	800232a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002332:	f7ff ffd7 	bl	80022e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002336:	f008 fcc1 	bl	800acbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800233a:	f7ff f819 	bl	8001370 <main>
  bx  lr    
 800233e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002340:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002348:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 800234c:	0800f494 	.word	0x0800f494
  ldr r2, =_sbss
 8002350:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8002354:	20002148 	.word	0x20002148

08002358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002358:	e7fe      	b.n	8002358 <ADC_IRQHandler>
	...

0800235c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002360:	4b0e      	ldr	r3, [pc, #56]	; (800239c <HAL_Init+0x40>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0d      	ldr	r2, [pc, #52]	; (800239c <HAL_Init+0x40>)
 8002366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800236a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_Init+0x40>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0a      	ldr	r2, [pc, #40]	; (800239c <HAL_Init+0x40>)
 8002372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002376:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <HAL_Init+0x40>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a07      	ldr	r2, [pc, #28]	; (800239c <HAL_Init+0x40>)
 800237e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002384:	2003      	movs	r0, #3
 8002386:	f000 f94f 	bl	8002628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800238a:	200f      	movs	r0, #15
 800238c:	f000 f808 	bl	80023a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002390:	f7ff fc6c 	bl	8001c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40023c00 	.word	0x40023c00

080023a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_InitTick+0x54>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_InitTick+0x58>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f967 	bl	8002692 <HAL_SYSTICK_Config>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e00e      	b.n	80023ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b0f      	cmp	r3, #15
 80023d2:	d80a      	bhi.n	80023ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d4:	2200      	movs	r2, #0
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295
 80023dc:	f000 f92f 	bl	800263e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023e0:	4a06      	ldr	r2, [pc, #24]	; (80023fc <HAL_InitTick+0x5c>)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e000      	b.n	80023ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000000 	.word	0x20000000
 80023f8:	20000008 	.word	0x20000008
 80023fc:	20000004 	.word	0x20000004

08002400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_IncTick+0x20>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_IncTick+0x24>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4413      	add	r3, r2
 8002410:	4a04      	ldr	r2, [pc, #16]	; (8002424 <HAL_IncTick+0x24>)
 8002412:	6013      	str	r3, [r2, #0]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000008 	.word	0x20000008
 8002424:	20000528 	.word	0x20000528

08002428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return uwTick;
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_GetTick+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20000528 	.word	0x20000528

08002440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002448:	f7ff ffee 	bl	8002428 <HAL_GetTick>
 800244c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002458:	d005      	beq.n	8002466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <HAL_Delay+0x44>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4413      	add	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002466:	bf00      	nop
 8002468:	f7ff ffde 	bl	8002428 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	429a      	cmp	r2, r3
 8002476:	d8f7      	bhi.n	8002468 <HAL_Delay+0x28>
  {
  }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000008 	.word	0x20000008

08002488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a4:	4013      	ands	r3, r2
 80024a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ba:	4a04      	ldr	r2, [pc, #16]	; (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	60d3      	str	r3, [r2, #12]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d4:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <__NVIC_GetPriorityGrouping+0x18>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	0a1b      	lsrs	r3, r3, #8
 80024da:	f003 0307 	and.w	r3, r3, #7
}
 80024de:	4618      	mov	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	db0b      	blt.n	8002516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	f003 021f 	and.w	r2, r3, #31
 8002504:	4907      	ldr	r1, [pc, #28]	; (8002524 <__NVIC_EnableIRQ+0x38>)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	2001      	movs	r0, #1
 800250e:	fa00 f202 	lsl.w	r2, r0, r2
 8002512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000e100 	.word	0xe000e100

08002528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	6039      	str	r1, [r7, #0]
 8002532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002538:	2b00      	cmp	r3, #0
 800253a:	db0a      	blt.n	8002552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	b2da      	uxtb	r2, r3
 8002540:	490c      	ldr	r1, [pc, #48]	; (8002574 <__NVIC_SetPriority+0x4c>)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	0112      	lsls	r2, r2, #4
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	440b      	add	r3, r1
 800254c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002550:	e00a      	b.n	8002568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4908      	ldr	r1, [pc, #32]	; (8002578 <__NVIC_SetPriority+0x50>)
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	3b04      	subs	r3, #4
 8002560:	0112      	lsls	r2, r2, #4
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	440b      	add	r3, r1
 8002566:	761a      	strb	r2, [r3, #24]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000e100 	.word	0xe000e100
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	; 0x24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f1c3 0307 	rsb	r3, r3, #7
 8002596:	2b04      	cmp	r3, #4
 8002598:	bf28      	it	cs
 800259a:	2304      	movcs	r3, #4
 800259c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3304      	adds	r3, #4
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d902      	bls.n	80025ac <NVIC_EncodePriority+0x30>
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3b03      	subs	r3, #3
 80025aa:	e000      	b.n	80025ae <NVIC_EncodePriority+0x32>
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b0:	f04f 32ff 	mov.w	r2, #4294967295
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43da      	mvns	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	401a      	ands	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c4:	f04f 31ff 	mov.w	r1, #4294967295
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	43d9      	mvns	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	4313      	orrs	r3, r2
         );
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3724      	adds	r7, #36	; 0x24
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f4:	d301      	bcc.n	80025fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f6:	2301      	movs	r3, #1
 80025f8:	e00f      	b.n	800261a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fa:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <SysTick_Config+0x40>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002602:	210f      	movs	r1, #15
 8002604:	f04f 30ff 	mov.w	r0, #4294967295
 8002608:	f7ff ff8e 	bl	8002528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <SysTick_Config+0x40>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002612:	4b04      	ldr	r3, [pc, #16]	; (8002624 <SysTick_Config+0x40>)
 8002614:	2207      	movs	r2, #7
 8002616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	e000e010 	.word	0xe000e010

08002628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ff29 	bl	8002488 <__NVIC_SetPriorityGrouping>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002650:	f7ff ff3e 	bl	80024d0 <__NVIC_GetPriorityGrouping>
 8002654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	6978      	ldr	r0, [r7, #20]
 800265c:	f7ff ff8e 	bl	800257c <NVIC_EncodePriority>
 8002660:	4602      	mov	r2, r0
 8002662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff5d 	bl	8002528 <__NVIC_SetPriority>
}
 800266e:	bf00      	nop
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff31 	bl	80024ec <__NVIC_EnableIRQ>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ffa2 	bl	80025e4 <SysTick_Config>
 80026a0:	4603      	mov	r3, r0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b089      	sub	sp, #36	; 0x24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	e16b      	b.n	80029a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026c8:	2201      	movs	r2, #1
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	f040 815a 	bne.w	800299a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d005      	beq.n	80026fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d130      	bne.n	8002760 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	2203      	movs	r2, #3
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002734:	2201      	movs	r2, #1
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 0201 	and.w	r2, r3, #1
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	2b03      	cmp	r3, #3
 800276a:	d017      	beq.n	800279c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	2203      	movs	r2, #3
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d123      	bne.n	80027f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	08da      	lsrs	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3208      	adds	r2, #8
 80027b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	220f      	movs	r2, #15
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	08da      	lsrs	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3208      	adds	r2, #8
 80027ea:	69b9      	ldr	r1, [r7, #24]
 80027ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0203 	and.w	r2, r3, #3
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80b4 	beq.w	800299a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b60      	ldr	r3, [pc, #384]	; (80029b8 <HAL_GPIO_Init+0x30c>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	4a5f      	ldr	r2, [pc, #380]	; (80029b8 <HAL_GPIO_Init+0x30c>)
 800283c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002840:	6453      	str	r3, [r2, #68]	; 0x44
 8002842:	4b5d      	ldr	r3, [pc, #372]	; (80029b8 <HAL_GPIO_Init+0x30c>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800284e:	4a5b      	ldr	r2, [pc, #364]	; (80029bc <HAL_GPIO_Init+0x310>)
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	089b      	lsrs	r3, r3, #2
 8002854:	3302      	adds	r3, #2
 8002856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	220f      	movs	r2, #15
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a52      	ldr	r2, [pc, #328]	; (80029c0 <HAL_GPIO_Init+0x314>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d02b      	beq.n	80028d2 <HAL_GPIO_Init+0x226>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a51      	ldr	r2, [pc, #324]	; (80029c4 <HAL_GPIO_Init+0x318>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d025      	beq.n	80028ce <HAL_GPIO_Init+0x222>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a50      	ldr	r2, [pc, #320]	; (80029c8 <HAL_GPIO_Init+0x31c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d01f      	beq.n	80028ca <HAL_GPIO_Init+0x21e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4f      	ldr	r2, [pc, #316]	; (80029cc <HAL_GPIO_Init+0x320>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d019      	beq.n	80028c6 <HAL_GPIO_Init+0x21a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4e      	ldr	r2, [pc, #312]	; (80029d0 <HAL_GPIO_Init+0x324>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_GPIO_Init+0x216>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4d      	ldr	r2, [pc, #308]	; (80029d4 <HAL_GPIO_Init+0x328>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00d      	beq.n	80028be <HAL_GPIO_Init+0x212>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a4c      	ldr	r2, [pc, #304]	; (80029d8 <HAL_GPIO_Init+0x32c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d007      	beq.n	80028ba <HAL_GPIO_Init+0x20e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a4b      	ldr	r2, [pc, #300]	; (80029dc <HAL_GPIO_Init+0x330>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d101      	bne.n	80028b6 <HAL_GPIO_Init+0x20a>
 80028b2:	2307      	movs	r3, #7
 80028b4:	e00e      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028b6:	2308      	movs	r3, #8
 80028b8:	e00c      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028ba:	2306      	movs	r3, #6
 80028bc:	e00a      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028be:	2305      	movs	r3, #5
 80028c0:	e008      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028c2:	2304      	movs	r3, #4
 80028c4:	e006      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028c6:	2303      	movs	r3, #3
 80028c8:	e004      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e002      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028d2:	2300      	movs	r3, #0
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	f002 0203 	and.w	r2, r2, #3
 80028da:	0092      	lsls	r2, r2, #2
 80028dc:	4093      	lsls	r3, r2
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e4:	4935      	ldr	r1, [pc, #212]	; (80029bc <HAL_GPIO_Init+0x310>)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	089b      	lsrs	r3, r3, #2
 80028ea:	3302      	adds	r3, #2
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028f2:	4b3b      	ldr	r3, [pc, #236]	; (80029e0 <HAL_GPIO_Init+0x334>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002916:	4a32      	ldr	r2, [pc, #200]	; (80029e0 <HAL_GPIO_Init+0x334>)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800291c:	4b30      	ldr	r3, [pc, #192]	; (80029e0 <HAL_GPIO_Init+0x334>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002940:	4a27      	ldr	r2, [pc, #156]	; (80029e0 <HAL_GPIO_Init+0x334>)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002946:	4b26      	ldr	r3, [pc, #152]	; (80029e0 <HAL_GPIO_Init+0x334>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800296a:	4a1d      	ldr	r2, [pc, #116]	; (80029e0 <HAL_GPIO_Init+0x334>)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002970:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <HAL_GPIO_Init+0x334>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002994:	4a12      	ldr	r2, [pc, #72]	; (80029e0 <HAL_GPIO_Init+0x334>)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	3301      	adds	r3, #1
 800299e:	61fb      	str	r3, [r7, #28]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	2b0f      	cmp	r3, #15
 80029a4:	f67f ae90 	bls.w	80026c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	3724      	adds	r7, #36	; 0x24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40013800 	.word	0x40013800
 80029c0:	40020000 	.word	0x40020000
 80029c4:	40020400 	.word	0x40020400
 80029c8:	40020800 	.word	0x40020800
 80029cc:	40020c00 	.word	0x40020c00
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40021400 	.word	0x40021400
 80029d8:	40021800 	.word	0x40021800
 80029dc:	40021c00 	.word	0x40021c00
 80029e0:	40013c00 	.word	0x40013c00

080029e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	807b      	strh	r3, [r7, #2]
 80029f0:	4613      	mov	r3, r2
 80029f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f4:	787b      	ldrb	r3, [r7, #1]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029fa:	887a      	ldrh	r2, [r7, #2]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a00:	e003      	b.n	8002a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a02:	887b      	ldrh	r3, [r7, #2]
 8002a04:	041a      	lsls	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	619a      	str	r2, [r3, #24]
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e12b      	b.n	8002c82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7ff f93c 	bl	8001cbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2224      	movs	r2, #36	; 0x24
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0201 	bic.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a7c:	f002 fe76 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 8002a80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	4a81      	ldr	r2, [pc, #516]	; (8002c8c <HAL_I2C_Init+0x274>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d807      	bhi.n	8002a9c <HAL_I2C_Init+0x84>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a80      	ldr	r2, [pc, #512]	; (8002c90 <HAL_I2C_Init+0x278>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	bf94      	ite	ls
 8002a94:	2301      	movls	r3, #1
 8002a96:	2300      	movhi	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	e006      	b.n	8002aaa <HAL_I2C_Init+0x92>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4a7d      	ldr	r2, [pc, #500]	; (8002c94 <HAL_I2C_Init+0x27c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	bf94      	ite	ls
 8002aa4:	2301      	movls	r3, #1
 8002aa6:	2300      	movhi	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e0e7      	b.n	8002c82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4a78      	ldr	r2, [pc, #480]	; (8002c98 <HAL_I2C_Init+0x280>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	0c9b      	lsrs	r3, r3, #18
 8002abc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4a6a      	ldr	r2, [pc, #424]	; (8002c8c <HAL_I2C_Init+0x274>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d802      	bhi.n	8002aec <HAL_I2C_Init+0xd4>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	e009      	b.n	8002b00 <HAL_I2C_Init+0xe8>
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002af2:	fb02 f303 	mul.w	r3, r2, r3
 8002af6:	4a69      	ldr	r2, [pc, #420]	; (8002c9c <HAL_I2C_Init+0x284>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	099b      	lsrs	r3, r3, #6
 8002afe:	3301      	adds	r3, #1
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	430b      	orrs	r3, r1
 8002b06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	495c      	ldr	r1, [pc, #368]	; (8002c8c <HAL_I2C_Init+0x274>)
 8002b1c:	428b      	cmp	r3, r1
 8002b1e:	d819      	bhi.n	8002b54 <HAL_I2C_Init+0x13c>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1e59      	subs	r1, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b2e:	1c59      	adds	r1, r3, #1
 8002b30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b34:	400b      	ands	r3, r1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <HAL_I2C_Init+0x138>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1e59      	subs	r1, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b48:	3301      	adds	r3, #1
 8002b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b4e:	e051      	b.n	8002bf4 <HAL_I2C_Init+0x1dc>
 8002b50:	2304      	movs	r3, #4
 8002b52:	e04f      	b.n	8002bf4 <HAL_I2C_Init+0x1dc>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d111      	bne.n	8002b80 <HAL_I2C_Init+0x168>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1e58      	subs	r0, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	440b      	add	r3, r1
 8002b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bf0c      	ite	eq
 8002b78:	2301      	moveq	r3, #1
 8002b7a:	2300      	movne	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	e012      	b.n	8002ba6 <HAL_I2C_Init+0x18e>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1e58      	subs	r0, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6859      	ldr	r1, [r3, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	0099      	lsls	r1, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b96:	3301      	adds	r3, #1
 8002b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_I2C_Init+0x196>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e022      	b.n	8002bf4 <HAL_I2C_Init+0x1dc>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10e      	bne.n	8002bd4 <HAL_I2C_Init+0x1bc>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1e58      	subs	r0, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6859      	ldr	r1, [r3, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	440b      	add	r3, r1
 8002bc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc8:	3301      	adds	r3, #1
 8002bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd2:	e00f      	b.n	8002bf4 <HAL_I2C_Init+0x1dc>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1e58      	subs	r0, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	0099      	lsls	r1, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bea:	3301      	adds	r3, #1
 8002bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	6809      	ldr	r1, [r1, #0]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69da      	ldr	r2, [r3, #28]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6911      	ldr	r1, [r2, #16]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68d2      	ldr	r2, [r2, #12]
 8002c2e:	4311      	orrs	r1, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	430b      	orrs	r3, r1
 8002c36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	000186a0 	.word	0x000186a0
 8002c90:	001e847f 	.word	0x001e847f
 8002c94:	003d08ff 	.word	0x003d08ff
 8002c98:	431bde83 	.word	0x431bde83
 8002c9c:	10624dd3 	.word	0x10624dd3

08002ca0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	4608      	mov	r0, r1
 8002caa:	4611      	mov	r1, r2
 8002cac:	461a      	mov	r2, r3
 8002cae:	4603      	mov	r3, r0
 8002cb0:	817b      	strh	r3, [r7, #10]
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	813b      	strh	r3, [r7, #8]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cba:	f7ff fbb5 	bl	8002428 <HAL_GetTick>
 8002cbe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b20      	cmp	r3, #32
 8002cca:	f040 80d9 	bne.w	8002e80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	2319      	movs	r3, #25
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	496d      	ldr	r1, [pc, #436]	; (8002e8c <HAL_I2C_Mem_Write+0x1ec>)
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 fc7f 	bl	80035dc <I2C_WaitOnFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e0cc      	b.n	8002e82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_I2C_Mem_Write+0x56>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e0c5      	b.n	8002e82 <HAL_I2C_Mem_Write+0x1e2>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d007      	beq.n	8002d1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0201 	orr.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2221      	movs	r2, #33	; 0x21
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2240      	movs	r2, #64	; 0x40
 8002d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a3a      	ldr	r2, [r7, #32]
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4a4d      	ldr	r2, [pc, #308]	; (8002e90 <HAL_I2C_Mem_Write+0x1f0>)
 8002d5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d5e:	88f8      	ldrh	r0, [r7, #6]
 8002d60:	893a      	ldrh	r2, [r7, #8]
 8002d62:	8979      	ldrh	r1, [r7, #10]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fab6 	bl	80032e0 <I2C_RequestMemoryWrite>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d052      	beq.n	8002e20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e081      	b.n	8002e82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 fd00 	bl	8003788 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00d      	beq.n	8002daa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d107      	bne.n	8002da6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e06b      	b.n	8002e82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	781a      	ldrb	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	1c5a      	adds	r2, r3, #1
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d11b      	bne.n	8002e20 <HAL_I2C_Mem_Write+0x180>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d017      	beq.n	8002e20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	781a      	ldrb	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1aa      	bne.n	8002d7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 fcec 	bl	800380a <I2C_WaitOnBTFFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00d      	beq.n	8002e54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d107      	bne.n	8002e50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e016      	b.n	8002e82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e000      	b.n	8002e82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e80:	2302      	movs	r3, #2
  }
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	00100002 	.word	0x00100002
 8002e90:	ffff0000 	.word	0xffff0000

08002e94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08c      	sub	sp, #48	; 0x30
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	4608      	mov	r0, r1
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	817b      	strh	r3, [r7, #10]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	813b      	strh	r3, [r7, #8]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eae:	f7ff fabb 	bl	8002428 <HAL_GetTick>
 8002eb2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b20      	cmp	r3, #32
 8002ebe:	f040 8208 	bne.w	80032d2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	2319      	movs	r3, #25
 8002ec8:	2201      	movs	r2, #1
 8002eca:	497b      	ldr	r1, [pc, #492]	; (80030b8 <HAL_I2C_Mem_Read+0x224>)
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 fb85 	bl	80035dc <I2C_WaitOnFlagUntilTimeout>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e1fb      	b.n	80032d4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_I2C_Mem_Read+0x56>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e1f4      	b.n	80032d4 <HAL_I2C_Mem_Read+0x440>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d007      	beq.n	8002f10 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2222      	movs	r2, #34	; 0x22
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2240      	movs	r2, #64	; 0x40
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002f40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4a5b      	ldr	r2, [pc, #364]	; (80030bc <HAL_I2C_Mem_Read+0x228>)
 8002f50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f52:	88f8      	ldrh	r0, [r7, #6]
 8002f54:	893a      	ldrh	r2, [r7, #8]
 8002f56:	8979      	ldrh	r1, [r7, #10]
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	4603      	mov	r3, r0
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 fa52 	bl	800340c <I2C_RequestMemoryRead>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e1b0      	b.n	80032d4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d113      	bne.n	8002fa2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	623b      	str	r3, [r7, #32]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	623b      	str	r3, [r7, #32]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	623b      	str	r3, [r7, #32]
 8002f8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	e184      	b.n	80032ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d11b      	bne.n	8002fe2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	61fb      	str	r3, [r7, #28]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	e164      	b.n	80032ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d11b      	bne.n	8003022 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003008:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300a:	2300      	movs	r3, #0
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	61bb      	str	r3, [r7, #24]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	e144      	b.n	80032ac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003038:	e138      	b.n	80032ac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303e:	2b03      	cmp	r3, #3
 8003040:	f200 80f1 	bhi.w	8003226 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003048:	2b01      	cmp	r3, #1
 800304a:	d123      	bne.n	8003094 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800304c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fc1b 	bl	800388c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e139      	b.n	80032d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691a      	ldr	r2, [r3, #16]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	1c5a      	adds	r2, r3, #1
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003088:	b29b      	uxth	r3, r3
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003092:	e10b      	b.n	80032ac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003098:	2b02      	cmp	r3, #2
 800309a:	d14e      	bne.n	800313a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a2:	2200      	movs	r2, #0
 80030a4:	4906      	ldr	r1, [pc, #24]	; (80030c0 <HAL_I2C_Mem_Read+0x22c>)
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fa98 	bl	80035dc <I2C_WaitOnFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d008      	beq.n	80030c4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e10e      	b.n	80032d4 <HAL_I2C_Mem_Read+0x440>
 80030b6:	bf00      	nop
 80030b8:	00100002 	.word	0x00100002
 80030bc:	ffff0000 	.word	0xffff0000
 80030c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003138:	e0b8      	b.n	80032ac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003140:	2200      	movs	r2, #0
 8003142:	4966      	ldr	r1, [pc, #408]	; (80032dc <HAL_I2C_Mem_Read+0x448>)
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 fa49 	bl	80035dc <I2C_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0bf      	b.n	80032d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003162:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319c:	2200      	movs	r2, #0
 800319e:	494f      	ldr	r1, [pc, #316]	; (80032dc <HAL_I2C_Mem_Read+0x448>)
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 fa1b 	bl	80035dc <I2C_WaitOnFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e091      	b.n	80032d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003224:	e042      	b.n	80032ac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003228:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 fb2e 	bl	800388c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e04c      	b.n	80032d4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003262:	b29b      	uxth	r3, r3
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b04      	cmp	r3, #4
 8003278:	d118      	bne.n	80032ac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f47f aec2 	bne.w	800303a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e000      	b.n	80032d4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
  }
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3728      	adds	r7, #40	; 0x28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	00010004 	.word	0x00010004

080032e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	4608      	mov	r0, r1
 80032ea:	4611      	mov	r1, r2
 80032ec:	461a      	mov	r2, r3
 80032ee:	4603      	mov	r3, r0
 80032f0:	817b      	strh	r3, [r7, #10]
 80032f2:	460b      	mov	r3, r1
 80032f4:	813b      	strh	r3, [r7, #8]
 80032f6:	4613      	mov	r3, r2
 80032f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003308:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	2200      	movs	r2, #0
 8003312:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f960 	bl	80035dc <I2C_WaitOnFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00d      	beq.n	800333e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003330:	d103      	bne.n	800333a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e05f      	b.n	80033fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800333e:	897b      	ldrh	r3, [r7, #10]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	461a      	mov	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800334c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	6a3a      	ldr	r2, [r7, #32]
 8003352:	492d      	ldr	r1, [pc, #180]	; (8003408 <I2C_RequestMemoryWrite+0x128>)
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 f998 	bl	800368a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e04c      	b.n	80033fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800337a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337c:	6a39      	ldr	r1, [r7, #32]
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fa02 	bl	8003788 <I2C_WaitOnTXEFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00d      	beq.n	80033a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	2b04      	cmp	r3, #4
 8003390:	d107      	bne.n	80033a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e02b      	b.n	80033fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033a6:	88fb      	ldrh	r3, [r7, #6]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d105      	bne.n	80033b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033ac:	893b      	ldrh	r3, [r7, #8]
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	611a      	str	r2, [r3, #16]
 80033b6:	e021      	b.n	80033fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033b8:	893b      	ldrh	r3, [r7, #8]
 80033ba:	0a1b      	lsrs	r3, r3, #8
 80033bc:	b29b      	uxth	r3, r3
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c8:	6a39      	ldr	r1, [r7, #32]
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f9dc 	bl	8003788 <I2C_WaitOnTXEFlagUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00d      	beq.n	80033f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d107      	bne.n	80033ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e005      	b.n	80033fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033f2:	893b      	ldrh	r3, [r7, #8]
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	00010002 	.word	0x00010002

0800340c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af02      	add	r7, sp, #8
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	4608      	mov	r0, r1
 8003416:	4611      	mov	r1, r2
 8003418:	461a      	mov	r2, r3
 800341a:	4603      	mov	r3, r0
 800341c:	817b      	strh	r3, [r7, #10]
 800341e:	460b      	mov	r3, r1
 8003420:	813b      	strh	r3, [r7, #8]
 8003422:	4613      	mov	r3, r2
 8003424:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003434:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003444:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	2200      	movs	r2, #0
 800344e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f8c2 	bl	80035dc <I2C_WaitOnFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00d      	beq.n	800347a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800346c:	d103      	bne.n	8003476 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003474:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e0aa      	b.n	80035d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800347a:	897b      	ldrh	r3, [r7, #10]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003488:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	6a3a      	ldr	r2, [r7, #32]
 800348e:	4952      	ldr	r1, [pc, #328]	; (80035d8 <I2C_RequestMemoryRead+0x1cc>)
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 f8fa 	bl	800368a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e097      	b.n	80035d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b8:	6a39      	ldr	r1, [r7, #32]
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 f964 	bl	8003788 <I2C_WaitOnTXEFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00d      	beq.n	80034e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d107      	bne.n	80034de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e076      	b.n	80035d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d105      	bne.n	80034f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034e8:	893b      	ldrh	r3, [r7, #8]
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	611a      	str	r2, [r3, #16]
 80034f2:	e021      	b.n	8003538 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034f4:	893b      	ldrh	r3, [r7, #8]
 80034f6:	0a1b      	lsrs	r3, r3, #8
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003504:	6a39      	ldr	r1, [r7, #32]
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 f93e 	bl	8003788 <I2C_WaitOnTXEFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00d      	beq.n	800352e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	2b04      	cmp	r3, #4
 8003518:	d107      	bne.n	800352a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003528:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e050      	b.n	80035d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800352e:	893b      	ldrh	r3, [r7, #8]
 8003530:	b2da      	uxtb	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353a:	6a39      	ldr	r1, [r7, #32]
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f923 	bl	8003788 <I2C_WaitOnTXEFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00d      	beq.n	8003564 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	2b04      	cmp	r3, #4
 800354e:	d107      	bne.n	8003560 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800355e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e035      	b.n	80035d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003572:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	2200      	movs	r2, #0
 800357c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f82b 	bl	80035dc <I2C_WaitOnFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00d      	beq.n	80035a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800359a:	d103      	bne.n	80035a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e013      	b.n	80035d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035a8:	897b      	ldrh	r3, [r7, #10]
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	6a3a      	ldr	r2, [r7, #32]
 80035bc:	4906      	ldr	r1, [pc, #24]	; (80035d8 <I2C_RequestMemoryRead+0x1cc>)
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f863 	bl	800368a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	00010002 	.word	0x00010002

080035dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	4613      	mov	r3, r2
 80035ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035ec:	e025      	b.n	800363a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f4:	d021      	beq.n	800363a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f6:	f7fe ff17 	bl	8002428 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d302      	bcc.n	800360c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d116      	bne.n	800363a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f043 0220 	orr.w	r2, r3, #32
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e023      	b.n	8003682 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	0c1b      	lsrs	r3, r3, #16
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b01      	cmp	r3, #1
 8003642:	d10d      	bne.n	8003660 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	43da      	mvns	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4013      	ands	r3, r2
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	e00c      	b.n	800367a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	43da      	mvns	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4013      	ands	r3, r2
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	bf0c      	ite	eq
 8003672:	2301      	moveq	r3, #1
 8003674:	2300      	movne	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	429a      	cmp	r2, r3
 800367e:	d0b6      	beq.n	80035ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003698:	e051      	b.n	800373e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a8:	d123      	bne.n	80036f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f043 0204 	orr.w	r2, r3, #4
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e046      	b.n	8003780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f8:	d021      	beq.n	800373e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fa:	f7fe fe95 	bl	8002428 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	429a      	cmp	r2, r3
 8003708:	d302      	bcc.n	8003710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d116      	bne.n	800373e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	f043 0220 	orr.w	r2, r3, #32
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e020      	b.n	8003780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	0c1b      	lsrs	r3, r3, #16
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b01      	cmp	r3, #1
 8003746:	d10c      	bne.n	8003762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	43da      	mvns	r2, r3
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4013      	ands	r3, r2
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	bf14      	ite	ne
 800375a:	2301      	movne	r3, #1
 800375c:	2300      	moveq	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	e00b      	b.n	800377a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	43da      	mvns	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4013      	ands	r3, r2
 800376e:	b29b      	uxth	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	bf14      	ite	ne
 8003774:	2301      	movne	r3, #1
 8003776:	2300      	moveq	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d18d      	bne.n	800369a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003794:	e02d      	b.n	80037f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f8ce 	bl	8003938 <I2C_IsAcknowledgeFailed>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e02d      	b.n	8003802 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ac:	d021      	beq.n	80037f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ae:	f7fe fe3b 	bl	8002428 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d302      	bcc.n	80037c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d116      	bne.n	80037f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f043 0220 	orr.w	r2, r3, #32
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e007      	b.n	8003802 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fc:	2b80      	cmp	r3, #128	; 0x80
 80037fe:	d1ca      	bne.n	8003796 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003816:	e02d      	b.n	8003874 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f88d 	bl	8003938 <I2C_IsAcknowledgeFailed>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e02d      	b.n	8003884 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382e:	d021      	beq.n	8003874 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003830:	f7fe fdfa 	bl	8002428 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	429a      	cmp	r2, r3
 800383e:	d302      	bcc.n	8003846 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d116      	bne.n	8003874 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	f043 0220 	orr.w	r2, r3, #32
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e007      	b.n	8003884 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b04      	cmp	r3, #4
 8003880:	d1ca      	bne.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003898:	e042      	b.n	8003920 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	f003 0310 	and.w	r3, r3, #16
 80038a4:	2b10      	cmp	r3, #16
 80038a6:	d119      	bne.n	80038dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0210 	mvn.w	r2, #16
 80038b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e029      	b.n	8003930 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038dc:	f7fe fda4 	bl	8002428 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d302      	bcc.n	80038f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d116      	bne.n	8003920 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	f043 0220 	orr.w	r2, r3, #32
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e007      	b.n	8003930 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	d1b5      	bne.n	800389a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800394e:	d11b      	bne.n	8003988 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003958:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	f043 0204 	orr.w	r2, r3, #4
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003996:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003998:	b08f      	sub	sp, #60	; 0x3c
 800399a:	af0a      	add	r7, sp, #40	; 0x28
 800399c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e10f      	b.n	8003bc8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f006 fe60 	bl	800a688 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2203      	movs	r2, #3
 80039cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d102      	bne.n	80039e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f003 f933 	bl	8006c52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	603b      	str	r3, [r7, #0]
 80039f2:	687e      	ldr	r6, [r7, #4]
 80039f4:	466d      	mov	r5, sp
 80039f6:	f106 0410 	add.w	r4, r6, #16
 80039fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a06:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a0a:	1d33      	adds	r3, r6, #4
 8003a0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a0e:	6838      	ldr	r0, [r7, #0]
 8003a10:	f003 f80a 	bl	8006a28 <USB_CoreInit>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d005      	beq.n	8003a26 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0d0      	b.n	8003bc8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f003 f921 	bl	8006c74 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a32:	2300      	movs	r3, #0
 8003a34:	73fb      	strb	r3, [r7, #15]
 8003a36:	e04a      	b.n	8003ace <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	333d      	adds	r3, #61	; 0x3d
 8003a48:	2201      	movs	r2, #1
 8003a4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a4c:	7bfa      	ldrb	r2, [r7, #15]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	333c      	adds	r3, #60	; 0x3c
 8003a5c:	7bfa      	ldrb	r2, [r7, #15]
 8003a5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a60:	7bfa      	ldrb	r2, [r7, #15]
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	b298      	uxth	r0, r3
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	3344      	adds	r3, #68	; 0x44
 8003a74:	4602      	mov	r2, r0
 8003a76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a78:	7bfa      	ldrb	r2, [r7, #15]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	3340      	adds	r3, #64	; 0x40
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a8c:	7bfa      	ldrb	r2, [r7, #15]
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	3348      	adds	r3, #72	; 0x48
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003aa0:	7bfa      	ldrb	r2, [r7, #15]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	334c      	adds	r3, #76	; 0x4c
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ab4:	7bfa      	ldrb	r2, [r7, #15]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	3354      	adds	r3, #84	; 0x54
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	3301      	adds	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
 8003ace:	7bfa      	ldrb	r2, [r7, #15]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d3af      	bcc.n	8003a38 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ad8:	2300      	movs	r3, #0
 8003ada:	73fb      	strb	r3, [r7, #15]
 8003adc:	e044      	b.n	8003b68 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ade:	7bfa      	ldrb	r2, [r7, #15]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003af4:	7bfa      	ldrb	r2, [r7, #15]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b06:	7bfa      	ldrb	r2, [r7, #15]
 8003b08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b0a:	7bfa      	ldrb	r2, [r7, #15]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b20:	7bfa      	ldrb	r2, [r7, #15]
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b36:	7bfa      	ldrb	r2, [r7, #15]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b4c:	7bfa      	ldrb	r2, [r7, #15]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	3301      	adds	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
 8003b68:	7bfa      	ldrb	r2, [r7, #15]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d3b5      	bcc.n	8003ade <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	687e      	ldr	r6, [r7, #4]
 8003b7a:	466d      	mov	r5, sp
 8003b7c:	f106 0410 	add.w	r4, r6, #16
 8003b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b90:	1d33      	adds	r3, r6, #4
 8003b92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b94:	6838      	ldr	r0, [r7, #0]
 8003b96:	f003 f8b9 	bl	8006d0c <USB_DevInit>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e00d      	b.n	8003bc8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f004 fa08 	bl	8007fd6 <USB_DevDisconnect>

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bd0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_PCD_Start+0x1c>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e020      	b.n	8003c2e <HAL_PCD_Start+0x5e>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d109      	bne.n	8003c10 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d005      	beq.n	8003c10 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f003 f80b 	bl	8006c30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f004 f9b8 	bl	8007f94 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c36:	b590      	push	{r4, r7, lr}
 8003c38:	b08d      	sub	sp, #52	; 0x34
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f004 fa76 	bl	800813e <USB_GetMode>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f040 848a 	bne.w	800456e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f004 f9da 	bl	8008018 <USB_ReadInterrupts>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 8480 	beq.w	800456c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	0a1b      	lsrs	r3, r3, #8
 8003c76:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f004 f9c7 	bl	8008018 <USB_ReadInterrupts>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d107      	bne.n	8003ca4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695a      	ldr	r2, [r3, #20]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f002 0202 	and.w	r2, r2, #2
 8003ca2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f004 f9b5 	bl	8008018 <USB_ReadInterrupts>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	f003 0310 	and.w	r3, r3, #16
 8003cb4:	2b10      	cmp	r3, #16
 8003cb6:	d161      	bne.n	8003d7c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699a      	ldr	r2, [r3, #24]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0210 	bic.w	r2, r2, #16
 8003cc6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	f003 020f 	and.w	r2, r3, #15
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	0c5b      	lsrs	r3, r3, #17
 8003cec:	f003 030f 	and.w	r3, r3, #15
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d124      	bne.n	8003d3e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d035      	beq.n	8003d6c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	091b      	lsrs	r3, r3, #4
 8003d08:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	461a      	mov	r2, r3
 8003d12:	6a38      	ldr	r0, [r7, #32]
 8003d14:	f003 ffec 	bl	8007cf0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	091b      	lsrs	r3, r3, #4
 8003d20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d24:	441a      	add	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	6a1a      	ldr	r2, [r3, #32]
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d36:	441a      	add	r2, r3
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	621a      	str	r2, [r3, #32]
 8003d3c:	e016      	b.n	8003d6c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	0c5b      	lsrs	r3, r3, #17
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	2b06      	cmp	r3, #6
 8003d48:	d110      	bne.n	8003d6c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d50:	2208      	movs	r2, #8
 8003d52:	4619      	mov	r1, r3
 8003d54:	6a38      	ldr	r0, [r7, #32]
 8003d56:	f003 ffcb 	bl	8007cf0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	6a1a      	ldr	r2, [r3, #32]
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d66:	441a      	add	r2, r3
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0210 	orr.w	r2, r2, #16
 8003d7a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f004 f949 	bl	8008018 <USB_ReadInterrupts>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d8c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d90:	f040 80a7 	bne.w	8003ee2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f004 f94e 	bl	800803e <USB_ReadDevAllOutEpInterrupt>
 8003da2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003da4:	e099      	b.n	8003eda <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 808e 	beq.w	8003ece <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	4611      	mov	r1, r2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f004 f972 	bl	80080a6 <USB_ReadDevOutEPInterrupt>
 8003dc2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00c      	beq.n	8003de8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dda:	461a      	mov	r2, r3
 8003ddc:	2301      	movs	r3, #1
 8003dde:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fec2 	bl	8004b6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00c      	beq.n	8003e0c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfe:	461a      	mov	r2, r3
 8003e00:	2308      	movs	r3, #8
 8003e02:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 ff98 	bl	8004d3c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d008      	beq.n	8003e28 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e22:	461a      	mov	r2, r3
 8003e24:	2310      	movs	r3, #16
 8003e26:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d030      	beq.n	8003e94 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3a:	2b80      	cmp	r3, #128	; 0x80
 8003e3c:	d109      	bne.n	8003e52 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	69fa      	ldr	r2, [r7, #28]
 8003e48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e50:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e54:	4613      	mov	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	4413      	add	r3, r2
 8003e64:	3304      	adds	r3, #4
 8003e66:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	78db      	ldrb	r3, [r3, #3]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d108      	bne.n	8003e82 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2200      	movs	r2, #0
 8003e74:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f006 fd09 	bl	800a894 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8e:	461a      	mov	r2, r3
 8003e90:	2302      	movs	r3, #2
 8003e92:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eaa:	461a      	mov	r2, r3
 8003eac:	2320      	movs	r3, #32
 8003eae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ecc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	085b      	lsrs	r3, r3, #1
 8003ed8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f47f af62 	bne.w	8003da6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f004 f896 	bl	8008018 <USB_ReadInterrupts>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ef6:	f040 80db 	bne.w	80040b0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f004 f8b7 	bl	8008072 <USB_ReadDevAllInEpInterrupt>
 8003f04:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003f0a:	e0cd      	b.n	80040a8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 80c2 	beq.w	800409c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	4611      	mov	r1, r2
 8003f22:	4618      	mov	r0, r3
 8003f24:	f004 f8dd 	bl	80080e2 <USB_ReadDevInEPInterrupt>
 8003f28:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d057      	beq.n	8003fe4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	69f9      	ldr	r1, [r7, #28]
 8003f50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f54:	4013      	ands	r3, r2
 8003f56:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f64:	461a      	mov	r2, r3
 8003f66:	2301      	movs	r3, #1
 8003f68:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d132      	bne.n	8003fd8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f76:	4613      	mov	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	334c      	adds	r3, #76	; 0x4c
 8003f82:	6819      	ldr	r1, [r3, #0]
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f88:	4613      	mov	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4403      	add	r3, r0
 8003f92:	3348      	adds	r3, #72	; 0x48
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4419      	add	r1, r3
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4403      	add	r3, r0
 8003fa6:	334c      	adds	r3, #76	; 0x4c
 8003fa8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d113      	bne.n	8003fd8 <HAL_PCD_IRQHandler+0x3a2>
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	3354      	adds	r3, #84	; 0x54
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d108      	bne.n	8003fd8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6818      	ldr	r0, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	f004 f8e4 	bl	80081a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	4619      	mov	r1, r3
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f006 fbd3 	bl	800a78a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d008      	beq.n	8004000 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	2308      	movs	r3, #8
 8003ffe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f003 0310 	and.w	r3, r3, #16
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004016:	461a      	mov	r2, r3
 8004018:	2310      	movs	r3, #16
 800401a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004032:	461a      	mov	r2, r3
 8004034:	2340      	movs	r3, #64	; 0x40
 8004036:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d023      	beq.n	800408a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004044:	6a38      	ldr	r0, [r7, #32]
 8004046:	f002 ffc5 	bl	8006fd4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800404a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404c:	4613      	mov	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	3338      	adds	r3, #56	; 0x38
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	4413      	add	r3, r2
 800405a:	3304      	adds	r3, #4
 800405c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	78db      	ldrb	r3, [r3, #3]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d108      	bne.n	8004078 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2200      	movs	r2, #0
 800406a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	b2db      	uxtb	r3, r3
 8004070:	4619      	mov	r1, r3
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f006 fc20 	bl	800a8b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004084:	461a      	mov	r2, r3
 8004086:	2302      	movs	r3, #2
 8004088:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fcdb 	bl	8004a52 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	3301      	adds	r3, #1
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f47f af2e 	bne.w	8003f0c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f003 ffaf 	bl	8008018 <USB_ReadInterrupts>
 80040ba:	4603      	mov	r3, r0
 80040bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040c4:	d122      	bne.n	800410c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040d4:	f023 0301 	bic.w	r3, r3, #1
 80040d8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d108      	bne.n	80040f6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040ec:	2100      	movs	r1, #0
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fec2 	bl	8004e78 <HAL_PCDEx_LPM_Callback>
 80040f4:	e002      	b.n	80040fc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f006 fbbe 	bl	800a878 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800410a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f003 ff81 	bl	8008018 <USB_ReadInterrupts>
 8004116:	4603      	mov	r3, r0
 8004118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800411c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004120:	d112      	bne.n	8004148 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b01      	cmp	r3, #1
 8004130:	d102      	bne.n	8004138 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f006 fb7a 	bl	800a82c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695a      	ldr	r2, [r3, #20]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004146:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f003 ff63 	bl	8008018 <USB_ReadInterrupts>
 8004152:	4603      	mov	r3, r0
 8004154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415c:	f040 80b7 	bne.w	80042ce <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2110      	movs	r1, #16
 800417a:	4618      	mov	r0, r3
 800417c:	f002 ff2a 	bl	8006fd4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004180:	2300      	movs	r3, #0
 8004182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004184:	e046      	b.n	8004214 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004192:	461a      	mov	r2, r3
 8004194:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004198:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041aa:	0151      	lsls	r1, r2, #5
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	440a      	add	r2, r1
 80041b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c6:	461a      	mov	r2, r3
 80041c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041de:	0151      	lsls	r1, r2, #5
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	440a      	add	r2, r1
 80041e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80041ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041fe:	0151      	lsls	r1, r2, #5
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	440a      	add	r2, r1
 8004204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004208:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800420c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800420e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004210:	3301      	adds	r3, #1
 8004212:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800421a:	429a      	cmp	r2, r3
 800421c:	d3b3      	bcc.n	8004186 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800422c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004230:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	2b00      	cmp	r3, #0
 8004238:	d016      	beq.n	8004268 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800424a:	f043 030b 	orr.w	r3, r3, #11
 800424e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004260:	f043 030b 	orr.w	r3, r3, #11
 8004264:	6453      	str	r3, [r2, #68]	; 0x44
 8004266:	e015      	b.n	8004294 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	69fa      	ldr	r2, [r7, #28]
 8004272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004276:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800427a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800427e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800428e:	f043 030b 	orr.w	r3, r3, #11
 8004292:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80042a6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6818      	ldr	r0, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042b8:	461a      	mov	r2, r3
 80042ba:	f003 ff71 	bl	80081a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695a      	ldr	r2, [r3, #20]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80042cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f003 fea0 	bl	8008018 <USB_ReadInterrupts>
 80042d8:	4603      	mov	r3, r0
 80042da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e2:	d124      	bne.n	800432e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f003 ff36 	bl	800815a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f002 feeb 	bl	80070ce <USB_GetDevSpeed>
 80042f8:	4603      	mov	r3, r0
 80042fa:	461a      	mov	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681c      	ldr	r4, [r3, #0]
 8004304:	f001 fa26 	bl	8005754 <HAL_RCC_GetHCLKFreq>
 8004308:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800430e:	b2db      	uxtb	r3, r3
 8004310:	461a      	mov	r2, r3
 8004312:	4620      	mov	r0, r4
 8004314:	f002 fbea 	bl	8006aec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f006 fa5e 	bl	800a7da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695a      	ldr	r2, [r3, #20]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800432c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f003 fe70 	bl	8008018 <USB_ReadInterrupts>
 8004338:	4603      	mov	r3, r0
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b08      	cmp	r3, #8
 8004340:	d10a      	bne.n	8004358 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f006 fa3b 	bl	800a7be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695a      	ldr	r2, [r3, #20]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f002 0208 	and.w	r2, r2, #8
 8004356:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f003 fe5b 	bl	8008018 <USB_ReadInterrupts>
 8004362:	4603      	mov	r3, r0
 8004364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004368:	2b80      	cmp	r3, #128	; 0x80
 800436a:	d122      	bne.n	80043b2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004378:	2301      	movs	r3, #1
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
 800437c:	e014      	b.n	80043a8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004382:	4613      	mov	r3, r2
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	440b      	add	r3, r1
 800438c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d105      	bne.n	80043a2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	b2db      	uxtb	r3, r3
 800439a:	4619      	mov	r1, r3
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fb27 	bl	80049f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	3301      	adds	r3, #1
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d3e5      	bcc.n	800437e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f003 fe2e 	bl	8008018 <USB_ReadInterrupts>
 80043bc:	4603      	mov	r3, r0
 80043be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043c6:	d13b      	bne.n	8004440 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043c8:	2301      	movs	r3, #1
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
 80043cc:	e02b      	b.n	8004426 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e2:	4613      	mov	r3, r2
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	3340      	adds	r3, #64	; 0x40
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d115      	bne.n	8004420 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80043f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	da12      	bge.n	8004420 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fe:	4613      	mov	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	333f      	adds	r3, #63	; 0x3f
 800440a:	2201      	movs	r2, #1
 800440c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	b2db      	uxtb	r3, r3
 8004412:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004416:	b2db      	uxtb	r3, r3
 8004418:	4619      	mov	r1, r3
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fae8 	bl	80049f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	3301      	adds	r3, #1
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442c:	429a      	cmp	r2, r3
 800442e:	d3ce      	bcc.n	80043ce <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800443e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f003 fde7 	bl	8008018 <USB_ReadInterrupts>
 800444a:	4603      	mov	r3, r0
 800444c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004450:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004454:	d155      	bne.n	8004502 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004456:	2301      	movs	r3, #1
 8004458:	627b      	str	r3, [r7, #36]	; 0x24
 800445a:	e045      	b.n	80044e8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004470:	4613      	mov	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d12e      	bne.n	80044e2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004484:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004486:	2b00      	cmp	r3, #0
 8004488:	da2b      	bge.n	80044e2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004496:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800449a:	429a      	cmp	r2, r3
 800449c:	d121      	bne.n	80044e2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a2:	4613      	mov	r3, r2
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80044b0:	2201      	movs	r2, #1
 80044b2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044de:	6053      	str	r3, [r2, #4]
            break;
 80044e0:	e007      	b.n	80044f2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	3301      	adds	r3, #1
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d3b4      	bcc.n	800445c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695a      	ldr	r2, [r3, #20]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004500:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f003 fd86 	bl	8008018 <USB_ReadInterrupts>
 800450c:	4603      	mov	r3, r0
 800450e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004516:	d10a      	bne.n	800452e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f006 f9df 	bl	800a8dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695a      	ldr	r2, [r3, #20]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800452c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f003 fd70 	bl	8008018 <USB_ReadInterrupts>
 8004538:	4603      	mov	r3, r0
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b04      	cmp	r3, #4
 8004540:	d115      	bne.n	800456e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f006 f9cf 	bl	800a8f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6859      	ldr	r1, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
 800456a:	e000      	b.n	800456e <HAL_PCD_IRQHandler+0x938>
      return;
 800456c:	bf00      	nop
    }
  }
}
 800456e:	3734      	adds	r7, #52	; 0x34
 8004570:	46bd      	mov	sp, r7
 8004572:	bd90      	pop	{r4, r7, pc}

08004574 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_PCD_SetAddress+0x1a>
 800458a:	2302      	movs	r3, #2
 800458c:	e013      	b.n	80045b6 <HAL_PCD_SetAddress+0x42>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	78fa      	ldrb	r2, [r7, #3]
 800459a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	78fa      	ldrb	r2, [r7, #3]
 80045a4:	4611      	mov	r1, r2
 80045a6:	4618      	mov	r0, r3
 80045a8:	f003 fcce 	bl	8007f48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	4608      	mov	r0, r1
 80045c8:	4611      	mov	r1, r2
 80045ca:	461a      	mov	r2, r3
 80045cc:	4603      	mov	r3, r0
 80045ce:	70fb      	strb	r3, [r7, #3]
 80045d0:	460b      	mov	r3, r1
 80045d2:	803b      	strh	r3, [r7, #0]
 80045d4:	4613      	mov	r3, r2
 80045d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045d8:	2300      	movs	r3, #0
 80045da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	da0f      	bge.n	8004604 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	f003 020f 	and.w	r2, r3, #15
 80045ea:	4613      	mov	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	3338      	adds	r3, #56	; 0x38
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	4413      	add	r3, r2
 80045f8:	3304      	adds	r3, #4
 80045fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	705a      	strb	r2, [r3, #1]
 8004602:	e00f      	b.n	8004624 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	f003 020f 	and.w	r2, r3, #15
 800460a:	4613      	mov	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	4413      	add	r3, r2
 800461a:	3304      	adds	r3, #4
 800461c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004624:	78fb      	ldrb	r3, [r7, #3]
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	b2da      	uxtb	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004630:	883a      	ldrh	r2, [r7, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	78ba      	ldrb	r2, [r7, #2]
 800463a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	785b      	ldrb	r3, [r3, #1]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d004      	beq.n	800464e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800464e:	78bb      	ldrb	r3, [r7, #2]
 8004650:	2b02      	cmp	r3, #2
 8004652:	d102      	bne.n	800465a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_PCD_EP_Open+0xaa>
 8004664:	2302      	movs	r3, #2
 8004666:	e00e      	b.n	8004686 <HAL_PCD_EP_Open+0xc8>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68f9      	ldr	r1, [r7, #12]
 8004676:	4618      	mov	r0, r3
 8004678:	f002 fd4e 	bl	8007118 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004684:	7afb      	ldrb	r3, [r7, #11]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	460b      	mov	r3, r1
 8004698:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800469a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	da0f      	bge.n	80046c2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046a2:	78fb      	ldrb	r3, [r7, #3]
 80046a4:	f003 020f 	and.w	r2, r3, #15
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	3338      	adds	r3, #56	; 0x38
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	4413      	add	r3, r2
 80046b6:	3304      	adds	r3, #4
 80046b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2201      	movs	r2, #1
 80046be:	705a      	strb	r2, [r3, #1]
 80046c0:	e00f      	b.n	80046e2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046c2:	78fb      	ldrb	r3, [r7, #3]
 80046c4:	f003 020f 	and.w	r2, r3, #15
 80046c8:	4613      	mov	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	4413      	add	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	4413      	add	r3, r2
 80046d8:	3304      	adds	r3, #4
 80046da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80046e2:	78fb      	ldrb	r3, [r7, #3]
 80046e4:	f003 030f 	and.w	r3, r3, #15
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_PCD_EP_Close+0x6e>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e00e      	b.n	800471a <HAL_PCD_EP_Close+0x8c>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68f9      	ldr	r1, [r7, #12]
 800470a:	4618      	mov	r0, r3
 800470c:	f002 fd8c 	bl	8007228 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b086      	sub	sp, #24
 8004726:	af00      	add	r7, sp, #0
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
 800472e:	460b      	mov	r3, r1
 8004730:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004732:	7afb      	ldrb	r3, [r7, #11]
 8004734:	f003 020f 	and.w	r2, r3, #15
 8004738:	4613      	mov	r3, r2
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	3304      	adds	r3, #4
 800474a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2200      	movs	r2, #0
 800475c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2200      	movs	r2, #0
 8004762:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004764:	7afb      	ldrb	r3, [r7, #11]
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	b2da      	uxtb	r2, r3
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d102      	bne.n	800477e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800477e:	7afb      	ldrb	r3, [r7, #11]
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	2b00      	cmp	r3, #0
 8004786:	d109      	bne.n	800479c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	461a      	mov	r2, r3
 8004794:	6979      	ldr	r1, [r7, #20]
 8004796:	f003 f86b 	bl	8007870 <USB_EP0StartXfer>
 800479a:	e008      	b.n	80047ae <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	461a      	mov	r2, r3
 80047a8:	6979      	ldr	r1, [r7, #20]
 80047aa:	f002 fe19 	bl	80073e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	f003 020f 	and.w	r2, r3, #15
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	4613      	mov	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	4413      	add	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	440b      	add	r3, r1
 80047d6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80047da:	681b      	ldr	r3, [r3, #0]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	607a      	str	r2, [r7, #4]
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	460b      	mov	r3, r1
 80047f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047f8:	7afb      	ldrb	r3, [r7, #11]
 80047fa:	f003 020f 	and.w	r2, r3, #15
 80047fe:	4613      	mov	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	3338      	adds	r3, #56	; 0x38
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4413      	add	r3, r2
 800480c:	3304      	adds	r3, #4
 800480e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2200      	movs	r2, #0
 8004820:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2201      	movs	r2, #1
 8004826:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004828:	7afb      	ldrb	r3, [r7, #11]
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	b2da      	uxtb	r2, r3
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d102      	bne.n	8004842 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004842:	7afb      	ldrb	r3, [r7, #11]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	2b00      	cmp	r3, #0
 800484a:	d109      	bne.n	8004860 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6818      	ldr	r0, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	b2db      	uxtb	r3, r3
 8004856:	461a      	mov	r2, r3
 8004858:	6979      	ldr	r1, [r7, #20]
 800485a:	f003 f809 	bl	8007870 <USB_EP0StartXfer>
 800485e:	e008      	b.n	8004872 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6818      	ldr	r0, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	461a      	mov	r2, r3
 800486c:	6979      	ldr	r1, [r7, #20]
 800486e:	f002 fdb7 	bl	80073e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004888:	78fb      	ldrb	r3, [r7, #3]
 800488a:	f003 020f 	and.w	r2, r3, #15
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	429a      	cmp	r2, r3
 8004894:	d901      	bls.n	800489a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e050      	b.n	800493c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800489a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	da0f      	bge.n	80048c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048a2:	78fb      	ldrb	r3, [r7, #3]
 80048a4:	f003 020f 	and.w	r2, r3, #15
 80048a8:	4613      	mov	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	3338      	adds	r3, #56	; 0x38
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	4413      	add	r3, r2
 80048b6:	3304      	adds	r3, #4
 80048b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	705a      	strb	r2, [r3, #1]
 80048c0:	e00d      	b.n	80048de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048c2:	78fa      	ldrb	r2, [r7, #3]
 80048c4:	4613      	mov	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	4413      	add	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	4413      	add	r3, r2
 80048d4:	3304      	adds	r3, #4
 80048d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2201      	movs	r2, #1
 80048e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_PCD_EP_SetStall+0x82>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e01e      	b.n	800493c <HAL_PCD_EP_SetStall+0xc0>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68f9      	ldr	r1, [r7, #12]
 800490c:	4618      	mov	r0, r3
 800490e:	f003 fa47 	bl	8007da0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004912:	78fb      	ldrb	r3, [r7, #3]
 8004914:	f003 030f 	and.w	r3, r3, #15
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6818      	ldr	r0, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	b2d9      	uxtb	r1, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800492c:	461a      	mov	r2, r3
 800492e:	f003 fc37 	bl	80081a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	f003 020f 	and.w	r2, r3, #15
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	429a      	cmp	r2, r3
 800495c:	d901      	bls.n	8004962 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e042      	b.n	80049e8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004962:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004966:	2b00      	cmp	r3, #0
 8004968:	da0f      	bge.n	800498a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800496a:	78fb      	ldrb	r3, [r7, #3]
 800496c:	f003 020f 	and.w	r2, r3, #15
 8004970:	4613      	mov	r3, r2
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	3338      	adds	r3, #56	; 0x38
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	4413      	add	r3, r2
 800497e:	3304      	adds	r3, #4
 8004980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2201      	movs	r2, #1
 8004986:	705a      	strb	r2, [r3, #1]
 8004988:	e00f      	b.n	80049aa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800498a:	78fb      	ldrb	r3, [r7, #3]
 800498c:	f003 020f 	and.w	r2, r3, #15
 8004990:	4613      	mov	r3, r2
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	4413      	add	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	4413      	add	r3, r2
 80049a0:	3304      	adds	r3, #4
 80049a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <HAL_PCD_EP_ClrStall+0x86>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e00e      	b.n	80049e8 <HAL_PCD_EP_ClrStall+0xa4>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68f9      	ldr	r1, [r7, #12]
 80049d8:	4618      	mov	r0, r3
 80049da:	f003 fa4f 	bl	8007e7c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80049fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	da0c      	bge.n	8004a1e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	f003 020f 	and.w	r2, r3, #15
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	3338      	adds	r3, #56	; 0x38
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	4413      	add	r3, r2
 8004a18:	3304      	adds	r3, #4
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	e00c      	b.n	8004a38 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a1e:	78fb      	ldrb	r3, [r7, #3]
 8004a20:	f003 020f 	and.w	r2, r3, #15
 8004a24:	4613      	mov	r3, r2
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	4413      	add	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	4413      	add	r3, r2
 8004a34:	3304      	adds	r3, #4
 8004a36:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68f9      	ldr	r1, [r7, #12]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f003 f86e 	bl	8007b20 <USB_EPStopXfer>
 8004a44:	4603      	mov	r3, r0
 8004a46:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a48:	7afb      	ldrb	r3, [r7, #11]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b08a      	sub	sp, #40	; 0x28
 8004a56:	af02      	add	r7, sp, #8
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	3338      	adds	r3, #56	; 0x38
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	4413      	add	r3, r2
 8004a76:	3304      	adds	r3, #4
 8004a78:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a1a      	ldr	r2, [r3, #32]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d901      	bls.n	8004a8a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e06c      	b.n	8004b64 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	69fa      	ldr	r2, [r7, #28]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d902      	bls.n	8004aa6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	3303      	adds	r3, #3
 8004aaa:	089b      	lsrs	r3, r3, #2
 8004aac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004aae:	e02b      	b.n	8004b08 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	699a      	ldr	r2, [r3, #24]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	69fa      	ldr	r2, [r7, #28]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d902      	bls.n	8004acc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	3303      	adds	r3, #3
 8004ad0:	089b      	lsrs	r3, r3, #2
 8004ad2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6919      	ldr	r1, [r3, #16]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	4603      	mov	r3, r0
 8004aea:	6978      	ldr	r0, [r7, #20]
 8004aec:	f003 f8c2 	bl	8007c74 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	441a      	add	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a1a      	ldr	r2, [r3, #32]
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	441a      	add	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d809      	bhi.n	8004b32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a1a      	ldr	r2, [r3, #32]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d203      	bcs.n	8004b32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1be      	bne.n	8004ab0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d811      	bhi.n	8004b62 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	2201      	movs	r2, #1
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	43db      	mvns	r3, r3
 8004b58:	6939      	ldr	r1, [r7, #16]
 8004b5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b5e:	4013      	ands	r3, r2
 8004b60:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3720      	adds	r7, #32
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b088      	sub	sp, #32
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	333c      	adds	r3, #60	; 0x3c
 8004b84:	3304      	adds	r3, #4
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d17b      	bne.n	8004c9a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d015      	beq.n	8004bd8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	4a61      	ldr	r2, [pc, #388]	; (8004d34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	f240 80b9 	bls.w	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 80b3 	beq.w	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bd4:	6093      	str	r3, [r2, #8]
 8004bd6:	e0a7      	b.n	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d009      	beq.n	8004bf6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bee:	461a      	mov	r2, r3
 8004bf0:	2320      	movs	r3, #32
 8004bf2:	6093      	str	r3, [r2, #8]
 8004bf4:	e098      	b.n	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f040 8093 	bne.w	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	4a4b      	ldr	r2, [pc, #300]	; (8004d34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d90f      	bls.n	8004c2a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c20:	461a      	mov	r2, r3
 8004c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c26:	6093      	str	r3, [r2, #8]
 8004c28:	e07e      	b.n	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	69da      	ldr	r2, [r3, #28]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	0159      	lsls	r1, r3, #5
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	440b      	add	r3, r1
 8004c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c56:	1ad2      	subs	r2, r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d114      	bne.n	8004c8c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d109      	bne.n	8004c7e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c74:	461a      	mov	r2, r3
 8004c76:	2101      	movs	r1, #1
 8004c78:	f003 fa92 	bl	80081a0 <USB_EP0_OutStart>
 8004c7c:	e006      	b.n	8004c8c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	691a      	ldr	r2, [r3, #16]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	441a      	add	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	4619      	mov	r1, r3
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f005 fd5e 	bl	800a754 <HAL_PCD_DataOutStageCallback>
 8004c98:	e046      	b.n	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	4a26      	ldr	r2, [pc, #152]	; (8004d38 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d124      	bne.n	8004cec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cbe:	6093      	str	r3, [r2, #8]
 8004cc0:	e032      	b.n	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d008      	beq.n	8004cde <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd8:	461a      	mov	r2, r3
 8004cda:	2320      	movs	r3, #32
 8004cdc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f005 fd35 	bl	800a754 <HAL_PCD_DataOutStageCallback>
 8004cea:	e01d      	b.n	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d114      	bne.n	8004d1c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d108      	bne.n	8004d1c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6818      	ldr	r0, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d14:	461a      	mov	r2, r3
 8004d16:	2100      	movs	r1, #0
 8004d18:	f003 fa42 	bl	80081a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	4619      	mov	r1, r3
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f005 fd16 	bl	800a754 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3720      	adds	r7, #32
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	4f54300a 	.word	0x4f54300a
 8004d38:	4f54310a 	.word	0x4f54310a

08004d3c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	333c      	adds	r3, #60	; 0x3c
 8004d54:	3304      	adds	r3, #4
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4a15      	ldr	r2, [pc, #84]	; (8004dc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d90e      	bls.n	8004d90 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d009      	beq.n	8004d90 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d88:	461a      	mov	r2, r3
 8004d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d8e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f005 fccd 	bl	800a730 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4a0a      	ldr	r2, [pc, #40]	; (8004dc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d90c      	bls.n	8004db8 <PCD_EP_OutSetupPacket_int+0x7c>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d108      	bne.n	8004db8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6818      	ldr	r0, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004db0:	461a      	mov	r2, r3
 8004db2:	2101      	movs	r1, #1
 8004db4:	f003 f9f4 	bl	80081a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	4f54300a 	.word	0x4f54300a

08004dc8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	70fb      	strb	r3, [r7, #3]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d107      	bne.n	8004df6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004de6:	883b      	ldrh	r3, [r7, #0]
 8004de8:	0419      	lsls	r1, r3, #16
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	629a      	str	r2, [r3, #40]	; 0x28
 8004df4:	e028      	b.n	8004e48 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	0c1b      	lsrs	r3, r3, #16
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	4413      	add	r3, r2
 8004e02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e04:	2300      	movs	r3, #0
 8004e06:	73fb      	strb	r3, [r7, #15]
 8004e08:	e00d      	b.n	8004e26 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
 8004e10:	3340      	adds	r3, #64	; 0x40
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	0c1b      	lsrs	r3, r3, #16
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
 8004e22:	3301      	adds	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
 8004e26:	7bfa      	ldrb	r2, [r7, #15]
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d3ec      	bcc.n	8004e0a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004e30:	883b      	ldrh	r3, [r7, #0]
 8004e32:	0418      	lsls	r0, r3, #16
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6819      	ldr	r1, [r3, #0]
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	4302      	orrs	r2, r0
 8004e40:	3340      	adds	r3, #64	; 0x40
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	887a      	ldrh	r2, [r7, #2]
 8004e68:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	460b      	mov	r3, r1
 8004e82:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e267      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d075      	beq.n	8004f9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eae:	4b88      	ldr	r3, [pc, #544]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 030c 	and.w	r3, r3, #12
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d00c      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eba:	4b85      	ldr	r3, [pc, #532]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d112      	bne.n	8004eec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ec6:	4b82      	ldr	r3, [pc, #520]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ece:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ed2:	d10b      	bne.n	8004eec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed4:	4b7e      	ldr	r3, [pc, #504]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d05b      	beq.n	8004f98 <HAL_RCC_OscConfig+0x108>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d157      	bne.n	8004f98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e242      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef4:	d106      	bne.n	8004f04 <HAL_RCC_OscConfig+0x74>
 8004ef6:	4b76      	ldr	r3, [pc, #472]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a75      	ldr	r2, [pc, #468]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	e01d      	b.n	8004f40 <HAL_RCC_OscConfig+0xb0>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCC_OscConfig+0x98>
 8004f0e:	4b70      	ldr	r3, [pc, #448]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a6f      	ldr	r2, [pc, #444]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	4b6d      	ldr	r3, [pc, #436]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a6c      	ldr	r2, [pc, #432]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	e00b      	b.n	8004f40 <HAL_RCC_OscConfig+0xb0>
 8004f28:	4b69      	ldr	r3, [pc, #420]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a68      	ldr	r2, [pc, #416]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	4b66      	ldr	r3, [pc, #408]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a65      	ldr	r2, [pc, #404]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d013      	beq.n	8004f70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f48:	f7fd fa6e 	bl	8002428 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f50:	f7fd fa6a 	bl	8002428 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b64      	cmp	r3, #100	; 0x64
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e207      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f62:	4b5b      	ldr	r3, [pc, #364]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCC_OscConfig+0xc0>
 8004f6e:	e014      	b.n	8004f9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f70:	f7fd fa5a 	bl	8002428 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f78:	f7fd fa56 	bl	8002428 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b64      	cmp	r3, #100	; 0x64
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e1f3      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8a:	4b51      	ldr	r3, [pc, #324]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f0      	bne.n	8004f78 <HAL_RCC_OscConfig+0xe8>
 8004f96:	e000      	b.n	8004f9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d063      	beq.n	800506e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fa6:	4b4a      	ldr	r3, [pc, #296]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00b      	beq.n	8004fca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fb2:	4b47      	ldr	r3, [pc, #284]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d11c      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fbe:	4b44      	ldr	r3, [pc, #272]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d116      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fca:	4b41      	ldr	r3, [pc, #260]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d005      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x152>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d001      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e1c7      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe2:	4b3b      	ldr	r3, [pc, #236]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4937      	ldr	r1, [pc, #220]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ff6:	e03a      	b.n	800506e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d020      	beq.n	8005042 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005000:	4b34      	ldr	r3, [pc, #208]	; (80050d4 <HAL_RCC_OscConfig+0x244>)
 8005002:	2201      	movs	r2, #1
 8005004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005006:	f7fd fa0f 	bl	8002428 <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800500e:	f7fd fa0b 	bl	8002428 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e1a8      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005020:	4b2b      	ldr	r3, [pc, #172]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f0      	beq.n	800500e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800502c:	4b28      	ldr	r3, [pc, #160]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	4925      	ldr	r1, [pc, #148]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 800503c:	4313      	orrs	r3, r2
 800503e:	600b      	str	r3, [r1, #0]
 8005040:	e015      	b.n	800506e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005042:	4b24      	ldr	r3, [pc, #144]	; (80050d4 <HAL_RCC_OscConfig+0x244>)
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005048:	f7fd f9ee 	bl	8002428 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005050:	f7fd f9ea 	bl	8002428 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e187      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005062:	4b1b      	ldr	r3, [pc, #108]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d036      	beq.n	80050e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d016      	beq.n	80050b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005082:	4b15      	ldr	r3, [pc, #84]	; (80050d8 <HAL_RCC_OscConfig+0x248>)
 8005084:	2201      	movs	r2, #1
 8005086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005088:	f7fd f9ce 	bl	8002428 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005090:	f7fd f9ca 	bl	8002428 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e167      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a2:	4b0b      	ldr	r3, [pc, #44]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 80050a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCC_OscConfig+0x200>
 80050ae:	e01b      	b.n	80050e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050b0:	4b09      	ldr	r3, [pc, #36]	; (80050d8 <HAL_RCC_OscConfig+0x248>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b6:	f7fd f9b7 	bl	8002428 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050bc:	e00e      	b.n	80050dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050be:	f7fd f9b3 	bl	8002428 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d907      	bls.n	80050dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e150      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
 80050d0:	40023800 	.word	0x40023800
 80050d4:	42470000 	.word	0x42470000
 80050d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050dc:	4b88      	ldr	r3, [pc, #544]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80050de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1ea      	bne.n	80050be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 8097 	beq.w	8005224 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050f6:	2300      	movs	r3, #0
 80050f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050fa:	4b81      	ldr	r3, [pc, #516]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10f      	bne.n	8005126 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005106:	2300      	movs	r3, #0
 8005108:	60bb      	str	r3, [r7, #8]
 800510a:	4b7d      	ldr	r3, [pc, #500]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	4a7c      	ldr	r2, [pc, #496]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005114:	6413      	str	r3, [r2, #64]	; 0x40
 8005116:	4b7a      	ldr	r3, [pc, #488]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511e:	60bb      	str	r3, [r7, #8]
 8005120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005122:	2301      	movs	r3, #1
 8005124:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005126:	4b77      	ldr	r3, [pc, #476]	; (8005304 <HAL_RCC_OscConfig+0x474>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512e:	2b00      	cmp	r3, #0
 8005130:	d118      	bne.n	8005164 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005132:	4b74      	ldr	r3, [pc, #464]	; (8005304 <HAL_RCC_OscConfig+0x474>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a73      	ldr	r2, [pc, #460]	; (8005304 <HAL_RCC_OscConfig+0x474>)
 8005138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800513c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800513e:	f7fd f973 	bl	8002428 <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005144:	e008      	b.n	8005158 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005146:	f7fd f96f 	bl	8002428 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e10c      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005158:	4b6a      	ldr	r3, [pc, #424]	; (8005304 <HAL_RCC_OscConfig+0x474>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0f0      	beq.n	8005146 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d106      	bne.n	800517a <HAL_RCC_OscConfig+0x2ea>
 800516c:	4b64      	ldr	r3, [pc, #400]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 800516e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005170:	4a63      	ldr	r2, [pc, #396]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005172:	f043 0301 	orr.w	r3, r3, #1
 8005176:	6713      	str	r3, [r2, #112]	; 0x70
 8005178:	e01c      	b.n	80051b4 <HAL_RCC_OscConfig+0x324>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2b05      	cmp	r3, #5
 8005180:	d10c      	bne.n	800519c <HAL_RCC_OscConfig+0x30c>
 8005182:	4b5f      	ldr	r3, [pc, #380]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005186:	4a5e      	ldr	r2, [pc, #376]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005188:	f043 0304 	orr.w	r3, r3, #4
 800518c:	6713      	str	r3, [r2, #112]	; 0x70
 800518e:	4b5c      	ldr	r3, [pc, #368]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005192:	4a5b      	ldr	r2, [pc, #364]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005194:	f043 0301 	orr.w	r3, r3, #1
 8005198:	6713      	str	r3, [r2, #112]	; 0x70
 800519a:	e00b      	b.n	80051b4 <HAL_RCC_OscConfig+0x324>
 800519c:	4b58      	ldr	r3, [pc, #352]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 800519e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a0:	4a57      	ldr	r2, [pc, #348]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	6713      	str	r3, [r2, #112]	; 0x70
 80051a8:	4b55      	ldr	r3, [pc, #340]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80051aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ac:	4a54      	ldr	r2, [pc, #336]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80051ae:	f023 0304 	bic.w	r3, r3, #4
 80051b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d015      	beq.n	80051e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051bc:	f7fd f934 	bl	8002428 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c2:	e00a      	b.n	80051da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c4:	f7fd f930 	bl	8002428 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e0cb      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051da:	4b49      	ldr	r3, [pc, #292]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0ee      	beq.n	80051c4 <HAL_RCC_OscConfig+0x334>
 80051e6:	e014      	b.n	8005212 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e8:	f7fd f91e 	bl	8002428 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ee:	e00a      	b.n	8005206 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051f0:	f7fd f91a 	bl	8002428 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fe:	4293      	cmp	r3, r2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e0b5      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005206:	4b3e      	ldr	r3, [pc, #248]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1ee      	bne.n	80051f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005212:	7dfb      	ldrb	r3, [r7, #23]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d105      	bne.n	8005224 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005218:	4b39      	ldr	r3, [pc, #228]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	4a38      	ldr	r2, [pc, #224]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 800521e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005222:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 80a1 	beq.w	8005370 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800522e:	4b34      	ldr	r3, [pc, #208]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 030c 	and.w	r3, r3, #12
 8005236:	2b08      	cmp	r3, #8
 8005238:	d05c      	beq.n	80052f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d141      	bne.n	80052c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005242:	4b31      	ldr	r3, [pc, #196]	; (8005308 <HAL_RCC_OscConfig+0x478>)
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005248:	f7fd f8ee 	bl	8002428 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005250:	f7fd f8ea 	bl	8002428 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e087      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005262:	4b27      	ldr	r3, [pc, #156]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69da      	ldr	r2, [r3, #28]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	019b      	lsls	r3, r3, #6
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005284:	085b      	lsrs	r3, r3, #1
 8005286:	3b01      	subs	r3, #1
 8005288:	041b      	lsls	r3, r3, #16
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	061b      	lsls	r3, r3, #24
 8005292:	491b      	ldr	r1, [pc, #108]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005294:	4313      	orrs	r3, r2
 8005296:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005298:	4b1b      	ldr	r3, [pc, #108]	; (8005308 <HAL_RCC_OscConfig+0x478>)
 800529a:	2201      	movs	r2, #1
 800529c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529e:	f7fd f8c3 	bl	8002428 <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a4:	e008      	b.n	80052b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a6:	f7fd f8bf 	bl	8002428 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e05c      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b8:	4b11      	ldr	r3, [pc, #68]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0f0      	beq.n	80052a6 <HAL_RCC_OscConfig+0x416>
 80052c4:	e054      	b.n	8005370 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c6:	4b10      	ldr	r3, [pc, #64]	; (8005308 <HAL_RCC_OscConfig+0x478>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052cc:	f7fd f8ac 	bl	8002428 <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052d4:	f7fd f8a8 	bl	8002428 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e045      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e6:	4b06      	ldr	r3, [pc, #24]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f0      	bne.n	80052d4 <HAL_RCC_OscConfig+0x444>
 80052f2:	e03d      	b.n	8005370 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d107      	bne.n	800530c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e038      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
 8005300:	40023800 	.word	0x40023800
 8005304:	40007000 	.word	0x40007000
 8005308:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800530c:	4b1b      	ldr	r3, [pc, #108]	; (800537c <HAL_RCC_OscConfig+0x4ec>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d028      	beq.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005324:	429a      	cmp	r2, r3
 8005326:	d121      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005332:	429a      	cmp	r2, r3
 8005334:	d11a      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800533c:	4013      	ands	r3, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005342:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005344:	4293      	cmp	r3, r2
 8005346:	d111      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005352:	085b      	lsrs	r3, r3, #1
 8005354:	3b01      	subs	r3, #1
 8005356:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005358:	429a      	cmp	r2, r3
 800535a:	d107      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005366:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005368:	429a      	cmp	r2, r3
 800536a:	d001      	beq.n	8005370 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40023800 	.word	0x40023800

08005380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0cc      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005394:	4b68      	ldr	r3, [pc, #416]	; (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d90c      	bls.n	80053bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a2:	4b65      	ldr	r3, [pc, #404]	; (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053aa:	4b63      	ldr	r3, [pc, #396]	; (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d001      	beq.n	80053bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e0b8      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d020      	beq.n	800540a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053d4:	4b59      	ldr	r3, [pc, #356]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	4a58      	ldr	r2, [pc, #352]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053ec:	4b53      	ldr	r3, [pc, #332]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	4a52      	ldr	r2, [pc, #328]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f8:	4b50      	ldr	r3, [pc, #320]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	494d      	ldr	r1, [pc, #308]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005406:	4313      	orrs	r3, r2
 8005408:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d044      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d107      	bne.n	800542e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541e:	4b47      	ldr	r3, [pc, #284]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d119      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e07f      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d003      	beq.n	800543e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800543a:	2b03      	cmp	r3, #3
 800543c:	d107      	bne.n	800544e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543e:	4b3f      	ldr	r3, [pc, #252]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e06f      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544e:	4b3b      	ldr	r3, [pc, #236]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e067      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800545e:	4b37      	ldr	r3, [pc, #220]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f023 0203 	bic.w	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4934      	ldr	r1, [pc, #208]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 800546c:	4313      	orrs	r3, r2
 800546e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005470:	f7fc ffda 	bl	8002428 <HAL_GetTick>
 8005474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005476:	e00a      	b.n	800548e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005478:	f7fc ffd6 	bl	8002428 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	f241 3288 	movw	r2, #5000	; 0x1388
 8005486:	4293      	cmp	r3, r2
 8005488:	d901      	bls.n	800548e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e04f      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548e:	4b2b      	ldr	r3, [pc, #172]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 020c 	and.w	r2, r3, #12
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	429a      	cmp	r2, r3
 800549e:	d1eb      	bne.n	8005478 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054a0:	4b25      	ldr	r3, [pc, #148]	; (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d20c      	bcs.n	80054c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ae:	4b22      	ldr	r3, [pc, #136]	; (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b6:	4b20      	ldr	r3, [pc, #128]	; (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d001      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e032      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d008      	beq.n	80054e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054d4:	4b19      	ldr	r3, [pc, #100]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4916      	ldr	r1, [pc, #88]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054f2:	4b12      	ldr	r3, [pc, #72]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	490e      	ldr	r1, [pc, #56]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005502:	4313      	orrs	r3, r2
 8005504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005506:	f000 f821 	bl	800554c <HAL_RCC_GetSysClockFreq>
 800550a:	4602      	mov	r2, r0
 800550c:	4b0b      	ldr	r3, [pc, #44]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	490a      	ldr	r1, [pc, #40]	; (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 8005518:	5ccb      	ldrb	r3, [r1, r3]
 800551a:	fa22 f303 	lsr.w	r3, r2, r3
 800551e:	4a09      	ldr	r2, [pc, #36]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 8005520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005522:	4b09      	ldr	r3, [pc, #36]	; (8005548 <HAL_RCC_ClockConfig+0x1c8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	f7fc ff3a 	bl	80023a0 <HAL_InitTick>

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	40023c00 	.word	0x40023c00
 800553c:	40023800 	.word	0x40023800
 8005540:	0800eca4 	.word	0x0800eca4
 8005544:	20000000 	.word	0x20000000
 8005548:	20000004 	.word	0x20000004

0800554c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800554c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005550:	b094      	sub	sp, #80	; 0x50
 8005552:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	647b      	str	r3, [r7, #68]	; 0x44
 8005558:	2300      	movs	r3, #0
 800555a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800555c:	2300      	movs	r3, #0
 800555e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005564:	4b79      	ldr	r3, [pc, #484]	; (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 030c 	and.w	r3, r3, #12
 800556c:	2b08      	cmp	r3, #8
 800556e:	d00d      	beq.n	800558c <HAL_RCC_GetSysClockFreq+0x40>
 8005570:	2b08      	cmp	r3, #8
 8005572:	f200 80e1 	bhi.w	8005738 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <HAL_RCC_GetSysClockFreq+0x34>
 800557a:	2b04      	cmp	r3, #4
 800557c:	d003      	beq.n	8005586 <HAL_RCC_GetSysClockFreq+0x3a>
 800557e:	e0db      	b.n	8005738 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005580:	4b73      	ldr	r3, [pc, #460]	; (8005750 <HAL_RCC_GetSysClockFreq+0x204>)
 8005582:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005584:	e0db      	b.n	800573e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005586:	4b72      	ldr	r3, [pc, #456]	; (8005750 <HAL_RCC_GetSysClockFreq+0x204>)
 8005588:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800558a:	e0d8      	b.n	800573e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800558c:	4b6f      	ldr	r3, [pc, #444]	; (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005594:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005596:	4b6d      	ldr	r3, [pc, #436]	; (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d063      	beq.n	800566a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055a2:	4b6a      	ldr	r3, [pc, #424]	; (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	099b      	lsrs	r3, r3, #6
 80055a8:	2200      	movs	r2, #0
 80055aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80055ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80055ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b4:	633b      	str	r3, [r7, #48]	; 0x30
 80055b6:	2300      	movs	r3, #0
 80055b8:	637b      	str	r3, [r7, #52]	; 0x34
 80055ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80055be:	4622      	mov	r2, r4
 80055c0:	462b      	mov	r3, r5
 80055c2:	f04f 0000 	mov.w	r0, #0
 80055c6:	f04f 0100 	mov.w	r1, #0
 80055ca:	0159      	lsls	r1, r3, #5
 80055cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055d0:	0150      	lsls	r0, r2, #5
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4621      	mov	r1, r4
 80055d8:	1a51      	subs	r1, r2, r1
 80055da:	6139      	str	r1, [r7, #16]
 80055dc:	4629      	mov	r1, r5
 80055de:	eb63 0301 	sbc.w	r3, r3, r1
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055f0:	4659      	mov	r1, fp
 80055f2:	018b      	lsls	r3, r1, #6
 80055f4:	4651      	mov	r1, sl
 80055f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055fa:	4651      	mov	r1, sl
 80055fc:	018a      	lsls	r2, r1, #6
 80055fe:	4651      	mov	r1, sl
 8005600:	ebb2 0801 	subs.w	r8, r2, r1
 8005604:	4659      	mov	r1, fp
 8005606:	eb63 0901 	sbc.w	r9, r3, r1
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005616:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800561a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800561e:	4690      	mov	r8, r2
 8005620:	4699      	mov	r9, r3
 8005622:	4623      	mov	r3, r4
 8005624:	eb18 0303 	adds.w	r3, r8, r3
 8005628:	60bb      	str	r3, [r7, #8]
 800562a:	462b      	mov	r3, r5
 800562c:	eb49 0303 	adc.w	r3, r9, r3
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	f04f 0200 	mov.w	r2, #0
 8005636:	f04f 0300 	mov.w	r3, #0
 800563a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800563e:	4629      	mov	r1, r5
 8005640:	028b      	lsls	r3, r1, #10
 8005642:	4621      	mov	r1, r4
 8005644:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005648:	4621      	mov	r1, r4
 800564a:	028a      	lsls	r2, r1, #10
 800564c:	4610      	mov	r0, r2
 800564e:	4619      	mov	r1, r3
 8005650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005652:	2200      	movs	r2, #0
 8005654:	62bb      	str	r3, [r7, #40]	; 0x28
 8005656:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005658:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800565c:	f7fb faf4 	bl	8000c48 <__aeabi_uldivmod>
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	4613      	mov	r3, r2
 8005666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005668:	e058      	b.n	800571c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800566a:	4b38      	ldr	r3, [pc, #224]	; (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	099b      	lsrs	r3, r3, #6
 8005670:	2200      	movs	r2, #0
 8005672:	4618      	mov	r0, r3
 8005674:	4611      	mov	r1, r2
 8005676:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800567a:	623b      	str	r3, [r7, #32]
 800567c:	2300      	movs	r3, #0
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
 8005680:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005684:	4642      	mov	r2, r8
 8005686:	464b      	mov	r3, r9
 8005688:	f04f 0000 	mov.w	r0, #0
 800568c:	f04f 0100 	mov.w	r1, #0
 8005690:	0159      	lsls	r1, r3, #5
 8005692:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005696:	0150      	lsls	r0, r2, #5
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4641      	mov	r1, r8
 800569e:	ebb2 0a01 	subs.w	sl, r2, r1
 80056a2:	4649      	mov	r1, r9
 80056a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	f04f 0300 	mov.w	r3, #0
 80056b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80056bc:	ebb2 040a 	subs.w	r4, r2, sl
 80056c0:	eb63 050b 	sbc.w	r5, r3, fp
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	00eb      	lsls	r3, r5, #3
 80056ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056d2:	00e2      	lsls	r2, r4, #3
 80056d4:	4614      	mov	r4, r2
 80056d6:	461d      	mov	r5, r3
 80056d8:	4643      	mov	r3, r8
 80056da:	18e3      	adds	r3, r4, r3
 80056dc:	603b      	str	r3, [r7, #0]
 80056de:	464b      	mov	r3, r9
 80056e0:	eb45 0303 	adc.w	r3, r5, r3
 80056e4:	607b      	str	r3, [r7, #4]
 80056e6:	f04f 0200 	mov.w	r2, #0
 80056ea:	f04f 0300 	mov.w	r3, #0
 80056ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056f2:	4629      	mov	r1, r5
 80056f4:	028b      	lsls	r3, r1, #10
 80056f6:	4621      	mov	r1, r4
 80056f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056fc:	4621      	mov	r1, r4
 80056fe:	028a      	lsls	r2, r1, #10
 8005700:	4610      	mov	r0, r2
 8005702:	4619      	mov	r1, r3
 8005704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005706:	2200      	movs	r2, #0
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	61fa      	str	r2, [r7, #28]
 800570c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005710:	f7fb fa9a 	bl	8000c48 <__aeabi_uldivmod>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4613      	mov	r3, r2
 800571a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800571c:	4b0b      	ldr	r3, [pc, #44]	; (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	0c1b      	lsrs	r3, r3, #16
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	3301      	adds	r3, #1
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800572c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800572e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005730:	fbb2 f3f3 	udiv	r3, r2, r3
 8005734:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005736:	e002      	b.n	800573e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005738:	4b05      	ldr	r3, [pc, #20]	; (8005750 <HAL_RCC_GetSysClockFreq+0x204>)
 800573a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800573c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800573e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005740:	4618      	mov	r0, r3
 8005742:	3750      	adds	r7, #80	; 0x50
 8005744:	46bd      	mov	sp, r7
 8005746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800574a:	bf00      	nop
 800574c:	40023800 	.word	0x40023800
 8005750:	00f42400 	.word	0x00f42400

08005754 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005758:	4b03      	ldr	r3, [pc, #12]	; (8005768 <HAL_RCC_GetHCLKFreq+0x14>)
 800575a:	681b      	ldr	r3, [r3, #0]
}
 800575c:	4618      	mov	r0, r3
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	20000000 	.word	0x20000000

0800576c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005770:	f7ff fff0 	bl	8005754 <HAL_RCC_GetHCLKFreq>
 8005774:	4602      	mov	r2, r0
 8005776:	4b05      	ldr	r3, [pc, #20]	; (800578c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	0a9b      	lsrs	r3, r3, #10
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	4903      	ldr	r1, [pc, #12]	; (8005790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005782:	5ccb      	ldrb	r3, [r1, r3]
 8005784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005788:	4618      	mov	r0, r3
 800578a:	bd80      	pop	{r7, pc}
 800578c:	40023800 	.word	0x40023800
 8005790:	0800ecb4 	.word	0x0800ecb4

08005794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005798:	f7ff ffdc 	bl	8005754 <HAL_RCC_GetHCLKFreq>
 800579c:	4602      	mov	r2, r0
 800579e:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	0b5b      	lsrs	r3, r3, #13
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	4903      	ldr	r1, [pc, #12]	; (80057b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057aa:	5ccb      	ldrb	r3, [r1, r3]
 80057ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	40023800 	.word	0x40023800
 80057b8:	0800ecb4 	.word	0x0800ecb4

080057bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e07b      	b.n	80058c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d108      	bne.n	80057e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057de:	d009      	beq.n	80057f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	61da      	str	r2, [r3, #28]
 80057e6:	e005      	b.n	80057f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d106      	bne.n	8005814 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7fc fad0 	bl	8001db4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2202      	movs	r2, #2
 8005818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800582a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800583c:	431a      	orrs	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	431a      	orrs	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	431a      	orrs	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005864:	431a      	orrs	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800586e:	431a      	orrs	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005878:	ea42 0103 	orr.w	r1, r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005880:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	0c1b      	lsrs	r3, r3, #16
 8005892:	f003 0104 	and.w	r1, r3, #4
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	f003 0210 	and.w	r2, r3, #16
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69da      	ldr	r2, [r3, #28]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b082      	sub	sp, #8
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e041      	b.n	8005964 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d106      	bne.n	80058fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7fc fac5 	bl	8001e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2202      	movs	r2, #2
 80058fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3304      	adds	r3, #4
 800590a:	4619      	mov	r1, r3
 800590c:	4610      	mov	r0, r2
 800590e:	f000 fa11 	bl	8005d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e041      	b.n	8005a02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d106      	bne.n	8005998 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f839 	bl	8005a0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3304      	adds	r3, #4
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f000 f9c2 	bl	8005d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a12:	bf00      	nop
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
	...

08005a20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	e0ae      	b.n	8005b9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b0c      	cmp	r3, #12
 8005a4a:	f200 809f 	bhi.w	8005b8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a4e:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005a89 	.word	0x08005a89
 8005a58:	08005b8d 	.word	0x08005b8d
 8005a5c:	08005b8d 	.word	0x08005b8d
 8005a60:	08005b8d 	.word	0x08005b8d
 8005a64:	08005ac9 	.word	0x08005ac9
 8005a68:	08005b8d 	.word	0x08005b8d
 8005a6c:	08005b8d 	.word	0x08005b8d
 8005a70:	08005b8d 	.word	0x08005b8d
 8005a74:	08005b0b 	.word	0x08005b0b
 8005a78:	08005b8d 	.word	0x08005b8d
 8005a7c:	08005b8d 	.word	0x08005b8d
 8005a80:	08005b8d 	.word	0x08005b8d
 8005a84:	08005b4b 	.word	0x08005b4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 f9f0 	bl	8005e74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0208 	orr.w	r2, r2, #8
 8005aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699a      	ldr	r2, [r3, #24]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0204 	bic.w	r2, r2, #4
 8005ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6999      	ldr	r1, [r3, #24]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	691a      	ldr	r2, [r3, #16]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	619a      	str	r2, [r3, #24]
      break;
 8005ac6:	e064      	b.n	8005b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 fa40 	bl	8005f54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	699a      	ldr	r2, [r3, #24]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6999      	ldr	r1, [r3, #24]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	021a      	lsls	r2, r3, #8
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	619a      	str	r2, [r3, #24]
      break;
 8005b08:	e043      	b.n	8005b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68b9      	ldr	r1, [r7, #8]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 fa95 	bl	8006040 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f042 0208 	orr.w	r2, r2, #8
 8005b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69da      	ldr	r2, [r3, #28]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0204 	bic.w	r2, r2, #4
 8005b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69d9      	ldr	r1, [r3, #28]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	61da      	str	r2, [r3, #28]
      break;
 8005b48:	e023      	b.n	8005b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 fae9 	bl	8006128 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69da      	ldr	r2, [r3, #28]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69da      	ldr	r2, [r3, #28]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69d9      	ldr	r1, [r3, #28]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	021a      	lsls	r2, r3, #8
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	61da      	str	r2, [r3, #28]
      break;
 8005b8a:	e002      	b.n	8005b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <HAL_TIM_ConfigClockSource+0x1c>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e0b4      	b.n	8005d2a <HAL_TIM_ConfigClockSource+0x186>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005be6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bf8:	d03e      	beq.n	8005c78 <HAL_TIM_ConfigClockSource+0xd4>
 8005bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bfe:	f200 8087 	bhi.w	8005d10 <HAL_TIM_ConfigClockSource+0x16c>
 8005c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c06:	f000 8086 	beq.w	8005d16 <HAL_TIM_ConfigClockSource+0x172>
 8005c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0e:	d87f      	bhi.n	8005d10 <HAL_TIM_ConfigClockSource+0x16c>
 8005c10:	2b70      	cmp	r3, #112	; 0x70
 8005c12:	d01a      	beq.n	8005c4a <HAL_TIM_ConfigClockSource+0xa6>
 8005c14:	2b70      	cmp	r3, #112	; 0x70
 8005c16:	d87b      	bhi.n	8005d10 <HAL_TIM_ConfigClockSource+0x16c>
 8005c18:	2b60      	cmp	r3, #96	; 0x60
 8005c1a:	d050      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0x11a>
 8005c1c:	2b60      	cmp	r3, #96	; 0x60
 8005c1e:	d877      	bhi.n	8005d10 <HAL_TIM_ConfigClockSource+0x16c>
 8005c20:	2b50      	cmp	r3, #80	; 0x50
 8005c22:	d03c      	beq.n	8005c9e <HAL_TIM_ConfigClockSource+0xfa>
 8005c24:	2b50      	cmp	r3, #80	; 0x50
 8005c26:	d873      	bhi.n	8005d10 <HAL_TIM_ConfigClockSource+0x16c>
 8005c28:	2b40      	cmp	r3, #64	; 0x40
 8005c2a:	d058      	beq.n	8005cde <HAL_TIM_ConfigClockSource+0x13a>
 8005c2c:	2b40      	cmp	r3, #64	; 0x40
 8005c2e:	d86f      	bhi.n	8005d10 <HAL_TIM_ConfigClockSource+0x16c>
 8005c30:	2b30      	cmp	r3, #48	; 0x30
 8005c32:	d064      	beq.n	8005cfe <HAL_TIM_ConfigClockSource+0x15a>
 8005c34:	2b30      	cmp	r3, #48	; 0x30
 8005c36:	d86b      	bhi.n	8005d10 <HAL_TIM_ConfigClockSource+0x16c>
 8005c38:	2b20      	cmp	r3, #32
 8005c3a:	d060      	beq.n	8005cfe <HAL_TIM_ConfigClockSource+0x15a>
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	d867      	bhi.n	8005d10 <HAL_TIM_ConfigClockSource+0x16c>
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d05c      	beq.n	8005cfe <HAL_TIM_ConfigClockSource+0x15a>
 8005c44:	2b10      	cmp	r3, #16
 8005c46:	d05a      	beq.n	8005cfe <HAL_TIM_ConfigClockSource+0x15a>
 8005c48:	e062      	b.n	8005d10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6818      	ldr	r0, [r3, #0]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	6899      	ldr	r1, [r3, #8]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f000 fb35 	bl	80062c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	609a      	str	r2, [r3, #8]
      break;
 8005c76:	e04f      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6818      	ldr	r0, [r3, #0]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	6899      	ldr	r1, [r3, #8]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f000 fb1e 	bl	80062c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c9a:	609a      	str	r2, [r3, #8]
      break;
 8005c9c:	e03c      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6818      	ldr	r0, [r3, #0]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	6859      	ldr	r1, [r3, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	461a      	mov	r2, r3
 8005cac:	f000 fa92 	bl	80061d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2150      	movs	r1, #80	; 0x50
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 faeb 	bl	8006292 <TIM_ITRx_SetConfig>
      break;
 8005cbc:	e02c      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6818      	ldr	r0, [r3, #0]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	6859      	ldr	r1, [r3, #4]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f000 fab1 	bl	8006232 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2160      	movs	r1, #96	; 0x60
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fadb 	bl	8006292 <TIM_ITRx_SetConfig>
      break;
 8005cdc:	e01c      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6818      	ldr	r0, [r3, #0]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	6859      	ldr	r1, [r3, #4]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	461a      	mov	r2, r3
 8005cec:	f000 fa72 	bl	80061d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2140      	movs	r1, #64	; 0x40
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 facb 	bl	8006292 <TIM_ITRx_SetConfig>
      break;
 8005cfc:	e00c      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4619      	mov	r1, r3
 8005d08:	4610      	mov	r0, r2
 8005d0a:	f000 fac2 	bl	8006292 <TIM_ITRx_SetConfig>
      break;
 8005d0e:	e003      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	73fb      	strb	r3, [r7, #15]
      break;
 8005d14:	e000      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a40      	ldr	r2, [pc, #256]	; (8005e48 <TIM_Base_SetConfig+0x114>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d013      	beq.n	8005d74 <TIM_Base_SetConfig+0x40>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d52:	d00f      	beq.n	8005d74 <TIM_Base_SetConfig+0x40>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a3d      	ldr	r2, [pc, #244]	; (8005e4c <TIM_Base_SetConfig+0x118>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d00b      	beq.n	8005d74 <TIM_Base_SetConfig+0x40>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a3c      	ldr	r2, [pc, #240]	; (8005e50 <TIM_Base_SetConfig+0x11c>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d007      	beq.n	8005d74 <TIM_Base_SetConfig+0x40>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a3b      	ldr	r2, [pc, #236]	; (8005e54 <TIM_Base_SetConfig+0x120>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d003      	beq.n	8005d74 <TIM_Base_SetConfig+0x40>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a3a      	ldr	r2, [pc, #232]	; (8005e58 <TIM_Base_SetConfig+0x124>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d108      	bne.n	8005d86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a2f      	ldr	r2, [pc, #188]	; (8005e48 <TIM_Base_SetConfig+0x114>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d02b      	beq.n	8005de6 <TIM_Base_SetConfig+0xb2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d94:	d027      	beq.n	8005de6 <TIM_Base_SetConfig+0xb2>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a2c      	ldr	r2, [pc, #176]	; (8005e4c <TIM_Base_SetConfig+0x118>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d023      	beq.n	8005de6 <TIM_Base_SetConfig+0xb2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a2b      	ldr	r2, [pc, #172]	; (8005e50 <TIM_Base_SetConfig+0x11c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d01f      	beq.n	8005de6 <TIM_Base_SetConfig+0xb2>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a2a      	ldr	r2, [pc, #168]	; (8005e54 <TIM_Base_SetConfig+0x120>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d01b      	beq.n	8005de6 <TIM_Base_SetConfig+0xb2>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a29      	ldr	r2, [pc, #164]	; (8005e58 <TIM_Base_SetConfig+0x124>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d017      	beq.n	8005de6 <TIM_Base_SetConfig+0xb2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a28      	ldr	r2, [pc, #160]	; (8005e5c <TIM_Base_SetConfig+0x128>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d013      	beq.n	8005de6 <TIM_Base_SetConfig+0xb2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a27      	ldr	r2, [pc, #156]	; (8005e60 <TIM_Base_SetConfig+0x12c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d00f      	beq.n	8005de6 <TIM_Base_SetConfig+0xb2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a26      	ldr	r2, [pc, #152]	; (8005e64 <TIM_Base_SetConfig+0x130>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00b      	beq.n	8005de6 <TIM_Base_SetConfig+0xb2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a25      	ldr	r2, [pc, #148]	; (8005e68 <TIM_Base_SetConfig+0x134>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d007      	beq.n	8005de6 <TIM_Base_SetConfig+0xb2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a24      	ldr	r2, [pc, #144]	; (8005e6c <TIM_Base_SetConfig+0x138>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d003      	beq.n	8005de6 <TIM_Base_SetConfig+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a23      	ldr	r2, [pc, #140]	; (8005e70 <TIM_Base_SetConfig+0x13c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d108      	bne.n	8005df8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a0a      	ldr	r2, [pc, #40]	; (8005e48 <TIM_Base_SetConfig+0x114>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d003      	beq.n	8005e2c <TIM_Base_SetConfig+0xf8>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a0c      	ldr	r2, [pc, #48]	; (8005e58 <TIM_Base_SetConfig+0x124>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d103      	bne.n	8005e34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	691a      	ldr	r2, [r3, #16]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	615a      	str	r2, [r3, #20]
}
 8005e3a:	bf00      	nop
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	40010000 	.word	0x40010000
 8005e4c:	40000400 	.word	0x40000400
 8005e50:	40000800 	.word	0x40000800
 8005e54:	40000c00 	.word	0x40000c00
 8005e58:	40010400 	.word	0x40010400
 8005e5c:	40014000 	.word	0x40014000
 8005e60:	40014400 	.word	0x40014400
 8005e64:	40014800 	.word	0x40014800
 8005e68:	40001800 	.word	0x40001800
 8005e6c:	40001c00 	.word	0x40001c00
 8005e70:	40002000 	.word	0x40002000

08005e74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	f023 0201 	bic.w	r2, r3, #1
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0303 	bic.w	r3, r3, #3
 8005eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f023 0302 	bic.w	r3, r3, #2
 8005ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a20      	ldr	r2, [pc, #128]	; (8005f4c <TIM_OC1_SetConfig+0xd8>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d003      	beq.n	8005ed8 <TIM_OC1_SetConfig+0x64>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a1f      	ldr	r2, [pc, #124]	; (8005f50 <TIM_OC1_SetConfig+0xdc>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d10c      	bne.n	8005ef2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f023 0308 	bic.w	r3, r3, #8
 8005ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f023 0304 	bic.w	r3, r3, #4
 8005ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a15      	ldr	r2, [pc, #84]	; (8005f4c <TIM_OC1_SetConfig+0xd8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d003      	beq.n	8005f02 <TIM_OC1_SetConfig+0x8e>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a14      	ldr	r2, [pc, #80]	; (8005f50 <TIM_OC1_SetConfig+0xdc>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d111      	bne.n	8005f26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	621a      	str	r2, [r3, #32]
}
 8005f40:	bf00      	nop
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40010400 	.word	0x40010400

08005f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f023 0210 	bic.w	r2, r3, #16
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	021b      	lsls	r3, r3, #8
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f023 0320 	bic.w	r3, r3, #32
 8005f9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a22      	ldr	r2, [pc, #136]	; (8006038 <TIM_OC2_SetConfig+0xe4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d003      	beq.n	8005fbc <TIM_OC2_SetConfig+0x68>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a21      	ldr	r2, [pc, #132]	; (800603c <TIM_OC2_SetConfig+0xe8>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d10d      	bne.n	8005fd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	011b      	lsls	r3, r3, #4
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a17      	ldr	r2, [pc, #92]	; (8006038 <TIM_OC2_SetConfig+0xe4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d003      	beq.n	8005fe8 <TIM_OC2_SetConfig+0x94>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a16      	ldr	r2, [pc, #88]	; (800603c <TIM_OC2_SetConfig+0xe8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d113      	bne.n	8006010 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	4313      	orrs	r3, r2
 800600e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	621a      	str	r2, [r3, #32]
}
 800602a:	bf00      	nop
 800602c:	371c      	adds	r7, #28
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40010000 	.word	0x40010000
 800603c:	40010400 	.word	0x40010400

08006040 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0303 	bic.w	r3, r3, #3
 8006076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	021b      	lsls	r3, r3, #8
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a21      	ldr	r2, [pc, #132]	; (8006120 <TIM_OC3_SetConfig+0xe0>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d003      	beq.n	80060a6 <TIM_OC3_SetConfig+0x66>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a20      	ldr	r2, [pc, #128]	; (8006124 <TIM_OC3_SetConfig+0xe4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d10d      	bne.n	80060c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	021b      	lsls	r3, r3, #8
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a16      	ldr	r2, [pc, #88]	; (8006120 <TIM_OC3_SetConfig+0xe0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d003      	beq.n	80060d2 <TIM_OC3_SetConfig+0x92>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a15      	ldr	r2, [pc, #84]	; (8006124 <TIM_OC3_SetConfig+0xe4>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d113      	bne.n	80060fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	011b      	lsls	r3, r3, #4
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	621a      	str	r2, [r3, #32]
}
 8006114:	bf00      	nop
 8006116:	371c      	adds	r7, #28
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	40010000 	.word	0x40010000
 8006124:	40010400 	.word	0x40010400

08006128 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800615e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006172:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	031b      	lsls	r3, r3, #12
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	4313      	orrs	r3, r2
 800617e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a12      	ldr	r2, [pc, #72]	; (80061cc <TIM_OC4_SetConfig+0xa4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d003      	beq.n	8006190 <TIM_OC4_SetConfig+0x68>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a11      	ldr	r2, [pc, #68]	; (80061d0 <TIM_OC4_SetConfig+0xa8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d109      	bne.n	80061a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006196:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	019b      	lsls	r3, r3, #6
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	621a      	str	r2, [r3, #32]
}
 80061be:	bf00      	nop
 80061c0:	371c      	adds	r7, #28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	40010000 	.word	0x40010000
 80061d0:	40010400 	.word	0x40010400

080061d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	f023 0201 	bic.w	r2, r3, #1
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4313      	orrs	r3, r2
 8006208:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f023 030a 	bic.w	r3, r3, #10
 8006210:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4313      	orrs	r3, r2
 8006218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	621a      	str	r2, [r3, #32]
}
 8006226:	bf00      	nop
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006232:	b480      	push	{r7}
 8006234:	b087      	sub	sp, #28
 8006236:	af00      	add	r7, sp, #0
 8006238:	60f8      	str	r0, [r7, #12]
 800623a:	60b9      	str	r1, [r7, #8]
 800623c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	f023 0210 	bic.w	r2, r3, #16
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800625c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	031b      	lsls	r3, r3, #12
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	4313      	orrs	r3, r2
 8006266:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800626e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	4313      	orrs	r3, r2
 8006278:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	621a      	str	r2, [r3, #32]
}
 8006286:	bf00      	nop
 8006288:	371c      	adds	r7, #28
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006292:	b480      	push	{r7}
 8006294:	b085      	sub	sp, #20
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	f043 0307 	orr.w	r3, r3, #7
 80062b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	609a      	str	r2, [r3, #8]
}
 80062bc:	bf00      	nop
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	021a      	lsls	r2, r3, #8
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	431a      	orrs	r2, r3
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	609a      	str	r2, [r3, #8]
}
 80062fc:	bf00      	nop
 80062fe:	371c      	adds	r7, #28
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800631c:	2302      	movs	r3, #2
 800631e:	e05a      	b.n	80063d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a21      	ldr	r2, [pc, #132]	; (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d022      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800636c:	d01d      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a1d      	ldr	r2, [pc, #116]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d018      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a1b      	ldr	r2, [pc, #108]	; (80063ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d013      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a1a      	ldr	r2, [pc, #104]	; (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d00e      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a18      	ldr	r2, [pc, #96]	; (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d009      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a17      	ldr	r2, [pc, #92]	; (80063f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d004      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a15      	ldr	r2, [pc, #84]	; (80063fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d10c      	bne.n	80063c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	40010000 	.word	0x40010000
 80063e8:	40000400 	.word	0x40000400
 80063ec:	40000800 	.word	0x40000800
 80063f0:	40000c00 	.word	0x40000c00
 80063f4:	40010400 	.word	0x40010400
 80063f8:	40014000 	.word	0x40014000
 80063fc:	40001800 	.word	0x40001800

08006400 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006414:	2b01      	cmp	r3, #1
 8006416:	d101      	bne.n	800641c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006418:	2302      	movs	r3, #2
 800641a:	e03d      	b.n	8006498 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	4313      	orrs	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	4313      	orrs	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4313      	orrs	r3, r2
 800645a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	4313      	orrs	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e03f      	b.n	8006536 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d106      	bne.n	80064d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fb fd94 	bl	8001ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2224      	movs	r2, #36	; 0x24
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f829 	bl	8006540 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	691a      	ldr	r2, [r3, #16]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	695a      	ldr	r2, [r3, #20]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800650c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68da      	ldr	r2, [r3, #12]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800651c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2220      	movs	r2, #32
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2220      	movs	r2, #32
 8006530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006544:	b0c0      	sub	sp, #256	; 0x100
 8006546:	af00      	add	r7, sp, #0
 8006548:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800654c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800655c:	68d9      	ldr	r1, [r3, #12]
 800655e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	ea40 0301 	orr.w	r3, r0, r1
 8006568:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800656a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	431a      	orrs	r2, r3
 8006578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	431a      	orrs	r2, r3
 8006580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	4313      	orrs	r3, r2
 8006588:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800658c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006598:	f021 010c 	bic.w	r1, r1, #12
 800659c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065a6:	430b      	orrs	r3, r1
 80065a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ba:	6999      	ldr	r1, [r3, #24]
 80065bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	ea40 0301 	orr.w	r3, r0, r1
 80065c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	4b8f      	ldr	r3, [pc, #572]	; (800680c <UART_SetConfig+0x2cc>)
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d005      	beq.n	80065e0 <UART_SetConfig+0xa0>
 80065d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	4b8d      	ldr	r3, [pc, #564]	; (8006810 <UART_SetConfig+0x2d0>)
 80065dc:	429a      	cmp	r2, r3
 80065de:	d104      	bne.n	80065ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065e0:	f7ff f8d8 	bl	8005794 <HAL_RCC_GetPCLK2Freq>
 80065e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80065e8:	e003      	b.n	80065f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065ea:	f7ff f8bf 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 80065ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065fc:	f040 810c 	bne.w	8006818 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006604:	2200      	movs	r2, #0
 8006606:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800660a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800660e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006612:	4622      	mov	r2, r4
 8006614:	462b      	mov	r3, r5
 8006616:	1891      	adds	r1, r2, r2
 8006618:	65b9      	str	r1, [r7, #88]	; 0x58
 800661a:	415b      	adcs	r3, r3
 800661c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800661e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006622:	4621      	mov	r1, r4
 8006624:	eb12 0801 	adds.w	r8, r2, r1
 8006628:	4629      	mov	r1, r5
 800662a:	eb43 0901 	adc.w	r9, r3, r1
 800662e:	f04f 0200 	mov.w	r2, #0
 8006632:	f04f 0300 	mov.w	r3, #0
 8006636:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800663a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800663e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006642:	4690      	mov	r8, r2
 8006644:	4699      	mov	r9, r3
 8006646:	4623      	mov	r3, r4
 8006648:	eb18 0303 	adds.w	r3, r8, r3
 800664c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006650:	462b      	mov	r3, r5
 8006652:	eb49 0303 	adc.w	r3, r9, r3
 8006656:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800665a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006666:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800666a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800666e:	460b      	mov	r3, r1
 8006670:	18db      	adds	r3, r3, r3
 8006672:	653b      	str	r3, [r7, #80]	; 0x50
 8006674:	4613      	mov	r3, r2
 8006676:	eb42 0303 	adc.w	r3, r2, r3
 800667a:	657b      	str	r3, [r7, #84]	; 0x54
 800667c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006680:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006684:	f7fa fae0 	bl	8000c48 <__aeabi_uldivmod>
 8006688:	4602      	mov	r2, r0
 800668a:	460b      	mov	r3, r1
 800668c:	4b61      	ldr	r3, [pc, #388]	; (8006814 <UART_SetConfig+0x2d4>)
 800668e:	fba3 2302 	umull	r2, r3, r3, r2
 8006692:	095b      	lsrs	r3, r3, #5
 8006694:	011c      	lsls	r4, r3, #4
 8006696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800669a:	2200      	movs	r2, #0
 800669c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80066a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80066a8:	4642      	mov	r2, r8
 80066aa:	464b      	mov	r3, r9
 80066ac:	1891      	adds	r1, r2, r2
 80066ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80066b0:	415b      	adcs	r3, r3
 80066b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066b8:	4641      	mov	r1, r8
 80066ba:	eb12 0a01 	adds.w	sl, r2, r1
 80066be:	4649      	mov	r1, r9
 80066c0:	eb43 0b01 	adc.w	fp, r3, r1
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066d8:	4692      	mov	sl, r2
 80066da:	469b      	mov	fp, r3
 80066dc:	4643      	mov	r3, r8
 80066de:	eb1a 0303 	adds.w	r3, sl, r3
 80066e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066e6:	464b      	mov	r3, r9
 80066e8:	eb4b 0303 	adc.w	r3, fp, r3
 80066ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80066f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006700:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006704:	460b      	mov	r3, r1
 8006706:	18db      	adds	r3, r3, r3
 8006708:	643b      	str	r3, [r7, #64]	; 0x40
 800670a:	4613      	mov	r3, r2
 800670c:	eb42 0303 	adc.w	r3, r2, r3
 8006710:	647b      	str	r3, [r7, #68]	; 0x44
 8006712:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006716:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800671a:	f7fa fa95 	bl	8000c48 <__aeabi_uldivmod>
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	4611      	mov	r1, r2
 8006724:	4b3b      	ldr	r3, [pc, #236]	; (8006814 <UART_SetConfig+0x2d4>)
 8006726:	fba3 2301 	umull	r2, r3, r3, r1
 800672a:	095b      	lsrs	r3, r3, #5
 800672c:	2264      	movs	r2, #100	; 0x64
 800672e:	fb02 f303 	mul.w	r3, r2, r3
 8006732:	1acb      	subs	r3, r1, r3
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800673a:	4b36      	ldr	r3, [pc, #216]	; (8006814 <UART_SetConfig+0x2d4>)
 800673c:	fba3 2302 	umull	r2, r3, r3, r2
 8006740:	095b      	lsrs	r3, r3, #5
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006748:	441c      	add	r4, r3
 800674a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800674e:	2200      	movs	r2, #0
 8006750:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006754:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006758:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800675c:	4642      	mov	r2, r8
 800675e:	464b      	mov	r3, r9
 8006760:	1891      	adds	r1, r2, r2
 8006762:	63b9      	str	r1, [r7, #56]	; 0x38
 8006764:	415b      	adcs	r3, r3
 8006766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006768:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800676c:	4641      	mov	r1, r8
 800676e:	1851      	adds	r1, r2, r1
 8006770:	6339      	str	r1, [r7, #48]	; 0x30
 8006772:	4649      	mov	r1, r9
 8006774:	414b      	adcs	r3, r1
 8006776:	637b      	str	r3, [r7, #52]	; 0x34
 8006778:	f04f 0200 	mov.w	r2, #0
 800677c:	f04f 0300 	mov.w	r3, #0
 8006780:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006784:	4659      	mov	r1, fp
 8006786:	00cb      	lsls	r3, r1, #3
 8006788:	4651      	mov	r1, sl
 800678a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800678e:	4651      	mov	r1, sl
 8006790:	00ca      	lsls	r2, r1, #3
 8006792:	4610      	mov	r0, r2
 8006794:	4619      	mov	r1, r3
 8006796:	4603      	mov	r3, r0
 8006798:	4642      	mov	r2, r8
 800679a:	189b      	adds	r3, r3, r2
 800679c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067a0:	464b      	mov	r3, r9
 80067a2:	460a      	mov	r2, r1
 80067a4:	eb42 0303 	adc.w	r3, r2, r3
 80067a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80067bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80067c0:	460b      	mov	r3, r1
 80067c2:	18db      	adds	r3, r3, r3
 80067c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80067c6:	4613      	mov	r3, r2
 80067c8:	eb42 0303 	adc.w	r3, r2, r3
 80067cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80067d6:	f7fa fa37 	bl	8000c48 <__aeabi_uldivmod>
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	4b0d      	ldr	r3, [pc, #52]	; (8006814 <UART_SetConfig+0x2d4>)
 80067e0:	fba3 1302 	umull	r1, r3, r3, r2
 80067e4:	095b      	lsrs	r3, r3, #5
 80067e6:	2164      	movs	r1, #100	; 0x64
 80067e8:	fb01 f303 	mul.w	r3, r1, r3
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	3332      	adds	r3, #50	; 0x32
 80067f2:	4a08      	ldr	r2, [pc, #32]	; (8006814 <UART_SetConfig+0x2d4>)
 80067f4:	fba2 2303 	umull	r2, r3, r2, r3
 80067f8:	095b      	lsrs	r3, r3, #5
 80067fa:	f003 0207 	and.w	r2, r3, #7
 80067fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4422      	add	r2, r4
 8006806:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006808:	e105      	b.n	8006a16 <UART_SetConfig+0x4d6>
 800680a:	bf00      	nop
 800680c:	40011000 	.word	0x40011000
 8006810:	40011400 	.word	0x40011400
 8006814:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800681c:	2200      	movs	r2, #0
 800681e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006822:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006826:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800682a:	4642      	mov	r2, r8
 800682c:	464b      	mov	r3, r9
 800682e:	1891      	adds	r1, r2, r2
 8006830:	6239      	str	r1, [r7, #32]
 8006832:	415b      	adcs	r3, r3
 8006834:	627b      	str	r3, [r7, #36]	; 0x24
 8006836:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800683a:	4641      	mov	r1, r8
 800683c:	1854      	adds	r4, r2, r1
 800683e:	4649      	mov	r1, r9
 8006840:	eb43 0501 	adc.w	r5, r3, r1
 8006844:	f04f 0200 	mov.w	r2, #0
 8006848:	f04f 0300 	mov.w	r3, #0
 800684c:	00eb      	lsls	r3, r5, #3
 800684e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006852:	00e2      	lsls	r2, r4, #3
 8006854:	4614      	mov	r4, r2
 8006856:	461d      	mov	r5, r3
 8006858:	4643      	mov	r3, r8
 800685a:	18e3      	adds	r3, r4, r3
 800685c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006860:	464b      	mov	r3, r9
 8006862:	eb45 0303 	adc.w	r3, r5, r3
 8006866:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800686a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006876:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800687a:	f04f 0200 	mov.w	r2, #0
 800687e:	f04f 0300 	mov.w	r3, #0
 8006882:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006886:	4629      	mov	r1, r5
 8006888:	008b      	lsls	r3, r1, #2
 800688a:	4621      	mov	r1, r4
 800688c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006890:	4621      	mov	r1, r4
 8006892:	008a      	lsls	r2, r1, #2
 8006894:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006898:	f7fa f9d6 	bl	8000c48 <__aeabi_uldivmod>
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	4b60      	ldr	r3, [pc, #384]	; (8006a24 <UART_SetConfig+0x4e4>)
 80068a2:	fba3 2302 	umull	r2, r3, r3, r2
 80068a6:	095b      	lsrs	r3, r3, #5
 80068a8:	011c      	lsls	r4, r3, #4
 80068aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80068b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80068bc:	4642      	mov	r2, r8
 80068be:	464b      	mov	r3, r9
 80068c0:	1891      	adds	r1, r2, r2
 80068c2:	61b9      	str	r1, [r7, #24]
 80068c4:	415b      	adcs	r3, r3
 80068c6:	61fb      	str	r3, [r7, #28]
 80068c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068cc:	4641      	mov	r1, r8
 80068ce:	1851      	adds	r1, r2, r1
 80068d0:	6139      	str	r1, [r7, #16]
 80068d2:	4649      	mov	r1, r9
 80068d4:	414b      	adcs	r3, r1
 80068d6:	617b      	str	r3, [r7, #20]
 80068d8:	f04f 0200 	mov.w	r2, #0
 80068dc:	f04f 0300 	mov.w	r3, #0
 80068e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068e4:	4659      	mov	r1, fp
 80068e6:	00cb      	lsls	r3, r1, #3
 80068e8:	4651      	mov	r1, sl
 80068ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068ee:	4651      	mov	r1, sl
 80068f0:	00ca      	lsls	r2, r1, #3
 80068f2:	4610      	mov	r0, r2
 80068f4:	4619      	mov	r1, r3
 80068f6:	4603      	mov	r3, r0
 80068f8:	4642      	mov	r2, r8
 80068fa:	189b      	adds	r3, r3, r2
 80068fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006900:	464b      	mov	r3, r9
 8006902:	460a      	mov	r2, r1
 8006904:	eb42 0303 	adc.w	r3, r2, r3
 8006908:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800690c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	67bb      	str	r3, [r7, #120]	; 0x78
 8006916:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006918:	f04f 0200 	mov.w	r2, #0
 800691c:	f04f 0300 	mov.w	r3, #0
 8006920:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006924:	4649      	mov	r1, r9
 8006926:	008b      	lsls	r3, r1, #2
 8006928:	4641      	mov	r1, r8
 800692a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800692e:	4641      	mov	r1, r8
 8006930:	008a      	lsls	r2, r1, #2
 8006932:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006936:	f7fa f987 	bl	8000c48 <__aeabi_uldivmod>
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	4b39      	ldr	r3, [pc, #228]	; (8006a24 <UART_SetConfig+0x4e4>)
 8006940:	fba3 1302 	umull	r1, r3, r3, r2
 8006944:	095b      	lsrs	r3, r3, #5
 8006946:	2164      	movs	r1, #100	; 0x64
 8006948:	fb01 f303 	mul.w	r3, r1, r3
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	011b      	lsls	r3, r3, #4
 8006950:	3332      	adds	r3, #50	; 0x32
 8006952:	4a34      	ldr	r2, [pc, #208]	; (8006a24 <UART_SetConfig+0x4e4>)
 8006954:	fba2 2303 	umull	r2, r3, r2, r3
 8006958:	095b      	lsrs	r3, r3, #5
 800695a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800695e:	441c      	add	r4, r3
 8006960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006964:	2200      	movs	r2, #0
 8006966:	673b      	str	r3, [r7, #112]	; 0x70
 8006968:	677a      	str	r2, [r7, #116]	; 0x74
 800696a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800696e:	4642      	mov	r2, r8
 8006970:	464b      	mov	r3, r9
 8006972:	1891      	adds	r1, r2, r2
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	415b      	adcs	r3, r3
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800697e:	4641      	mov	r1, r8
 8006980:	1851      	adds	r1, r2, r1
 8006982:	6039      	str	r1, [r7, #0]
 8006984:	4649      	mov	r1, r9
 8006986:	414b      	adcs	r3, r1
 8006988:	607b      	str	r3, [r7, #4]
 800698a:	f04f 0200 	mov.w	r2, #0
 800698e:	f04f 0300 	mov.w	r3, #0
 8006992:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006996:	4659      	mov	r1, fp
 8006998:	00cb      	lsls	r3, r1, #3
 800699a:	4651      	mov	r1, sl
 800699c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069a0:	4651      	mov	r1, sl
 80069a2:	00ca      	lsls	r2, r1, #3
 80069a4:	4610      	mov	r0, r2
 80069a6:	4619      	mov	r1, r3
 80069a8:	4603      	mov	r3, r0
 80069aa:	4642      	mov	r2, r8
 80069ac:	189b      	adds	r3, r3, r2
 80069ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80069b0:	464b      	mov	r3, r9
 80069b2:	460a      	mov	r2, r1
 80069b4:	eb42 0303 	adc.w	r3, r2, r3
 80069b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	663b      	str	r3, [r7, #96]	; 0x60
 80069c4:	667a      	str	r2, [r7, #100]	; 0x64
 80069c6:	f04f 0200 	mov.w	r2, #0
 80069ca:	f04f 0300 	mov.w	r3, #0
 80069ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80069d2:	4649      	mov	r1, r9
 80069d4:	008b      	lsls	r3, r1, #2
 80069d6:	4641      	mov	r1, r8
 80069d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069dc:	4641      	mov	r1, r8
 80069de:	008a      	lsls	r2, r1, #2
 80069e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80069e4:	f7fa f930 	bl	8000c48 <__aeabi_uldivmod>
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	4b0d      	ldr	r3, [pc, #52]	; (8006a24 <UART_SetConfig+0x4e4>)
 80069ee:	fba3 1302 	umull	r1, r3, r3, r2
 80069f2:	095b      	lsrs	r3, r3, #5
 80069f4:	2164      	movs	r1, #100	; 0x64
 80069f6:	fb01 f303 	mul.w	r3, r1, r3
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	011b      	lsls	r3, r3, #4
 80069fe:	3332      	adds	r3, #50	; 0x32
 8006a00:	4a08      	ldr	r2, [pc, #32]	; (8006a24 <UART_SetConfig+0x4e4>)
 8006a02:	fba2 2303 	umull	r2, r3, r2, r3
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	f003 020f 	and.w	r2, r3, #15
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4422      	add	r2, r4
 8006a14:	609a      	str	r2, [r3, #8]
}
 8006a16:	bf00      	nop
 8006a18:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a22:	bf00      	nop
 8006a24:	51eb851f 	.word	0x51eb851f

08006a28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a28:	b084      	sub	sp, #16
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	f107 001c 	add.w	r0, r7, #28
 8006a36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d122      	bne.n	8006a86 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d105      	bne.n	8006a7a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f001 fbee 	bl	800825c <USB_CoreReset>
 8006a80:	4603      	mov	r3, r0
 8006a82:	73fb      	strb	r3, [r7, #15]
 8006a84:	e01a      	b.n	8006abc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f001 fbe2 	bl	800825c <USB_CoreReset>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d106      	bne.n	8006ab0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	639a      	str	r2, [r3, #56]	; 0x38
 8006aae:	e005      	b.n	8006abc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d10b      	bne.n	8006ada <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f043 0206 	orr.w	r2, r3, #6
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f043 0220 	orr.w	r2, r3, #32
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ae6:	b004      	add	sp, #16
 8006ae8:	4770      	bx	lr
	...

08006aec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	4613      	mov	r3, r2
 8006af8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006afa:	79fb      	ldrb	r3, [r7, #7]
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d165      	bne.n	8006bcc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	4a41      	ldr	r2, [pc, #260]	; (8006c08 <USB_SetTurnaroundTime+0x11c>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d906      	bls.n	8006b16 <USB_SetTurnaroundTime+0x2a>
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	4a40      	ldr	r2, [pc, #256]	; (8006c0c <USB_SetTurnaroundTime+0x120>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d202      	bcs.n	8006b16 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006b10:	230f      	movs	r3, #15
 8006b12:	617b      	str	r3, [r7, #20]
 8006b14:	e062      	b.n	8006bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	4a3c      	ldr	r2, [pc, #240]	; (8006c0c <USB_SetTurnaroundTime+0x120>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d306      	bcc.n	8006b2c <USB_SetTurnaroundTime+0x40>
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	4a3b      	ldr	r2, [pc, #236]	; (8006c10 <USB_SetTurnaroundTime+0x124>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d202      	bcs.n	8006b2c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006b26:	230e      	movs	r3, #14
 8006b28:	617b      	str	r3, [r7, #20]
 8006b2a:	e057      	b.n	8006bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	4a38      	ldr	r2, [pc, #224]	; (8006c10 <USB_SetTurnaroundTime+0x124>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d306      	bcc.n	8006b42 <USB_SetTurnaroundTime+0x56>
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	4a37      	ldr	r2, [pc, #220]	; (8006c14 <USB_SetTurnaroundTime+0x128>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d202      	bcs.n	8006b42 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006b3c:	230d      	movs	r3, #13
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	e04c      	b.n	8006bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	4a33      	ldr	r2, [pc, #204]	; (8006c14 <USB_SetTurnaroundTime+0x128>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d306      	bcc.n	8006b58 <USB_SetTurnaroundTime+0x6c>
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	4a32      	ldr	r2, [pc, #200]	; (8006c18 <USB_SetTurnaroundTime+0x12c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d802      	bhi.n	8006b58 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006b52:	230c      	movs	r3, #12
 8006b54:	617b      	str	r3, [r7, #20]
 8006b56:	e041      	b.n	8006bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	4a2f      	ldr	r2, [pc, #188]	; (8006c18 <USB_SetTurnaroundTime+0x12c>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d906      	bls.n	8006b6e <USB_SetTurnaroundTime+0x82>
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	4a2e      	ldr	r2, [pc, #184]	; (8006c1c <USB_SetTurnaroundTime+0x130>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d802      	bhi.n	8006b6e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006b68:	230b      	movs	r3, #11
 8006b6a:	617b      	str	r3, [r7, #20]
 8006b6c:	e036      	b.n	8006bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	4a2a      	ldr	r2, [pc, #168]	; (8006c1c <USB_SetTurnaroundTime+0x130>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d906      	bls.n	8006b84 <USB_SetTurnaroundTime+0x98>
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	4a29      	ldr	r2, [pc, #164]	; (8006c20 <USB_SetTurnaroundTime+0x134>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d802      	bhi.n	8006b84 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006b7e:	230a      	movs	r3, #10
 8006b80:	617b      	str	r3, [r7, #20]
 8006b82:	e02b      	b.n	8006bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	4a26      	ldr	r2, [pc, #152]	; (8006c20 <USB_SetTurnaroundTime+0x134>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d906      	bls.n	8006b9a <USB_SetTurnaroundTime+0xae>
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	4a25      	ldr	r2, [pc, #148]	; (8006c24 <USB_SetTurnaroundTime+0x138>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d202      	bcs.n	8006b9a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006b94:	2309      	movs	r3, #9
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	e020      	b.n	8006bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	4a21      	ldr	r2, [pc, #132]	; (8006c24 <USB_SetTurnaroundTime+0x138>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d306      	bcc.n	8006bb0 <USB_SetTurnaroundTime+0xc4>
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	4a20      	ldr	r2, [pc, #128]	; (8006c28 <USB_SetTurnaroundTime+0x13c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d802      	bhi.n	8006bb0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006baa:	2308      	movs	r3, #8
 8006bac:	617b      	str	r3, [r7, #20]
 8006bae:	e015      	b.n	8006bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	4a1d      	ldr	r2, [pc, #116]	; (8006c28 <USB_SetTurnaroundTime+0x13c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d906      	bls.n	8006bc6 <USB_SetTurnaroundTime+0xda>
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4a1c      	ldr	r2, [pc, #112]	; (8006c2c <USB_SetTurnaroundTime+0x140>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d202      	bcs.n	8006bc6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006bc0:	2307      	movs	r3, #7
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	e00a      	b.n	8006bdc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006bc6:	2306      	movs	r3, #6
 8006bc8:	617b      	str	r3, [r7, #20]
 8006bca:	e007      	b.n	8006bdc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006bcc:	79fb      	ldrb	r3, [r7, #7]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d102      	bne.n	8006bd8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006bd2:	2309      	movs	r3, #9
 8006bd4:	617b      	str	r3, [r7, #20]
 8006bd6:	e001      	b.n	8006bdc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006bd8:	2309      	movs	r3, #9
 8006bda:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	029b      	lsls	r3, r3, #10
 8006bf0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr
 8006c08:	00d8acbf 	.word	0x00d8acbf
 8006c0c:	00e4e1c0 	.word	0x00e4e1c0
 8006c10:	00f42400 	.word	0x00f42400
 8006c14:	01067380 	.word	0x01067380
 8006c18:	011a499f 	.word	0x011a499f
 8006c1c:	01312cff 	.word	0x01312cff
 8006c20:	014ca43f 	.word	0x014ca43f
 8006c24:	016e3600 	.word	0x016e3600
 8006c28:	01a6ab1f 	.word	0x01a6ab1f
 8006c2c:	01e84800 	.word	0x01e84800

08006c30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f043 0201 	orr.w	r2, r3, #1
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f023 0201 	bic.w	r2, r3, #1
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c90:	78fb      	ldrb	r3, [r7, #3]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d115      	bne.n	8006cc2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	f7fb fbcc 	bl	8002440 <HAL_Delay>
      ms++;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	3301      	adds	r3, #1
 8006cac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f001 fa45 	bl	800813e <USB_GetMode>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d01e      	beq.n	8006cf8 <USB_SetCurrentMode+0x84>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2b31      	cmp	r3, #49	; 0x31
 8006cbe:	d9f0      	bls.n	8006ca2 <USB_SetCurrentMode+0x2e>
 8006cc0:	e01a      	b.n	8006cf8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006cc2:	78fb      	ldrb	r3, [r7, #3]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d115      	bne.n	8006cf4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cd4:	2001      	movs	r0, #1
 8006cd6:	f7fb fbb3 	bl	8002440 <HAL_Delay>
      ms++;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 fa2c 	bl	800813e <USB_GetMode>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d005      	beq.n	8006cf8 <USB_SetCurrentMode+0x84>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2b31      	cmp	r3, #49	; 0x31
 8006cf0:	d9f0      	bls.n	8006cd4 <USB_SetCurrentMode+0x60>
 8006cf2:	e001      	b.n	8006cf8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e005      	b.n	8006d04 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2b32      	cmp	r3, #50	; 0x32
 8006cfc:	d101      	bne.n	8006d02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e000      	b.n	8006d04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d0c:	b084      	sub	sp, #16
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b086      	sub	sp, #24
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d26:	2300      	movs	r3, #0
 8006d28:	613b      	str	r3, [r7, #16]
 8006d2a:	e009      	b.n	8006d40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	3340      	adds	r3, #64	; 0x40
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	2200      	movs	r2, #0
 8006d38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	613b      	str	r3, [r7, #16]
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	2b0e      	cmp	r3, #14
 8006d44:	d9f2      	bls.n	8006d2c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d11c      	bne.n	8006d86 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d5a:	f043 0302 	orr.w	r3, r3, #2
 8006d5e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d70:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	639a      	str	r2, [r3, #56]	; 0x38
 8006d84:	e00b      	b.n	8006d9e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006da4:	461a      	mov	r2, r3
 8006da6:	2300      	movs	r3, #0
 8006da8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db0:	4619      	mov	r1, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db8:	461a      	mov	r2, r3
 8006dba:	680b      	ldr	r3, [r1, #0]
 8006dbc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d10c      	bne.n	8006dde <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d104      	bne.n	8006dd4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006dca:	2100      	movs	r1, #0
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f965 	bl	800709c <USB_SetDevSpeed>
 8006dd2:	e008      	b.n	8006de6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f960 	bl	800709c <USB_SetDevSpeed>
 8006ddc:	e003      	b.n	8006de6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006dde:	2103      	movs	r1, #3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f95b 	bl	800709c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006de6:	2110      	movs	r1, #16
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f8f3 	bl	8006fd4 <USB_FlushTxFifo>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d001      	beq.n	8006df8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f91f 	bl	800703c <USB_FlushRxFifo>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e0e:	461a      	mov	r2, r3
 8006e10:	2300      	movs	r3, #0
 8006e12:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e26:	461a      	mov	r2, r3
 8006e28:	2300      	movs	r3, #0
 8006e2a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	613b      	str	r3, [r7, #16]
 8006e30:	e043      	b.n	8006eba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e48:	d118      	bne.n	8006e7c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10a      	bne.n	8006e66 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	e013      	b.n	8006e8e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e72:	461a      	mov	r2, r3
 8006e74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e78:	6013      	str	r3, [r2, #0]
 8006e7a:	e008      	b.n	8006e8e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e88:	461a      	mov	r2, r3
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	015a      	lsls	r2, r3, #5
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4413      	add	r3, r2
 8006e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eac:	461a      	mov	r2, r3
 8006eae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006eb2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	613b      	str	r3, [r7, #16]
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d3b7      	bcc.n	8006e32 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	613b      	str	r3, [r7, #16]
 8006ec6:	e043      	b.n	8006f50 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006eda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ede:	d118      	bne.n	8006f12 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10a      	bne.n	8006efc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ef8:	6013      	str	r3, [r2, #0]
 8006efa:	e013      	b.n	8006f24 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f08:	461a      	mov	r2, r3
 8006f0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	e008      	b.n	8006f24 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1e:	461a      	mov	r2, r3
 8006f20:	2300      	movs	r3, #0
 8006f22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f30:	461a      	mov	r2, r3
 8006f32:	2300      	movs	r3, #0
 8006f34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f42:	461a      	mov	r2, r3
 8006f44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	613b      	str	r3, [r7, #16]
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d3b7      	bcc.n	8006ec8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006f78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d105      	bne.n	8006f8c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	f043 0210 	orr.w	r2, r3, #16
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	699a      	ldr	r2, [r3, #24]
 8006f90:	4b0f      	ldr	r3, [pc, #60]	; (8006fd0 <USB_DevInit+0x2c4>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d005      	beq.n	8006faa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	f043 0208 	orr.w	r2, r3, #8
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d107      	bne.n	8006fc0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fb8:	f043 0304 	orr.w	r3, r3, #4
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fcc:	b004      	add	sp, #16
 8006fce:	4770      	bx	lr
 8006fd0:	803c3800 	.word	0x803c3800

08006fd4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4a13      	ldr	r2, [pc, #76]	; (8007038 <USB_FlushTxFifo+0x64>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d901      	bls.n	8006ff4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e01b      	b.n	800702c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	daf2      	bge.n	8006fe2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	019b      	lsls	r3, r3, #6
 8007004:	f043 0220 	orr.w	r2, r3, #32
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	3301      	adds	r3, #1
 8007010:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4a08      	ldr	r2, [pc, #32]	; (8007038 <USB_FlushTxFifo+0x64>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d901      	bls.n	800701e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e006      	b.n	800702c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	f003 0320 	and.w	r3, r3, #32
 8007026:	2b20      	cmp	r3, #32
 8007028:	d0f0      	beq.n	800700c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	00030d40 	.word	0x00030d40

0800703c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3301      	adds	r3, #1
 800704c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	4a11      	ldr	r2, [pc, #68]	; (8007098 <USB_FlushRxFifo+0x5c>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d901      	bls.n	800705a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e018      	b.n	800708c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	daf2      	bge.n	8007048 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2210      	movs	r2, #16
 800706a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	3301      	adds	r3, #1
 8007070:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	4a08      	ldr	r2, [pc, #32]	; (8007098 <USB_FlushRxFifo+0x5c>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d901      	bls.n	800707e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e006      	b.n	800708c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	f003 0310 	and.w	r3, r3, #16
 8007086:	2b10      	cmp	r3, #16
 8007088:	d0f0      	beq.n	800706c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr
 8007098:	00030d40 	.word	0x00030d40

0800709c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	460b      	mov	r3, r1
 80070a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	78fb      	ldrb	r3, [r7, #3]
 80070b6:	68f9      	ldr	r1, [r7, #12]
 80070b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070bc:	4313      	orrs	r3, r2
 80070be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr

080070ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b087      	sub	sp, #28
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f003 0306 	and.w	r3, r3, #6
 80070e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d102      	bne.n	80070f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80070ee:	2300      	movs	r3, #0
 80070f0:	75fb      	strb	r3, [r7, #23]
 80070f2:	e00a      	b.n	800710a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d002      	beq.n	8007100 <USB_GetDevSpeed+0x32>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2b06      	cmp	r3, #6
 80070fe:	d102      	bne.n	8007106 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007100:	2302      	movs	r3, #2
 8007102:	75fb      	strb	r3, [r7, #23]
 8007104:	e001      	b.n	800710a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007106:	230f      	movs	r3, #15
 8007108:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800710a:	7dfb      	ldrb	r3, [r7, #23]
}
 800710c:	4618      	mov	r0, r3
 800710e:	371c      	adds	r7, #28
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	785b      	ldrb	r3, [r3, #1]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d13a      	bne.n	80071aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800713a:	69da      	ldr	r2, [r3, #28]
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	f003 030f 	and.w	r3, r3, #15
 8007144:	2101      	movs	r1, #1
 8007146:	fa01 f303 	lsl.w	r3, r1, r3
 800714a:	b29b      	uxth	r3, r3
 800714c:	68f9      	ldr	r1, [r7, #12]
 800714e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007152:	4313      	orrs	r3, r2
 8007154:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	015a      	lsls	r2, r3, #5
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	4413      	add	r3, r2
 800715e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d155      	bne.n	8007218 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	791b      	ldrb	r3, [r3, #4]
 8007186:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007188:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	059b      	lsls	r3, r3, #22
 800718e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007190:	4313      	orrs	r3, r2
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	0151      	lsls	r1, r2, #5
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	440a      	add	r2, r1
 800719a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800719e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071a6:	6013      	str	r3, [r2, #0]
 80071a8:	e036      	b.n	8007218 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b0:	69da      	ldr	r2, [r3, #28]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	f003 030f 	and.w	r3, r3, #15
 80071ba:	2101      	movs	r1, #1
 80071bc:	fa01 f303 	lsl.w	r3, r1, r3
 80071c0:	041b      	lsls	r3, r3, #16
 80071c2:	68f9      	ldr	r1, [r7, #12]
 80071c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071c8:	4313      	orrs	r3, r2
 80071ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	015a      	lsls	r2, r3, #5
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d11a      	bne.n	8007218 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	791b      	ldrb	r3, [r3, #4]
 80071fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80071fe:	430b      	orrs	r3, r1
 8007200:	4313      	orrs	r3, r2
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	0151      	lsls	r1, r2, #5
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	440a      	add	r2, r1
 800720a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800720e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007216:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
	...

08007228 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	785b      	ldrb	r3, [r3, #1]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d161      	bne.n	8007308 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800725a:	d11f      	bne.n	800729c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	0151      	lsls	r1, r2, #5
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	440a      	add	r2, r1
 8007272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007276:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800727a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	0151      	lsls	r1, r2, #5
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	440a      	add	r2, r1
 8007292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007296:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800729a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	f003 030f 	and.w	r3, r3, #15
 80072ac:	2101      	movs	r1, #1
 80072ae:	fa01 f303 	lsl.w	r3, r1, r3
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	43db      	mvns	r3, r3
 80072b6:	68f9      	ldr	r1, [r7, #12]
 80072b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072bc:	4013      	ands	r3, r2
 80072be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c6:	69da      	ldr	r2, [r3, #28]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	f003 030f 	and.w	r3, r3, #15
 80072d0:	2101      	movs	r1, #1
 80072d2:	fa01 f303 	lsl.w	r3, r1, r3
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	43db      	mvns	r3, r3
 80072da:	68f9      	ldr	r1, [r7, #12]
 80072dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072e0:	4013      	ands	r3, r2
 80072e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	0159      	lsls	r1, r3, #5
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	440b      	add	r3, r1
 80072fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072fe:	4619      	mov	r1, r3
 8007300:	4b35      	ldr	r3, [pc, #212]	; (80073d8 <USB_DeactivateEndpoint+0x1b0>)
 8007302:	4013      	ands	r3, r2
 8007304:	600b      	str	r3, [r1, #0]
 8007306:	e060      	b.n	80073ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800731a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800731e:	d11f      	bne.n	8007360 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	015a      	lsls	r2, r3, #5
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	4413      	add	r3, r2
 8007328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	0151      	lsls	r1, r2, #5
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	440a      	add	r2, r1
 8007336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800733a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800733e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	0151      	lsls	r1, r2, #5
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	440a      	add	r2, r1
 8007356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800735a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800735e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007366:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	f003 030f 	and.w	r3, r3, #15
 8007370:	2101      	movs	r1, #1
 8007372:	fa01 f303 	lsl.w	r3, r1, r3
 8007376:	041b      	lsls	r3, r3, #16
 8007378:	43db      	mvns	r3, r3
 800737a:	68f9      	ldr	r1, [r7, #12]
 800737c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007380:	4013      	ands	r3, r2
 8007382:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800738a:	69da      	ldr	r2, [r3, #28]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	f003 030f 	and.w	r3, r3, #15
 8007394:	2101      	movs	r1, #1
 8007396:	fa01 f303 	lsl.w	r3, r1, r3
 800739a:	041b      	lsls	r3, r3, #16
 800739c:	43db      	mvns	r3, r3
 800739e:	68f9      	ldr	r1, [r7, #12]
 80073a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073a4:	4013      	ands	r3, r2
 80073a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	0159      	lsls	r1, r3, #5
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	440b      	add	r3, r1
 80073be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c2:	4619      	mov	r1, r3
 80073c4:	4b05      	ldr	r3, [pc, #20]	; (80073dc <USB_DeactivateEndpoint+0x1b4>)
 80073c6:	4013      	ands	r3, r2
 80073c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	ec337800 	.word	0xec337800
 80073dc:	eff37800 	.word	0xeff37800

080073e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08a      	sub	sp, #40	; 0x28
 80073e4:	af02      	add	r7, sp, #8
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	4613      	mov	r3, r2
 80073ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	785b      	ldrb	r3, [r3, #1]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	f040 815c 	bne.w	80076ba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d132      	bne.n	8007470 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	4413      	add	r3, r2
 8007412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	0151      	lsls	r1, r2, #5
 800741c:	69fa      	ldr	r2, [r7, #28]
 800741e:	440a      	add	r2, r1
 8007420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007424:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007428:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800742c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	015a      	lsls	r2, r3, #5
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	4413      	add	r3, r2
 8007436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	0151      	lsls	r1, r2, #5
 8007440:	69fa      	ldr	r2, [r7, #28]
 8007442:	440a      	add	r2, r1
 8007444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007448:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800744c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	4413      	add	r3, r2
 8007456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	0151      	lsls	r1, r2, #5
 8007460:	69fa      	ldr	r2, [r7, #28]
 8007462:	440a      	add	r2, r1
 8007464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007468:	0cdb      	lsrs	r3, r3, #19
 800746a:	04db      	lsls	r3, r3, #19
 800746c:	6113      	str	r3, [r2, #16]
 800746e:	e074      	b.n	800755a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	69ba      	ldr	r2, [r7, #24]
 8007480:	0151      	lsls	r1, r2, #5
 8007482:	69fa      	ldr	r2, [r7, #28]
 8007484:	440a      	add	r2, r1
 8007486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800748a:	0cdb      	lsrs	r3, r3, #19
 800748c:	04db      	lsls	r3, r3, #19
 800748e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	4413      	add	r3, r2
 8007498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	0151      	lsls	r1, r2, #5
 80074a2:	69fa      	ldr	r2, [r7, #28]
 80074a4:	440a      	add	r2, r1
 80074a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	6999      	ldr	r1, [r3, #24]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	440b      	add	r3, r1
 80074cc:	1e59      	subs	r1, r3, #1
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80074d6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80074d8:	4b9d      	ldr	r3, [pc, #628]	; (8007750 <USB_EPStartXfer+0x370>)
 80074da:	400b      	ands	r3, r1
 80074dc:	69b9      	ldr	r1, [r7, #24]
 80074de:	0148      	lsls	r0, r1, #5
 80074e0:	69f9      	ldr	r1, [r7, #28]
 80074e2:	4401      	add	r1, r0
 80074e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80074e8:	4313      	orrs	r3, r2
 80074ea:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f8:	691a      	ldr	r2, [r3, #16]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007502:	69b9      	ldr	r1, [r7, #24]
 8007504:	0148      	lsls	r0, r1, #5
 8007506:	69f9      	ldr	r1, [r7, #28]
 8007508:	4401      	add	r1, r0
 800750a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800750e:	4313      	orrs	r3, r2
 8007510:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	791b      	ldrb	r3, [r3, #4]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d11f      	bne.n	800755a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	4413      	add	r3, r2
 8007522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	0151      	lsls	r1, r2, #5
 800752c:	69fa      	ldr	r2, [r7, #28]
 800752e:	440a      	add	r2, r1
 8007530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007534:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007538:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	015a      	lsls	r2, r3, #5
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	4413      	add	r3, r2
 8007542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	0151      	lsls	r1, r2, #5
 800754c:	69fa      	ldr	r2, [r7, #28]
 800754e:	440a      	add	r2, r1
 8007550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007554:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007558:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800755a:	79fb      	ldrb	r3, [r7, #7]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d14b      	bne.n	80075f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	695b      	ldr	r3, [r3, #20]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d009      	beq.n	800757c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	4413      	add	r3, r2
 8007570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007574:	461a      	mov	r2, r3
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	695b      	ldr	r3, [r3, #20]
 800757a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	791b      	ldrb	r3, [r3, #4]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d128      	bne.n	80075d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007590:	2b00      	cmp	r3, #0
 8007592:	d110      	bne.n	80075b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	4413      	add	r3, r2
 800759c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	0151      	lsls	r1, r2, #5
 80075a6:	69fa      	ldr	r2, [r7, #28]
 80075a8:	440a      	add	r2, r1
 80075aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075b2:	6013      	str	r3, [r2, #0]
 80075b4:	e00f      	b.n	80075d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	015a      	lsls	r2, r3, #5
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	4413      	add	r3, r2
 80075be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	0151      	lsls	r1, r2, #5
 80075c8:	69fa      	ldr	r2, [r7, #28]
 80075ca:	440a      	add	r2, r1
 80075cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	015a      	lsls	r2, r3, #5
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	4413      	add	r3, r2
 80075de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	69ba      	ldr	r2, [r7, #24]
 80075e6:	0151      	lsls	r1, r2, #5
 80075e8:	69fa      	ldr	r2, [r7, #28]
 80075ea:	440a      	add	r2, r1
 80075ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075f4:	6013      	str	r3, [r2, #0]
 80075f6:	e133      	b.n	8007860 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	69ba      	ldr	r2, [r7, #24]
 8007608:	0151      	lsls	r1, r2, #5
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	440a      	add	r2, r1
 800760e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007612:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007616:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	791b      	ldrb	r3, [r3, #4]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d015      	beq.n	800764c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 811b 	beq.w	8007860 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	f003 030f 	and.w	r3, r3, #15
 800763a:	2101      	movs	r1, #1
 800763c:	fa01 f303 	lsl.w	r3, r1, r3
 8007640:	69f9      	ldr	r1, [r7, #28]
 8007642:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007646:	4313      	orrs	r3, r2
 8007648:	634b      	str	r3, [r1, #52]	; 0x34
 800764a:	e109      	b.n	8007860 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007658:	2b00      	cmp	r3, #0
 800765a:	d110      	bne.n	800767e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	4413      	add	r3, r2
 8007664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	0151      	lsls	r1, r2, #5
 800766e:	69fa      	ldr	r2, [r7, #28]
 8007670:	440a      	add	r2, r1
 8007672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007676:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800767a:	6013      	str	r3, [r2, #0]
 800767c:	e00f      	b.n	800769e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	4413      	add	r3, r2
 8007686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	0151      	lsls	r1, r2, #5
 8007690:	69fa      	ldr	r2, [r7, #28]
 8007692:	440a      	add	r2, r1
 8007694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800769c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	6919      	ldr	r1, [r3, #16]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	781a      	ldrb	r2, [r3, #0]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	b298      	uxth	r0, r3
 80076ac:	79fb      	ldrb	r3, [r7, #7]
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	4603      	mov	r3, r0
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 fade 	bl	8007c74 <USB_WritePacket>
 80076b8:	e0d2      	b.n	8007860 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	015a      	lsls	r2, r3, #5
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	4413      	add	r3, r2
 80076c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	0151      	lsls	r1, r2, #5
 80076cc:	69fa      	ldr	r2, [r7, #28]
 80076ce:	440a      	add	r2, r1
 80076d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076d4:	0cdb      	lsrs	r3, r3, #19
 80076d6:	04db      	lsls	r3, r3, #19
 80076d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	0151      	lsls	r1, r2, #5
 80076ec:	69fa      	ldr	r2, [r7, #28]
 80076ee:	440a      	add	r2, r1
 80076f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d126      	bne.n	8007754 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	4413      	add	r3, r2
 800770e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007712:	691a      	ldr	r2, [r3, #16]
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800771c:	69b9      	ldr	r1, [r7, #24]
 800771e:	0148      	lsls	r0, r1, #5
 8007720:	69f9      	ldr	r1, [r7, #28]
 8007722:	4401      	add	r1, r0
 8007724:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007728:	4313      	orrs	r3, r2
 800772a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	4413      	add	r3, r2
 8007734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	69ba      	ldr	r2, [r7, #24]
 800773c:	0151      	lsls	r1, r2, #5
 800773e:	69fa      	ldr	r2, [r7, #28]
 8007740:	440a      	add	r2, r1
 8007742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007746:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800774a:	6113      	str	r3, [r2, #16]
 800774c:	e03a      	b.n	80077c4 <USB_EPStartXfer+0x3e4>
 800774e:	bf00      	nop
 8007750:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	699a      	ldr	r2, [r3, #24]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	4413      	add	r3, r2
 800775e:	1e5a      	subs	r2, r3, #1
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	fbb2 f3f3 	udiv	r3, r2, r3
 8007768:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	8afa      	ldrh	r2, [r7, #22]
 8007770:	fb03 f202 	mul.w	r2, r3, r2
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	015a      	lsls	r2, r3, #5
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	4413      	add	r3, r2
 8007780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007784:	691a      	ldr	r2, [r3, #16]
 8007786:	8afb      	ldrh	r3, [r7, #22]
 8007788:	04d9      	lsls	r1, r3, #19
 800778a:	4b38      	ldr	r3, [pc, #224]	; (800786c <USB_EPStartXfer+0x48c>)
 800778c:	400b      	ands	r3, r1
 800778e:	69b9      	ldr	r1, [r7, #24]
 8007790:	0148      	lsls	r0, r1, #5
 8007792:	69f9      	ldr	r1, [r7, #28]
 8007794:	4401      	add	r1, r0
 8007796:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800779a:	4313      	orrs	r3, r2
 800779c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	015a      	lsls	r2, r3, #5
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077aa:	691a      	ldr	r2, [r3, #16]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	69db      	ldr	r3, [r3, #28]
 80077b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077b4:	69b9      	ldr	r1, [r7, #24]
 80077b6:	0148      	lsls	r0, r1, #5
 80077b8:	69f9      	ldr	r1, [r7, #28]
 80077ba:	4401      	add	r1, r0
 80077bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80077c0:	4313      	orrs	r3, r2
 80077c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80077c4:	79fb      	ldrb	r3, [r7, #7]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d10d      	bne.n	80077e6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d009      	beq.n	80077e6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	6919      	ldr	r1, [r3, #16]
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	015a      	lsls	r2, r3, #5
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	4413      	add	r3, r2
 80077de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e2:	460a      	mov	r2, r1
 80077e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	791b      	ldrb	r3, [r3, #4]
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d128      	bne.n	8007840 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d110      	bne.n	8007820 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	4413      	add	r3, r2
 8007806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	0151      	lsls	r1, r2, #5
 8007810:	69fa      	ldr	r2, [r7, #28]
 8007812:	440a      	add	r2, r1
 8007814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007818:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800781c:	6013      	str	r3, [r2, #0]
 800781e:	e00f      	b.n	8007840 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	4413      	add	r3, r2
 8007828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	0151      	lsls	r1, r2, #5
 8007832:	69fa      	ldr	r2, [r7, #28]
 8007834:	440a      	add	r2, r1
 8007836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800783a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800783e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	4413      	add	r3, r2
 8007848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	0151      	lsls	r1, r2, #5
 8007852:	69fa      	ldr	r2, [r7, #28]
 8007854:	440a      	add	r2, r1
 8007856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800785a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800785e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3720      	adds	r7, #32
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	1ff80000 	.word	0x1ff80000

08007870 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007870:	b480      	push	{r7}
 8007872:	b087      	sub	sp, #28
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	4613      	mov	r3, r2
 800787c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	785b      	ldrb	r3, [r3, #1]
 800788c:	2b01      	cmp	r3, #1
 800788e:	f040 80ce 	bne.w	8007a2e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d132      	bne.n	8007900 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	0151      	lsls	r1, r2, #5
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	440a      	add	r2, r1
 80078b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	015a      	lsls	r2, r3, #5
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	4413      	add	r3, r2
 80078c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	0151      	lsls	r1, r2, #5
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	440a      	add	r2, r1
 80078d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	015a      	lsls	r2, r3, #5
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	0151      	lsls	r1, r2, #5
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	440a      	add	r2, r1
 80078f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078f8:	0cdb      	lsrs	r3, r3, #19
 80078fa:	04db      	lsls	r3, r3, #19
 80078fc:	6113      	str	r3, [r2, #16]
 80078fe:	e04e      	b.n	800799e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	4413      	add	r3, r2
 8007908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	0151      	lsls	r1, r2, #5
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	440a      	add	r2, r1
 8007916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800791a:	0cdb      	lsrs	r3, r3, #19
 800791c:	04db      	lsls	r3, r3, #19
 800791e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	015a      	lsls	r2, r3, #5
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	4413      	add	r3, r2
 8007928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	693a      	ldr	r2, [r7, #16]
 8007930:	0151      	lsls	r1, r2, #5
 8007932:	697a      	ldr	r2, [r7, #20]
 8007934:	440a      	add	r2, r1
 8007936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800793a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800793e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007942:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	699a      	ldr	r2, [r3, #24]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	429a      	cmp	r2, r3
 800794e:	d903      	bls.n	8007958 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	68da      	ldr	r2, [r3, #12]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	4413      	add	r3, r2
 8007960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	0151      	lsls	r1, r2, #5
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	440a      	add	r2, r1
 800796e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007972:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007976:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	4413      	add	r3, r2
 8007980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007984:	691a      	ldr	r2, [r3, #16]
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800798e:	6939      	ldr	r1, [r7, #16]
 8007990:	0148      	lsls	r0, r1, #5
 8007992:	6979      	ldr	r1, [r7, #20]
 8007994:	4401      	add	r1, r0
 8007996:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800799a:	4313      	orrs	r3, r2
 800799c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800799e:	79fb      	ldrb	r3, [r7, #7]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d11e      	bne.n	80079e2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d009      	beq.n	80079c0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b8:	461a      	mov	r2, r3
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	0151      	lsls	r1, r2, #5
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	440a      	add	r2, r1
 80079d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	e097      	b.n	8007b12 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	0151      	lsls	r1, r2, #5
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	440a      	add	r2, r1
 80079f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a00:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 8083 	beq.w	8007b12 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	f003 030f 	and.w	r3, r3, #15
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a22:	6979      	ldr	r1, [r7, #20]
 8007a24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	634b      	str	r3, [r1, #52]	; 0x34
 8007a2c:	e071      	b.n	8007b12 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	0151      	lsls	r1, r2, #5
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	440a      	add	r2, r1
 8007a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a48:	0cdb      	lsrs	r3, r3, #19
 8007a4a:	04db      	lsls	r3, r3, #19
 8007a4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	015a      	lsls	r2, r3, #5
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	0151      	lsls	r1, r2, #5
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	440a      	add	r2, r1
 8007a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a70:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	68da      	ldr	r2, [r3, #12]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	68da      	ldr	r2, [r3, #12]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	015a      	lsls	r2, r3, #5
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	4413      	add	r3, r2
 8007a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	0151      	lsls	r1, r2, #5
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	440a      	add	r2, r1
 8007aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007aa8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	015a      	lsls	r2, r3, #5
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab6:	691a      	ldr	r2, [r3, #16]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	69db      	ldr	r3, [r3, #28]
 8007abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ac0:	6939      	ldr	r1, [r7, #16]
 8007ac2:	0148      	lsls	r0, r1, #5
 8007ac4:	6979      	ldr	r1, [r7, #20]
 8007ac6:	4401      	add	r1, r0
 8007ac8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007acc:	4313      	orrs	r3, r2
 8007ace:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007ad0:	79fb      	ldrb	r3, [r7, #7]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d10d      	bne.n	8007af2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d009      	beq.n	8007af2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	6919      	ldr	r1, [r3, #16]
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aee:	460a      	mov	r2, r1
 8007af0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	015a      	lsls	r2, r3, #5
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	4413      	add	r3, r2
 8007afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	0151      	lsls	r1, r2, #5
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	440a      	add	r2, r1
 8007b08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	371c      	adds	r7, #28
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	785b      	ldrb	r3, [r3, #1]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d14a      	bne.n	8007bd4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b56:	f040 8086 	bne.w	8007c66 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	7812      	ldrb	r2, [r2, #0]
 8007b6e:	0151      	lsls	r1, r2, #5
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	440a      	add	r2, r1
 8007b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b7c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	7812      	ldrb	r2, [r2, #0]
 8007b92:	0151      	lsls	r1, r2, #5
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	440a      	add	r2, r1
 8007b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ba0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f242 7210 	movw	r2, #10000	; 0x2710
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d902      	bls.n	8007bb8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	75fb      	strb	r3, [r7, #23]
          break;
 8007bb6:	e056      	b.n	8007c66 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bd0:	d0e7      	beq.n	8007ba2 <USB_EPStopXfer+0x82>
 8007bd2:	e048      	b.n	8007c66 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bec:	d13b      	bne.n	8007c66 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	7812      	ldrb	r2, [r2, #0]
 8007c02:	0151      	lsls	r1, r2, #5
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	440a      	add	r2, r1
 8007c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c10:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	683a      	ldr	r2, [r7, #0]
 8007c24:	7812      	ldrb	r2, [r2, #0]
 8007c26:	0151      	lsls	r1, r2, #5
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	440a      	add	r2, r1
 8007c2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d902      	bls.n	8007c4c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	75fb      	strb	r3, [r7, #23]
          break;
 8007c4a:	e00c      	b.n	8007c66 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c64:	d0e7      	beq.n	8007c36 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	371c      	adds	r7, #28
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b089      	sub	sp, #36	; 0x24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	4611      	mov	r1, r2
 8007c80:	461a      	mov	r2, r3
 8007c82:	460b      	mov	r3, r1
 8007c84:	71fb      	strb	r3, [r7, #7]
 8007c86:	4613      	mov	r3, r2
 8007c88:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007c92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d123      	bne.n	8007ce2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c9a:	88bb      	ldrh	r3, [r7, #4]
 8007c9c:	3303      	adds	r3, #3
 8007c9e:	089b      	lsrs	r3, r3, #2
 8007ca0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	61bb      	str	r3, [r7, #24]
 8007ca6:	e018      	b.n	8007cda <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ca8:	79fb      	ldrb	r3, [r7, #7]
 8007caa:	031a      	lsls	r2, r3, #12
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	61bb      	str	r3, [r7, #24]
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d3e2      	bcc.n	8007ca8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3724      	adds	r7, #36	; 0x24
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b08b      	sub	sp, #44	; 0x2c
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007d06:	88fb      	ldrh	r3, [r7, #6]
 8007d08:	089b      	lsrs	r3, r3, #2
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007d0e:	88fb      	ldrh	r3, [r7, #6]
 8007d10:	f003 0303 	and.w	r3, r3, #3
 8007d14:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007d16:	2300      	movs	r3, #0
 8007d18:	623b      	str	r3, [r7, #32]
 8007d1a:	e014      	b.n	8007d46 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d26:	601a      	str	r2, [r3, #0]
    pDest++;
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	3301      	adds	r3, #1
 8007d32:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	3301      	adds	r3, #1
 8007d38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007d40:	6a3b      	ldr	r3, [r7, #32]
 8007d42:	3301      	adds	r3, #1
 8007d44:	623b      	str	r3, [r7, #32]
 8007d46:	6a3a      	ldr	r2, [r7, #32]
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d3e6      	bcc.n	8007d1c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007d4e:	8bfb      	ldrh	r3, [r7, #30]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d01e      	beq.n	8007d92 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007d54:	2300      	movs	r3, #0
 8007d56:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d5e:	461a      	mov	r2, r3
 8007d60:	f107 0310 	add.w	r3, r7, #16
 8007d64:	6812      	ldr	r2, [r2, #0]
 8007d66:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	fa22 f303 	lsr.w	r3, r2, r3
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	701a      	strb	r2, [r3, #0]
      i++;
 8007d7a:	6a3b      	ldr	r3, [r7, #32]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	3301      	adds	r3, #1
 8007d84:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007d86:	8bfb      	ldrh	r3, [r7, #30]
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007d8c:	8bfb      	ldrh	r3, [r7, #30]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1ea      	bne.n	8007d68 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	372c      	adds	r7, #44	; 0x2c
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	785b      	ldrb	r3, [r3, #1]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d12c      	bne.n	8007e16 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	015a      	lsls	r2, r3, #5
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	db12      	blt.n	8007df4 <USB_EPSetStall+0x54>
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00f      	beq.n	8007df4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	0151      	lsls	r1, r2, #5
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	440a      	add	r2, r1
 8007dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007df2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	015a      	lsls	r2, r3, #5
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	0151      	lsls	r1, r2, #5
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	440a      	add	r2, r1
 8007e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e12:	6013      	str	r3, [r2, #0]
 8007e14:	e02b      	b.n	8007e6e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	015a      	lsls	r2, r3, #5
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	db12      	blt.n	8007e4e <USB_EPSetStall+0xae>
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00f      	beq.n	8007e4e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	0151      	lsls	r1, r2, #5
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	440a      	add	r2, r1
 8007e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e4c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	0151      	lsls	r1, r2, #5
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	440a      	add	r2, r1
 8007e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	785b      	ldrb	r3, [r3, #1]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d128      	bne.n	8007eea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	015a      	lsls	r2, r3, #5
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	0151      	lsls	r1, r2, #5
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	440a      	add	r2, r1
 8007eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007eb6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	791b      	ldrb	r3, [r3, #4]
 8007ebc:	2b03      	cmp	r3, #3
 8007ebe:	d003      	beq.n	8007ec8 <USB_EPClearStall+0x4c>
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	791b      	ldrb	r3, [r3, #4]
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d138      	bne.n	8007f3a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	015a      	lsls	r2, r3, #5
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	0151      	lsls	r1, r2, #5
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	440a      	add	r2, r1
 8007ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ee6:	6013      	str	r3, [r2, #0]
 8007ee8:	e027      	b.n	8007f3a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	015a      	lsls	r2, r3, #5
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	0151      	lsls	r1, r2, #5
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	440a      	add	r2, r1
 8007f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	791b      	ldrb	r3, [r3, #4]
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	d003      	beq.n	8007f1a <USB_EPClearStall+0x9e>
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	791b      	ldrb	r3, [r3, #4]
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d10f      	bne.n	8007f3a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	015a      	lsls	r2, r3, #5
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	4413      	add	r3, r2
 8007f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	0151      	lsls	r1, r2, #5
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	440a      	add	r2, r1
 8007f30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f38:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007f6a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	78fb      	ldrb	r3, [r7, #3]
 8007f76:	011b      	lsls	r3, r3, #4
 8007f78:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007f7c:	68f9      	ldr	r1, [r7, #12]
 8007f7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f82:	4313      	orrs	r3, r2
 8007f84:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007fae:	f023 0303 	bic.w	r3, r3, #3
 8007fb2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fc2:	f023 0302 	bic.w	r3, r3, #2
 8007fc6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b085      	sub	sp, #20
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ff0:	f023 0303 	bic.w	r3, r3, #3
 8007ff4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008004:	f043 0302 	orr.w	r3, r3, #2
 8008008:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	695b      	ldr	r3, [r3, #20]
 8008024:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	4013      	ands	r3, r2
 800802e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008030:	68fb      	ldr	r3, [r7, #12]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800803e:	b480      	push	{r7}
 8008040:	b085      	sub	sp, #20
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800805a:	69db      	ldr	r3, [r3, #28]
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	4013      	ands	r3, r2
 8008060:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	0c1b      	lsrs	r3, r3, #16
}
 8008066:	4618      	mov	r0, r3
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008072:	b480      	push	{r7}
 8008074:	b085      	sub	sp, #20
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800808e:	69db      	ldr	r3, [r3, #28]
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	4013      	ands	r3, r2
 8008094:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	b29b      	uxth	r3, r3
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b085      	sub	sp, #20
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	460b      	mov	r3, r1
 80080b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80080b6:	78fb      	ldrb	r3, [r7, #3]
 80080b8:	015a      	lsls	r2, r3, #5
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	4413      	add	r3, r2
 80080be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	4013      	ands	r3, r2
 80080d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80080d4:	68bb      	ldr	r3, [r7, #8]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b087      	sub	sp, #28
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	460b      	mov	r3, r1
 80080ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008104:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008106:	78fb      	ldrb	r3, [r7, #3]
 8008108:	f003 030f 	and.w	r3, r3, #15
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	fa22 f303 	lsr.w	r3, r2, r3
 8008112:	01db      	lsls	r3, r3, #7
 8008114:	b2db      	uxtb	r3, r3
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	4313      	orrs	r3, r2
 800811a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800811c:	78fb      	ldrb	r3, [r7, #3]
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	4413      	add	r3, r2
 8008124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4013      	ands	r3, r2
 800812e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008130:	68bb      	ldr	r3, [r7, #8]
}
 8008132:	4618      	mov	r0, r3
 8008134:	371c      	adds	r7, #28
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr

0800813e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800813e:	b480      	push	{r7}
 8008140:	b083      	sub	sp, #12
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	f003 0301 	and.w	r3, r3, #1
}
 800814e:	4618      	mov	r0, r3
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800815a:	b480      	push	{r7}
 800815c:	b085      	sub	sp, #20
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008174:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008178:	f023 0307 	bic.w	r3, r3, #7
 800817c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800818c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008190:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	460b      	mov	r3, r1
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	333c      	adds	r3, #60	; 0x3c
 80081b6:	3304      	adds	r3, #4
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	4a26      	ldr	r2, [pc, #152]	; (8008258 <USB_EP0_OutStart+0xb8>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d90a      	bls.n	80081da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081d4:	d101      	bne.n	80081da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	e037      	b.n	800824a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e0:	461a      	mov	r2, r3
 80081e2:	2300      	movs	r3, #0
 80081e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008208:	f043 0318 	orr.w	r3, r3, #24
 800820c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800821c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008220:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008222:	7afb      	ldrb	r3, [r7, #11]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d10f      	bne.n	8008248 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800822e:	461a      	mov	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008242:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008246:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	371c      	adds	r7, #28
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	4f54300a 	.word	0x4f54300a

0800825c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008264:	2300      	movs	r3, #0
 8008266:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	3301      	adds	r3, #1
 800826c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	4a13      	ldr	r2, [pc, #76]	; (80082c0 <USB_CoreReset+0x64>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d901      	bls.n	800827a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e01b      	b.n	80082b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	2b00      	cmp	r3, #0
 8008280:	daf2      	bge.n	8008268 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	f043 0201 	orr.w	r2, r3, #1
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	3301      	adds	r3, #1
 8008296:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	4a09      	ldr	r2, [pc, #36]	; (80082c0 <USB_CoreReset+0x64>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d901      	bls.n	80082a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e006      	b.n	80082b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d0f0      	beq.n	8008292 <USB_CoreReset+0x36>

  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	00030d40 	.word	0x00030d40

080082c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	460b      	mov	r3, r1
 80082ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80082d0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80082d4:	f002 fca8 	bl	800ac28 <USBD_static_malloc>
 80082d8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d109      	bne.n	80082f4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	32b0      	adds	r2, #176	; 0xb0
 80082ea:	2100      	movs	r1, #0
 80082ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80082f0:	2302      	movs	r3, #2
 80082f2:	e0d4      	b.n	800849e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80082f4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80082f8:	2100      	movs	r1, #0
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f002 fd02 	bl	800ad04 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	32b0      	adds	r2, #176	; 0xb0
 800830a:	68f9      	ldr	r1, [r7, #12]
 800830c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	32b0      	adds	r2, #176	; 0xb0
 800831a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	7c1b      	ldrb	r3, [r3, #16]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d138      	bne.n	800839e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800832c:	4b5e      	ldr	r3, [pc, #376]	; (80084a8 <USBD_CDC_Init+0x1e4>)
 800832e:	7819      	ldrb	r1, [r3, #0]
 8008330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008334:	2202      	movs	r2, #2
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f002 fb53 	bl	800a9e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800833c:	4b5a      	ldr	r3, [pc, #360]	; (80084a8 <USBD_CDC_Init+0x1e4>)
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	f003 020f 	and.w	r2, r3, #15
 8008344:	6879      	ldr	r1, [r7, #4]
 8008346:	4613      	mov	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	440b      	add	r3, r1
 8008350:	3324      	adds	r3, #36	; 0x24
 8008352:	2201      	movs	r2, #1
 8008354:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008356:	4b55      	ldr	r3, [pc, #340]	; (80084ac <USBD_CDC_Init+0x1e8>)
 8008358:	7819      	ldrb	r1, [r3, #0]
 800835a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800835e:	2202      	movs	r2, #2
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f002 fb3e 	bl	800a9e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008366:	4b51      	ldr	r3, [pc, #324]	; (80084ac <USBD_CDC_Init+0x1e8>)
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	f003 020f 	and.w	r2, r3, #15
 800836e:	6879      	ldr	r1, [r7, #4]
 8008370:	4613      	mov	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	440b      	add	r3, r1
 800837a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800837e:	2201      	movs	r2, #1
 8008380:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008382:	4b4b      	ldr	r3, [pc, #300]	; (80084b0 <USBD_CDC_Init+0x1ec>)
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	f003 020f 	and.w	r2, r3, #15
 800838a:	6879      	ldr	r1, [r7, #4]
 800838c:	4613      	mov	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	440b      	add	r3, r1
 8008396:	3326      	adds	r3, #38	; 0x26
 8008398:	2210      	movs	r2, #16
 800839a:	801a      	strh	r2, [r3, #0]
 800839c:	e035      	b.n	800840a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800839e:	4b42      	ldr	r3, [pc, #264]	; (80084a8 <USBD_CDC_Init+0x1e4>)
 80083a0:	7819      	ldrb	r1, [r3, #0]
 80083a2:	2340      	movs	r3, #64	; 0x40
 80083a4:	2202      	movs	r2, #2
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f002 fb1b 	bl	800a9e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80083ac:	4b3e      	ldr	r3, [pc, #248]	; (80084a8 <USBD_CDC_Init+0x1e4>)
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	f003 020f 	and.w	r2, r3, #15
 80083b4:	6879      	ldr	r1, [r7, #4]
 80083b6:	4613      	mov	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	4413      	add	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	440b      	add	r3, r1
 80083c0:	3324      	adds	r3, #36	; 0x24
 80083c2:	2201      	movs	r2, #1
 80083c4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80083c6:	4b39      	ldr	r3, [pc, #228]	; (80084ac <USBD_CDC_Init+0x1e8>)
 80083c8:	7819      	ldrb	r1, [r3, #0]
 80083ca:	2340      	movs	r3, #64	; 0x40
 80083cc:	2202      	movs	r2, #2
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f002 fb07 	bl	800a9e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80083d4:	4b35      	ldr	r3, [pc, #212]	; (80084ac <USBD_CDC_Init+0x1e8>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	f003 020f 	and.w	r2, r3, #15
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	4613      	mov	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	440b      	add	r3, r1
 80083e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083ec:	2201      	movs	r2, #1
 80083ee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80083f0:	4b2f      	ldr	r3, [pc, #188]	; (80084b0 <USBD_CDC_Init+0x1ec>)
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	f003 020f 	and.w	r2, r3, #15
 80083f8:	6879      	ldr	r1, [r7, #4]
 80083fa:	4613      	mov	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	440b      	add	r3, r1
 8008404:	3326      	adds	r3, #38	; 0x26
 8008406:	2210      	movs	r2, #16
 8008408:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800840a:	4b29      	ldr	r3, [pc, #164]	; (80084b0 <USBD_CDC_Init+0x1ec>)
 800840c:	7819      	ldrb	r1, [r3, #0]
 800840e:	2308      	movs	r3, #8
 8008410:	2203      	movs	r2, #3
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f002 fae5 	bl	800a9e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008418:	4b25      	ldr	r3, [pc, #148]	; (80084b0 <USBD_CDC_Init+0x1ec>)
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	f003 020f 	and.w	r2, r3, #15
 8008420:	6879      	ldr	r1, [r7, #4]
 8008422:	4613      	mov	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	440b      	add	r3, r1
 800842c:	3324      	adds	r3, #36	; 0x24
 800842e:	2201      	movs	r2, #1
 8008430:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	33b0      	adds	r3, #176	; 0xb0
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4413      	add	r3, r2
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008464:	2b00      	cmp	r3, #0
 8008466:	d101      	bne.n	800846c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008468:	2302      	movs	r3, #2
 800846a:	e018      	b.n	800849e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	7c1b      	ldrb	r3, [r3, #16]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10a      	bne.n	800848a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008474:	4b0d      	ldr	r3, [pc, #52]	; (80084ac <USBD_CDC_Init+0x1e8>)
 8008476:	7819      	ldrb	r1, [r3, #0]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800847e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f002 fb9c 	bl	800abc0 <USBD_LL_PrepareReceive>
 8008488:	e008      	b.n	800849c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800848a:	4b08      	ldr	r3, [pc, #32]	; (80084ac <USBD_CDC_Init+0x1e8>)
 800848c:	7819      	ldrb	r1, [r3, #0]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008494:	2340      	movs	r3, #64	; 0x40
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f002 fb92 	bl	800abc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20000093 	.word	0x20000093
 80084ac:	20000094 	.word	0x20000094
 80084b0:	20000095 	.word	0x20000095

080084b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80084c0:	4b3a      	ldr	r3, [pc, #232]	; (80085ac <USBD_CDC_DeInit+0xf8>)
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	4619      	mov	r1, r3
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f002 fab1 	bl	800aa2e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80084cc:	4b37      	ldr	r3, [pc, #220]	; (80085ac <USBD_CDC_DeInit+0xf8>)
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	f003 020f 	and.w	r2, r3, #15
 80084d4:	6879      	ldr	r1, [r7, #4]
 80084d6:	4613      	mov	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	440b      	add	r3, r1
 80084e0:	3324      	adds	r3, #36	; 0x24
 80084e2:	2200      	movs	r2, #0
 80084e4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80084e6:	4b32      	ldr	r3, [pc, #200]	; (80085b0 <USBD_CDC_DeInit+0xfc>)
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	4619      	mov	r1, r3
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f002 fa9e 	bl	800aa2e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80084f2:	4b2f      	ldr	r3, [pc, #188]	; (80085b0 <USBD_CDC_DeInit+0xfc>)
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	f003 020f 	and.w	r2, r3, #15
 80084fa:	6879      	ldr	r1, [r7, #4]
 80084fc:	4613      	mov	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	440b      	add	r3, r1
 8008506:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800850a:	2200      	movs	r2, #0
 800850c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800850e:	4b29      	ldr	r3, [pc, #164]	; (80085b4 <USBD_CDC_DeInit+0x100>)
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	4619      	mov	r1, r3
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f002 fa8a 	bl	800aa2e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800851a:	4b26      	ldr	r3, [pc, #152]	; (80085b4 <USBD_CDC_DeInit+0x100>)
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	f003 020f 	and.w	r2, r3, #15
 8008522:	6879      	ldr	r1, [r7, #4]
 8008524:	4613      	mov	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	440b      	add	r3, r1
 800852e:	3324      	adds	r3, #36	; 0x24
 8008530:	2200      	movs	r2, #0
 8008532:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008534:	4b1f      	ldr	r3, [pc, #124]	; (80085b4 <USBD_CDC_DeInit+0x100>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	f003 020f 	and.w	r2, r3, #15
 800853c:	6879      	ldr	r1, [r7, #4]
 800853e:	4613      	mov	r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	440b      	add	r3, r1
 8008548:	3326      	adds	r3, #38	; 0x26
 800854a:	2200      	movs	r2, #0
 800854c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	32b0      	adds	r2, #176	; 0xb0
 8008558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d01f      	beq.n	80085a0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	33b0      	adds	r3, #176	; 0xb0
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	32b0      	adds	r2, #176	; 0xb0
 800857e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008582:	4618      	mov	r0, r3
 8008584:	f002 fb5e 	bl	800ac44 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	32b0      	adds	r2, #176	; 0xb0
 8008592:	2100      	movs	r1, #0
 8008594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	20000093 	.word	0x20000093
 80085b0:	20000094 	.word	0x20000094
 80085b4:	20000095 	.word	0x20000095

080085b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b086      	sub	sp, #24
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	32b0      	adds	r2, #176	; 0xb0
 80085cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80085d2:	2300      	movs	r3, #0
 80085d4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80085d6:	2300      	movs	r3, #0
 80085d8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e0bf      	b.n	8008768 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d050      	beq.n	8008696 <USBD_CDC_Setup+0xde>
 80085f4:	2b20      	cmp	r3, #32
 80085f6:	f040 80af 	bne.w	8008758 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	88db      	ldrh	r3, [r3, #6]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d03a      	beq.n	8008678 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	b25b      	sxtb	r3, r3
 8008608:	2b00      	cmp	r3, #0
 800860a:	da1b      	bge.n	8008644 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	33b0      	adds	r3, #176	; 0xb0
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4413      	add	r3, r2
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008622:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	88d2      	ldrh	r2, [r2, #6]
 8008628:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	88db      	ldrh	r3, [r3, #6]
 800862e:	2b07      	cmp	r3, #7
 8008630:	bf28      	it	cs
 8008632:	2307      	movcs	r3, #7
 8008634:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	89fa      	ldrh	r2, [r7, #14]
 800863a:	4619      	mov	r1, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f001 fd89 	bl	800a154 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008642:	e090      	b.n	8008766 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	785a      	ldrb	r2, [r3, #1]
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	88db      	ldrh	r3, [r3, #6]
 8008652:	2b3f      	cmp	r3, #63	; 0x3f
 8008654:	d803      	bhi.n	800865e <USBD_CDC_Setup+0xa6>
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	88db      	ldrh	r3, [r3, #6]
 800865a:	b2da      	uxtb	r2, r3
 800865c:	e000      	b.n	8008660 <USBD_CDC_Setup+0xa8>
 800865e:	2240      	movs	r2, #64	; 0x40
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008666:	6939      	ldr	r1, [r7, #16]
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800866e:	461a      	mov	r2, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f001 fd9b 	bl	800a1ac <USBD_CtlPrepareRx>
      break;
 8008676:	e076      	b.n	8008766 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	33b0      	adds	r3, #176	; 0xb0
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	4413      	add	r3, r2
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	7850      	ldrb	r0, [r2, #1]
 800868e:	2200      	movs	r2, #0
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	4798      	blx	r3
      break;
 8008694:	e067      	b.n	8008766 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	785b      	ldrb	r3, [r3, #1]
 800869a:	2b0b      	cmp	r3, #11
 800869c:	d851      	bhi.n	8008742 <USBD_CDC_Setup+0x18a>
 800869e:	a201      	add	r2, pc, #4	; (adr r2, 80086a4 <USBD_CDC_Setup+0xec>)
 80086a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a4:	080086d5 	.word	0x080086d5
 80086a8:	08008751 	.word	0x08008751
 80086ac:	08008743 	.word	0x08008743
 80086b0:	08008743 	.word	0x08008743
 80086b4:	08008743 	.word	0x08008743
 80086b8:	08008743 	.word	0x08008743
 80086bc:	08008743 	.word	0x08008743
 80086c0:	08008743 	.word	0x08008743
 80086c4:	08008743 	.word	0x08008743
 80086c8:	08008743 	.word	0x08008743
 80086cc:	080086ff 	.word	0x080086ff
 80086d0:	08008729 	.word	0x08008729
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	2b03      	cmp	r3, #3
 80086de:	d107      	bne.n	80086f0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80086e0:	f107 030a 	add.w	r3, r7, #10
 80086e4:	2202      	movs	r2, #2
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f001 fd33 	bl	800a154 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086ee:	e032      	b.n	8008756 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f001 fcbd 	bl	800a072 <USBD_CtlError>
            ret = USBD_FAIL;
 80086f8:	2303      	movs	r3, #3
 80086fa:	75fb      	strb	r3, [r7, #23]
          break;
 80086fc:	e02b      	b.n	8008756 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b03      	cmp	r3, #3
 8008708:	d107      	bne.n	800871a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800870a:	f107 030d 	add.w	r3, r7, #13
 800870e:	2201      	movs	r2, #1
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f001 fd1e 	bl	800a154 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008718:	e01d      	b.n	8008756 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800871a:	6839      	ldr	r1, [r7, #0]
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f001 fca8 	bl	800a072 <USBD_CtlError>
            ret = USBD_FAIL;
 8008722:	2303      	movs	r3, #3
 8008724:	75fb      	strb	r3, [r7, #23]
          break;
 8008726:	e016      	b.n	8008756 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800872e:	b2db      	uxtb	r3, r3
 8008730:	2b03      	cmp	r3, #3
 8008732:	d00f      	beq.n	8008754 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f001 fc9b 	bl	800a072 <USBD_CtlError>
            ret = USBD_FAIL;
 800873c:	2303      	movs	r3, #3
 800873e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008740:	e008      	b.n	8008754 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f001 fc94 	bl	800a072 <USBD_CtlError>
          ret = USBD_FAIL;
 800874a:	2303      	movs	r3, #3
 800874c:	75fb      	strb	r3, [r7, #23]
          break;
 800874e:	e002      	b.n	8008756 <USBD_CDC_Setup+0x19e>
          break;
 8008750:	bf00      	nop
 8008752:	e008      	b.n	8008766 <USBD_CDC_Setup+0x1ae>
          break;
 8008754:	bf00      	nop
      }
      break;
 8008756:	e006      	b.n	8008766 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008758:	6839      	ldr	r1, [r7, #0]
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f001 fc89 	bl	800a072 <USBD_CtlError>
      ret = USBD_FAIL;
 8008760:	2303      	movs	r3, #3
 8008762:	75fb      	strb	r3, [r7, #23]
      break;
 8008764:	bf00      	nop
  }

  return (uint8_t)ret;
 8008766:	7dfb      	ldrb	r3, [r7, #23]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	460b      	mov	r3, r1
 800877a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008782:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	32b0      	adds	r2, #176	; 0xb0
 800878e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d101      	bne.n	800879a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008796:	2303      	movs	r3, #3
 8008798:	e065      	b.n	8008866 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	32b0      	adds	r2, #176	; 0xb0
 80087a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80087aa:	78fb      	ldrb	r3, [r7, #3]
 80087ac:	f003 020f 	and.w	r2, r3, #15
 80087b0:	6879      	ldr	r1, [r7, #4]
 80087b2:	4613      	mov	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	440b      	add	r3, r1
 80087bc:	3318      	adds	r3, #24
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d02f      	beq.n	8008824 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80087c4:	78fb      	ldrb	r3, [r7, #3]
 80087c6:	f003 020f 	and.w	r2, r3, #15
 80087ca:	6879      	ldr	r1, [r7, #4]
 80087cc:	4613      	mov	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	440b      	add	r3, r1
 80087d6:	3318      	adds	r3, #24
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	78fb      	ldrb	r3, [r7, #3]
 80087dc:	f003 010f 	and.w	r1, r3, #15
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	460b      	mov	r3, r1
 80087e4:	00db      	lsls	r3, r3, #3
 80087e6:	440b      	add	r3, r1
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4403      	add	r3, r0
 80087ec:	3348      	adds	r3, #72	; 0x48
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80087f4:	fb01 f303 	mul.w	r3, r1, r3
 80087f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d112      	bne.n	8008824 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80087fe:	78fb      	ldrb	r3, [r7, #3]
 8008800:	f003 020f 	and.w	r2, r3, #15
 8008804:	6879      	ldr	r1, [r7, #4]
 8008806:	4613      	mov	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	440b      	add	r3, r1
 8008810:	3318      	adds	r3, #24
 8008812:	2200      	movs	r2, #0
 8008814:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008816:	78f9      	ldrb	r1, [r7, #3]
 8008818:	2300      	movs	r3, #0
 800881a:	2200      	movs	r2, #0
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f002 f9ae 	bl	800ab7e <USBD_LL_Transmit>
 8008822:	e01f      	b.n	8008864 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2200      	movs	r2, #0
 8008828:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	33b0      	adds	r3, #176	; 0xb0
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d010      	beq.n	8008864 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	33b0      	adds	r3, #176	; 0xb0
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008860:	78fa      	ldrb	r2, [r7, #3]
 8008862:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b084      	sub	sp, #16
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	460b      	mov	r3, r1
 8008878:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	32b0      	adds	r2, #176	; 0xb0
 8008884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008888:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	32b0      	adds	r2, #176	; 0xb0
 8008894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800889c:	2303      	movs	r3, #3
 800889e:	e01a      	b.n	80088d6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80088a0:	78fb      	ldrb	r3, [r7, #3]
 80088a2:	4619      	mov	r1, r3
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f002 f9ac 	bl	800ac02 <USBD_LL_GetRxDataSize>
 80088aa:	4602      	mov	r2, r0
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	33b0      	adds	r3, #176	; 0xb0
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80088d0:	4611      	mov	r1, r2
 80088d2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b084      	sub	sp, #16
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	32b0      	adds	r2, #176	; 0xb0
 80088f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d101      	bne.n	8008900 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e025      	b.n	800894c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	33b0      	adds	r3, #176	; 0xb0
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	4413      	add	r3, r2
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d01a      	beq.n	800894a <USBD_CDC_EP0_RxReady+0x6c>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800891a:	2bff      	cmp	r3, #255	; 0xff
 800891c:	d015      	beq.n	800894a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	33b0      	adds	r3, #176	; 0xb0
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4413      	add	r3, r2
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008936:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800893e:	b292      	uxth	r2, r2
 8008940:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	22ff      	movs	r2, #255	; 0xff
 8008946:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b086      	sub	sp, #24
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800895c:	2182      	movs	r1, #130	; 0x82
 800895e:	4818      	ldr	r0, [pc, #96]	; (80089c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008960:	f000 fd4f 	bl	8009402 <USBD_GetEpDesc>
 8008964:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008966:	2101      	movs	r1, #1
 8008968:	4815      	ldr	r0, [pc, #84]	; (80089c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800896a:	f000 fd4a 	bl	8009402 <USBD_GetEpDesc>
 800896e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008970:	2181      	movs	r1, #129	; 0x81
 8008972:	4813      	ldr	r0, [pc, #76]	; (80089c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008974:	f000 fd45 	bl	8009402 <USBD_GetEpDesc>
 8008978:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d002      	beq.n	8008986 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	2210      	movs	r2, #16
 8008984:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d006      	beq.n	800899a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	2200      	movs	r2, #0
 8008990:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008994:	711a      	strb	r2, [r3, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d006      	beq.n	80089ae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089a8:	711a      	strb	r2, [r3, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2243      	movs	r2, #67	; 0x43
 80089b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80089b4:	4b02      	ldr	r3, [pc, #8]	; (80089c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3718      	adds	r7, #24
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	20000050 	.word	0x20000050

080089c4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80089cc:	2182      	movs	r1, #130	; 0x82
 80089ce:	4818      	ldr	r0, [pc, #96]	; (8008a30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089d0:	f000 fd17 	bl	8009402 <USBD_GetEpDesc>
 80089d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80089d6:	2101      	movs	r1, #1
 80089d8:	4815      	ldr	r0, [pc, #84]	; (8008a30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089da:	f000 fd12 	bl	8009402 <USBD_GetEpDesc>
 80089de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80089e0:	2181      	movs	r1, #129	; 0x81
 80089e2:	4813      	ldr	r0, [pc, #76]	; (8008a30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089e4:	f000 fd0d 	bl	8009402 <USBD_GetEpDesc>
 80089e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d002      	beq.n	80089f6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	2210      	movs	r2, #16
 80089f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d006      	beq.n	8008a0a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	2200      	movs	r2, #0
 8008a00:	711a      	strb	r2, [r3, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f042 0202 	orr.w	r2, r2, #2
 8008a08:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d006      	beq.n	8008a1e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	711a      	strb	r2, [r3, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f042 0202 	orr.w	r2, r2, #2
 8008a1c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2243      	movs	r2, #67	; 0x43
 8008a22:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a24:	4b02      	ldr	r3, [pc, #8]	; (8008a30 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3718      	adds	r7, #24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	20000050 	.word	0x20000050

08008a34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008a3c:	2182      	movs	r1, #130	; 0x82
 8008a3e:	4818      	ldr	r0, [pc, #96]	; (8008aa0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a40:	f000 fcdf 	bl	8009402 <USBD_GetEpDesc>
 8008a44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008a46:	2101      	movs	r1, #1
 8008a48:	4815      	ldr	r0, [pc, #84]	; (8008aa0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a4a:	f000 fcda 	bl	8009402 <USBD_GetEpDesc>
 8008a4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008a50:	2181      	movs	r1, #129	; 0x81
 8008a52:	4813      	ldr	r0, [pc, #76]	; (8008aa0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a54:	f000 fcd5 	bl	8009402 <USBD_GetEpDesc>
 8008a58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	2210      	movs	r2, #16
 8008a64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d006      	beq.n	8008a7a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a74:	711a      	strb	r2, [r3, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d006      	beq.n	8008a8e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a88:	711a      	strb	r2, [r3, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2243      	movs	r2, #67	; 0x43
 8008a92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a94:	4b02      	ldr	r3, [pc, #8]	; (8008aa0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3718      	adds	r7, #24
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	20000050 	.word	0x20000050

08008aa4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	220a      	movs	r2, #10
 8008ab0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008ab2:	4b03      	ldr	r3, [pc, #12]	; (8008ac0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr
 8008ac0:	2000000c 	.word	0x2000000c

08008ac4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	e009      	b.n	8008aec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	33b0      	adds	r3, #176	; 0xb0
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b087      	sub	sp, #28
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	32b0      	adds	r2, #176	; 0xb0
 8008b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b12:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d101      	bne.n	8008b1e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e008      	b.n	8008b30 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	371c      	adds	r7, #28
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	32b0      	adds	r2, #176	; 0xb0
 8008b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b54:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d101      	bne.n	8008b60 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e004      	b.n	8008b6a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3714      	adds	r7, #20
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
	...

08008b78 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	32b0      	adds	r2, #176	; 0xb0
 8008b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008b90:	2301      	movs	r3, #1
 8008b92:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	32b0      	adds	r2, #176	; 0xb0
 8008b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e025      	b.n	8008bf6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d11f      	bne.n	8008bf4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008bbc:	4b10      	ldr	r3, [pc, #64]	; (8008c00 <USBD_CDC_TransmitPacket+0x88>)
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	f003 020f 	and.w	r2, r3, #15
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4403      	add	r3, r0
 8008bd6:	3318      	adds	r3, #24
 8008bd8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008bda:	4b09      	ldr	r3, [pc, #36]	; (8008c00 <USBD_CDC_TransmitPacket+0x88>)
 8008bdc:	7819      	ldrb	r1, [r3, #0]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f001 ffc7 	bl	800ab7e <USBD_LL_Transmit>

    ret = USBD_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	20000093 	.word	0x20000093

08008c04 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	32b0      	adds	r2, #176	; 0xb0
 8008c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c1a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	32b0      	adds	r2, #176	; 0xb0
 8008c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d101      	bne.n	8008c32 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	e018      	b.n	8008c64 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	7c1b      	ldrb	r3, [r3, #16]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d10a      	bne.n	8008c50 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c3a:	4b0c      	ldr	r3, [pc, #48]	; (8008c6c <USBD_CDC_ReceivePacket+0x68>)
 8008c3c:	7819      	ldrb	r1, [r3, #0]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f001 ffb9 	bl	800abc0 <USBD_LL_PrepareReceive>
 8008c4e:	e008      	b.n	8008c62 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c50:	4b06      	ldr	r3, [pc, #24]	; (8008c6c <USBD_CDC_ReceivePacket+0x68>)
 8008c52:	7819      	ldrb	r1, [r3, #0]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c5a:	2340      	movs	r3, #64	; 0x40
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f001 ffaf 	bl	800abc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	20000094 	.word	0x20000094

08008c70 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d101      	bne.n	8008c88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c84:	2303      	movs	r3, #3
 8008c86:	e01f      	b.n	8008cc8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d003      	beq.n	8008cae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	68ba      	ldr	r2, [r7, #8]
 8008caa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	79fa      	ldrb	r2, [r7, #7]
 8008cba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f001 fe29 	bl	800a914 <USBD_LL_Init>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3718      	adds	r7, #24
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d101      	bne.n	8008ce8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e025      	b.n	8008d34 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	32ae      	adds	r2, #174	; 0xae
 8008cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00f      	beq.n	8008d24 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	32ae      	adds	r2, #174	; 0xae
 8008d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d14:	f107 020e 	add.w	r2, r7, #14
 8008d18:	4610      	mov	r0, r2
 8008d1a:	4798      	blx	r3
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008d2a:	1c5a      	adds	r2, r3, #1
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f001 fe31 	bl	800a9ac <USBD_LL_Start>
 8008d4a:	4603      	mov	r3, r0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d5c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	460b      	mov	r3, r1
 8008d74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d009      	beq.n	8008d98 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	78fa      	ldrb	r2, [r7, #3]
 8008d8e:	4611      	mov	r1, r2
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	4798      	blx	r3
 8008d94:	4603      	mov	r3, r0
 8008d96:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b084      	sub	sp, #16
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	460b      	mov	r3, r1
 8008dac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	78fa      	ldrb	r2, [r7, #3]
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	4798      	blx	r3
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d001      	beq.n	8008dcc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b084      	sub	sp, #16
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008de6:	6839      	ldr	r1, [r7, #0]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f001 f908 	bl	8009ffe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e0a:	f003 031f 	and.w	r3, r3, #31
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d01a      	beq.n	8008e48 <USBD_LL_SetupStage+0x72>
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d822      	bhi.n	8008e5c <USBD_LL_SetupStage+0x86>
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d002      	beq.n	8008e20 <USBD_LL_SetupStage+0x4a>
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d00a      	beq.n	8008e34 <USBD_LL_SetupStage+0x5e>
 8008e1e:	e01d      	b.n	8008e5c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fb5f 	bl	80094ec <USBD_StdDevReq>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	73fb      	strb	r3, [r7, #15]
      break;
 8008e32:	e020      	b.n	8008e76 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 fbc7 	bl	80095d0 <USBD_StdItfReq>
 8008e42:	4603      	mov	r3, r0
 8008e44:	73fb      	strb	r3, [r7, #15]
      break;
 8008e46:	e016      	b.n	8008e76 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 fc29 	bl	80096a8 <USBD_StdEPReq>
 8008e56:	4603      	mov	r3, r0
 8008e58:	73fb      	strb	r3, [r7, #15]
      break;
 8008e5a:	e00c      	b.n	8008e76 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f001 fdfe 	bl	800aa6c <USBD_LL_StallEP>
 8008e70:	4603      	mov	r3, r0
 8008e72:	73fb      	strb	r3, [r7, #15]
      break;
 8008e74:	bf00      	nop
  }

  return ret;
 8008e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b086      	sub	sp, #24
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	607a      	str	r2, [r7, #4]
 8008e8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008e92:	7afb      	ldrb	r3, [r7, #11]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d16e      	bne.n	8008f76 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008e9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ea6:	2b03      	cmp	r3, #3
 8008ea8:	f040 8098 	bne.w	8008fdc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	689a      	ldr	r2, [r3, #8]
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d913      	bls.n	8008ee0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	689a      	ldr	r2, [r3, #8]
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	1ad2      	subs	r2, r2, r3
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	68da      	ldr	r2, [r3, #12]
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	bf28      	it	cs
 8008ed2:	4613      	movcs	r3, r2
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	6879      	ldr	r1, [r7, #4]
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f001 f984 	bl	800a1e6 <USBD_CtlContinueRx>
 8008ede:	e07d      	b.n	8008fdc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ee6:	f003 031f 	and.w	r3, r3, #31
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d014      	beq.n	8008f18 <USBD_LL_DataOutStage+0x98>
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d81d      	bhi.n	8008f2e <USBD_LL_DataOutStage+0xae>
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d002      	beq.n	8008efc <USBD_LL_DataOutStage+0x7c>
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d003      	beq.n	8008f02 <USBD_LL_DataOutStage+0x82>
 8008efa:	e018      	b.n	8008f2e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008efc:	2300      	movs	r3, #0
 8008efe:	75bb      	strb	r3, [r7, #22]
            break;
 8008f00:	e018      	b.n	8008f34 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f000 fa5e 	bl	80093ce <USBD_CoreFindIF>
 8008f12:	4603      	mov	r3, r0
 8008f14:	75bb      	strb	r3, [r7, #22]
            break;
 8008f16:	e00d      	b.n	8008f34 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	4619      	mov	r1, r3
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f000 fa60 	bl	80093e8 <USBD_CoreFindEP>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	75bb      	strb	r3, [r7, #22]
            break;
 8008f2c:	e002      	b.n	8008f34 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	75bb      	strb	r3, [r7, #22]
            break;
 8008f32:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008f34:	7dbb      	ldrb	r3, [r7, #22]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d119      	bne.n	8008f6e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b03      	cmp	r3, #3
 8008f44:	d113      	bne.n	8008f6e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008f46:	7dba      	ldrb	r2, [r7, #22]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	32ae      	adds	r2, #174	; 0xae
 8008f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00b      	beq.n	8008f6e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008f56:	7dba      	ldrb	r2, [r7, #22]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008f5e:	7dba      	ldrb	r2, [r7, #22]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	32ae      	adds	r2, #174	; 0xae
 8008f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f001 f94a 	bl	800a208 <USBD_CtlSendStatus>
 8008f74:	e032      	b.n	8008fdc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008f76:	7afb      	ldrb	r3, [r7, #11]
 8008f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	4619      	mov	r1, r3
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f000 fa31 	bl	80093e8 <USBD_CoreFindEP>
 8008f86:	4603      	mov	r3, r0
 8008f88:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f8a:	7dbb      	ldrb	r3, [r7, #22]
 8008f8c:	2bff      	cmp	r3, #255	; 0xff
 8008f8e:	d025      	beq.n	8008fdc <USBD_LL_DataOutStage+0x15c>
 8008f90:	7dbb      	ldrb	r3, [r7, #22]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d122      	bne.n	8008fdc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b03      	cmp	r3, #3
 8008fa0:	d117      	bne.n	8008fd2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008fa2:	7dba      	ldrb	r2, [r7, #22]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	32ae      	adds	r2, #174	; 0xae
 8008fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00f      	beq.n	8008fd2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008fb2:	7dba      	ldrb	r2, [r7, #22]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008fba:	7dba      	ldrb	r2, [r7, #22]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	32ae      	adds	r2, #174	; 0xae
 8008fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	7afa      	ldrb	r2, [r7, #11]
 8008fc8:	4611      	mov	r1, r2
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	4798      	blx	r3
 8008fce:	4603      	mov	r3, r0
 8008fd0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008fd2:	7dfb      	ldrb	r3, [r7, #23]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d001      	beq.n	8008fdc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008fd8:	7dfb      	ldrb	r3, [r7, #23]
 8008fda:	e000      	b.n	8008fde <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b086      	sub	sp, #24
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	60f8      	str	r0, [r7, #12]
 8008fee:	460b      	mov	r3, r1
 8008ff0:	607a      	str	r2, [r7, #4]
 8008ff2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008ff4:	7afb      	ldrb	r3, [r7, #11]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d16f      	bne.n	80090da <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	3314      	adds	r3, #20
 8008ffe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009006:	2b02      	cmp	r3, #2
 8009008:	d15a      	bne.n	80090c0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	689a      	ldr	r2, [r3, #8]
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	429a      	cmp	r2, r3
 8009014:	d914      	bls.n	8009040 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	689a      	ldr	r2, [r3, #8]
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	1ad2      	subs	r2, r2, r3
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	461a      	mov	r2, r3
 800902a:	6879      	ldr	r1, [r7, #4]
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f001 f8ac 	bl	800a18a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009032:	2300      	movs	r3, #0
 8009034:	2200      	movs	r2, #0
 8009036:	2100      	movs	r1, #0
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f001 fdc1 	bl	800abc0 <USBD_LL_PrepareReceive>
 800903e:	e03f      	b.n	80090c0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	68da      	ldr	r2, [r3, #12]
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	429a      	cmp	r2, r3
 800904a:	d11c      	bne.n	8009086 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009054:	429a      	cmp	r2, r3
 8009056:	d316      	bcc.n	8009086 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009062:	429a      	cmp	r2, r3
 8009064:	d20f      	bcs.n	8009086 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009066:	2200      	movs	r2, #0
 8009068:	2100      	movs	r1, #0
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f001 f88d 	bl	800a18a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009078:	2300      	movs	r3, #0
 800907a:	2200      	movs	r2, #0
 800907c:	2100      	movs	r1, #0
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f001 fd9e 	bl	800abc0 <USBD_LL_PrepareReceive>
 8009084:	e01c      	b.n	80090c0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800908c:	b2db      	uxtb	r3, r3
 800908e:	2b03      	cmp	r3, #3
 8009090:	d10f      	bne.n	80090b2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d009      	beq.n	80090b2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80090b2:	2180      	movs	r1, #128	; 0x80
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f001 fcd9 	bl	800aa6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f001 f8b7 	bl	800a22e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d03a      	beq.n	8009140 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	f7ff fe42 	bl	8008d54 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80090d8:	e032      	b.n	8009140 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80090da:	7afb      	ldrb	r3, [r7, #11]
 80090dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	4619      	mov	r1, r3
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f000 f97f 	bl	80093e8 <USBD_CoreFindEP>
 80090ea:	4603      	mov	r3, r0
 80090ec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090ee:	7dfb      	ldrb	r3, [r7, #23]
 80090f0:	2bff      	cmp	r3, #255	; 0xff
 80090f2:	d025      	beq.n	8009140 <USBD_LL_DataInStage+0x15a>
 80090f4:	7dfb      	ldrb	r3, [r7, #23]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d122      	bne.n	8009140 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b03      	cmp	r3, #3
 8009104:	d11c      	bne.n	8009140 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009106:	7dfa      	ldrb	r2, [r7, #23]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	32ae      	adds	r2, #174	; 0xae
 800910c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009110:	695b      	ldr	r3, [r3, #20]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d014      	beq.n	8009140 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009116:	7dfa      	ldrb	r2, [r7, #23]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800911e:	7dfa      	ldrb	r2, [r7, #23]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	32ae      	adds	r2, #174	; 0xae
 8009124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	7afa      	ldrb	r2, [r7, #11]
 800912c:	4611      	mov	r1, r2
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	4798      	blx	r3
 8009132:	4603      	mov	r3, r0
 8009134:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009136:	7dbb      	ldrb	r3, [r7, #22]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800913c:	7dbb      	ldrb	r3, [r7, #22]
 800913e:	e000      	b.n	8009142 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b084      	sub	sp, #16
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009152:	2300      	movs	r3, #0
 8009154:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2201      	movs	r2, #1
 800915a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009182:	2b00      	cmp	r3, #0
 8009184:	d014      	beq.n	80091b0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00e      	beq.n	80091b0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	6852      	ldr	r2, [r2, #4]
 800919e:	b2d2      	uxtb	r2, r2
 80091a0:	4611      	mov	r1, r2
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	4798      	blx	r3
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d001      	beq.n	80091b0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80091ac:	2303      	movs	r3, #3
 80091ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091b0:	2340      	movs	r3, #64	; 0x40
 80091b2:	2200      	movs	r2, #0
 80091b4:	2100      	movs	r1, #0
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f001 fc13 	bl	800a9e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2240      	movs	r2, #64	; 0x40
 80091c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091cc:	2340      	movs	r3, #64	; 0x40
 80091ce:	2200      	movs	r2, #0
 80091d0:	2180      	movs	r1, #128	; 0x80
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f001 fc05 	bl	800a9e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2240      	movs	r2, #64	; 0x40
 80091e2:	621a      	str	r2, [r3, #32]

  return ret;
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b083      	sub	sp, #12
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	460b      	mov	r3, r1
 80091f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	78fa      	ldrb	r2, [r7, #3]
 80091fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	370c      	adds	r7, #12
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr

0800920e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800920e:	b480      	push	{r7}
 8009210:	b083      	sub	sp, #12
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800921c:	b2da      	uxtb	r2, r3
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2204      	movs	r2, #4
 8009228:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	370c      	adds	r7, #12
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr

0800923a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800923a:	b480      	push	{r7}
 800923c:	b083      	sub	sp, #12
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009248:	b2db      	uxtb	r3, r3
 800924a:	2b04      	cmp	r3, #4
 800924c:	d106      	bne.n	800925c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009254:	b2da      	uxtb	r2, r3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	370c      	adds	r7, #12
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr

0800926a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b082      	sub	sp, #8
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b03      	cmp	r3, #3
 800927c:	d110      	bne.n	80092a0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00b      	beq.n	80092a0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800928e:	69db      	ldr	r3, [r3, #28]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d005      	beq.n	80092a0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800929a:	69db      	ldr	r3, [r3, #28]
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b082      	sub	sp, #8
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
 80092b2:	460b      	mov	r3, r1
 80092b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	32ae      	adds	r2, #174	; 0xae
 80092c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d101      	bne.n	80092cc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e01c      	b.n	8009306 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	2b03      	cmp	r3, #3
 80092d6:	d115      	bne.n	8009304 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	32ae      	adds	r2, #174	; 0xae
 80092e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e6:	6a1b      	ldr	r3, [r3, #32]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00b      	beq.n	8009304 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	32ae      	adds	r2, #174	; 0xae
 80092f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092fa:	6a1b      	ldr	r3, [r3, #32]
 80092fc:	78fa      	ldrb	r2, [r7, #3]
 80092fe:	4611      	mov	r1, r2
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b082      	sub	sp, #8
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	460b      	mov	r3, r1
 8009318:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	32ae      	adds	r2, #174	; 0xae
 8009324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d101      	bne.n	8009330 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800932c:	2303      	movs	r3, #3
 800932e:	e01c      	b.n	800936a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009336:	b2db      	uxtb	r3, r3
 8009338:	2b03      	cmp	r3, #3
 800933a:	d115      	bne.n	8009368 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	32ae      	adds	r2, #174	; 0xae
 8009346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800934a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00b      	beq.n	8009368 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	32ae      	adds	r2, #174	; 0xae
 800935a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800935e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009360:	78fa      	ldrb	r2, [r7, #3]
 8009362:	4611      	mov	r1, r2
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009372:	b480      	push	{r7}
 8009374:	b083      	sub	sp, #12
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00e      	beq.n	80093c4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	6852      	ldr	r2, [r2, #4]
 80093b2:	b2d2      	uxtb	r2, r2
 80093b4:	4611      	mov	r1, r2
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	4798      	blx	r3
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80093c0:	2303      	movs	r3, #3
 80093c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80093ce:	b480      	push	{r7}
 80093d0:	b083      	sub	sp, #12
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	460b      	mov	r3, r1
 80093d8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80093da:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80093dc:	4618      	mov	r0, r3
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	460b      	mov	r3, r1
 80093f2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80093f4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b086      	sub	sp, #24
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
 800940a:	460b      	mov	r3, r1
 800940c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009416:	2300      	movs	r3, #0
 8009418:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	885b      	ldrh	r3, [r3, #2]
 800941e:	b29a      	uxth	r2, r3
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	b29b      	uxth	r3, r3
 8009426:	429a      	cmp	r2, r3
 8009428:	d920      	bls.n	800946c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	b29b      	uxth	r3, r3
 8009430:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009432:	e013      	b.n	800945c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009434:	f107 030a 	add.w	r3, r7, #10
 8009438:	4619      	mov	r1, r3
 800943a:	6978      	ldr	r0, [r7, #20]
 800943c:	f000 f81b 	bl	8009476 <USBD_GetNextDesc>
 8009440:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	785b      	ldrb	r3, [r3, #1]
 8009446:	2b05      	cmp	r3, #5
 8009448:	d108      	bne.n	800945c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	789b      	ldrb	r3, [r3, #2]
 8009452:	78fa      	ldrb	r2, [r7, #3]
 8009454:	429a      	cmp	r2, r3
 8009456:	d008      	beq.n	800946a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009458:	2300      	movs	r3, #0
 800945a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	885b      	ldrh	r3, [r3, #2]
 8009460:	b29a      	uxth	r2, r3
 8009462:	897b      	ldrh	r3, [r7, #10]
 8009464:	429a      	cmp	r2, r3
 8009466:	d8e5      	bhi.n	8009434 <USBD_GetEpDesc+0x32>
 8009468:	e000      	b.n	800946c <USBD_GetEpDesc+0x6a>
          break;
 800946a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800946c:	693b      	ldr	r3, [r7, #16]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3718      	adds	r7, #24
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009476:	b480      	push	{r7}
 8009478:	b085      	sub	sp, #20
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	881a      	ldrh	r2, [r3, #0]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	b29b      	uxth	r3, r3
 800948e:	4413      	add	r3, r2
 8009490:	b29a      	uxth	r2, r3
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	461a      	mov	r2, r3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4413      	add	r3, r2
 80094a0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80094a2:	68fb      	ldr	r3, [r7, #12]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3714      	adds	r7, #20
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b087      	sub	sp, #28
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	3301      	adds	r3, #1
 80094c6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80094ce:	8a3b      	ldrh	r3, [r7, #16]
 80094d0:	021b      	lsls	r3, r3, #8
 80094d2:	b21a      	sxth	r2, r3
 80094d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80094d8:	4313      	orrs	r3, r2
 80094da:	b21b      	sxth	r3, r3
 80094dc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80094de:	89fb      	ldrh	r3, [r7, #14]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	371c      	adds	r7, #28
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094f6:	2300      	movs	r3, #0
 80094f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009502:	2b40      	cmp	r3, #64	; 0x40
 8009504:	d005      	beq.n	8009512 <USBD_StdDevReq+0x26>
 8009506:	2b40      	cmp	r3, #64	; 0x40
 8009508:	d857      	bhi.n	80095ba <USBD_StdDevReq+0xce>
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00f      	beq.n	800952e <USBD_StdDevReq+0x42>
 800950e:	2b20      	cmp	r3, #32
 8009510:	d153      	bne.n	80095ba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	32ae      	adds	r2, #174	; 0xae
 800951c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	4798      	blx	r3
 8009528:	4603      	mov	r3, r0
 800952a:	73fb      	strb	r3, [r7, #15]
      break;
 800952c:	e04a      	b.n	80095c4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	785b      	ldrb	r3, [r3, #1]
 8009532:	2b09      	cmp	r3, #9
 8009534:	d83b      	bhi.n	80095ae <USBD_StdDevReq+0xc2>
 8009536:	a201      	add	r2, pc, #4	; (adr r2, 800953c <USBD_StdDevReq+0x50>)
 8009538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953c:	08009591 	.word	0x08009591
 8009540:	080095a5 	.word	0x080095a5
 8009544:	080095af 	.word	0x080095af
 8009548:	0800959b 	.word	0x0800959b
 800954c:	080095af 	.word	0x080095af
 8009550:	0800956f 	.word	0x0800956f
 8009554:	08009565 	.word	0x08009565
 8009558:	080095af 	.word	0x080095af
 800955c:	08009587 	.word	0x08009587
 8009560:	08009579 	.word	0x08009579
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fa3c 	bl	80099e4 <USBD_GetDescriptor>
          break;
 800956c:	e024      	b.n	80095b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800956e:	6839      	ldr	r1, [r7, #0]
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 fba1 	bl	8009cb8 <USBD_SetAddress>
          break;
 8009576:	e01f      	b.n	80095b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fbe0 	bl	8009d40 <USBD_SetConfig>
 8009580:	4603      	mov	r3, r0
 8009582:	73fb      	strb	r3, [r7, #15]
          break;
 8009584:	e018      	b.n	80095b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009586:	6839      	ldr	r1, [r7, #0]
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 fc83 	bl	8009e94 <USBD_GetConfig>
          break;
 800958e:	e013      	b.n	80095b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009590:	6839      	ldr	r1, [r7, #0]
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 fcb4 	bl	8009f00 <USBD_GetStatus>
          break;
 8009598:	e00e      	b.n	80095b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800959a:	6839      	ldr	r1, [r7, #0]
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fce3 	bl	8009f68 <USBD_SetFeature>
          break;
 80095a2:	e009      	b.n	80095b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fd07 	bl	8009fba <USBD_ClrFeature>
          break;
 80095ac:	e004      	b.n	80095b8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80095ae:	6839      	ldr	r1, [r7, #0]
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fd5e 	bl	800a072 <USBD_CtlError>
          break;
 80095b6:	bf00      	nop
      }
      break;
 80095b8:	e004      	b.n	80095c4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80095ba:	6839      	ldr	r1, [r7, #0]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fd58 	bl	800a072 <USBD_CtlError>
      break;
 80095c2:	bf00      	nop
  }

  return ret;
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop

080095d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095e6:	2b40      	cmp	r3, #64	; 0x40
 80095e8:	d005      	beq.n	80095f6 <USBD_StdItfReq+0x26>
 80095ea:	2b40      	cmp	r3, #64	; 0x40
 80095ec:	d852      	bhi.n	8009694 <USBD_StdItfReq+0xc4>
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d001      	beq.n	80095f6 <USBD_StdItfReq+0x26>
 80095f2:	2b20      	cmp	r3, #32
 80095f4:	d14e      	bne.n	8009694 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	3b01      	subs	r3, #1
 8009600:	2b02      	cmp	r3, #2
 8009602:	d840      	bhi.n	8009686 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	889b      	ldrh	r3, [r3, #4]
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b01      	cmp	r3, #1
 800960c:	d836      	bhi.n	800967c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	889b      	ldrh	r3, [r3, #4]
 8009612:	b2db      	uxtb	r3, r3
 8009614:	4619      	mov	r1, r3
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f7ff fed9 	bl	80093ce <USBD_CoreFindIF>
 800961c:	4603      	mov	r3, r0
 800961e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009620:	7bbb      	ldrb	r3, [r7, #14]
 8009622:	2bff      	cmp	r3, #255	; 0xff
 8009624:	d01d      	beq.n	8009662 <USBD_StdItfReq+0x92>
 8009626:	7bbb      	ldrb	r3, [r7, #14]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d11a      	bne.n	8009662 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800962c:	7bba      	ldrb	r2, [r7, #14]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	32ae      	adds	r2, #174	; 0xae
 8009632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00f      	beq.n	800965c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800963c:	7bba      	ldrb	r2, [r7, #14]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009644:	7bba      	ldrb	r2, [r7, #14]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	32ae      	adds	r2, #174	; 0xae
 800964a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	4798      	blx	r3
 8009656:	4603      	mov	r3, r0
 8009658:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800965a:	e004      	b.n	8009666 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800965c:	2303      	movs	r3, #3
 800965e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009660:	e001      	b.n	8009666 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009662:	2303      	movs	r3, #3
 8009664:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	88db      	ldrh	r3, [r3, #6]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d110      	bne.n	8009690 <USBD_StdItfReq+0xc0>
 800966e:	7bfb      	ldrb	r3, [r7, #15]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10d      	bne.n	8009690 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fdc7 	bl	800a208 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800967a:	e009      	b.n	8009690 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800967c:	6839      	ldr	r1, [r7, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fcf7 	bl	800a072 <USBD_CtlError>
          break;
 8009684:	e004      	b.n	8009690 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 fcf2 	bl	800a072 <USBD_CtlError>
          break;
 800968e:	e000      	b.n	8009692 <USBD_StdItfReq+0xc2>
          break;
 8009690:	bf00      	nop
      }
      break;
 8009692:	e004      	b.n	800969e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fceb 	bl	800a072 <USBD_CtlError>
      break;
 800969c:	bf00      	nop
  }

  return ret;
 800969e:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3710      	adds	r7, #16
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80096b2:	2300      	movs	r3, #0
 80096b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	889b      	ldrh	r3, [r3, #4]
 80096ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096c4:	2b40      	cmp	r3, #64	; 0x40
 80096c6:	d007      	beq.n	80096d8 <USBD_StdEPReq+0x30>
 80096c8:	2b40      	cmp	r3, #64	; 0x40
 80096ca:	f200 817f 	bhi.w	80099cc <USBD_StdEPReq+0x324>
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d02a      	beq.n	8009728 <USBD_StdEPReq+0x80>
 80096d2:	2b20      	cmp	r3, #32
 80096d4:	f040 817a 	bne.w	80099cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80096d8:	7bbb      	ldrb	r3, [r7, #14]
 80096da:	4619      	mov	r1, r3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f7ff fe83 	bl	80093e8 <USBD_CoreFindEP>
 80096e2:	4603      	mov	r3, r0
 80096e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096e6:	7b7b      	ldrb	r3, [r7, #13]
 80096e8:	2bff      	cmp	r3, #255	; 0xff
 80096ea:	f000 8174 	beq.w	80099d6 <USBD_StdEPReq+0x32e>
 80096ee:	7b7b      	ldrb	r3, [r7, #13]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f040 8170 	bne.w	80099d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80096f6:	7b7a      	ldrb	r2, [r7, #13]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80096fe:	7b7a      	ldrb	r2, [r7, #13]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	32ae      	adds	r2, #174	; 0xae
 8009704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	2b00      	cmp	r3, #0
 800970c:	f000 8163 	beq.w	80099d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009710:	7b7a      	ldrb	r2, [r7, #13]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	32ae      	adds	r2, #174	; 0xae
 8009716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	4798      	blx	r3
 8009722:	4603      	mov	r3, r0
 8009724:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009726:	e156      	b.n	80099d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	785b      	ldrb	r3, [r3, #1]
 800972c:	2b03      	cmp	r3, #3
 800972e:	d008      	beq.n	8009742 <USBD_StdEPReq+0x9a>
 8009730:	2b03      	cmp	r3, #3
 8009732:	f300 8145 	bgt.w	80099c0 <USBD_StdEPReq+0x318>
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 809b 	beq.w	8009872 <USBD_StdEPReq+0x1ca>
 800973c:	2b01      	cmp	r3, #1
 800973e:	d03c      	beq.n	80097ba <USBD_StdEPReq+0x112>
 8009740:	e13e      	b.n	80099c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b02      	cmp	r3, #2
 800974c:	d002      	beq.n	8009754 <USBD_StdEPReq+0xac>
 800974e:	2b03      	cmp	r3, #3
 8009750:	d016      	beq.n	8009780 <USBD_StdEPReq+0xd8>
 8009752:	e02c      	b.n	80097ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009754:	7bbb      	ldrb	r3, [r7, #14]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00d      	beq.n	8009776 <USBD_StdEPReq+0xce>
 800975a:	7bbb      	ldrb	r3, [r7, #14]
 800975c:	2b80      	cmp	r3, #128	; 0x80
 800975e:	d00a      	beq.n	8009776 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009760:	7bbb      	ldrb	r3, [r7, #14]
 8009762:	4619      	mov	r1, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f001 f981 	bl	800aa6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800976a:	2180      	movs	r1, #128	; 0x80
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f001 f97d 	bl	800aa6c <USBD_LL_StallEP>
 8009772:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009774:	e020      	b.n	80097b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009776:	6839      	ldr	r1, [r7, #0]
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 fc7a 	bl	800a072 <USBD_CtlError>
              break;
 800977e:	e01b      	b.n	80097b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	885b      	ldrh	r3, [r3, #2]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d10e      	bne.n	80097a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009788:	7bbb      	ldrb	r3, [r7, #14]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00b      	beq.n	80097a6 <USBD_StdEPReq+0xfe>
 800978e:	7bbb      	ldrb	r3, [r7, #14]
 8009790:	2b80      	cmp	r3, #128	; 0x80
 8009792:	d008      	beq.n	80097a6 <USBD_StdEPReq+0xfe>
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	88db      	ldrh	r3, [r3, #6]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d104      	bne.n	80097a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800979c:	7bbb      	ldrb	r3, [r7, #14]
 800979e:	4619      	mov	r1, r3
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f001 f963 	bl	800aa6c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fd2e 	bl	800a208 <USBD_CtlSendStatus>

              break;
 80097ac:	e004      	b.n	80097b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80097ae:	6839      	ldr	r1, [r7, #0]
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 fc5e 	bl	800a072 <USBD_CtlError>
              break;
 80097b6:	bf00      	nop
          }
          break;
 80097b8:	e107      	b.n	80099ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	d002      	beq.n	80097cc <USBD_StdEPReq+0x124>
 80097c6:	2b03      	cmp	r3, #3
 80097c8:	d016      	beq.n	80097f8 <USBD_StdEPReq+0x150>
 80097ca:	e04b      	b.n	8009864 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097cc:	7bbb      	ldrb	r3, [r7, #14]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00d      	beq.n	80097ee <USBD_StdEPReq+0x146>
 80097d2:	7bbb      	ldrb	r3, [r7, #14]
 80097d4:	2b80      	cmp	r3, #128	; 0x80
 80097d6:	d00a      	beq.n	80097ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80097d8:	7bbb      	ldrb	r3, [r7, #14]
 80097da:	4619      	mov	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f001 f945 	bl	800aa6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80097e2:	2180      	movs	r1, #128	; 0x80
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f001 f941 	bl	800aa6c <USBD_LL_StallEP>
 80097ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80097ec:	e040      	b.n	8009870 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80097ee:	6839      	ldr	r1, [r7, #0]
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fc3e 	bl	800a072 <USBD_CtlError>
              break;
 80097f6:	e03b      	b.n	8009870 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	885b      	ldrh	r3, [r3, #2]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d136      	bne.n	800986e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009800:	7bbb      	ldrb	r3, [r7, #14]
 8009802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009806:	2b00      	cmp	r3, #0
 8009808:	d004      	beq.n	8009814 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800980a:	7bbb      	ldrb	r3, [r7, #14]
 800980c:	4619      	mov	r1, r3
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f001 f94b 	bl	800aaaa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 fcf7 	bl	800a208 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800981a:	7bbb      	ldrb	r3, [r7, #14]
 800981c:	4619      	mov	r1, r3
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7ff fde2 	bl	80093e8 <USBD_CoreFindEP>
 8009824:	4603      	mov	r3, r0
 8009826:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009828:	7b7b      	ldrb	r3, [r7, #13]
 800982a:	2bff      	cmp	r3, #255	; 0xff
 800982c:	d01f      	beq.n	800986e <USBD_StdEPReq+0x1c6>
 800982e:	7b7b      	ldrb	r3, [r7, #13]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d11c      	bne.n	800986e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009834:	7b7a      	ldrb	r2, [r7, #13]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800983c:	7b7a      	ldrb	r2, [r7, #13]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	32ae      	adds	r2, #174	; 0xae
 8009842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d010      	beq.n	800986e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800984c:	7b7a      	ldrb	r2, [r7, #13]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	32ae      	adds	r2, #174	; 0xae
 8009852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	6839      	ldr	r1, [r7, #0]
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	4798      	blx	r3
 800985e:	4603      	mov	r3, r0
 8009860:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009862:	e004      	b.n	800986e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009864:	6839      	ldr	r1, [r7, #0]
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fc03 	bl	800a072 <USBD_CtlError>
              break;
 800986c:	e000      	b.n	8009870 <USBD_StdEPReq+0x1c8>
              break;
 800986e:	bf00      	nop
          }
          break;
 8009870:	e0ab      	b.n	80099ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009878:	b2db      	uxtb	r3, r3
 800987a:	2b02      	cmp	r3, #2
 800987c:	d002      	beq.n	8009884 <USBD_StdEPReq+0x1dc>
 800987e:	2b03      	cmp	r3, #3
 8009880:	d032      	beq.n	80098e8 <USBD_StdEPReq+0x240>
 8009882:	e097      	b.n	80099b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009884:	7bbb      	ldrb	r3, [r7, #14]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d007      	beq.n	800989a <USBD_StdEPReq+0x1f2>
 800988a:	7bbb      	ldrb	r3, [r7, #14]
 800988c:	2b80      	cmp	r3, #128	; 0x80
 800988e:	d004      	beq.n	800989a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009890:	6839      	ldr	r1, [r7, #0]
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fbed 	bl	800a072 <USBD_CtlError>
                break;
 8009898:	e091      	b.n	80099be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800989a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	da0b      	bge.n	80098ba <USBD_StdEPReq+0x212>
 80098a2:	7bbb      	ldrb	r3, [r7, #14]
 80098a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098a8:	4613      	mov	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	4413      	add	r3, r2
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	3310      	adds	r3, #16
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	4413      	add	r3, r2
 80098b6:	3304      	adds	r3, #4
 80098b8:	e00b      	b.n	80098d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098ba:	7bbb      	ldrb	r3, [r7, #14]
 80098bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098c0:	4613      	mov	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	4413      	add	r3, r2
 80098d0:	3304      	adds	r3, #4
 80098d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	2200      	movs	r2, #0
 80098d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	2202      	movs	r2, #2
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 fc37 	bl	800a154 <USBD_CtlSendData>
              break;
 80098e6:	e06a      	b.n	80099be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80098e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	da11      	bge.n	8009914 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80098f0:	7bbb      	ldrb	r3, [r7, #14]
 80098f2:	f003 020f 	and.w	r2, r3, #15
 80098f6:	6879      	ldr	r1, [r7, #4]
 80098f8:	4613      	mov	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4413      	add	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	440b      	add	r3, r1
 8009902:	3324      	adds	r3, #36	; 0x24
 8009904:	881b      	ldrh	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d117      	bne.n	800993a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800990a:	6839      	ldr	r1, [r7, #0]
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 fbb0 	bl	800a072 <USBD_CtlError>
                  break;
 8009912:	e054      	b.n	80099be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009914:	7bbb      	ldrb	r3, [r7, #14]
 8009916:	f003 020f 	and.w	r2, r3, #15
 800991a:	6879      	ldr	r1, [r7, #4]
 800991c:	4613      	mov	r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4413      	add	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	440b      	add	r3, r1
 8009926:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800992a:	881b      	ldrh	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d104      	bne.n	800993a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009930:	6839      	ldr	r1, [r7, #0]
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 fb9d 	bl	800a072 <USBD_CtlError>
                  break;
 8009938:	e041      	b.n	80099be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800993a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800993e:	2b00      	cmp	r3, #0
 8009940:	da0b      	bge.n	800995a <USBD_StdEPReq+0x2b2>
 8009942:	7bbb      	ldrb	r3, [r7, #14]
 8009944:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009948:	4613      	mov	r3, r2
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	4413      	add	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	3310      	adds	r3, #16
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	4413      	add	r3, r2
 8009956:	3304      	adds	r3, #4
 8009958:	e00b      	b.n	8009972 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800995a:	7bbb      	ldrb	r3, [r7, #14]
 800995c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009960:	4613      	mov	r3, r2
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4413      	add	r3, r2
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	4413      	add	r3, r2
 8009970:	3304      	adds	r3, #4
 8009972:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009974:	7bbb      	ldrb	r3, [r7, #14]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d002      	beq.n	8009980 <USBD_StdEPReq+0x2d8>
 800997a:	7bbb      	ldrb	r3, [r7, #14]
 800997c:	2b80      	cmp	r3, #128	; 0x80
 800997e:	d103      	bne.n	8009988 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	2200      	movs	r2, #0
 8009984:	601a      	str	r2, [r3, #0]
 8009986:	e00e      	b.n	80099a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009988:	7bbb      	ldrb	r3, [r7, #14]
 800998a:	4619      	mov	r1, r3
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f001 f8ab 	bl	800aae8 <USBD_LL_IsStallEP>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d003      	beq.n	80099a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	2201      	movs	r2, #1
 800999c:	601a      	str	r2, [r3, #0]
 800999e:	e002      	b.n	80099a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2200      	movs	r2, #0
 80099a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	2202      	movs	r2, #2
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fbd1 	bl	800a154 <USBD_CtlSendData>
              break;
 80099b2:	e004      	b.n	80099be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 fb5b 	bl	800a072 <USBD_CtlError>
              break;
 80099bc:	bf00      	nop
          }
          break;
 80099be:	e004      	b.n	80099ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fb55 	bl	800a072 <USBD_CtlError>
          break;
 80099c8:	bf00      	nop
      }
      break;
 80099ca:	e005      	b.n	80099d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80099cc:	6839      	ldr	r1, [r7, #0]
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fb4f 	bl	800a072 <USBD_CtlError>
      break;
 80099d4:	e000      	b.n	80099d8 <USBD_StdEPReq+0x330>
      break;
 80099d6:	bf00      	nop
  }

  return ret;
 80099d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
	...

080099e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80099f2:	2300      	movs	r3, #0
 80099f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80099f6:	2300      	movs	r3, #0
 80099f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	885b      	ldrh	r3, [r3, #2]
 80099fe:	0a1b      	lsrs	r3, r3, #8
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	3b01      	subs	r3, #1
 8009a04:	2b06      	cmp	r3, #6
 8009a06:	f200 8128 	bhi.w	8009c5a <USBD_GetDescriptor+0x276>
 8009a0a:	a201      	add	r2, pc, #4	; (adr r2, 8009a10 <USBD_GetDescriptor+0x2c>)
 8009a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a10:	08009a2d 	.word	0x08009a2d
 8009a14:	08009a45 	.word	0x08009a45
 8009a18:	08009a85 	.word	0x08009a85
 8009a1c:	08009c5b 	.word	0x08009c5b
 8009a20:	08009c5b 	.word	0x08009c5b
 8009a24:	08009bfb 	.word	0x08009bfb
 8009a28:	08009c27 	.word	0x08009c27
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	7c12      	ldrb	r2, [r2, #16]
 8009a38:	f107 0108 	add.w	r1, r7, #8
 8009a3c:	4610      	mov	r0, r2
 8009a3e:	4798      	blx	r3
 8009a40:	60f8      	str	r0, [r7, #12]
      break;
 8009a42:	e112      	b.n	8009c6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	7c1b      	ldrb	r3, [r3, #16]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10d      	bne.n	8009a68 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a54:	f107 0208 	add.w	r2, r7, #8
 8009a58:	4610      	mov	r0, r2
 8009a5a:	4798      	blx	r3
 8009a5c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	3301      	adds	r3, #1
 8009a62:	2202      	movs	r2, #2
 8009a64:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a66:	e100      	b.n	8009c6a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a70:	f107 0208 	add.w	r2, r7, #8
 8009a74:	4610      	mov	r0, r2
 8009a76:	4798      	blx	r3
 8009a78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	2202      	movs	r2, #2
 8009a80:	701a      	strb	r2, [r3, #0]
      break;
 8009a82:	e0f2      	b.n	8009c6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	885b      	ldrh	r3, [r3, #2]
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	2b05      	cmp	r3, #5
 8009a8c:	f200 80ac 	bhi.w	8009be8 <USBD_GetDescriptor+0x204>
 8009a90:	a201      	add	r2, pc, #4	; (adr r2, 8009a98 <USBD_GetDescriptor+0xb4>)
 8009a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a96:	bf00      	nop
 8009a98:	08009ab1 	.word	0x08009ab1
 8009a9c:	08009ae5 	.word	0x08009ae5
 8009aa0:	08009b19 	.word	0x08009b19
 8009aa4:	08009b4d 	.word	0x08009b4d
 8009aa8:	08009b81 	.word	0x08009b81
 8009aac:	08009bb5 	.word	0x08009bb5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00b      	beq.n	8009ad4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	7c12      	ldrb	r2, [r2, #16]
 8009ac8:	f107 0108 	add.w	r1, r7, #8
 8009acc:	4610      	mov	r0, r2
 8009ace:	4798      	blx	r3
 8009ad0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ad2:	e091      	b.n	8009bf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ad4:	6839      	ldr	r1, [r7, #0]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 facb 	bl	800a072 <USBD_CtlError>
            err++;
 8009adc:	7afb      	ldrb	r3, [r7, #11]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ae2:	e089      	b.n	8009bf8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00b      	beq.n	8009b08 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	7c12      	ldrb	r2, [r2, #16]
 8009afc:	f107 0108 	add.w	r1, r7, #8
 8009b00:	4610      	mov	r0, r2
 8009b02:	4798      	blx	r3
 8009b04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b06:	e077      	b.n	8009bf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fab1 	bl	800a072 <USBD_CtlError>
            err++;
 8009b10:	7afb      	ldrb	r3, [r7, #11]
 8009b12:	3301      	adds	r3, #1
 8009b14:	72fb      	strb	r3, [r7, #11]
          break;
 8009b16:	e06f      	b.n	8009bf8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00b      	beq.n	8009b3c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	7c12      	ldrb	r2, [r2, #16]
 8009b30:	f107 0108 	add.w	r1, r7, #8
 8009b34:	4610      	mov	r0, r2
 8009b36:	4798      	blx	r3
 8009b38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b3a:	e05d      	b.n	8009bf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fa97 	bl	800a072 <USBD_CtlError>
            err++;
 8009b44:	7afb      	ldrb	r3, [r7, #11]
 8009b46:	3301      	adds	r3, #1
 8009b48:	72fb      	strb	r3, [r7, #11]
          break;
 8009b4a:	e055      	b.n	8009bf8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00b      	beq.n	8009b70 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b5e:	691b      	ldr	r3, [r3, #16]
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	7c12      	ldrb	r2, [r2, #16]
 8009b64:	f107 0108 	add.w	r1, r7, #8
 8009b68:	4610      	mov	r0, r2
 8009b6a:	4798      	blx	r3
 8009b6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b6e:	e043      	b.n	8009bf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b70:	6839      	ldr	r1, [r7, #0]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fa7d 	bl	800a072 <USBD_CtlError>
            err++;
 8009b78:	7afb      	ldrb	r3, [r7, #11]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b7e:	e03b      	b.n	8009bf8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b86:	695b      	ldr	r3, [r3, #20]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00b      	beq.n	8009ba4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b92:	695b      	ldr	r3, [r3, #20]
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	7c12      	ldrb	r2, [r2, #16]
 8009b98:	f107 0108 	add.w	r1, r7, #8
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	4798      	blx	r3
 8009ba0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ba2:	e029      	b.n	8009bf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ba4:	6839      	ldr	r1, [r7, #0]
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 fa63 	bl	800a072 <USBD_CtlError>
            err++;
 8009bac:	7afb      	ldrb	r3, [r7, #11]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	72fb      	strb	r3, [r7, #11]
          break;
 8009bb2:	e021      	b.n	8009bf8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00b      	beq.n	8009bd8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	7c12      	ldrb	r2, [r2, #16]
 8009bcc:	f107 0108 	add.w	r1, r7, #8
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	4798      	blx	r3
 8009bd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bd6:	e00f      	b.n	8009bf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fa49 	bl	800a072 <USBD_CtlError>
            err++;
 8009be0:	7afb      	ldrb	r3, [r7, #11]
 8009be2:	3301      	adds	r3, #1
 8009be4:	72fb      	strb	r3, [r7, #11]
          break;
 8009be6:	e007      	b.n	8009bf8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009be8:	6839      	ldr	r1, [r7, #0]
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 fa41 	bl	800a072 <USBD_CtlError>
          err++;
 8009bf0:	7afb      	ldrb	r3, [r7, #11]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009bf6:	bf00      	nop
      }
      break;
 8009bf8:	e037      	b.n	8009c6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	7c1b      	ldrb	r3, [r3, #16]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d109      	bne.n	8009c16 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c0a:	f107 0208 	add.w	r2, r7, #8
 8009c0e:	4610      	mov	r0, r2
 8009c10:	4798      	blx	r3
 8009c12:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c14:	e029      	b.n	8009c6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 fa2a 	bl	800a072 <USBD_CtlError>
        err++;
 8009c1e:	7afb      	ldrb	r3, [r7, #11]
 8009c20:	3301      	adds	r3, #1
 8009c22:	72fb      	strb	r3, [r7, #11]
      break;
 8009c24:	e021      	b.n	8009c6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	7c1b      	ldrb	r3, [r3, #16]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10d      	bne.n	8009c4a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c36:	f107 0208 	add.w	r2, r7, #8
 8009c3a:	4610      	mov	r0, r2
 8009c3c:	4798      	blx	r3
 8009c3e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	3301      	adds	r3, #1
 8009c44:	2207      	movs	r2, #7
 8009c46:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c48:	e00f      	b.n	8009c6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c4a:	6839      	ldr	r1, [r7, #0]
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 fa10 	bl	800a072 <USBD_CtlError>
        err++;
 8009c52:	7afb      	ldrb	r3, [r7, #11]
 8009c54:	3301      	adds	r3, #1
 8009c56:	72fb      	strb	r3, [r7, #11]
      break;
 8009c58:	e007      	b.n	8009c6a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009c5a:	6839      	ldr	r1, [r7, #0]
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fa08 	bl	800a072 <USBD_CtlError>
      err++;
 8009c62:	7afb      	ldrb	r3, [r7, #11]
 8009c64:	3301      	adds	r3, #1
 8009c66:	72fb      	strb	r3, [r7, #11]
      break;
 8009c68:	bf00      	nop
  }

  if (err != 0U)
 8009c6a:	7afb      	ldrb	r3, [r7, #11]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d11e      	bne.n	8009cae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	88db      	ldrh	r3, [r3, #6]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d016      	beq.n	8009ca6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009c78:	893b      	ldrh	r3, [r7, #8]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00e      	beq.n	8009c9c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	88da      	ldrh	r2, [r3, #6]
 8009c82:	893b      	ldrh	r3, [r7, #8]
 8009c84:	4293      	cmp	r3, r2
 8009c86:	bf28      	it	cs
 8009c88:	4613      	movcs	r3, r2
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009c8e:	893b      	ldrh	r3, [r7, #8]
 8009c90:	461a      	mov	r2, r3
 8009c92:	68f9      	ldr	r1, [r7, #12]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fa5d 	bl	800a154 <USBD_CtlSendData>
 8009c9a:	e009      	b.n	8009cb0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009c9c:	6839      	ldr	r1, [r7, #0]
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 f9e7 	bl	800a072 <USBD_CtlError>
 8009ca4:	e004      	b.n	8009cb0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 faae 	bl	800a208 <USBD_CtlSendStatus>
 8009cac:	e000      	b.n	8009cb0 <USBD_GetDescriptor+0x2cc>
    return;
 8009cae:	bf00      	nop
  }
}
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop

08009cb8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	889b      	ldrh	r3, [r3, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d131      	bne.n	8009d2e <USBD_SetAddress+0x76>
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	88db      	ldrh	r3, [r3, #6]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d12d      	bne.n	8009d2e <USBD_SetAddress+0x76>
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	885b      	ldrh	r3, [r3, #2]
 8009cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8009cd8:	d829      	bhi.n	8009d2e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	885b      	ldrh	r3, [r3, #2]
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ce4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	2b03      	cmp	r3, #3
 8009cf0:	d104      	bne.n	8009cfc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f9bc 	bl	800a072 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cfa:	e01d      	b.n	8009d38 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	7bfa      	ldrb	r2, [r7, #15]
 8009d00:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d04:	7bfb      	ldrb	r3, [r7, #15]
 8009d06:	4619      	mov	r1, r3
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 ff19 	bl	800ab40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fa7a 	bl	800a208 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d14:	7bfb      	ldrb	r3, [r7, #15]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d004      	beq.n	8009d24 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2202      	movs	r2, #2
 8009d1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d22:	e009      	b.n	8009d38 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d2c:	e004      	b.n	8009d38 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d2e:	6839      	ldr	r1, [r7, #0]
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 f99e 	bl	800a072 <USBD_CtlError>
  }
}
 8009d36:	bf00      	nop
 8009d38:	bf00      	nop
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	885b      	ldrh	r3, [r3, #2]
 8009d52:	b2da      	uxtb	r2, r3
 8009d54:	4b4e      	ldr	r3, [pc, #312]	; (8009e90 <USBD_SetConfig+0x150>)
 8009d56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d58:	4b4d      	ldr	r3, [pc, #308]	; (8009e90 <USBD_SetConfig+0x150>)
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d905      	bls.n	8009d6c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f985 	bl	800a072 <USBD_CtlError>
    return USBD_FAIL;
 8009d68:	2303      	movs	r3, #3
 8009d6a:	e08c      	b.n	8009e86 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d002      	beq.n	8009d7e <USBD_SetConfig+0x3e>
 8009d78:	2b03      	cmp	r3, #3
 8009d7a:	d029      	beq.n	8009dd0 <USBD_SetConfig+0x90>
 8009d7c:	e075      	b.n	8009e6a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009d7e:	4b44      	ldr	r3, [pc, #272]	; (8009e90 <USBD_SetConfig+0x150>)
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d020      	beq.n	8009dc8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009d86:	4b42      	ldr	r3, [pc, #264]	; (8009e90 <USBD_SetConfig+0x150>)
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d90:	4b3f      	ldr	r3, [pc, #252]	; (8009e90 <USBD_SetConfig+0x150>)
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	4619      	mov	r1, r3
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f7fe ffe7 	bl	8008d6a <USBD_SetClassConfig>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009da0:	7bfb      	ldrb	r3, [r7, #15]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d008      	beq.n	8009db8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009da6:	6839      	ldr	r1, [r7, #0]
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f962 	bl	800a072 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2202      	movs	r2, #2
 8009db2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009db6:	e065      	b.n	8009e84 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 fa25 	bl	800a208 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2203      	movs	r2, #3
 8009dc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009dc6:	e05d      	b.n	8009e84 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 fa1d 	bl	800a208 <USBD_CtlSendStatus>
      break;
 8009dce:	e059      	b.n	8009e84 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009dd0:	4b2f      	ldr	r3, [pc, #188]	; (8009e90 <USBD_SetConfig+0x150>)
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d112      	bne.n	8009dfe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2202      	movs	r2, #2
 8009ddc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009de0:	4b2b      	ldr	r3, [pc, #172]	; (8009e90 <USBD_SetConfig+0x150>)
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	461a      	mov	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009dea:	4b29      	ldr	r3, [pc, #164]	; (8009e90 <USBD_SetConfig+0x150>)
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	4619      	mov	r1, r3
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f7fe ffd6 	bl	8008da2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 fa06 	bl	800a208 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009dfc:	e042      	b.n	8009e84 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009dfe:	4b24      	ldr	r3, [pc, #144]	; (8009e90 <USBD_SetConfig+0x150>)
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	461a      	mov	r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d02a      	beq.n	8009e62 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	4619      	mov	r1, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f7fe ffc4 	bl	8008da2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009e1a:	4b1d      	ldr	r3, [pc, #116]	; (8009e90 <USBD_SetConfig+0x150>)
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e24:	4b1a      	ldr	r3, [pc, #104]	; (8009e90 <USBD_SetConfig+0x150>)
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	4619      	mov	r1, r3
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f7fe ff9d 	bl	8008d6a <USBD_SetClassConfig>
 8009e30:	4603      	mov	r3, r0
 8009e32:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009e34:	7bfb      	ldrb	r3, [r7, #15]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00f      	beq.n	8009e5a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009e3a:	6839      	ldr	r1, [r7, #0]
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 f918 	bl	800a072 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	4619      	mov	r1, r3
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7fe ffa9 	bl	8008da2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2202      	movs	r2, #2
 8009e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e58:	e014      	b.n	8009e84 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 f9d4 	bl	800a208 <USBD_CtlSendStatus>
      break;
 8009e60:	e010      	b.n	8009e84 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f9d0 	bl	800a208 <USBD_CtlSendStatus>
      break;
 8009e68:	e00c      	b.n	8009e84 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009e6a:	6839      	ldr	r1, [r7, #0]
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f900 	bl	800a072 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e72:	4b07      	ldr	r3, [pc, #28]	; (8009e90 <USBD_SetConfig+0x150>)
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	4619      	mov	r1, r3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f7fe ff92 	bl	8008da2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009e7e:	2303      	movs	r3, #3
 8009e80:	73fb      	strb	r3, [r7, #15]
      break;
 8009e82:	bf00      	nop
  }

  return ret;
 8009e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	2000052c 	.word	0x2000052c

08009e94 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	88db      	ldrh	r3, [r3, #6]
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d004      	beq.n	8009eb0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009ea6:	6839      	ldr	r1, [r7, #0]
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 f8e2 	bl	800a072 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009eae:	e023      	b.n	8009ef8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	dc02      	bgt.n	8009ec2 <USBD_GetConfig+0x2e>
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	dc03      	bgt.n	8009ec8 <USBD_GetConfig+0x34>
 8009ec0:	e015      	b.n	8009eee <USBD_GetConfig+0x5a>
 8009ec2:	2b03      	cmp	r3, #3
 8009ec4:	d00b      	beq.n	8009ede <USBD_GetConfig+0x4a>
 8009ec6:	e012      	b.n	8009eee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	3308      	adds	r3, #8
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f93c 	bl	800a154 <USBD_CtlSendData>
        break;
 8009edc:	e00c      	b.n	8009ef8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	3304      	adds	r3, #4
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 f934 	bl	800a154 <USBD_CtlSendData>
        break;
 8009eec:	e004      	b.n	8009ef8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009eee:	6839      	ldr	r1, [r7, #0]
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 f8be 	bl	800a072 <USBD_CtlError>
        break;
 8009ef6:	bf00      	nop
}
 8009ef8:	bf00      	nop
 8009efa:	3708      	adds	r7, #8
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	3b01      	subs	r3, #1
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	d81e      	bhi.n	8009f56 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	88db      	ldrh	r3, [r3, #6]
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d004      	beq.n	8009f2a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009f20:	6839      	ldr	r1, [r7, #0]
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 f8a5 	bl	800a072 <USBD_CtlError>
        break;
 8009f28:	e01a      	b.n	8009f60 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d005      	beq.n	8009f46 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	f043 0202 	orr.w	r2, r3, #2
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	330c      	adds	r3, #12
 8009f4a:	2202      	movs	r2, #2
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f900 	bl	800a154 <USBD_CtlSendData>
      break;
 8009f54:	e004      	b.n	8009f60 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009f56:	6839      	ldr	r1, [r7, #0]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 f88a 	bl	800a072 <USBD_CtlError>
      break;
 8009f5e:	bf00      	nop
  }
}
 8009f60:	bf00      	nop
 8009f62:	3708      	adds	r7, #8
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	885b      	ldrh	r3, [r3, #2]
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d107      	bne.n	8009f8a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 f940 	bl	800a208 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009f88:	e013      	b.n	8009fb2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	885b      	ldrh	r3, [r3, #2]
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d10b      	bne.n	8009faa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	889b      	ldrh	r3, [r3, #4]
 8009f96:	0a1b      	lsrs	r3, r3, #8
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	b2da      	uxtb	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 f930 	bl	800a208 <USBD_CtlSendStatus>
}
 8009fa8:	e003      	b.n	8009fb2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009faa:	6839      	ldr	r1, [r7, #0]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 f860 	bl	800a072 <USBD_CtlError>
}
 8009fb2:	bf00      	nop
 8009fb4:	3708      	adds	r7, #8
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b082      	sub	sp, #8
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	d80b      	bhi.n	8009fea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	885b      	ldrh	r3, [r3, #2]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d10c      	bne.n	8009ff4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 f910 	bl	800a208 <USBD_CtlSendStatus>
      }
      break;
 8009fe8:	e004      	b.n	8009ff4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009fea:	6839      	ldr	r1, [r7, #0]
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 f840 	bl	800a072 <USBD_CtlError>
      break;
 8009ff2:	e000      	b.n	8009ff6 <USBD_ClrFeature+0x3c>
      break;
 8009ff4:	bf00      	nop
  }
}
 8009ff6:	bf00      	nop
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b084      	sub	sp, #16
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
 800a006:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	781a      	ldrb	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	3301      	adds	r3, #1
 800a018:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	781a      	ldrb	r2, [r3, #0]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	3301      	adds	r3, #1
 800a026:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f7ff fa41 	bl	80094b0 <SWAPBYTE>
 800a02e:	4603      	mov	r3, r0
 800a030:	461a      	mov	r2, r3
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	3301      	adds	r3, #1
 800a03a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	3301      	adds	r3, #1
 800a040:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f7ff fa34 	bl	80094b0 <SWAPBYTE>
 800a048:	4603      	mov	r3, r0
 800a04a:	461a      	mov	r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	3301      	adds	r3, #1
 800a054:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	3301      	adds	r3, #1
 800a05a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f7ff fa27 	bl	80094b0 <SWAPBYTE>
 800a062:	4603      	mov	r3, r0
 800a064:	461a      	mov	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	80da      	strh	r2, [r3, #6]
}
 800a06a:	bf00      	nop
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b082      	sub	sp, #8
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
 800a07a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a07c:	2180      	movs	r1, #128	; 0x80
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fcf4 	bl	800aa6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a084:	2100      	movs	r1, #0
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 fcf0 	bl	800aa6c <USBD_LL_StallEP>
}
 800a08c:	bf00      	nop
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b086      	sub	sp, #24
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d036      	beq.n	800a118 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a0ae:	6938      	ldr	r0, [r7, #16]
 800a0b0:	f000 f836 	bl	800a120 <USBD_GetLen>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	005b      	lsls	r3, r3, #1
 800a0bc:	b29a      	uxth	r2, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a0c2:	7dfb      	ldrb	r3, [r7, #23]
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	7812      	ldrb	r2, [r2, #0]
 800a0cc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a0d4:	7dfb      	ldrb	r3, [r7, #23]
 800a0d6:	68ba      	ldr	r2, [r7, #8]
 800a0d8:	4413      	add	r3, r2
 800a0da:	2203      	movs	r2, #3
 800a0dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0de:	7dfb      	ldrb	r3, [r7, #23]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a0e4:	e013      	b.n	800a10e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a0e6:	7dfb      	ldrb	r3, [r7, #23]
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	693a      	ldr	r2, [r7, #16]
 800a0ee:	7812      	ldrb	r2, [r2, #0]
 800a0f0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	613b      	str	r3, [r7, #16]
    idx++;
 800a0f8:	7dfb      	ldrb	r3, [r7, #23]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a0fe:	7dfb      	ldrb	r3, [r7, #23]
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	4413      	add	r3, r2
 800a104:	2200      	movs	r2, #0
 800a106:	701a      	strb	r2, [r3, #0]
    idx++;
 800a108:	7dfb      	ldrb	r3, [r7, #23]
 800a10a:	3301      	adds	r3, #1
 800a10c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1e7      	bne.n	800a0e6 <USBD_GetString+0x52>
 800a116:	e000      	b.n	800a11a <USBD_GetString+0x86>
    return;
 800a118:	bf00      	nop
  }
}
 800a11a:	3718      	adds	r7, #24
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a120:	b480      	push	{r7}
 800a122:	b085      	sub	sp, #20
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a128:	2300      	movs	r3, #0
 800a12a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a130:	e005      	b.n	800a13e <USBD_GetLen+0x1e>
  {
    len++;
 800a132:	7bfb      	ldrb	r3, [r7, #15]
 800a134:	3301      	adds	r3, #1
 800a136:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	3301      	adds	r3, #1
 800a13c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1f5      	bne.n	800a132 <USBD_GetLen+0x12>
  }

  return len;
 800a146:	7bfb      	ldrb	r3, [r7, #15]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3714      	adds	r7, #20
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2202      	movs	r2, #2
 800a164:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	68ba      	ldr	r2, [r7, #8]
 800a178:	2100      	movs	r1, #0
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f000 fcff 	bl	800ab7e <USBD_LL_Transmit>

  return USBD_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b084      	sub	sp, #16
 800a18e:	af00      	add	r7, sp, #0
 800a190:	60f8      	str	r0, [r7, #12]
 800a192:	60b9      	str	r1, [r7, #8]
 800a194:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	68ba      	ldr	r2, [r7, #8]
 800a19a:	2100      	movs	r1, #0
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f000 fcee 	bl	800ab7e <USBD_LL_Transmit>

  return USBD_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2203      	movs	r2, #3
 800a1bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f000 fcf2 	bl	800abc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b084      	sub	sp, #16
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	60f8      	str	r0, [r7, #12]
 800a1ee:	60b9      	str	r1, [r7, #8]
 800a1f0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	68ba      	ldr	r2, [r7, #8]
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 fce1 	bl	800abc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2204      	movs	r2, #4
 800a214:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a218:	2300      	movs	r3, #0
 800a21a:	2200      	movs	r2, #0
 800a21c:	2100      	movs	r1, #0
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fcad 	bl	800ab7e <USBD_LL_Transmit>

  return USBD_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	3708      	adds	r7, #8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a22e:	b580      	push	{r7, lr}
 800a230:	b082      	sub	sp, #8
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2205      	movs	r2, #5
 800a23a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a23e:	2300      	movs	r3, #0
 800a240:	2200      	movs	r2, #0
 800a242:	2100      	movs	r1, #0
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 fcbb 	bl	800abc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a258:	2200      	movs	r2, #0
 800a25a:	4912      	ldr	r1, [pc, #72]	; (800a2a4 <MX_USB_DEVICE_Init+0x50>)
 800a25c:	4812      	ldr	r0, [pc, #72]	; (800a2a8 <MX_USB_DEVICE_Init+0x54>)
 800a25e:	f7fe fd07 	bl	8008c70 <USBD_Init>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d001      	beq.n	800a26c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a268:	f7f7 fcfa 	bl	8001c60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a26c:	490f      	ldr	r1, [pc, #60]	; (800a2ac <MX_USB_DEVICE_Init+0x58>)
 800a26e:	480e      	ldr	r0, [pc, #56]	; (800a2a8 <MX_USB_DEVICE_Init+0x54>)
 800a270:	f7fe fd2e 	bl	8008cd0 <USBD_RegisterClass>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d001      	beq.n	800a27e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a27a:	f7f7 fcf1 	bl	8001c60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a27e:	490c      	ldr	r1, [pc, #48]	; (800a2b0 <MX_USB_DEVICE_Init+0x5c>)
 800a280:	4809      	ldr	r0, [pc, #36]	; (800a2a8 <MX_USB_DEVICE_Init+0x54>)
 800a282:	f7fe fc1f 	bl	8008ac4 <USBD_CDC_RegisterInterface>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d001      	beq.n	800a290 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a28c:	f7f7 fce8 	bl	8001c60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a290:	4805      	ldr	r0, [pc, #20]	; (800a2a8 <MX_USB_DEVICE_Init+0x54>)
 800a292:	f7fe fd53 	bl	8008d3c <USBD_Start>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d001      	beq.n	800a2a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a29c:	f7f7 fce0 	bl	8001c60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a2a0:	bf00      	nop
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	200000b4 	.word	0x200000b4
 800a2a8:	20000530 	.word	0x20000530
 800a2ac:	20000018 	.word	0x20000018
 800a2b0:	200000a0 	.word	0x200000a0

0800a2b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	4905      	ldr	r1, [pc, #20]	; (800a2d0 <CDC_Init_FS+0x1c>)
 800a2bc:	4805      	ldr	r0, [pc, #20]	; (800a2d4 <CDC_Init_FS+0x20>)
 800a2be:	f7fe fc1b 	bl	8008af8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a2c2:	4905      	ldr	r1, [pc, #20]	; (800a2d8 <CDC_Init_FS+0x24>)
 800a2c4:	4803      	ldr	r0, [pc, #12]	; (800a2d4 <CDC_Init_FS+0x20>)
 800a2c6:	f7fe fc39 	bl	8008b3c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a2ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	2000100c 	.word	0x2000100c
 800a2d4:	20000530 	.word	0x20000530
 800a2d8:	2000080c 	.word	0x2000080c

0800a2dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a2e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	6039      	str	r1, [r7, #0]
 800a2f6:	71fb      	strb	r3, [r7, #7]
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a2fc:	79fb      	ldrb	r3, [r7, #7]
 800a2fe:	2b23      	cmp	r3, #35	; 0x23
 800a300:	d85c      	bhi.n	800a3bc <CDC_Control_FS+0xd0>
 800a302:	a201      	add	r2, pc, #4	; (adr r2, 800a308 <CDC_Control_FS+0x1c>)
 800a304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a308:	0800a3bd 	.word	0x0800a3bd
 800a30c:	0800a3bd 	.word	0x0800a3bd
 800a310:	0800a3bd 	.word	0x0800a3bd
 800a314:	0800a3bd 	.word	0x0800a3bd
 800a318:	0800a3bd 	.word	0x0800a3bd
 800a31c:	0800a3bd 	.word	0x0800a3bd
 800a320:	0800a3bd 	.word	0x0800a3bd
 800a324:	0800a3bd 	.word	0x0800a3bd
 800a328:	0800a3bd 	.word	0x0800a3bd
 800a32c:	0800a3bd 	.word	0x0800a3bd
 800a330:	0800a3bd 	.word	0x0800a3bd
 800a334:	0800a3bd 	.word	0x0800a3bd
 800a338:	0800a3bd 	.word	0x0800a3bd
 800a33c:	0800a3bd 	.word	0x0800a3bd
 800a340:	0800a3bd 	.word	0x0800a3bd
 800a344:	0800a3bd 	.word	0x0800a3bd
 800a348:	0800a3bd 	.word	0x0800a3bd
 800a34c:	0800a3bd 	.word	0x0800a3bd
 800a350:	0800a3bd 	.word	0x0800a3bd
 800a354:	0800a3bd 	.word	0x0800a3bd
 800a358:	0800a3bd 	.word	0x0800a3bd
 800a35c:	0800a3bd 	.word	0x0800a3bd
 800a360:	0800a3bd 	.word	0x0800a3bd
 800a364:	0800a3bd 	.word	0x0800a3bd
 800a368:	0800a3bd 	.word	0x0800a3bd
 800a36c:	0800a3bd 	.word	0x0800a3bd
 800a370:	0800a3bd 	.word	0x0800a3bd
 800a374:	0800a3bd 	.word	0x0800a3bd
 800a378:	0800a3bd 	.word	0x0800a3bd
 800a37c:	0800a3bd 	.word	0x0800a3bd
 800a380:	0800a3bd 	.word	0x0800a3bd
 800a384:	0800a3bd 	.word	0x0800a3bd
 800a388:	0800a399 	.word	0x0800a399
 800a38c:	0800a3ab 	.word	0x0800a3ab
 800a390:	0800a3bd 	.word	0x0800a3bd
 800a394:	0800a3bd 	.word	0x0800a3bd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800a398:	4b0c      	ldr	r3, [pc, #48]	; (800a3cc <CDC_Control_FS+0xe0>)
 800a39a:	683a      	ldr	r2, [r7, #0]
 800a39c:	6810      	ldr	r0, [r2, #0]
 800a39e:	6018      	str	r0, [r3, #0]
 800a3a0:	8891      	ldrh	r1, [r2, #4]
 800a3a2:	7992      	ldrb	r2, [r2, #6]
 800a3a4:	8099      	strh	r1, [r3, #4]
 800a3a6:	719a      	strb	r2, [r3, #6]
    break;
 800a3a8:	e009      	b.n	800a3be <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	4a07      	ldr	r2, [pc, #28]	; (800a3cc <CDC_Control_FS+0xe0>)
 800a3ae:	6810      	ldr	r0, [r2, #0]
 800a3b0:	6018      	str	r0, [r3, #0]
 800a3b2:	8891      	ldrh	r1, [r2, #4]
 800a3b4:	7992      	ldrb	r2, [r2, #6]
 800a3b6:	8099      	strh	r1, [r3, #4]
 800a3b8:	719a      	strb	r2, [r3, #6]
    break;
 800a3ba:	e000      	b.n	800a3be <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a3bc:	bf00      	nop
  }

  return (USBD_OK);
 800a3be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	370c      	adds	r7, #12
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr
 800a3cc:	20000098 	.word	0x20000098

0800a3d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b082      	sub	sp, #8
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a3da:	6879      	ldr	r1, [r7, #4]
 800a3dc:	4805      	ldr	r0, [pc, #20]	; (800a3f4 <CDC_Receive_FS+0x24>)
 800a3de:	f7fe fbad 	bl	8008b3c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a3e2:	4804      	ldr	r0, [pc, #16]	; (800a3f4 <CDC_Receive_FS+0x24>)
 800a3e4:	f7fe fc0e 	bl	8008c04 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a3e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	20000530 	.word	0x20000530

0800a3f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	460b      	mov	r3, r1
 800a402:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a404:	2300      	movs	r3, #0
 800a406:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a408:	4b0d      	ldr	r3, [pc, #52]	; (800a440 <CDC_Transmit_FS+0x48>)
 800a40a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a40e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a416:	2b00      	cmp	r3, #0
 800a418:	d001      	beq.n	800a41e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a41a:	2301      	movs	r3, #1
 800a41c:	e00b      	b.n	800a436 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a41e:	887b      	ldrh	r3, [r7, #2]
 800a420:	461a      	mov	r2, r3
 800a422:	6879      	ldr	r1, [r7, #4]
 800a424:	4806      	ldr	r0, [pc, #24]	; (800a440 <CDC_Transmit_FS+0x48>)
 800a426:	f7fe fb67 	bl	8008af8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a42a:	4805      	ldr	r0, [pc, #20]	; (800a440 <CDC_Transmit_FS+0x48>)
 800a42c:	f7fe fba4 	bl	8008b78 <USBD_CDC_TransmitPacket>
 800a430:	4603      	mov	r3, r0
 800a432:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a434:	7bfb      	ldrb	r3, [r7, #15]
}
 800a436:	4618      	mov	r0, r3
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	20000530 	.word	0x20000530

0800a444 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a444:	b480      	push	{r7}
 800a446:	b087      	sub	sp, #28
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	4613      	mov	r3, r2
 800a450:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a452:	2300      	movs	r3, #0
 800a454:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a456:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	371c      	adds	r7, #28
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
	...

0800a468 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	4603      	mov	r3, r0
 800a470:	6039      	str	r1, [r7, #0]
 800a472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	2212      	movs	r2, #18
 800a478:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a47a:	4b03      	ldr	r3, [pc, #12]	; (800a488 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	200000d0 	.word	0x200000d0

0800a48c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	4603      	mov	r3, r0
 800a494:	6039      	str	r1, [r7, #0]
 800a496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	2204      	movs	r2, #4
 800a49c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a49e:	4b03      	ldr	r3, [pc, #12]	; (800a4ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr
 800a4ac:	200000e4 	.word	0x200000e4

0800a4b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	6039      	str	r1, [r7, #0]
 800a4ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4bc:	79fb      	ldrb	r3, [r7, #7]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d105      	bne.n	800a4ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4c2:	683a      	ldr	r2, [r7, #0]
 800a4c4:	4907      	ldr	r1, [pc, #28]	; (800a4e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a4c6:	4808      	ldr	r0, [pc, #32]	; (800a4e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a4c8:	f7ff fde4 	bl	800a094 <USBD_GetString>
 800a4cc:	e004      	b.n	800a4d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4ce:	683a      	ldr	r2, [r7, #0]
 800a4d0:	4904      	ldr	r1, [pc, #16]	; (800a4e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a4d2:	4805      	ldr	r0, [pc, #20]	; (800a4e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a4d4:	f7ff fdde 	bl	800a094 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4d8:	4b02      	ldr	r3, [pc, #8]	; (800a4e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	2000180c 	.word	0x2000180c
 800a4e8:	0800ec5c 	.word	0x0800ec5c

0800a4ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	6039      	str	r1, [r7, #0]
 800a4f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a4f8:	683a      	ldr	r2, [r7, #0]
 800a4fa:	4904      	ldr	r1, [pc, #16]	; (800a50c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a4fc:	4804      	ldr	r0, [pc, #16]	; (800a510 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a4fe:	f7ff fdc9 	bl	800a094 <USBD_GetString>
  return USBD_StrDesc;
 800a502:	4b02      	ldr	r3, [pc, #8]	; (800a50c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a504:	4618      	mov	r0, r3
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	2000180c 	.word	0x2000180c
 800a510:	0800ec74 	.word	0x0800ec74

0800a514 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	4603      	mov	r3, r0
 800a51c:	6039      	str	r1, [r7, #0]
 800a51e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	221a      	movs	r2, #26
 800a524:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a526:	f000 f843 	bl	800a5b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a52a:	4b02      	ldr	r3, [pc, #8]	; (800a534 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3708      	adds	r7, #8
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	200000e8 	.word	0x200000e8

0800a538 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	4603      	mov	r3, r0
 800a540:	6039      	str	r1, [r7, #0]
 800a542:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a544:	79fb      	ldrb	r3, [r7, #7]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d105      	bne.n	800a556 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	4907      	ldr	r1, [pc, #28]	; (800a56c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a54e:	4808      	ldr	r0, [pc, #32]	; (800a570 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a550:	f7ff fda0 	bl	800a094 <USBD_GetString>
 800a554:	e004      	b.n	800a560 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	4904      	ldr	r1, [pc, #16]	; (800a56c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a55a:	4805      	ldr	r0, [pc, #20]	; (800a570 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a55c:	f7ff fd9a 	bl	800a094 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a560:	4b02      	ldr	r3, [pc, #8]	; (800a56c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a562:	4618      	mov	r0, r3
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	2000180c 	.word	0x2000180c
 800a570:	0800ec88 	.word	0x0800ec88

0800a574 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	4603      	mov	r3, r0
 800a57c:	6039      	str	r1, [r7, #0]
 800a57e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a580:	79fb      	ldrb	r3, [r7, #7]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d105      	bne.n	800a592 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a586:	683a      	ldr	r2, [r7, #0]
 800a588:	4907      	ldr	r1, [pc, #28]	; (800a5a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a58a:	4808      	ldr	r0, [pc, #32]	; (800a5ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a58c:	f7ff fd82 	bl	800a094 <USBD_GetString>
 800a590:	e004      	b.n	800a59c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	4904      	ldr	r1, [pc, #16]	; (800a5a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a596:	4805      	ldr	r0, [pc, #20]	; (800a5ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a598:	f7ff fd7c 	bl	800a094 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a59c:	4b02      	ldr	r3, [pc, #8]	; (800a5a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	2000180c 	.word	0x2000180c
 800a5ac:	0800ec94 	.word	0x0800ec94

0800a5b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a5b6:	4b0f      	ldr	r3, [pc, #60]	; (800a5f4 <Get_SerialNum+0x44>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a5bc:	4b0e      	ldr	r3, [pc, #56]	; (800a5f8 <Get_SerialNum+0x48>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a5c2:	4b0e      	ldr	r3, [pc, #56]	; (800a5fc <Get_SerialNum+0x4c>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a5c8:	68fa      	ldr	r2, [r7, #12]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d009      	beq.n	800a5ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a5d6:	2208      	movs	r2, #8
 800a5d8:	4909      	ldr	r1, [pc, #36]	; (800a600 <Get_SerialNum+0x50>)
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f000 f814 	bl	800a608 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a5e0:	2204      	movs	r2, #4
 800a5e2:	4908      	ldr	r1, [pc, #32]	; (800a604 <Get_SerialNum+0x54>)
 800a5e4:	68b8      	ldr	r0, [r7, #8]
 800a5e6:	f000 f80f 	bl	800a608 <IntToUnicode>
  }
}
 800a5ea:	bf00      	nop
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	1fff7a10 	.word	0x1fff7a10
 800a5f8:	1fff7a14 	.word	0x1fff7a14
 800a5fc:	1fff7a18 	.word	0x1fff7a18
 800a600:	200000ea 	.word	0x200000ea
 800a604:	200000fa 	.word	0x200000fa

0800a608 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a608:	b480      	push	{r7}
 800a60a:	b087      	sub	sp, #28
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	4613      	mov	r3, r2
 800a614:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a616:	2300      	movs	r3, #0
 800a618:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a61a:	2300      	movs	r3, #0
 800a61c:	75fb      	strb	r3, [r7, #23]
 800a61e:	e027      	b.n	800a670 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	0f1b      	lsrs	r3, r3, #28
 800a624:	2b09      	cmp	r3, #9
 800a626:	d80b      	bhi.n	800a640 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	0f1b      	lsrs	r3, r3, #28
 800a62c:	b2da      	uxtb	r2, r3
 800a62e:	7dfb      	ldrb	r3, [r7, #23]
 800a630:	005b      	lsls	r3, r3, #1
 800a632:	4619      	mov	r1, r3
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	440b      	add	r3, r1
 800a638:	3230      	adds	r2, #48	; 0x30
 800a63a:	b2d2      	uxtb	r2, r2
 800a63c:	701a      	strb	r2, [r3, #0]
 800a63e:	e00a      	b.n	800a656 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	0f1b      	lsrs	r3, r3, #28
 800a644:	b2da      	uxtb	r2, r3
 800a646:	7dfb      	ldrb	r3, [r7, #23]
 800a648:	005b      	lsls	r3, r3, #1
 800a64a:	4619      	mov	r1, r3
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	440b      	add	r3, r1
 800a650:	3237      	adds	r2, #55	; 0x37
 800a652:	b2d2      	uxtb	r2, r2
 800a654:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	011b      	lsls	r3, r3, #4
 800a65a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a65c:	7dfb      	ldrb	r3, [r7, #23]
 800a65e:	005b      	lsls	r3, r3, #1
 800a660:	3301      	adds	r3, #1
 800a662:	68ba      	ldr	r2, [r7, #8]
 800a664:	4413      	add	r3, r2
 800a666:	2200      	movs	r2, #0
 800a668:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a66a:	7dfb      	ldrb	r3, [r7, #23]
 800a66c:	3301      	adds	r3, #1
 800a66e:	75fb      	strb	r3, [r7, #23]
 800a670:	7dfa      	ldrb	r2, [r7, #23]
 800a672:	79fb      	ldrb	r3, [r7, #7]
 800a674:	429a      	cmp	r2, r3
 800a676:	d3d3      	bcc.n	800a620 <IntToUnicode+0x18>
  }
}
 800a678:	bf00      	nop
 800a67a:	bf00      	nop
 800a67c:	371c      	adds	r7, #28
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr
	...

0800a688 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b08a      	sub	sp, #40	; 0x28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a690:	f107 0314 	add.w	r3, r7, #20
 800a694:	2200      	movs	r2, #0
 800a696:	601a      	str	r2, [r3, #0]
 800a698:	605a      	str	r2, [r3, #4]
 800a69a:	609a      	str	r2, [r3, #8]
 800a69c:	60da      	str	r2, [r3, #12]
 800a69e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6a8:	d13a      	bne.n	800a720 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	613b      	str	r3, [r7, #16]
 800a6ae:	4b1e      	ldr	r3, [pc, #120]	; (800a728 <HAL_PCD_MspInit+0xa0>)
 800a6b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b2:	4a1d      	ldr	r2, [pc, #116]	; (800a728 <HAL_PCD_MspInit+0xa0>)
 800a6b4:	f043 0301 	orr.w	r3, r3, #1
 800a6b8:	6313      	str	r3, [r2, #48]	; 0x30
 800a6ba:	4b1b      	ldr	r3, [pc, #108]	; (800a728 <HAL_PCD_MspInit+0xa0>)
 800a6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6be:	f003 0301 	and.w	r3, r3, #1
 800a6c2:	613b      	str	r3, [r7, #16]
 800a6c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a6c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a6ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6d4:	2303      	movs	r3, #3
 800a6d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a6d8:	230a      	movs	r3, #10
 800a6da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6dc:	f107 0314 	add.w	r3, r7, #20
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	4812      	ldr	r0, [pc, #72]	; (800a72c <HAL_PCD_MspInit+0xa4>)
 800a6e4:	f7f7 ffe2 	bl	80026ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a6e8:	4b0f      	ldr	r3, [pc, #60]	; (800a728 <HAL_PCD_MspInit+0xa0>)
 800a6ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ec:	4a0e      	ldr	r2, [pc, #56]	; (800a728 <HAL_PCD_MspInit+0xa0>)
 800a6ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6f2:	6353      	str	r3, [r2, #52]	; 0x34
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	60fb      	str	r3, [r7, #12]
 800a6f8:	4b0b      	ldr	r3, [pc, #44]	; (800a728 <HAL_PCD_MspInit+0xa0>)
 800a6fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6fc:	4a0a      	ldr	r2, [pc, #40]	; (800a728 <HAL_PCD_MspInit+0xa0>)
 800a6fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a702:	6453      	str	r3, [r2, #68]	; 0x44
 800a704:	4b08      	ldr	r3, [pc, #32]	; (800a728 <HAL_PCD_MspInit+0xa0>)
 800a706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a70c:	60fb      	str	r3, [r7, #12]
 800a70e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a710:	2200      	movs	r2, #0
 800a712:	2100      	movs	r1, #0
 800a714:	2043      	movs	r0, #67	; 0x43
 800a716:	f7f7 ff92 	bl	800263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a71a:	2043      	movs	r0, #67	; 0x43
 800a71c:	f7f7 ffab 	bl	8002676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a720:	bf00      	nop
 800a722:	3728      	adds	r7, #40	; 0x28
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	40023800 	.word	0x40023800
 800a72c:	40020000 	.word	0x40020000

0800a730 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a744:	4619      	mov	r1, r3
 800a746:	4610      	mov	r0, r2
 800a748:	f7fe fb45 	bl	8008dd6 <USBD_LL_SetupStage>
}
 800a74c:	bf00      	nop
 800a74e:	3708      	adds	r7, #8
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	460b      	mov	r3, r1
 800a75e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a766:	78fa      	ldrb	r2, [r7, #3]
 800a768:	6879      	ldr	r1, [r7, #4]
 800a76a:	4613      	mov	r3, r2
 800a76c:	00db      	lsls	r3, r3, #3
 800a76e:	4413      	add	r3, r2
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	440b      	add	r3, r1
 800a774:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	78fb      	ldrb	r3, [r7, #3]
 800a77c:	4619      	mov	r1, r3
 800a77e:	f7fe fb7f 	bl	8008e80 <USBD_LL_DataOutStage>
}
 800a782:	bf00      	nop
 800a784:	3708      	adds	r7, #8
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b082      	sub	sp, #8
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	460b      	mov	r3, r1
 800a794:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a79c:	78fa      	ldrb	r2, [r7, #3]
 800a79e:	6879      	ldr	r1, [r7, #4]
 800a7a0:	4613      	mov	r3, r2
 800a7a2:	00db      	lsls	r3, r3, #3
 800a7a4:	4413      	add	r3, r2
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	440b      	add	r3, r1
 800a7aa:	334c      	adds	r3, #76	; 0x4c
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	78fb      	ldrb	r3, [r7, #3]
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	f7fe fc18 	bl	8008fe6 <USBD_LL_DataInStage>
}
 800a7b6:	bf00      	nop
 800a7b8:	3708      	adds	r7, #8
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b082      	sub	sp, #8
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7fe fd4c 	bl	800926a <USBD_LL_SOF>
}
 800a7d2:	bf00      	nop
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b084      	sub	sp, #16
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d102      	bne.n	800a7f4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	73fb      	strb	r3, [r7, #15]
 800a7f2:	e008      	b.n	800a806 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	2b02      	cmp	r3, #2
 800a7fa:	d102      	bne.n	800a802 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	73fb      	strb	r3, [r7, #15]
 800a800:	e001      	b.n	800a806 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a802:	f7f7 fa2d 	bl	8001c60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a80c:	7bfa      	ldrb	r2, [r7, #15]
 800a80e:	4611      	mov	r1, r2
 800a810:	4618      	mov	r0, r3
 800a812:	f7fe fcec 	bl	80091ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7fe fc94 	bl	800914a <USBD_LL_Reset>
}
 800a822:	bf00      	nop
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
	...

0800a82c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fe fce7 	bl	800920e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	6812      	ldr	r2, [r2, #0]
 800a84e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a852:	f043 0301 	orr.w	r3, r3, #1
 800a856:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6a1b      	ldr	r3, [r3, #32]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d005      	beq.n	800a86c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a860:	4b04      	ldr	r3, [pc, #16]	; (800a874 <HAL_PCD_SuspendCallback+0x48>)
 800a862:	691b      	ldr	r3, [r3, #16]
 800a864:	4a03      	ldr	r2, [pc, #12]	; (800a874 <HAL_PCD_SuspendCallback+0x48>)
 800a866:	f043 0306 	orr.w	r3, r3, #6
 800a86a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a86c:	bf00      	nop
 800a86e:	3708      	adds	r7, #8
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	e000ed00 	.word	0xe000ed00

0800a878 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a886:	4618      	mov	r0, r3
 800a888:	f7fe fcd7 	bl	800923a <USBD_LL_Resume>
}
 800a88c:	bf00      	nop
 800a88e:	3708      	adds	r7, #8
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	460b      	mov	r3, r1
 800a89e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a8a6:	78fa      	ldrb	r2, [r7, #3]
 800a8a8:	4611      	mov	r1, r2
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fe fd2f 	bl	800930e <USBD_LL_IsoOUTIncomplete>
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a8ca:	78fa      	ldrb	r2, [r7, #3]
 800a8cc:	4611      	mov	r1, r2
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7fe fceb 	bl	80092aa <USBD_LL_IsoINIncomplete>
}
 800a8d4:	bf00      	nop
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7fe fd41 	bl	8009372 <USBD_LL_DevConnected>
}
 800a8f0:	bf00      	nop
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a906:	4618      	mov	r0, r3
 800a908:	f7fe fd3e 	bl	8009388 <USBD_LL_DevDisconnected>
}
 800a90c:	bf00      	nop
 800a90e:	3708      	adds	r7, #8
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d13c      	bne.n	800a99e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a924:	4a20      	ldr	r2, [pc, #128]	; (800a9a8 <USBD_LL_Init+0x94>)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a1e      	ldr	r2, [pc, #120]	; (800a9a8 <USBD_LL_Init+0x94>)
 800a930:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a934:	4b1c      	ldr	r3, [pc, #112]	; (800a9a8 <USBD_LL_Init+0x94>)
 800a936:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a93a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a93c:	4b1a      	ldr	r3, [pc, #104]	; (800a9a8 <USBD_LL_Init+0x94>)
 800a93e:	2204      	movs	r2, #4
 800a940:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a942:	4b19      	ldr	r3, [pc, #100]	; (800a9a8 <USBD_LL_Init+0x94>)
 800a944:	2202      	movs	r2, #2
 800a946:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a948:	4b17      	ldr	r3, [pc, #92]	; (800a9a8 <USBD_LL_Init+0x94>)
 800a94a:	2200      	movs	r2, #0
 800a94c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a94e:	4b16      	ldr	r3, [pc, #88]	; (800a9a8 <USBD_LL_Init+0x94>)
 800a950:	2202      	movs	r2, #2
 800a952:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a954:	4b14      	ldr	r3, [pc, #80]	; (800a9a8 <USBD_LL_Init+0x94>)
 800a956:	2200      	movs	r2, #0
 800a958:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a95a:	4b13      	ldr	r3, [pc, #76]	; (800a9a8 <USBD_LL_Init+0x94>)
 800a95c:	2200      	movs	r2, #0
 800a95e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a960:	4b11      	ldr	r3, [pc, #68]	; (800a9a8 <USBD_LL_Init+0x94>)
 800a962:	2200      	movs	r2, #0
 800a964:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a966:	4b10      	ldr	r3, [pc, #64]	; (800a9a8 <USBD_LL_Init+0x94>)
 800a968:	2200      	movs	r2, #0
 800a96a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a96c:	4b0e      	ldr	r3, [pc, #56]	; (800a9a8 <USBD_LL_Init+0x94>)
 800a96e:	2200      	movs	r2, #0
 800a970:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a972:	480d      	ldr	r0, [pc, #52]	; (800a9a8 <USBD_LL_Init+0x94>)
 800a974:	f7f9 f80f 	bl	8003996 <HAL_PCD_Init>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d001      	beq.n	800a982 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a97e:	f7f7 f96f 	bl	8001c60 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a982:	2180      	movs	r1, #128	; 0x80
 800a984:	4808      	ldr	r0, [pc, #32]	; (800a9a8 <USBD_LL_Init+0x94>)
 800a986:	f7fa fa66 	bl	8004e56 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a98a:	2240      	movs	r2, #64	; 0x40
 800a98c:	2100      	movs	r1, #0
 800a98e:	4806      	ldr	r0, [pc, #24]	; (800a9a8 <USBD_LL_Init+0x94>)
 800a990:	f7fa fa1a 	bl	8004dc8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a994:	2280      	movs	r2, #128	; 0x80
 800a996:	2101      	movs	r1, #1
 800a998:	4803      	ldr	r0, [pc, #12]	; (800a9a8 <USBD_LL_Init+0x94>)
 800a99a:	f7fa fa15 	bl	8004dc8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3708      	adds	r7, #8
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	20001a0c 	.word	0x20001a0c

0800a9ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7f9 f904 	bl	8003bd0 <HAL_PCD_Start>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 f942 	bl	800ac58 <USBD_Get_USB_Status>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b084      	sub	sp, #16
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	4608      	mov	r0, r1
 800a9ec:	4611      	mov	r1, r2
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	70fb      	strb	r3, [r7, #3]
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	70bb      	strb	r3, [r7, #2]
 800a9f8:	4613      	mov	r3, r2
 800a9fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa00:	2300      	movs	r3, #0
 800aa02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aa0a:	78bb      	ldrb	r3, [r7, #2]
 800aa0c:	883a      	ldrh	r2, [r7, #0]
 800aa0e:	78f9      	ldrb	r1, [r7, #3]
 800aa10:	f7f9 fdd5 	bl	80045be <HAL_PCD_EP_Open>
 800aa14:	4603      	mov	r3, r0
 800aa16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f000 f91c 	bl	800ac58 <USBD_Get_USB_Status>
 800aa20:	4603      	mov	r3, r0
 800aa22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa24:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b084      	sub	sp, #16
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
 800aa36:	460b      	mov	r3, r1
 800aa38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa48:	78fa      	ldrb	r2, [r7, #3]
 800aa4a:	4611      	mov	r1, r2
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7f9 fe1e 	bl	800468e <HAL_PCD_EP_Close>
 800aa52:	4603      	mov	r3, r0
 800aa54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa56:	7bfb      	ldrb	r3, [r7, #15]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f000 f8fd 	bl	800ac58 <USBD_Get_USB_Status>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa62:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	460b      	mov	r3, r1
 800aa76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa86:	78fa      	ldrb	r2, [r7, #3]
 800aa88:	4611      	mov	r1, r2
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7f9 fef6 	bl	800487c <HAL_PCD_EP_SetStall>
 800aa90:	4603      	mov	r3, r0
 800aa92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa94:	7bfb      	ldrb	r3, [r7, #15]
 800aa96:	4618      	mov	r0, r3
 800aa98:	f000 f8de 	bl	800ac58 <USBD_Get_USB_Status>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaa0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b084      	sub	sp, #16
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
 800aab2:	460b      	mov	r3, r1
 800aab4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aab6:	2300      	movs	r3, #0
 800aab8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaba:	2300      	movs	r3, #0
 800aabc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aac4:	78fa      	ldrb	r2, [r7, #3]
 800aac6:	4611      	mov	r1, r2
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7f9 ff3b 	bl	8004944 <HAL_PCD_EP_ClrStall>
 800aace:	4603      	mov	r3, r0
 800aad0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aad2:	7bfb      	ldrb	r3, [r7, #15]
 800aad4:	4618      	mov	r0, r3
 800aad6:	f000 f8bf 	bl	800ac58 <USBD_Get_USB_Status>
 800aada:	4603      	mov	r3, r0
 800aadc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aade:	7bbb      	ldrb	r3, [r7, #14]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aafa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aafc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	da0b      	bge.n	800ab1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ab04:	78fb      	ldrb	r3, [r7, #3]
 800ab06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab0a:	68f9      	ldr	r1, [r7, #12]
 800ab0c:	4613      	mov	r3, r2
 800ab0e:	00db      	lsls	r3, r3, #3
 800ab10:	4413      	add	r3, r2
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	440b      	add	r3, r1
 800ab16:	333e      	adds	r3, #62	; 0x3e
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	e00b      	b.n	800ab34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ab1c:	78fb      	ldrb	r3, [r7, #3]
 800ab1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab22:	68f9      	ldr	r1, [r7, #12]
 800ab24:	4613      	mov	r3, r2
 800ab26:	00db      	lsls	r3, r3, #3
 800ab28:	4413      	add	r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	440b      	add	r3, r1
 800ab2e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ab32:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	460b      	mov	r3, r1
 800ab4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab50:	2300      	movs	r3, #0
 800ab52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab5a:	78fa      	ldrb	r2, [r7, #3]
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7f9 fd08 	bl	8004574 <HAL_PCD_SetAddress>
 800ab64:	4603      	mov	r3, r0
 800ab66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab68:	7bfb      	ldrb	r3, [r7, #15]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f000 f874 	bl	800ac58 <USBD_Get_USB_Status>
 800ab70:	4603      	mov	r3, r0
 800ab72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab74:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b086      	sub	sp, #24
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	60f8      	str	r0, [r7, #12]
 800ab86:	607a      	str	r2, [r7, #4]
 800ab88:	603b      	str	r3, [r7, #0]
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab92:	2300      	movs	r3, #0
 800ab94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ab9c:	7af9      	ldrb	r1, [r7, #11]
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	f7f9 fe21 	bl	80047e8 <HAL_PCD_EP_Transmit>
 800aba6:	4603      	mov	r3, r0
 800aba8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abaa:	7dfb      	ldrb	r3, [r7, #23]
 800abac:	4618      	mov	r0, r3
 800abae:	f000 f853 	bl	800ac58 <USBD_Get_USB_Status>
 800abb2:	4603      	mov	r3, r0
 800abb4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800abb6:	7dbb      	ldrb	r3, [r7, #22]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3718      	adds	r7, #24
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	607a      	str	r2, [r7, #4]
 800abca:	603b      	str	r3, [r7, #0]
 800abcc:	460b      	mov	r3, r1
 800abce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abd0:	2300      	movs	r3, #0
 800abd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abd4:	2300      	movs	r3, #0
 800abd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800abde:	7af9      	ldrb	r1, [r7, #11]
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	f7f9 fd9d 	bl	8004722 <HAL_PCD_EP_Receive>
 800abe8:	4603      	mov	r3, r0
 800abea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abec:	7dfb      	ldrb	r3, [r7, #23]
 800abee:	4618      	mov	r0, r3
 800abf0:	f000 f832 	bl	800ac58 <USBD_Get_USB_Status>
 800abf4:	4603      	mov	r3, r0
 800abf6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800abf8:	7dbb      	ldrb	r3, [r7, #22]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3718      	adds	r7, #24
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b082      	sub	sp, #8
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac14:	78fa      	ldrb	r2, [r7, #3]
 800ac16:	4611      	mov	r1, r2
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7f9 fdcd 	bl	80047b8 <HAL_PCD_EP_GetRxCount>
 800ac1e:	4603      	mov	r3, r0
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ac30:	4b03      	ldr	r3, [pc, #12]	; (800ac40 <USBD_static_malloc+0x18>)
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	370c      	adds	r7, #12
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	20001f18 	.word	0x20001f18

0800ac44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]

}
 800ac4c:	bf00      	nop
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	4603      	mov	r3, r0
 800ac60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac62:	2300      	movs	r3, #0
 800ac64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac66:	79fb      	ldrb	r3, [r7, #7]
 800ac68:	2b03      	cmp	r3, #3
 800ac6a:	d817      	bhi.n	800ac9c <USBD_Get_USB_Status+0x44>
 800ac6c:	a201      	add	r2, pc, #4	; (adr r2, 800ac74 <USBD_Get_USB_Status+0x1c>)
 800ac6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac72:	bf00      	nop
 800ac74:	0800ac85 	.word	0x0800ac85
 800ac78:	0800ac8b 	.word	0x0800ac8b
 800ac7c:	0800ac91 	.word	0x0800ac91
 800ac80:	0800ac97 	.word	0x0800ac97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac84:	2300      	movs	r3, #0
 800ac86:	73fb      	strb	r3, [r7, #15]
    break;
 800ac88:	e00b      	b.n	800aca2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	73fb      	strb	r3, [r7, #15]
    break;
 800ac8e:	e008      	b.n	800aca2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac90:	2301      	movs	r3, #1
 800ac92:	73fb      	strb	r3, [r7, #15]
    break;
 800ac94:	e005      	b.n	800aca2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac96:	2303      	movs	r3, #3
 800ac98:	73fb      	strb	r3, [r7, #15]
    break;
 800ac9a:	e002      	b.n	800aca2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac9c:	2303      	movs	r3, #3
 800ac9e:	73fb      	strb	r3, [r7, #15]
    break;
 800aca0:	bf00      	nop
  }
  return usb_status;
 800aca2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3714      	adds	r7, #20
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <__errno>:
 800acb0:	4b01      	ldr	r3, [pc, #4]	; (800acb8 <__errno+0x8>)
 800acb2:	6818      	ldr	r0, [r3, #0]
 800acb4:	4770      	bx	lr
 800acb6:	bf00      	nop
 800acb8:	20000104 	.word	0x20000104

0800acbc <__libc_init_array>:
 800acbc:	b570      	push	{r4, r5, r6, lr}
 800acbe:	4d0d      	ldr	r5, [pc, #52]	; (800acf4 <__libc_init_array+0x38>)
 800acc0:	4c0d      	ldr	r4, [pc, #52]	; (800acf8 <__libc_init_array+0x3c>)
 800acc2:	1b64      	subs	r4, r4, r5
 800acc4:	10a4      	asrs	r4, r4, #2
 800acc6:	2600      	movs	r6, #0
 800acc8:	42a6      	cmp	r6, r4
 800acca:	d109      	bne.n	800ace0 <__libc_init_array+0x24>
 800accc:	4d0b      	ldr	r5, [pc, #44]	; (800acfc <__libc_init_array+0x40>)
 800acce:	4c0c      	ldr	r4, [pc, #48]	; (800ad00 <__libc_init_array+0x44>)
 800acd0:	f003 ffb2 	bl	800ec38 <_init>
 800acd4:	1b64      	subs	r4, r4, r5
 800acd6:	10a4      	asrs	r4, r4, #2
 800acd8:	2600      	movs	r6, #0
 800acda:	42a6      	cmp	r6, r4
 800acdc:	d105      	bne.n	800acea <__libc_init_array+0x2e>
 800acde:	bd70      	pop	{r4, r5, r6, pc}
 800ace0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ace4:	4798      	blx	r3
 800ace6:	3601      	adds	r6, #1
 800ace8:	e7ee      	b.n	800acc8 <__libc_init_array+0xc>
 800acea:	f855 3b04 	ldr.w	r3, [r5], #4
 800acee:	4798      	blx	r3
 800acf0:	3601      	adds	r6, #1
 800acf2:	e7f2      	b.n	800acda <__libc_init_array+0x1e>
 800acf4:	0800f48c 	.word	0x0800f48c
 800acf8:	0800f48c 	.word	0x0800f48c
 800acfc:	0800f48c 	.word	0x0800f48c
 800ad00:	0800f490 	.word	0x0800f490

0800ad04 <memset>:
 800ad04:	4402      	add	r2, r0
 800ad06:	4603      	mov	r3, r0
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d100      	bne.n	800ad0e <memset+0xa>
 800ad0c:	4770      	bx	lr
 800ad0e:	f803 1b01 	strb.w	r1, [r3], #1
 800ad12:	e7f9      	b.n	800ad08 <memset+0x4>

0800ad14 <__cvt>:
 800ad14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad18:	ec55 4b10 	vmov	r4, r5, d0
 800ad1c:	2d00      	cmp	r5, #0
 800ad1e:	460e      	mov	r6, r1
 800ad20:	4619      	mov	r1, r3
 800ad22:	462b      	mov	r3, r5
 800ad24:	bfbb      	ittet	lt
 800ad26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ad2a:	461d      	movlt	r5, r3
 800ad2c:	2300      	movge	r3, #0
 800ad2e:	232d      	movlt	r3, #45	; 0x2d
 800ad30:	700b      	strb	r3, [r1, #0]
 800ad32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ad38:	4691      	mov	r9, r2
 800ad3a:	f023 0820 	bic.w	r8, r3, #32
 800ad3e:	bfbc      	itt	lt
 800ad40:	4622      	movlt	r2, r4
 800ad42:	4614      	movlt	r4, r2
 800ad44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad48:	d005      	beq.n	800ad56 <__cvt+0x42>
 800ad4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ad4e:	d100      	bne.n	800ad52 <__cvt+0x3e>
 800ad50:	3601      	adds	r6, #1
 800ad52:	2102      	movs	r1, #2
 800ad54:	e000      	b.n	800ad58 <__cvt+0x44>
 800ad56:	2103      	movs	r1, #3
 800ad58:	ab03      	add	r3, sp, #12
 800ad5a:	9301      	str	r3, [sp, #4]
 800ad5c:	ab02      	add	r3, sp, #8
 800ad5e:	9300      	str	r3, [sp, #0]
 800ad60:	ec45 4b10 	vmov	d0, r4, r5
 800ad64:	4653      	mov	r3, sl
 800ad66:	4632      	mov	r2, r6
 800ad68:	f000 fcfe 	bl	800b768 <_dtoa_r>
 800ad6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ad70:	4607      	mov	r7, r0
 800ad72:	d102      	bne.n	800ad7a <__cvt+0x66>
 800ad74:	f019 0f01 	tst.w	r9, #1
 800ad78:	d022      	beq.n	800adc0 <__cvt+0xac>
 800ad7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad7e:	eb07 0906 	add.w	r9, r7, r6
 800ad82:	d110      	bne.n	800ada6 <__cvt+0x92>
 800ad84:	783b      	ldrb	r3, [r7, #0]
 800ad86:	2b30      	cmp	r3, #48	; 0x30
 800ad88:	d10a      	bne.n	800ada0 <__cvt+0x8c>
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	4620      	mov	r0, r4
 800ad90:	4629      	mov	r1, r5
 800ad92:	f7f5 fe99 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad96:	b918      	cbnz	r0, 800ada0 <__cvt+0x8c>
 800ad98:	f1c6 0601 	rsb	r6, r6, #1
 800ad9c:	f8ca 6000 	str.w	r6, [sl]
 800ada0:	f8da 3000 	ldr.w	r3, [sl]
 800ada4:	4499      	add	r9, r3
 800ada6:	2200      	movs	r2, #0
 800ada8:	2300      	movs	r3, #0
 800adaa:	4620      	mov	r0, r4
 800adac:	4629      	mov	r1, r5
 800adae:	f7f5 fe8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800adb2:	b108      	cbz	r0, 800adb8 <__cvt+0xa4>
 800adb4:	f8cd 900c 	str.w	r9, [sp, #12]
 800adb8:	2230      	movs	r2, #48	; 0x30
 800adba:	9b03      	ldr	r3, [sp, #12]
 800adbc:	454b      	cmp	r3, r9
 800adbe:	d307      	bcc.n	800add0 <__cvt+0xbc>
 800adc0:	9b03      	ldr	r3, [sp, #12]
 800adc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adc4:	1bdb      	subs	r3, r3, r7
 800adc6:	4638      	mov	r0, r7
 800adc8:	6013      	str	r3, [r2, #0]
 800adca:	b004      	add	sp, #16
 800adcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add0:	1c59      	adds	r1, r3, #1
 800add2:	9103      	str	r1, [sp, #12]
 800add4:	701a      	strb	r2, [r3, #0]
 800add6:	e7f0      	b.n	800adba <__cvt+0xa6>

0800add8 <__exponent>:
 800add8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adda:	4603      	mov	r3, r0
 800addc:	2900      	cmp	r1, #0
 800adde:	bfb8      	it	lt
 800ade0:	4249      	neglt	r1, r1
 800ade2:	f803 2b02 	strb.w	r2, [r3], #2
 800ade6:	bfb4      	ite	lt
 800ade8:	222d      	movlt	r2, #45	; 0x2d
 800adea:	222b      	movge	r2, #43	; 0x2b
 800adec:	2909      	cmp	r1, #9
 800adee:	7042      	strb	r2, [r0, #1]
 800adf0:	dd2a      	ble.n	800ae48 <__exponent+0x70>
 800adf2:	f10d 0407 	add.w	r4, sp, #7
 800adf6:	46a4      	mov	ip, r4
 800adf8:	270a      	movs	r7, #10
 800adfa:	46a6      	mov	lr, r4
 800adfc:	460a      	mov	r2, r1
 800adfe:	fb91 f6f7 	sdiv	r6, r1, r7
 800ae02:	fb07 1516 	mls	r5, r7, r6, r1
 800ae06:	3530      	adds	r5, #48	; 0x30
 800ae08:	2a63      	cmp	r2, #99	; 0x63
 800ae0a:	f104 34ff 	add.w	r4, r4, #4294967295
 800ae0e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ae12:	4631      	mov	r1, r6
 800ae14:	dcf1      	bgt.n	800adfa <__exponent+0x22>
 800ae16:	3130      	adds	r1, #48	; 0x30
 800ae18:	f1ae 0502 	sub.w	r5, lr, #2
 800ae1c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ae20:	1c44      	adds	r4, r0, #1
 800ae22:	4629      	mov	r1, r5
 800ae24:	4561      	cmp	r1, ip
 800ae26:	d30a      	bcc.n	800ae3e <__exponent+0x66>
 800ae28:	f10d 0209 	add.w	r2, sp, #9
 800ae2c:	eba2 020e 	sub.w	r2, r2, lr
 800ae30:	4565      	cmp	r5, ip
 800ae32:	bf88      	it	hi
 800ae34:	2200      	movhi	r2, #0
 800ae36:	4413      	add	r3, r2
 800ae38:	1a18      	subs	r0, r3, r0
 800ae3a:	b003      	add	sp, #12
 800ae3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae42:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ae46:	e7ed      	b.n	800ae24 <__exponent+0x4c>
 800ae48:	2330      	movs	r3, #48	; 0x30
 800ae4a:	3130      	adds	r1, #48	; 0x30
 800ae4c:	7083      	strb	r3, [r0, #2]
 800ae4e:	70c1      	strb	r1, [r0, #3]
 800ae50:	1d03      	adds	r3, r0, #4
 800ae52:	e7f1      	b.n	800ae38 <__exponent+0x60>

0800ae54 <_printf_float>:
 800ae54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae58:	ed2d 8b02 	vpush	{d8}
 800ae5c:	b08d      	sub	sp, #52	; 0x34
 800ae5e:	460c      	mov	r4, r1
 800ae60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ae64:	4616      	mov	r6, r2
 800ae66:	461f      	mov	r7, r3
 800ae68:	4605      	mov	r5, r0
 800ae6a:	f001 fa6b 	bl	800c344 <_localeconv_r>
 800ae6e:	f8d0 a000 	ldr.w	sl, [r0]
 800ae72:	4650      	mov	r0, sl
 800ae74:	f7f5 f9ac 	bl	80001d0 <strlen>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	930a      	str	r3, [sp, #40]	; 0x28
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	9305      	str	r3, [sp, #20]
 800ae80:	f8d8 3000 	ldr.w	r3, [r8]
 800ae84:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ae88:	3307      	adds	r3, #7
 800ae8a:	f023 0307 	bic.w	r3, r3, #7
 800ae8e:	f103 0208 	add.w	r2, r3, #8
 800ae92:	f8c8 2000 	str.w	r2, [r8]
 800ae96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ae9e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aea2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aea6:	9307      	str	r3, [sp, #28]
 800aea8:	f8cd 8018 	str.w	r8, [sp, #24]
 800aeac:	ee08 0a10 	vmov	s16, r0
 800aeb0:	4b9f      	ldr	r3, [pc, #636]	; (800b130 <_printf_float+0x2dc>)
 800aeb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aeb6:	f04f 32ff 	mov.w	r2, #4294967295
 800aeba:	f7f5 fe37 	bl	8000b2c <__aeabi_dcmpun>
 800aebe:	bb88      	cbnz	r0, 800af24 <_printf_float+0xd0>
 800aec0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aec4:	4b9a      	ldr	r3, [pc, #616]	; (800b130 <_printf_float+0x2dc>)
 800aec6:	f04f 32ff 	mov.w	r2, #4294967295
 800aeca:	f7f5 fe11 	bl	8000af0 <__aeabi_dcmple>
 800aece:	bb48      	cbnz	r0, 800af24 <_printf_float+0xd0>
 800aed0:	2200      	movs	r2, #0
 800aed2:	2300      	movs	r3, #0
 800aed4:	4640      	mov	r0, r8
 800aed6:	4649      	mov	r1, r9
 800aed8:	f7f5 fe00 	bl	8000adc <__aeabi_dcmplt>
 800aedc:	b110      	cbz	r0, 800aee4 <_printf_float+0x90>
 800aede:	232d      	movs	r3, #45	; 0x2d
 800aee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aee4:	4b93      	ldr	r3, [pc, #588]	; (800b134 <_printf_float+0x2e0>)
 800aee6:	4894      	ldr	r0, [pc, #592]	; (800b138 <_printf_float+0x2e4>)
 800aee8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aeec:	bf94      	ite	ls
 800aeee:	4698      	movls	r8, r3
 800aef0:	4680      	movhi	r8, r0
 800aef2:	2303      	movs	r3, #3
 800aef4:	6123      	str	r3, [r4, #16]
 800aef6:	9b05      	ldr	r3, [sp, #20]
 800aef8:	f023 0204 	bic.w	r2, r3, #4
 800aefc:	6022      	str	r2, [r4, #0]
 800aefe:	f04f 0900 	mov.w	r9, #0
 800af02:	9700      	str	r7, [sp, #0]
 800af04:	4633      	mov	r3, r6
 800af06:	aa0b      	add	r2, sp, #44	; 0x2c
 800af08:	4621      	mov	r1, r4
 800af0a:	4628      	mov	r0, r5
 800af0c:	f000 f9d8 	bl	800b2c0 <_printf_common>
 800af10:	3001      	adds	r0, #1
 800af12:	f040 8090 	bne.w	800b036 <_printf_float+0x1e2>
 800af16:	f04f 30ff 	mov.w	r0, #4294967295
 800af1a:	b00d      	add	sp, #52	; 0x34
 800af1c:	ecbd 8b02 	vpop	{d8}
 800af20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af24:	4642      	mov	r2, r8
 800af26:	464b      	mov	r3, r9
 800af28:	4640      	mov	r0, r8
 800af2a:	4649      	mov	r1, r9
 800af2c:	f7f5 fdfe 	bl	8000b2c <__aeabi_dcmpun>
 800af30:	b140      	cbz	r0, 800af44 <_printf_float+0xf0>
 800af32:	464b      	mov	r3, r9
 800af34:	2b00      	cmp	r3, #0
 800af36:	bfbc      	itt	lt
 800af38:	232d      	movlt	r3, #45	; 0x2d
 800af3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800af3e:	487f      	ldr	r0, [pc, #508]	; (800b13c <_printf_float+0x2e8>)
 800af40:	4b7f      	ldr	r3, [pc, #508]	; (800b140 <_printf_float+0x2ec>)
 800af42:	e7d1      	b.n	800aee8 <_printf_float+0x94>
 800af44:	6863      	ldr	r3, [r4, #4]
 800af46:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800af4a:	9206      	str	r2, [sp, #24]
 800af4c:	1c5a      	adds	r2, r3, #1
 800af4e:	d13f      	bne.n	800afd0 <_printf_float+0x17c>
 800af50:	2306      	movs	r3, #6
 800af52:	6063      	str	r3, [r4, #4]
 800af54:	9b05      	ldr	r3, [sp, #20]
 800af56:	6861      	ldr	r1, [r4, #4]
 800af58:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800af5c:	2300      	movs	r3, #0
 800af5e:	9303      	str	r3, [sp, #12]
 800af60:	ab0a      	add	r3, sp, #40	; 0x28
 800af62:	e9cd b301 	strd	fp, r3, [sp, #4]
 800af66:	ab09      	add	r3, sp, #36	; 0x24
 800af68:	ec49 8b10 	vmov	d0, r8, r9
 800af6c:	9300      	str	r3, [sp, #0]
 800af6e:	6022      	str	r2, [r4, #0]
 800af70:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800af74:	4628      	mov	r0, r5
 800af76:	f7ff fecd 	bl	800ad14 <__cvt>
 800af7a:	9b06      	ldr	r3, [sp, #24]
 800af7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af7e:	2b47      	cmp	r3, #71	; 0x47
 800af80:	4680      	mov	r8, r0
 800af82:	d108      	bne.n	800af96 <_printf_float+0x142>
 800af84:	1cc8      	adds	r0, r1, #3
 800af86:	db02      	blt.n	800af8e <_printf_float+0x13a>
 800af88:	6863      	ldr	r3, [r4, #4]
 800af8a:	4299      	cmp	r1, r3
 800af8c:	dd41      	ble.n	800b012 <_printf_float+0x1be>
 800af8e:	f1ab 0b02 	sub.w	fp, fp, #2
 800af92:	fa5f fb8b 	uxtb.w	fp, fp
 800af96:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800af9a:	d820      	bhi.n	800afde <_printf_float+0x18a>
 800af9c:	3901      	subs	r1, #1
 800af9e:	465a      	mov	r2, fp
 800afa0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800afa4:	9109      	str	r1, [sp, #36]	; 0x24
 800afa6:	f7ff ff17 	bl	800add8 <__exponent>
 800afaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afac:	1813      	adds	r3, r2, r0
 800afae:	2a01      	cmp	r2, #1
 800afb0:	4681      	mov	r9, r0
 800afb2:	6123      	str	r3, [r4, #16]
 800afb4:	dc02      	bgt.n	800afbc <_printf_float+0x168>
 800afb6:	6822      	ldr	r2, [r4, #0]
 800afb8:	07d2      	lsls	r2, r2, #31
 800afba:	d501      	bpl.n	800afc0 <_printf_float+0x16c>
 800afbc:	3301      	adds	r3, #1
 800afbe:	6123      	str	r3, [r4, #16]
 800afc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d09c      	beq.n	800af02 <_printf_float+0xae>
 800afc8:	232d      	movs	r3, #45	; 0x2d
 800afca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afce:	e798      	b.n	800af02 <_printf_float+0xae>
 800afd0:	9a06      	ldr	r2, [sp, #24]
 800afd2:	2a47      	cmp	r2, #71	; 0x47
 800afd4:	d1be      	bne.n	800af54 <_printf_float+0x100>
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d1bc      	bne.n	800af54 <_printf_float+0x100>
 800afda:	2301      	movs	r3, #1
 800afdc:	e7b9      	b.n	800af52 <_printf_float+0xfe>
 800afde:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800afe2:	d118      	bne.n	800b016 <_printf_float+0x1c2>
 800afe4:	2900      	cmp	r1, #0
 800afe6:	6863      	ldr	r3, [r4, #4]
 800afe8:	dd0b      	ble.n	800b002 <_printf_float+0x1ae>
 800afea:	6121      	str	r1, [r4, #16]
 800afec:	b913      	cbnz	r3, 800aff4 <_printf_float+0x1a0>
 800afee:	6822      	ldr	r2, [r4, #0]
 800aff0:	07d0      	lsls	r0, r2, #31
 800aff2:	d502      	bpl.n	800affa <_printf_float+0x1a6>
 800aff4:	3301      	adds	r3, #1
 800aff6:	440b      	add	r3, r1
 800aff8:	6123      	str	r3, [r4, #16]
 800affa:	65a1      	str	r1, [r4, #88]	; 0x58
 800affc:	f04f 0900 	mov.w	r9, #0
 800b000:	e7de      	b.n	800afc0 <_printf_float+0x16c>
 800b002:	b913      	cbnz	r3, 800b00a <_printf_float+0x1b6>
 800b004:	6822      	ldr	r2, [r4, #0]
 800b006:	07d2      	lsls	r2, r2, #31
 800b008:	d501      	bpl.n	800b00e <_printf_float+0x1ba>
 800b00a:	3302      	adds	r3, #2
 800b00c:	e7f4      	b.n	800aff8 <_printf_float+0x1a4>
 800b00e:	2301      	movs	r3, #1
 800b010:	e7f2      	b.n	800aff8 <_printf_float+0x1a4>
 800b012:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b018:	4299      	cmp	r1, r3
 800b01a:	db05      	blt.n	800b028 <_printf_float+0x1d4>
 800b01c:	6823      	ldr	r3, [r4, #0]
 800b01e:	6121      	str	r1, [r4, #16]
 800b020:	07d8      	lsls	r0, r3, #31
 800b022:	d5ea      	bpl.n	800affa <_printf_float+0x1a6>
 800b024:	1c4b      	adds	r3, r1, #1
 800b026:	e7e7      	b.n	800aff8 <_printf_float+0x1a4>
 800b028:	2900      	cmp	r1, #0
 800b02a:	bfd4      	ite	le
 800b02c:	f1c1 0202 	rsble	r2, r1, #2
 800b030:	2201      	movgt	r2, #1
 800b032:	4413      	add	r3, r2
 800b034:	e7e0      	b.n	800aff8 <_printf_float+0x1a4>
 800b036:	6823      	ldr	r3, [r4, #0]
 800b038:	055a      	lsls	r2, r3, #21
 800b03a:	d407      	bmi.n	800b04c <_printf_float+0x1f8>
 800b03c:	6923      	ldr	r3, [r4, #16]
 800b03e:	4642      	mov	r2, r8
 800b040:	4631      	mov	r1, r6
 800b042:	4628      	mov	r0, r5
 800b044:	47b8      	blx	r7
 800b046:	3001      	adds	r0, #1
 800b048:	d12c      	bne.n	800b0a4 <_printf_float+0x250>
 800b04a:	e764      	b.n	800af16 <_printf_float+0xc2>
 800b04c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b050:	f240 80e0 	bls.w	800b214 <_printf_float+0x3c0>
 800b054:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b058:	2200      	movs	r2, #0
 800b05a:	2300      	movs	r3, #0
 800b05c:	f7f5 fd34 	bl	8000ac8 <__aeabi_dcmpeq>
 800b060:	2800      	cmp	r0, #0
 800b062:	d034      	beq.n	800b0ce <_printf_float+0x27a>
 800b064:	4a37      	ldr	r2, [pc, #220]	; (800b144 <_printf_float+0x2f0>)
 800b066:	2301      	movs	r3, #1
 800b068:	4631      	mov	r1, r6
 800b06a:	4628      	mov	r0, r5
 800b06c:	47b8      	blx	r7
 800b06e:	3001      	adds	r0, #1
 800b070:	f43f af51 	beq.w	800af16 <_printf_float+0xc2>
 800b074:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b078:	429a      	cmp	r2, r3
 800b07a:	db02      	blt.n	800b082 <_printf_float+0x22e>
 800b07c:	6823      	ldr	r3, [r4, #0]
 800b07e:	07d8      	lsls	r0, r3, #31
 800b080:	d510      	bpl.n	800b0a4 <_printf_float+0x250>
 800b082:	ee18 3a10 	vmov	r3, s16
 800b086:	4652      	mov	r2, sl
 800b088:	4631      	mov	r1, r6
 800b08a:	4628      	mov	r0, r5
 800b08c:	47b8      	blx	r7
 800b08e:	3001      	adds	r0, #1
 800b090:	f43f af41 	beq.w	800af16 <_printf_float+0xc2>
 800b094:	f04f 0800 	mov.w	r8, #0
 800b098:	f104 091a 	add.w	r9, r4, #26
 800b09c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	4543      	cmp	r3, r8
 800b0a2:	dc09      	bgt.n	800b0b8 <_printf_float+0x264>
 800b0a4:	6823      	ldr	r3, [r4, #0]
 800b0a6:	079b      	lsls	r3, r3, #30
 800b0a8:	f100 8105 	bmi.w	800b2b6 <_printf_float+0x462>
 800b0ac:	68e0      	ldr	r0, [r4, #12]
 800b0ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0b0:	4298      	cmp	r0, r3
 800b0b2:	bfb8      	it	lt
 800b0b4:	4618      	movlt	r0, r3
 800b0b6:	e730      	b.n	800af1a <_printf_float+0xc6>
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	464a      	mov	r2, r9
 800b0bc:	4631      	mov	r1, r6
 800b0be:	4628      	mov	r0, r5
 800b0c0:	47b8      	blx	r7
 800b0c2:	3001      	adds	r0, #1
 800b0c4:	f43f af27 	beq.w	800af16 <_printf_float+0xc2>
 800b0c8:	f108 0801 	add.w	r8, r8, #1
 800b0cc:	e7e6      	b.n	800b09c <_printf_float+0x248>
 800b0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	dc39      	bgt.n	800b148 <_printf_float+0x2f4>
 800b0d4:	4a1b      	ldr	r2, [pc, #108]	; (800b144 <_printf_float+0x2f0>)
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	4631      	mov	r1, r6
 800b0da:	4628      	mov	r0, r5
 800b0dc:	47b8      	blx	r7
 800b0de:	3001      	adds	r0, #1
 800b0e0:	f43f af19 	beq.w	800af16 <_printf_float+0xc2>
 800b0e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	d102      	bne.n	800b0f2 <_printf_float+0x29e>
 800b0ec:	6823      	ldr	r3, [r4, #0]
 800b0ee:	07d9      	lsls	r1, r3, #31
 800b0f0:	d5d8      	bpl.n	800b0a4 <_printf_float+0x250>
 800b0f2:	ee18 3a10 	vmov	r3, s16
 800b0f6:	4652      	mov	r2, sl
 800b0f8:	4631      	mov	r1, r6
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	47b8      	blx	r7
 800b0fe:	3001      	adds	r0, #1
 800b100:	f43f af09 	beq.w	800af16 <_printf_float+0xc2>
 800b104:	f04f 0900 	mov.w	r9, #0
 800b108:	f104 0a1a 	add.w	sl, r4, #26
 800b10c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b10e:	425b      	negs	r3, r3
 800b110:	454b      	cmp	r3, r9
 800b112:	dc01      	bgt.n	800b118 <_printf_float+0x2c4>
 800b114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b116:	e792      	b.n	800b03e <_printf_float+0x1ea>
 800b118:	2301      	movs	r3, #1
 800b11a:	4652      	mov	r2, sl
 800b11c:	4631      	mov	r1, r6
 800b11e:	4628      	mov	r0, r5
 800b120:	47b8      	blx	r7
 800b122:	3001      	adds	r0, #1
 800b124:	f43f aef7 	beq.w	800af16 <_printf_float+0xc2>
 800b128:	f109 0901 	add.w	r9, r9, #1
 800b12c:	e7ee      	b.n	800b10c <_printf_float+0x2b8>
 800b12e:	bf00      	nop
 800b130:	7fefffff 	.word	0x7fefffff
 800b134:	0800ecc0 	.word	0x0800ecc0
 800b138:	0800ecc4 	.word	0x0800ecc4
 800b13c:	0800eccc 	.word	0x0800eccc
 800b140:	0800ecc8 	.word	0x0800ecc8
 800b144:	0800ecd0 	.word	0x0800ecd0
 800b148:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b14a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b14c:	429a      	cmp	r2, r3
 800b14e:	bfa8      	it	ge
 800b150:	461a      	movge	r2, r3
 800b152:	2a00      	cmp	r2, #0
 800b154:	4691      	mov	r9, r2
 800b156:	dc37      	bgt.n	800b1c8 <_printf_float+0x374>
 800b158:	f04f 0b00 	mov.w	fp, #0
 800b15c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b160:	f104 021a 	add.w	r2, r4, #26
 800b164:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b166:	9305      	str	r3, [sp, #20]
 800b168:	eba3 0309 	sub.w	r3, r3, r9
 800b16c:	455b      	cmp	r3, fp
 800b16e:	dc33      	bgt.n	800b1d8 <_printf_float+0x384>
 800b170:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b174:	429a      	cmp	r2, r3
 800b176:	db3b      	blt.n	800b1f0 <_printf_float+0x39c>
 800b178:	6823      	ldr	r3, [r4, #0]
 800b17a:	07da      	lsls	r2, r3, #31
 800b17c:	d438      	bmi.n	800b1f0 <_printf_float+0x39c>
 800b17e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b180:	9a05      	ldr	r2, [sp, #20]
 800b182:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b184:	1a9a      	subs	r2, r3, r2
 800b186:	eba3 0901 	sub.w	r9, r3, r1
 800b18a:	4591      	cmp	r9, r2
 800b18c:	bfa8      	it	ge
 800b18e:	4691      	movge	r9, r2
 800b190:	f1b9 0f00 	cmp.w	r9, #0
 800b194:	dc35      	bgt.n	800b202 <_printf_float+0x3ae>
 800b196:	f04f 0800 	mov.w	r8, #0
 800b19a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b19e:	f104 0a1a 	add.w	sl, r4, #26
 800b1a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1a6:	1a9b      	subs	r3, r3, r2
 800b1a8:	eba3 0309 	sub.w	r3, r3, r9
 800b1ac:	4543      	cmp	r3, r8
 800b1ae:	f77f af79 	ble.w	800b0a4 <_printf_float+0x250>
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	4652      	mov	r2, sl
 800b1b6:	4631      	mov	r1, r6
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	47b8      	blx	r7
 800b1bc:	3001      	adds	r0, #1
 800b1be:	f43f aeaa 	beq.w	800af16 <_printf_float+0xc2>
 800b1c2:	f108 0801 	add.w	r8, r8, #1
 800b1c6:	e7ec      	b.n	800b1a2 <_printf_float+0x34e>
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	4631      	mov	r1, r6
 800b1cc:	4642      	mov	r2, r8
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	47b8      	blx	r7
 800b1d2:	3001      	adds	r0, #1
 800b1d4:	d1c0      	bne.n	800b158 <_printf_float+0x304>
 800b1d6:	e69e      	b.n	800af16 <_printf_float+0xc2>
 800b1d8:	2301      	movs	r3, #1
 800b1da:	4631      	mov	r1, r6
 800b1dc:	4628      	mov	r0, r5
 800b1de:	9205      	str	r2, [sp, #20]
 800b1e0:	47b8      	blx	r7
 800b1e2:	3001      	adds	r0, #1
 800b1e4:	f43f ae97 	beq.w	800af16 <_printf_float+0xc2>
 800b1e8:	9a05      	ldr	r2, [sp, #20]
 800b1ea:	f10b 0b01 	add.w	fp, fp, #1
 800b1ee:	e7b9      	b.n	800b164 <_printf_float+0x310>
 800b1f0:	ee18 3a10 	vmov	r3, s16
 800b1f4:	4652      	mov	r2, sl
 800b1f6:	4631      	mov	r1, r6
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	47b8      	blx	r7
 800b1fc:	3001      	adds	r0, #1
 800b1fe:	d1be      	bne.n	800b17e <_printf_float+0x32a>
 800b200:	e689      	b.n	800af16 <_printf_float+0xc2>
 800b202:	9a05      	ldr	r2, [sp, #20]
 800b204:	464b      	mov	r3, r9
 800b206:	4442      	add	r2, r8
 800b208:	4631      	mov	r1, r6
 800b20a:	4628      	mov	r0, r5
 800b20c:	47b8      	blx	r7
 800b20e:	3001      	adds	r0, #1
 800b210:	d1c1      	bne.n	800b196 <_printf_float+0x342>
 800b212:	e680      	b.n	800af16 <_printf_float+0xc2>
 800b214:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b216:	2a01      	cmp	r2, #1
 800b218:	dc01      	bgt.n	800b21e <_printf_float+0x3ca>
 800b21a:	07db      	lsls	r3, r3, #31
 800b21c:	d538      	bpl.n	800b290 <_printf_float+0x43c>
 800b21e:	2301      	movs	r3, #1
 800b220:	4642      	mov	r2, r8
 800b222:	4631      	mov	r1, r6
 800b224:	4628      	mov	r0, r5
 800b226:	47b8      	blx	r7
 800b228:	3001      	adds	r0, #1
 800b22a:	f43f ae74 	beq.w	800af16 <_printf_float+0xc2>
 800b22e:	ee18 3a10 	vmov	r3, s16
 800b232:	4652      	mov	r2, sl
 800b234:	4631      	mov	r1, r6
 800b236:	4628      	mov	r0, r5
 800b238:	47b8      	blx	r7
 800b23a:	3001      	adds	r0, #1
 800b23c:	f43f ae6b 	beq.w	800af16 <_printf_float+0xc2>
 800b240:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b244:	2200      	movs	r2, #0
 800b246:	2300      	movs	r3, #0
 800b248:	f7f5 fc3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b24c:	b9d8      	cbnz	r0, 800b286 <_printf_float+0x432>
 800b24e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b250:	f108 0201 	add.w	r2, r8, #1
 800b254:	3b01      	subs	r3, #1
 800b256:	4631      	mov	r1, r6
 800b258:	4628      	mov	r0, r5
 800b25a:	47b8      	blx	r7
 800b25c:	3001      	adds	r0, #1
 800b25e:	d10e      	bne.n	800b27e <_printf_float+0x42a>
 800b260:	e659      	b.n	800af16 <_printf_float+0xc2>
 800b262:	2301      	movs	r3, #1
 800b264:	4652      	mov	r2, sl
 800b266:	4631      	mov	r1, r6
 800b268:	4628      	mov	r0, r5
 800b26a:	47b8      	blx	r7
 800b26c:	3001      	adds	r0, #1
 800b26e:	f43f ae52 	beq.w	800af16 <_printf_float+0xc2>
 800b272:	f108 0801 	add.w	r8, r8, #1
 800b276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b278:	3b01      	subs	r3, #1
 800b27a:	4543      	cmp	r3, r8
 800b27c:	dcf1      	bgt.n	800b262 <_printf_float+0x40e>
 800b27e:	464b      	mov	r3, r9
 800b280:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b284:	e6dc      	b.n	800b040 <_printf_float+0x1ec>
 800b286:	f04f 0800 	mov.w	r8, #0
 800b28a:	f104 0a1a 	add.w	sl, r4, #26
 800b28e:	e7f2      	b.n	800b276 <_printf_float+0x422>
 800b290:	2301      	movs	r3, #1
 800b292:	4642      	mov	r2, r8
 800b294:	e7df      	b.n	800b256 <_printf_float+0x402>
 800b296:	2301      	movs	r3, #1
 800b298:	464a      	mov	r2, r9
 800b29a:	4631      	mov	r1, r6
 800b29c:	4628      	mov	r0, r5
 800b29e:	47b8      	blx	r7
 800b2a0:	3001      	adds	r0, #1
 800b2a2:	f43f ae38 	beq.w	800af16 <_printf_float+0xc2>
 800b2a6:	f108 0801 	add.w	r8, r8, #1
 800b2aa:	68e3      	ldr	r3, [r4, #12]
 800b2ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b2ae:	1a5b      	subs	r3, r3, r1
 800b2b0:	4543      	cmp	r3, r8
 800b2b2:	dcf0      	bgt.n	800b296 <_printf_float+0x442>
 800b2b4:	e6fa      	b.n	800b0ac <_printf_float+0x258>
 800b2b6:	f04f 0800 	mov.w	r8, #0
 800b2ba:	f104 0919 	add.w	r9, r4, #25
 800b2be:	e7f4      	b.n	800b2aa <_printf_float+0x456>

0800b2c0 <_printf_common>:
 800b2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2c4:	4616      	mov	r6, r2
 800b2c6:	4699      	mov	r9, r3
 800b2c8:	688a      	ldr	r2, [r1, #8]
 800b2ca:	690b      	ldr	r3, [r1, #16]
 800b2cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	bfb8      	it	lt
 800b2d4:	4613      	movlt	r3, r2
 800b2d6:	6033      	str	r3, [r6, #0]
 800b2d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b2dc:	4607      	mov	r7, r0
 800b2de:	460c      	mov	r4, r1
 800b2e0:	b10a      	cbz	r2, 800b2e6 <_printf_common+0x26>
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	6033      	str	r3, [r6, #0]
 800b2e6:	6823      	ldr	r3, [r4, #0]
 800b2e8:	0699      	lsls	r1, r3, #26
 800b2ea:	bf42      	ittt	mi
 800b2ec:	6833      	ldrmi	r3, [r6, #0]
 800b2ee:	3302      	addmi	r3, #2
 800b2f0:	6033      	strmi	r3, [r6, #0]
 800b2f2:	6825      	ldr	r5, [r4, #0]
 800b2f4:	f015 0506 	ands.w	r5, r5, #6
 800b2f8:	d106      	bne.n	800b308 <_printf_common+0x48>
 800b2fa:	f104 0a19 	add.w	sl, r4, #25
 800b2fe:	68e3      	ldr	r3, [r4, #12]
 800b300:	6832      	ldr	r2, [r6, #0]
 800b302:	1a9b      	subs	r3, r3, r2
 800b304:	42ab      	cmp	r3, r5
 800b306:	dc26      	bgt.n	800b356 <_printf_common+0x96>
 800b308:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b30c:	1e13      	subs	r3, r2, #0
 800b30e:	6822      	ldr	r2, [r4, #0]
 800b310:	bf18      	it	ne
 800b312:	2301      	movne	r3, #1
 800b314:	0692      	lsls	r2, r2, #26
 800b316:	d42b      	bmi.n	800b370 <_printf_common+0xb0>
 800b318:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b31c:	4649      	mov	r1, r9
 800b31e:	4638      	mov	r0, r7
 800b320:	47c0      	blx	r8
 800b322:	3001      	adds	r0, #1
 800b324:	d01e      	beq.n	800b364 <_printf_common+0xa4>
 800b326:	6823      	ldr	r3, [r4, #0]
 800b328:	68e5      	ldr	r5, [r4, #12]
 800b32a:	6832      	ldr	r2, [r6, #0]
 800b32c:	f003 0306 	and.w	r3, r3, #6
 800b330:	2b04      	cmp	r3, #4
 800b332:	bf08      	it	eq
 800b334:	1aad      	subeq	r5, r5, r2
 800b336:	68a3      	ldr	r3, [r4, #8]
 800b338:	6922      	ldr	r2, [r4, #16]
 800b33a:	bf0c      	ite	eq
 800b33c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b340:	2500      	movne	r5, #0
 800b342:	4293      	cmp	r3, r2
 800b344:	bfc4      	itt	gt
 800b346:	1a9b      	subgt	r3, r3, r2
 800b348:	18ed      	addgt	r5, r5, r3
 800b34a:	2600      	movs	r6, #0
 800b34c:	341a      	adds	r4, #26
 800b34e:	42b5      	cmp	r5, r6
 800b350:	d11a      	bne.n	800b388 <_printf_common+0xc8>
 800b352:	2000      	movs	r0, #0
 800b354:	e008      	b.n	800b368 <_printf_common+0xa8>
 800b356:	2301      	movs	r3, #1
 800b358:	4652      	mov	r2, sl
 800b35a:	4649      	mov	r1, r9
 800b35c:	4638      	mov	r0, r7
 800b35e:	47c0      	blx	r8
 800b360:	3001      	adds	r0, #1
 800b362:	d103      	bne.n	800b36c <_printf_common+0xac>
 800b364:	f04f 30ff 	mov.w	r0, #4294967295
 800b368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b36c:	3501      	adds	r5, #1
 800b36e:	e7c6      	b.n	800b2fe <_printf_common+0x3e>
 800b370:	18e1      	adds	r1, r4, r3
 800b372:	1c5a      	adds	r2, r3, #1
 800b374:	2030      	movs	r0, #48	; 0x30
 800b376:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b37a:	4422      	add	r2, r4
 800b37c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b380:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b384:	3302      	adds	r3, #2
 800b386:	e7c7      	b.n	800b318 <_printf_common+0x58>
 800b388:	2301      	movs	r3, #1
 800b38a:	4622      	mov	r2, r4
 800b38c:	4649      	mov	r1, r9
 800b38e:	4638      	mov	r0, r7
 800b390:	47c0      	blx	r8
 800b392:	3001      	adds	r0, #1
 800b394:	d0e6      	beq.n	800b364 <_printf_common+0xa4>
 800b396:	3601      	adds	r6, #1
 800b398:	e7d9      	b.n	800b34e <_printf_common+0x8e>
	...

0800b39c <_printf_i>:
 800b39c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3a0:	7e0f      	ldrb	r7, [r1, #24]
 800b3a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b3a4:	2f78      	cmp	r7, #120	; 0x78
 800b3a6:	4691      	mov	r9, r2
 800b3a8:	4680      	mov	r8, r0
 800b3aa:	460c      	mov	r4, r1
 800b3ac:	469a      	mov	sl, r3
 800b3ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b3b2:	d807      	bhi.n	800b3c4 <_printf_i+0x28>
 800b3b4:	2f62      	cmp	r7, #98	; 0x62
 800b3b6:	d80a      	bhi.n	800b3ce <_printf_i+0x32>
 800b3b8:	2f00      	cmp	r7, #0
 800b3ba:	f000 80d8 	beq.w	800b56e <_printf_i+0x1d2>
 800b3be:	2f58      	cmp	r7, #88	; 0x58
 800b3c0:	f000 80a3 	beq.w	800b50a <_printf_i+0x16e>
 800b3c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b3cc:	e03a      	b.n	800b444 <_printf_i+0xa8>
 800b3ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b3d2:	2b15      	cmp	r3, #21
 800b3d4:	d8f6      	bhi.n	800b3c4 <_printf_i+0x28>
 800b3d6:	a101      	add	r1, pc, #4	; (adr r1, 800b3dc <_printf_i+0x40>)
 800b3d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3dc:	0800b435 	.word	0x0800b435
 800b3e0:	0800b449 	.word	0x0800b449
 800b3e4:	0800b3c5 	.word	0x0800b3c5
 800b3e8:	0800b3c5 	.word	0x0800b3c5
 800b3ec:	0800b3c5 	.word	0x0800b3c5
 800b3f0:	0800b3c5 	.word	0x0800b3c5
 800b3f4:	0800b449 	.word	0x0800b449
 800b3f8:	0800b3c5 	.word	0x0800b3c5
 800b3fc:	0800b3c5 	.word	0x0800b3c5
 800b400:	0800b3c5 	.word	0x0800b3c5
 800b404:	0800b3c5 	.word	0x0800b3c5
 800b408:	0800b555 	.word	0x0800b555
 800b40c:	0800b479 	.word	0x0800b479
 800b410:	0800b537 	.word	0x0800b537
 800b414:	0800b3c5 	.word	0x0800b3c5
 800b418:	0800b3c5 	.word	0x0800b3c5
 800b41c:	0800b577 	.word	0x0800b577
 800b420:	0800b3c5 	.word	0x0800b3c5
 800b424:	0800b479 	.word	0x0800b479
 800b428:	0800b3c5 	.word	0x0800b3c5
 800b42c:	0800b3c5 	.word	0x0800b3c5
 800b430:	0800b53f 	.word	0x0800b53f
 800b434:	682b      	ldr	r3, [r5, #0]
 800b436:	1d1a      	adds	r2, r3, #4
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	602a      	str	r2, [r5, #0]
 800b43c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b444:	2301      	movs	r3, #1
 800b446:	e0a3      	b.n	800b590 <_printf_i+0x1f4>
 800b448:	6820      	ldr	r0, [r4, #0]
 800b44a:	6829      	ldr	r1, [r5, #0]
 800b44c:	0606      	lsls	r6, r0, #24
 800b44e:	f101 0304 	add.w	r3, r1, #4
 800b452:	d50a      	bpl.n	800b46a <_printf_i+0xce>
 800b454:	680e      	ldr	r6, [r1, #0]
 800b456:	602b      	str	r3, [r5, #0]
 800b458:	2e00      	cmp	r6, #0
 800b45a:	da03      	bge.n	800b464 <_printf_i+0xc8>
 800b45c:	232d      	movs	r3, #45	; 0x2d
 800b45e:	4276      	negs	r6, r6
 800b460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b464:	485e      	ldr	r0, [pc, #376]	; (800b5e0 <_printf_i+0x244>)
 800b466:	230a      	movs	r3, #10
 800b468:	e019      	b.n	800b49e <_printf_i+0x102>
 800b46a:	680e      	ldr	r6, [r1, #0]
 800b46c:	602b      	str	r3, [r5, #0]
 800b46e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b472:	bf18      	it	ne
 800b474:	b236      	sxthne	r6, r6
 800b476:	e7ef      	b.n	800b458 <_printf_i+0xbc>
 800b478:	682b      	ldr	r3, [r5, #0]
 800b47a:	6820      	ldr	r0, [r4, #0]
 800b47c:	1d19      	adds	r1, r3, #4
 800b47e:	6029      	str	r1, [r5, #0]
 800b480:	0601      	lsls	r1, r0, #24
 800b482:	d501      	bpl.n	800b488 <_printf_i+0xec>
 800b484:	681e      	ldr	r6, [r3, #0]
 800b486:	e002      	b.n	800b48e <_printf_i+0xf2>
 800b488:	0646      	lsls	r6, r0, #25
 800b48a:	d5fb      	bpl.n	800b484 <_printf_i+0xe8>
 800b48c:	881e      	ldrh	r6, [r3, #0]
 800b48e:	4854      	ldr	r0, [pc, #336]	; (800b5e0 <_printf_i+0x244>)
 800b490:	2f6f      	cmp	r7, #111	; 0x6f
 800b492:	bf0c      	ite	eq
 800b494:	2308      	moveq	r3, #8
 800b496:	230a      	movne	r3, #10
 800b498:	2100      	movs	r1, #0
 800b49a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b49e:	6865      	ldr	r5, [r4, #4]
 800b4a0:	60a5      	str	r5, [r4, #8]
 800b4a2:	2d00      	cmp	r5, #0
 800b4a4:	bfa2      	ittt	ge
 800b4a6:	6821      	ldrge	r1, [r4, #0]
 800b4a8:	f021 0104 	bicge.w	r1, r1, #4
 800b4ac:	6021      	strge	r1, [r4, #0]
 800b4ae:	b90e      	cbnz	r6, 800b4b4 <_printf_i+0x118>
 800b4b0:	2d00      	cmp	r5, #0
 800b4b2:	d04d      	beq.n	800b550 <_printf_i+0x1b4>
 800b4b4:	4615      	mov	r5, r2
 800b4b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b4ba:	fb03 6711 	mls	r7, r3, r1, r6
 800b4be:	5dc7      	ldrb	r7, [r0, r7]
 800b4c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b4c4:	4637      	mov	r7, r6
 800b4c6:	42bb      	cmp	r3, r7
 800b4c8:	460e      	mov	r6, r1
 800b4ca:	d9f4      	bls.n	800b4b6 <_printf_i+0x11a>
 800b4cc:	2b08      	cmp	r3, #8
 800b4ce:	d10b      	bne.n	800b4e8 <_printf_i+0x14c>
 800b4d0:	6823      	ldr	r3, [r4, #0]
 800b4d2:	07de      	lsls	r6, r3, #31
 800b4d4:	d508      	bpl.n	800b4e8 <_printf_i+0x14c>
 800b4d6:	6923      	ldr	r3, [r4, #16]
 800b4d8:	6861      	ldr	r1, [r4, #4]
 800b4da:	4299      	cmp	r1, r3
 800b4dc:	bfde      	ittt	le
 800b4de:	2330      	movle	r3, #48	; 0x30
 800b4e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b4e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b4e8:	1b52      	subs	r2, r2, r5
 800b4ea:	6122      	str	r2, [r4, #16]
 800b4ec:	f8cd a000 	str.w	sl, [sp]
 800b4f0:	464b      	mov	r3, r9
 800b4f2:	aa03      	add	r2, sp, #12
 800b4f4:	4621      	mov	r1, r4
 800b4f6:	4640      	mov	r0, r8
 800b4f8:	f7ff fee2 	bl	800b2c0 <_printf_common>
 800b4fc:	3001      	adds	r0, #1
 800b4fe:	d14c      	bne.n	800b59a <_printf_i+0x1fe>
 800b500:	f04f 30ff 	mov.w	r0, #4294967295
 800b504:	b004      	add	sp, #16
 800b506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b50a:	4835      	ldr	r0, [pc, #212]	; (800b5e0 <_printf_i+0x244>)
 800b50c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b510:	6829      	ldr	r1, [r5, #0]
 800b512:	6823      	ldr	r3, [r4, #0]
 800b514:	f851 6b04 	ldr.w	r6, [r1], #4
 800b518:	6029      	str	r1, [r5, #0]
 800b51a:	061d      	lsls	r5, r3, #24
 800b51c:	d514      	bpl.n	800b548 <_printf_i+0x1ac>
 800b51e:	07df      	lsls	r7, r3, #31
 800b520:	bf44      	itt	mi
 800b522:	f043 0320 	orrmi.w	r3, r3, #32
 800b526:	6023      	strmi	r3, [r4, #0]
 800b528:	b91e      	cbnz	r6, 800b532 <_printf_i+0x196>
 800b52a:	6823      	ldr	r3, [r4, #0]
 800b52c:	f023 0320 	bic.w	r3, r3, #32
 800b530:	6023      	str	r3, [r4, #0]
 800b532:	2310      	movs	r3, #16
 800b534:	e7b0      	b.n	800b498 <_printf_i+0xfc>
 800b536:	6823      	ldr	r3, [r4, #0]
 800b538:	f043 0320 	orr.w	r3, r3, #32
 800b53c:	6023      	str	r3, [r4, #0]
 800b53e:	2378      	movs	r3, #120	; 0x78
 800b540:	4828      	ldr	r0, [pc, #160]	; (800b5e4 <_printf_i+0x248>)
 800b542:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b546:	e7e3      	b.n	800b510 <_printf_i+0x174>
 800b548:	0659      	lsls	r1, r3, #25
 800b54a:	bf48      	it	mi
 800b54c:	b2b6      	uxthmi	r6, r6
 800b54e:	e7e6      	b.n	800b51e <_printf_i+0x182>
 800b550:	4615      	mov	r5, r2
 800b552:	e7bb      	b.n	800b4cc <_printf_i+0x130>
 800b554:	682b      	ldr	r3, [r5, #0]
 800b556:	6826      	ldr	r6, [r4, #0]
 800b558:	6961      	ldr	r1, [r4, #20]
 800b55a:	1d18      	adds	r0, r3, #4
 800b55c:	6028      	str	r0, [r5, #0]
 800b55e:	0635      	lsls	r5, r6, #24
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	d501      	bpl.n	800b568 <_printf_i+0x1cc>
 800b564:	6019      	str	r1, [r3, #0]
 800b566:	e002      	b.n	800b56e <_printf_i+0x1d2>
 800b568:	0670      	lsls	r0, r6, #25
 800b56a:	d5fb      	bpl.n	800b564 <_printf_i+0x1c8>
 800b56c:	8019      	strh	r1, [r3, #0]
 800b56e:	2300      	movs	r3, #0
 800b570:	6123      	str	r3, [r4, #16]
 800b572:	4615      	mov	r5, r2
 800b574:	e7ba      	b.n	800b4ec <_printf_i+0x150>
 800b576:	682b      	ldr	r3, [r5, #0]
 800b578:	1d1a      	adds	r2, r3, #4
 800b57a:	602a      	str	r2, [r5, #0]
 800b57c:	681d      	ldr	r5, [r3, #0]
 800b57e:	6862      	ldr	r2, [r4, #4]
 800b580:	2100      	movs	r1, #0
 800b582:	4628      	mov	r0, r5
 800b584:	f7f4 fe2c 	bl	80001e0 <memchr>
 800b588:	b108      	cbz	r0, 800b58e <_printf_i+0x1f2>
 800b58a:	1b40      	subs	r0, r0, r5
 800b58c:	6060      	str	r0, [r4, #4]
 800b58e:	6863      	ldr	r3, [r4, #4]
 800b590:	6123      	str	r3, [r4, #16]
 800b592:	2300      	movs	r3, #0
 800b594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b598:	e7a8      	b.n	800b4ec <_printf_i+0x150>
 800b59a:	6923      	ldr	r3, [r4, #16]
 800b59c:	462a      	mov	r2, r5
 800b59e:	4649      	mov	r1, r9
 800b5a0:	4640      	mov	r0, r8
 800b5a2:	47d0      	blx	sl
 800b5a4:	3001      	adds	r0, #1
 800b5a6:	d0ab      	beq.n	800b500 <_printf_i+0x164>
 800b5a8:	6823      	ldr	r3, [r4, #0]
 800b5aa:	079b      	lsls	r3, r3, #30
 800b5ac:	d413      	bmi.n	800b5d6 <_printf_i+0x23a>
 800b5ae:	68e0      	ldr	r0, [r4, #12]
 800b5b0:	9b03      	ldr	r3, [sp, #12]
 800b5b2:	4298      	cmp	r0, r3
 800b5b4:	bfb8      	it	lt
 800b5b6:	4618      	movlt	r0, r3
 800b5b8:	e7a4      	b.n	800b504 <_printf_i+0x168>
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	4632      	mov	r2, r6
 800b5be:	4649      	mov	r1, r9
 800b5c0:	4640      	mov	r0, r8
 800b5c2:	47d0      	blx	sl
 800b5c4:	3001      	adds	r0, #1
 800b5c6:	d09b      	beq.n	800b500 <_printf_i+0x164>
 800b5c8:	3501      	adds	r5, #1
 800b5ca:	68e3      	ldr	r3, [r4, #12]
 800b5cc:	9903      	ldr	r1, [sp, #12]
 800b5ce:	1a5b      	subs	r3, r3, r1
 800b5d0:	42ab      	cmp	r3, r5
 800b5d2:	dcf2      	bgt.n	800b5ba <_printf_i+0x21e>
 800b5d4:	e7eb      	b.n	800b5ae <_printf_i+0x212>
 800b5d6:	2500      	movs	r5, #0
 800b5d8:	f104 0619 	add.w	r6, r4, #25
 800b5dc:	e7f5      	b.n	800b5ca <_printf_i+0x22e>
 800b5de:	bf00      	nop
 800b5e0:	0800ecd2 	.word	0x0800ecd2
 800b5e4:	0800ece3 	.word	0x0800ece3

0800b5e8 <sniprintf>:
 800b5e8:	b40c      	push	{r2, r3}
 800b5ea:	b530      	push	{r4, r5, lr}
 800b5ec:	4b17      	ldr	r3, [pc, #92]	; (800b64c <sniprintf+0x64>)
 800b5ee:	1e0c      	subs	r4, r1, #0
 800b5f0:	681d      	ldr	r5, [r3, #0]
 800b5f2:	b09d      	sub	sp, #116	; 0x74
 800b5f4:	da08      	bge.n	800b608 <sniprintf+0x20>
 800b5f6:	238b      	movs	r3, #139	; 0x8b
 800b5f8:	602b      	str	r3, [r5, #0]
 800b5fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b5fe:	b01d      	add	sp, #116	; 0x74
 800b600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b604:	b002      	add	sp, #8
 800b606:	4770      	bx	lr
 800b608:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b60c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b610:	bf14      	ite	ne
 800b612:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b616:	4623      	moveq	r3, r4
 800b618:	9304      	str	r3, [sp, #16]
 800b61a:	9307      	str	r3, [sp, #28]
 800b61c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b620:	9002      	str	r0, [sp, #8]
 800b622:	9006      	str	r0, [sp, #24]
 800b624:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b628:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b62a:	ab21      	add	r3, sp, #132	; 0x84
 800b62c:	a902      	add	r1, sp, #8
 800b62e:	4628      	mov	r0, r5
 800b630:	9301      	str	r3, [sp, #4]
 800b632:	f001 fb77 	bl	800cd24 <_svfiprintf_r>
 800b636:	1c43      	adds	r3, r0, #1
 800b638:	bfbc      	itt	lt
 800b63a:	238b      	movlt	r3, #139	; 0x8b
 800b63c:	602b      	strlt	r3, [r5, #0]
 800b63e:	2c00      	cmp	r4, #0
 800b640:	d0dd      	beq.n	800b5fe <sniprintf+0x16>
 800b642:	9b02      	ldr	r3, [sp, #8]
 800b644:	2200      	movs	r2, #0
 800b646:	701a      	strb	r2, [r3, #0]
 800b648:	e7d9      	b.n	800b5fe <sniprintf+0x16>
 800b64a:	bf00      	nop
 800b64c:	20000104 	.word	0x20000104

0800b650 <quorem>:
 800b650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b654:	6903      	ldr	r3, [r0, #16]
 800b656:	690c      	ldr	r4, [r1, #16]
 800b658:	42a3      	cmp	r3, r4
 800b65a:	4607      	mov	r7, r0
 800b65c:	f2c0 8081 	blt.w	800b762 <quorem+0x112>
 800b660:	3c01      	subs	r4, #1
 800b662:	f101 0814 	add.w	r8, r1, #20
 800b666:	f100 0514 	add.w	r5, r0, #20
 800b66a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b66e:	9301      	str	r3, [sp, #4]
 800b670:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b674:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b678:	3301      	adds	r3, #1
 800b67a:	429a      	cmp	r2, r3
 800b67c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b680:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b684:	fbb2 f6f3 	udiv	r6, r2, r3
 800b688:	d331      	bcc.n	800b6ee <quorem+0x9e>
 800b68a:	f04f 0e00 	mov.w	lr, #0
 800b68e:	4640      	mov	r0, r8
 800b690:	46ac      	mov	ip, r5
 800b692:	46f2      	mov	sl, lr
 800b694:	f850 2b04 	ldr.w	r2, [r0], #4
 800b698:	b293      	uxth	r3, r2
 800b69a:	fb06 e303 	mla	r3, r6, r3, lr
 800b69e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	ebaa 0303 	sub.w	r3, sl, r3
 800b6a8:	f8dc a000 	ldr.w	sl, [ip]
 800b6ac:	0c12      	lsrs	r2, r2, #16
 800b6ae:	fa13 f38a 	uxtah	r3, r3, sl
 800b6b2:	fb06 e202 	mla	r2, r6, r2, lr
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	9b00      	ldr	r3, [sp, #0]
 800b6ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b6be:	b292      	uxth	r2, r2
 800b6c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b6c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b6c8:	f8bd 3000 	ldrh.w	r3, [sp]
 800b6cc:	4581      	cmp	r9, r0
 800b6ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6d2:	f84c 3b04 	str.w	r3, [ip], #4
 800b6d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b6da:	d2db      	bcs.n	800b694 <quorem+0x44>
 800b6dc:	f855 300b 	ldr.w	r3, [r5, fp]
 800b6e0:	b92b      	cbnz	r3, 800b6ee <quorem+0x9e>
 800b6e2:	9b01      	ldr	r3, [sp, #4]
 800b6e4:	3b04      	subs	r3, #4
 800b6e6:	429d      	cmp	r5, r3
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	d32e      	bcc.n	800b74a <quorem+0xfa>
 800b6ec:	613c      	str	r4, [r7, #16]
 800b6ee:	4638      	mov	r0, r7
 800b6f0:	f001 f8c4 	bl	800c87c <__mcmp>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	db24      	blt.n	800b742 <quorem+0xf2>
 800b6f8:	3601      	adds	r6, #1
 800b6fa:	4628      	mov	r0, r5
 800b6fc:	f04f 0c00 	mov.w	ip, #0
 800b700:	f858 2b04 	ldr.w	r2, [r8], #4
 800b704:	f8d0 e000 	ldr.w	lr, [r0]
 800b708:	b293      	uxth	r3, r2
 800b70a:	ebac 0303 	sub.w	r3, ip, r3
 800b70e:	0c12      	lsrs	r2, r2, #16
 800b710:	fa13 f38e 	uxtah	r3, r3, lr
 800b714:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b718:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b722:	45c1      	cmp	r9, r8
 800b724:	f840 3b04 	str.w	r3, [r0], #4
 800b728:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b72c:	d2e8      	bcs.n	800b700 <quorem+0xb0>
 800b72e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b732:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b736:	b922      	cbnz	r2, 800b742 <quorem+0xf2>
 800b738:	3b04      	subs	r3, #4
 800b73a:	429d      	cmp	r5, r3
 800b73c:	461a      	mov	r2, r3
 800b73e:	d30a      	bcc.n	800b756 <quorem+0x106>
 800b740:	613c      	str	r4, [r7, #16]
 800b742:	4630      	mov	r0, r6
 800b744:	b003      	add	sp, #12
 800b746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b74a:	6812      	ldr	r2, [r2, #0]
 800b74c:	3b04      	subs	r3, #4
 800b74e:	2a00      	cmp	r2, #0
 800b750:	d1cc      	bne.n	800b6ec <quorem+0x9c>
 800b752:	3c01      	subs	r4, #1
 800b754:	e7c7      	b.n	800b6e6 <quorem+0x96>
 800b756:	6812      	ldr	r2, [r2, #0]
 800b758:	3b04      	subs	r3, #4
 800b75a:	2a00      	cmp	r2, #0
 800b75c:	d1f0      	bne.n	800b740 <quorem+0xf0>
 800b75e:	3c01      	subs	r4, #1
 800b760:	e7eb      	b.n	800b73a <quorem+0xea>
 800b762:	2000      	movs	r0, #0
 800b764:	e7ee      	b.n	800b744 <quorem+0xf4>
	...

0800b768 <_dtoa_r>:
 800b768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76c:	ed2d 8b04 	vpush	{d8-d9}
 800b770:	ec57 6b10 	vmov	r6, r7, d0
 800b774:	b093      	sub	sp, #76	; 0x4c
 800b776:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b778:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b77c:	9106      	str	r1, [sp, #24]
 800b77e:	ee10 aa10 	vmov	sl, s0
 800b782:	4604      	mov	r4, r0
 800b784:	9209      	str	r2, [sp, #36]	; 0x24
 800b786:	930c      	str	r3, [sp, #48]	; 0x30
 800b788:	46bb      	mov	fp, r7
 800b78a:	b975      	cbnz	r5, 800b7aa <_dtoa_r+0x42>
 800b78c:	2010      	movs	r0, #16
 800b78e:	f000 fddd 	bl	800c34c <malloc>
 800b792:	4602      	mov	r2, r0
 800b794:	6260      	str	r0, [r4, #36]	; 0x24
 800b796:	b920      	cbnz	r0, 800b7a2 <_dtoa_r+0x3a>
 800b798:	4ba7      	ldr	r3, [pc, #668]	; (800ba38 <_dtoa_r+0x2d0>)
 800b79a:	21ea      	movs	r1, #234	; 0xea
 800b79c:	48a7      	ldr	r0, [pc, #668]	; (800ba3c <_dtoa_r+0x2d4>)
 800b79e:	f001 fbd1 	bl	800cf44 <__assert_func>
 800b7a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b7a6:	6005      	str	r5, [r0, #0]
 800b7a8:	60c5      	str	r5, [r0, #12]
 800b7aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7ac:	6819      	ldr	r1, [r3, #0]
 800b7ae:	b151      	cbz	r1, 800b7c6 <_dtoa_r+0x5e>
 800b7b0:	685a      	ldr	r2, [r3, #4]
 800b7b2:	604a      	str	r2, [r1, #4]
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	4093      	lsls	r3, r2
 800b7b8:	608b      	str	r3, [r1, #8]
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f000 fe1c 	bl	800c3f8 <_Bfree>
 800b7c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	601a      	str	r2, [r3, #0]
 800b7c6:	1e3b      	subs	r3, r7, #0
 800b7c8:	bfaa      	itet	ge
 800b7ca:	2300      	movge	r3, #0
 800b7cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b7d0:	f8c8 3000 	strge.w	r3, [r8]
 800b7d4:	4b9a      	ldr	r3, [pc, #616]	; (800ba40 <_dtoa_r+0x2d8>)
 800b7d6:	bfbc      	itt	lt
 800b7d8:	2201      	movlt	r2, #1
 800b7da:	f8c8 2000 	strlt.w	r2, [r8]
 800b7de:	ea33 030b 	bics.w	r3, r3, fp
 800b7e2:	d11b      	bne.n	800b81c <_dtoa_r+0xb4>
 800b7e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7e6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b7ea:	6013      	str	r3, [r2, #0]
 800b7ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7f0:	4333      	orrs	r3, r6
 800b7f2:	f000 8592 	beq.w	800c31a <_dtoa_r+0xbb2>
 800b7f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7f8:	b963      	cbnz	r3, 800b814 <_dtoa_r+0xac>
 800b7fa:	4b92      	ldr	r3, [pc, #584]	; (800ba44 <_dtoa_r+0x2dc>)
 800b7fc:	e022      	b.n	800b844 <_dtoa_r+0xdc>
 800b7fe:	4b92      	ldr	r3, [pc, #584]	; (800ba48 <_dtoa_r+0x2e0>)
 800b800:	9301      	str	r3, [sp, #4]
 800b802:	3308      	adds	r3, #8
 800b804:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b806:	6013      	str	r3, [r2, #0]
 800b808:	9801      	ldr	r0, [sp, #4]
 800b80a:	b013      	add	sp, #76	; 0x4c
 800b80c:	ecbd 8b04 	vpop	{d8-d9}
 800b810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b814:	4b8b      	ldr	r3, [pc, #556]	; (800ba44 <_dtoa_r+0x2dc>)
 800b816:	9301      	str	r3, [sp, #4]
 800b818:	3303      	adds	r3, #3
 800b81a:	e7f3      	b.n	800b804 <_dtoa_r+0x9c>
 800b81c:	2200      	movs	r2, #0
 800b81e:	2300      	movs	r3, #0
 800b820:	4650      	mov	r0, sl
 800b822:	4659      	mov	r1, fp
 800b824:	f7f5 f950 	bl	8000ac8 <__aeabi_dcmpeq>
 800b828:	ec4b ab19 	vmov	d9, sl, fp
 800b82c:	4680      	mov	r8, r0
 800b82e:	b158      	cbz	r0, 800b848 <_dtoa_r+0xe0>
 800b830:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b832:	2301      	movs	r3, #1
 800b834:	6013      	str	r3, [r2, #0]
 800b836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f000 856b 	beq.w	800c314 <_dtoa_r+0xbac>
 800b83e:	4883      	ldr	r0, [pc, #524]	; (800ba4c <_dtoa_r+0x2e4>)
 800b840:	6018      	str	r0, [r3, #0]
 800b842:	1e43      	subs	r3, r0, #1
 800b844:	9301      	str	r3, [sp, #4]
 800b846:	e7df      	b.n	800b808 <_dtoa_r+0xa0>
 800b848:	ec4b ab10 	vmov	d0, sl, fp
 800b84c:	aa10      	add	r2, sp, #64	; 0x40
 800b84e:	a911      	add	r1, sp, #68	; 0x44
 800b850:	4620      	mov	r0, r4
 800b852:	f001 f8b9 	bl	800c9c8 <__d2b>
 800b856:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b85a:	ee08 0a10 	vmov	s16, r0
 800b85e:	2d00      	cmp	r5, #0
 800b860:	f000 8084 	beq.w	800b96c <_dtoa_r+0x204>
 800b864:	ee19 3a90 	vmov	r3, s19
 800b868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b86c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b870:	4656      	mov	r6, sl
 800b872:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b876:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b87a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b87e:	4b74      	ldr	r3, [pc, #464]	; (800ba50 <_dtoa_r+0x2e8>)
 800b880:	2200      	movs	r2, #0
 800b882:	4630      	mov	r0, r6
 800b884:	4639      	mov	r1, r7
 800b886:	f7f4 fcff 	bl	8000288 <__aeabi_dsub>
 800b88a:	a365      	add	r3, pc, #404	; (adr r3, 800ba20 <_dtoa_r+0x2b8>)
 800b88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b890:	f7f4 feb2 	bl	80005f8 <__aeabi_dmul>
 800b894:	a364      	add	r3, pc, #400	; (adr r3, 800ba28 <_dtoa_r+0x2c0>)
 800b896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89a:	f7f4 fcf7 	bl	800028c <__adddf3>
 800b89e:	4606      	mov	r6, r0
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	460f      	mov	r7, r1
 800b8a4:	f7f4 fe3e 	bl	8000524 <__aeabi_i2d>
 800b8a8:	a361      	add	r3, pc, #388	; (adr r3, 800ba30 <_dtoa_r+0x2c8>)
 800b8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ae:	f7f4 fea3 	bl	80005f8 <__aeabi_dmul>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	4639      	mov	r1, r7
 800b8ba:	f7f4 fce7 	bl	800028c <__adddf3>
 800b8be:	4606      	mov	r6, r0
 800b8c0:	460f      	mov	r7, r1
 800b8c2:	f7f5 f949 	bl	8000b58 <__aeabi_d2iz>
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	9000      	str	r0, [sp, #0]
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	4630      	mov	r0, r6
 800b8ce:	4639      	mov	r1, r7
 800b8d0:	f7f5 f904 	bl	8000adc <__aeabi_dcmplt>
 800b8d4:	b150      	cbz	r0, 800b8ec <_dtoa_r+0x184>
 800b8d6:	9800      	ldr	r0, [sp, #0]
 800b8d8:	f7f4 fe24 	bl	8000524 <__aeabi_i2d>
 800b8dc:	4632      	mov	r2, r6
 800b8de:	463b      	mov	r3, r7
 800b8e0:	f7f5 f8f2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8e4:	b910      	cbnz	r0, 800b8ec <_dtoa_r+0x184>
 800b8e6:	9b00      	ldr	r3, [sp, #0]
 800b8e8:	3b01      	subs	r3, #1
 800b8ea:	9300      	str	r3, [sp, #0]
 800b8ec:	9b00      	ldr	r3, [sp, #0]
 800b8ee:	2b16      	cmp	r3, #22
 800b8f0:	d85a      	bhi.n	800b9a8 <_dtoa_r+0x240>
 800b8f2:	9a00      	ldr	r2, [sp, #0]
 800b8f4:	4b57      	ldr	r3, [pc, #348]	; (800ba54 <_dtoa_r+0x2ec>)
 800b8f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fe:	ec51 0b19 	vmov	r0, r1, d9
 800b902:	f7f5 f8eb 	bl	8000adc <__aeabi_dcmplt>
 800b906:	2800      	cmp	r0, #0
 800b908:	d050      	beq.n	800b9ac <_dtoa_r+0x244>
 800b90a:	9b00      	ldr	r3, [sp, #0]
 800b90c:	3b01      	subs	r3, #1
 800b90e:	9300      	str	r3, [sp, #0]
 800b910:	2300      	movs	r3, #0
 800b912:	930b      	str	r3, [sp, #44]	; 0x2c
 800b914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b916:	1b5d      	subs	r5, r3, r5
 800b918:	1e6b      	subs	r3, r5, #1
 800b91a:	9305      	str	r3, [sp, #20]
 800b91c:	bf45      	ittet	mi
 800b91e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b922:	9304      	strmi	r3, [sp, #16]
 800b924:	2300      	movpl	r3, #0
 800b926:	2300      	movmi	r3, #0
 800b928:	bf4c      	ite	mi
 800b92a:	9305      	strmi	r3, [sp, #20]
 800b92c:	9304      	strpl	r3, [sp, #16]
 800b92e:	9b00      	ldr	r3, [sp, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	db3d      	blt.n	800b9b0 <_dtoa_r+0x248>
 800b934:	9b05      	ldr	r3, [sp, #20]
 800b936:	9a00      	ldr	r2, [sp, #0]
 800b938:	920a      	str	r2, [sp, #40]	; 0x28
 800b93a:	4413      	add	r3, r2
 800b93c:	9305      	str	r3, [sp, #20]
 800b93e:	2300      	movs	r3, #0
 800b940:	9307      	str	r3, [sp, #28]
 800b942:	9b06      	ldr	r3, [sp, #24]
 800b944:	2b09      	cmp	r3, #9
 800b946:	f200 8089 	bhi.w	800ba5c <_dtoa_r+0x2f4>
 800b94a:	2b05      	cmp	r3, #5
 800b94c:	bfc4      	itt	gt
 800b94e:	3b04      	subgt	r3, #4
 800b950:	9306      	strgt	r3, [sp, #24]
 800b952:	9b06      	ldr	r3, [sp, #24]
 800b954:	f1a3 0302 	sub.w	r3, r3, #2
 800b958:	bfcc      	ite	gt
 800b95a:	2500      	movgt	r5, #0
 800b95c:	2501      	movle	r5, #1
 800b95e:	2b03      	cmp	r3, #3
 800b960:	f200 8087 	bhi.w	800ba72 <_dtoa_r+0x30a>
 800b964:	e8df f003 	tbb	[pc, r3]
 800b968:	59383a2d 	.word	0x59383a2d
 800b96c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b970:	441d      	add	r5, r3
 800b972:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b976:	2b20      	cmp	r3, #32
 800b978:	bfc1      	itttt	gt
 800b97a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b97e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b982:	fa0b f303 	lslgt.w	r3, fp, r3
 800b986:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b98a:	bfda      	itte	le
 800b98c:	f1c3 0320 	rsble	r3, r3, #32
 800b990:	fa06 f003 	lslle.w	r0, r6, r3
 800b994:	4318      	orrgt	r0, r3
 800b996:	f7f4 fdb5 	bl	8000504 <__aeabi_ui2d>
 800b99a:	2301      	movs	r3, #1
 800b99c:	4606      	mov	r6, r0
 800b99e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b9a2:	3d01      	subs	r5, #1
 800b9a4:	930e      	str	r3, [sp, #56]	; 0x38
 800b9a6:	e76a      	b.n	800b87e <_dtoa_r+0x116>
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e7b2      	b.n	800b912 <_dtoa_r+0x1aa>
 800b9ac:	900b      	str	r0, [sp, #44]	; 0x2c
 800b9ae:	e7b1      	b.n	800b914 <_dtoa_r+0x1ac>
 800b9b0:	9b04      	ldr	r3, [sp, #16]
 800b9b2:	9a00      	ldr	r2, [sp, #0]
 800b9b4:	1a9b      	subs	r3, r3, r2
 800b9b6:	9304      	str	r3, [sp, #16]
 800b9b8:	4253      	negs	r3, r2
 800b9ba:	9307      	str	r3, [sp, #28]
 800b9bc:	2300      	movs	r3, #0
 800b9be:	930a      	str	r3, [sp, #40]	; 0x28
 800b9c0:	e7bf      	b.n	800b942 <_dtoa_r+0x1da>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	9308      	str	r3, [sp, #32]
 800b9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	dc55      	bgt.n	800ba78 <_dtoa_r+0x310>
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	9209      	str	r2, [sp, #36]	; 0x24
 800b9d6:	e00c      	b.n	800b9f2 <_dtoa_r+0x28a>
 800b9d8:	2301      	movs	r3, #1
 800b9da:	e7f3      	b.n	800b9c4 <_dtoa_r+0x25c>
 800b9dc:	2300      	movs	r3, #0
 800b9de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9e0:	9308      	str	r3, [sp, #32]
 800b9e2:	9b00      	ldr	r3, [sp, #0]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	9302      	str	r3, [sp, #8]
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	9303      	str	r3, [sp, #12]
 800b9ee:	bfb8      	it	lt
 800b9f0:	2301      	movlt	r3, #1
 800b9f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	6042      	str	r2, [r0, #4]
 800b9f8:	2204      	movs	r2, #4
 800b9fa:	f102 0614 	add.w	r6, r2, #20
 800b9fe:	429e      	cmp	r6, r3
 800ba00:	6841      	ldr	r1, [r0, #4]
 800ba02:	d93d      	bls.n	800ba80 <_dtoa_r+0x318>
 800ba04:	4620      	mov	r0, r4
 800ba06:	f000 fcb7 	bl	800c378 <_Balloc>
 800ba0a:	9001      	str	r0, [sp, #4]
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	d13b      	bne.n	800ba88 <_dtoa_r+0x320>
 800ba10:	4b11      	ldr	r3, [pc, #68]	; (800ba58 <_dtoa_r+0x2f0>)
 800ba12:	4602      	mov	r2, r0
 800ba14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ba18:	e6c0      	b.n	800b79c <_dtoa_r+0x34>
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	e7df      	b.n	800b9de <_dtoa_r+0x276>
 800ba1e:	bf00      	nop
 800ba20:	636f4361 	.word	0x636f4361
 800ba24:	3fd287a7 	.word	0x3fd287a7
 800ba28:	8b60c8b3 	.word	0x8b60c8b3
 800ba2c:	3fc68a28 	.word	0x3fc68a28
 800ba30:	509f79fb 	.word	0x509f79fb
 800ba34:	3fd34413 	.word	0x3fd34413
 800ba38:	0800ed01 	.word	0x0800ed01
 800ba3c:	0800ed18 	.word	0x0800ed18
 800ba40:	7ff00000 	.word	0x7ff00000
 800ba44:	0800ecfd 	.word	0x0800ecfd
 800ba48:	0800ecf4 	.word	0x0800ecf4
 800ba4c:	0800ecd1 	.word	0x0800ecd1
 800ba50:	3ff80000 	.word	0x3ff80000
 800ba54:	0800ee08 	.word	0x0800ee08
 800ba58:	0800ed73 	.word	0x0800ed73
 800ba5c:	2501      	movs	r5, #1
 800ba5e:	2300      	movs	r3, #0
 800ba60:	9306      	str	r3, [sp, #24]
 800ba62:	9508      	str	r5, [sp, #32]
 800ba64:	f04f 33ff 	mov.w	r3, #4294967295
 800ba68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	2312      	movs	r3, #18
 800ba70:	e7b0      	b.n	800b9d4 <_dtoa_r+0x26c>
 800ba72:	2301      	movs	r3, #1
 800ba74:	9308      	str	r3, [sp, #32]
 800ba76:	e7f5      	b.n	800ba64 <_dtoa_r+0x2fc>
 800ba78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba7e:	e7b8      	b.n	800b9f2 <_dtoa_r+0x28a>
 800ba80:	3101      	adds	r1, #1
 800ba82:	6041      	str	r1, [r0, #4]
 800ba84:	0052      	lsls	r2, r2, #1
 800ba86:	e7b8      	b.n	800b9fa <_dtoa_r+0x292>
 800ba88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba8a:	9a01      	ldr	r2, [sp, #4]
 800ba8c:	601a      	str	r2, [r3, #0]
 800ba8e:	9b03      	ldr	r3, [sp, #12]
 800ba90:	2b0e      	cmp	r3, #14
 800ba92:	f200 809d 	bhi.w	800bbd0 <_dtoa_r+0x468>
 800ba96:	2d00      	cmp	r5, #0
 800ba98:	f000 809a 	beq.w	800bbd0 <_dtoa_r+0x468>
 800ba9c:	9b00      	ldr	r3, [sp, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	dd32      	ble.n	800bb08 <_dtoa_r+0x3a0>
 800baa2:	4ab7      	ldr	r2, [pc, #732]	; (800bd80 <_dtoa_r+0x618>)
 800baa4:	f003 030f 	and.w	r3, r3, #15
 800baa8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800baac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bab0:	9b00      	ldr	r3, [sp, #0]
 800bab2:	05d8      	lsls	r0, r3, #23
 800bab4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bab8:	d516      	bpl.n	800bae8 <_dtoa_r+0x380>
 800baba:	4bb2      	ldr	r3, [pc, #712]	; (800bd84 <_dtoa_r+0x61c>)
 800babc:	ec51 0b19 	vmov	r0, r1, d9
 800bac0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bac4:	f7f4 fec2 	bl	800084c <__aeabi_ddiv>
 800bac8:	f007 070f 	and.w	r7, r7, #15
 800bacc:	4682      	mov	sl, r0
 800bace:	468b      	mov	fp, r1
 800bad0:	2503      	movs	r5, #3
 800bad2:	4eac      	ldr	r6, [pc, #688]	; (800bd84 <_dtoa_r+0x61c>)
 800bad4:	b957      	cbnz	r7, 800baec <_dtoa_r+0x384>
 800bad6:	4642      	mov	r2, r8
 800bad8:	464b      	mov	r3, r9
 800bada:	4650      	mov	r0, sl
 800badc:	4659      	mov	r1, fp
 800bade:	f7f4 feb5 	bl	800084c <__aeabi_ddiv>
 800bae2:	4682      	mov	sl, r0
 800bae4:	468b      	mov	fp, r1
 800bae6:	e028      	b.n	800bb3a <_dtoa_r+0x3d2>
 800bae8:	2502      	movs	r5, #2
 800baea:	e7f2      	b.n	800bad2 <_dtoa_r+0x36a>
 800baec:	07f9      	lsls	r1, r7, #31
 800baee:	d508      	bpl.n	800bb02 <_dtoa_r+0x39a>
 800baf0:	4640      	mov	r0, r8
 800baf2:	4649      	mov	r1, r9
 800baf4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800baf8:	f7f4 fd7e 	bl	80005f8 <__aeabi_dmul>
 800bafc:	3501      	adds	r5, #1
 800bafe:	4680      	mov	r8, r0
 800bb00:	4689      	mov	r9, r1
 800bb02:	107f      	asrs	r7, r7, #1
 800bb04:	3608      	adds	r6, #8
 800bb06:	e7e5      	b.n	800bad4 <_dtoa_r+0x36c>
 800bb08:	f000 809b 	beq.w	800bc42 <_dtoa_r+0x4da>
 800bb0c:	9b00      	ldr	r3, [sp, #0]
 800bb0e:	4f9d      	ldr	r7, [pc, #628]	; (800bd84 <_dtoa_r+0x61c>)
 800bb10:	425e      	negs	r6, r3
 800bb12:	4b9b      	ldr	r3, [pc, #620]	; (800bd80 <_dtoa_r+0x618>)
 800bb14:	f006 020f 	and.w	r2, r6, #15
 800bb18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb20:	ec51 0b19 	vmov	r0, r1, d9
 800bb24:	f7f4 fd68 	bl	80005f8 <__aeabi_dmul>
 800bb28:	1136      	asrs	r6, r6, #4
 800bb2a:	4682      	mov	sl, r0
 800bb2c:	468b      	mov	fp, r1
 800bb2e:	2300      	movs	r3, #0
 800bb30:	2502      	movs	r5, #2
 800bb32:	2e00      	cmp	r6, #0
 800bb34:	d17a      	bne.n	800bc2c <_dtoa_r+0x4c4>
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1d3      	bne.n	800bae2 <_dtoa_r+0x37a>
 800bb3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f000 8082 	beq.w	800bc46 <_dtoa_r+0x4de>
 800bb42:	4b91      	ldr	r3, [pc, #580]	; (800bd88 <_dtoa_r+0x620>)
 800bb44:	2200      	movs	r2, #0
 800bb46:	4650      	mov	r0, sl
 800bb48:	4659      	mov	r1, fp
 800bb4a:	f7f4 ffc7 	bl	8000adc <__aeabi_dcmplt>
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d079      	beq.n	800bc46 <_dtoa_r+0x4de>
 800bb52:	9b03      	ldr	r3, [sp, #12]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d076      	beq.n	800bc46 <_dtoa_r+0x4de>
 800bb58:	9b02      	ldr	r3, [sp, #8]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	dd36      	ble.n	800bbcc <_dtoa_r+0x464>
 800bb5e:	9b00      	ldr	r3, [sp, #0]
 800bb60:	4650      	mov	r0, sl
 800bb62:	4659      	mov	r1, fp
 800bb64:	1e5f      	subs	r7, r3, #1
 800bb66:	2200      	movs	r2, #0
 800bb68:	4b88      	ldr	r3, [pc, #544]	; (800bd8c <_dtoa_r+0x624>)
 800bb6a:	f7f4 fd45 	bl	80005f8 <__aeabi_dmul>
 800bb6e:	9e02      	ldr	r6, [sp, #8]
 800bb70:	4682      	mov	sl, r0
 800bb72:	468b      	mov	fp, r1
 800bb74:	3501      	adds	r5, #1
 800bb76:	4628      	mov	r0, r5
 800bb78:	f7f4 fcd4 	bl	8000524 <__aeabi_i2d>
 800bb7c:	4652      	mov	r2, sl
 800bb7e:	465b      	mov	r3, fp
 800bb80:	f7f4 fd3a 	bl	80005f8 <__aeabi_dmul>
 800bb84:	4b82      	ldr	r3, [pc, #520]	; (800bd90 <_dtoa_r+0x628>)
 800bb86:	2200      	movs	r2, #0
 800bb88:	f7f4 fb80 	bl	800028c <__adddf3>
 800bb8c:	46d0      	mov	r8, sl
 800bb8e:	46d9      	mov	r9, fp
 800bb90:	4682      	mov	sl, r0
 800bb92:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bb96:	2e00      	cmp	r6, #0
 800bb98:	d158      	bne.n	800bc4c <_dtoa_r+0x4e4>
 800bb9a:	4b7e      	ldr	r3, [pc, #504]	; (800bd94 <_dtoa_r+0x62c>)
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	4640      	mov	r0, r8
 800bba0:	4649      	mov	r1, r9
 800bba2:	f7f4 fb71 	bl	8000288 <__aeabi_dsub>
 800bba6:	4652      	mov	r2, sl
 800bba8:	465b      	mov	r3, fp
 800bbaa:	4680      	mov	r8, r0
 800bbac:	4689      	mov	r9, r1
 800bbae:	f7f4 ffb3 	bl	8000b18 <__aeabi_dcmpgt>
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	f040 8295 	bne.w	800c0e2 <_dtoa_r+0x97a>
 800bbb8:	4652      	mov	r2, sl
 800bbba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bbbe:	4640      	mov	r0, r8
 800bbc0:	4649      	mov	r1, r9
 800bbc2:	f7f4 ff8b 	bl	8000adc <__aeabi_dcmplt>
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	f040 8289 	bne.w	800c0de <_dtoa_r+0x976>
 800bbcc:	ec5b ab19 	vmov	sl, fp, d9
 800bbd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f2c0 8148 	blt.w	800be68 <_dtoa_r+0x700>
 800bbd8:	9a00      	ldr	r2, [sp, #0]
 800bbda:	2a0e      	cmp	r2, #14
 800bbdc:	f300 8144 	bgt.w	800be68 <_dtoa_r+0x700>
 800bbe0:	4b67      	ldr	r3, [pc, #412]	; (800bd80 <_dtoa_r+0x618>)
 800bbe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbe6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bbea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	f280 80d5 	bge.w	800bd9c <_dtoa_r+0x634>
 800bbf2:	9b03      	ldr	r3, [sp, #12]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	f300 80d1 	bgt.w	800bd9c <_dtoa_r+0x634>
 800bbfa:	f040 826f 	bne.w	800c0dc <_dtoa_r+0x974>
 800bbfe:	4b65      	ldr	r3, [pc, #404]	; (800bd94 <_dtoa_r+0x62c>)
 800bc00:	2200      	movs	r2, #0
 800bc02:	4640      	mov	r0, r8
 800bc04:	4649      	mov	r1, r9
 800bc06:	f7f4 fcf7 	bl	80005f8 <__aeabi_dmul>
 800bc0a:	4652      	mov	r2, sl
 800bc0c:	465b      	mov	r3, fp
 800bc0e:	f7f4 ff79 	bl	8000b04 <__aeabi_dcmpge>
 800bc12:	9e03      	ldr	r6, [sp, #12]
 800bc14:	4637      	mov	r7, r6
 800bc16:	2800      	cmp	r0, #0
 800bc18:	f040 8245 	bne.w	800c0a6 <_dtoa_r+0x93e>
 800bc1c:	9d01      	ldr	r5, [sp, #4]
 800bc1e:	2331      	movs	r3, #49	; 0x31
 800bc20:	f805 3b01 	strb.w	r3, [r5], #1
 800bc24:	9b00      	ldr	r3, [sp, #0]
 800bc26:	3301      	adds	r3, #1
 800bc28:	9300      	str	r3, [sp, #0]
 800bc2a:	e240      	b.n	800c0ae <_dtoa_r+0x946>
 800bc2c:	07f2      	lsls	r2, r6, #31
 800bc2e:	d505      	bpl.n	800bc3c <_dtoa_r+0x4d4>
 800bc30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc34:	f7f4 fce0 	bl	80005f8 <__aeabi_dmul>
 800bc38:	3501      	adds	r5, #1
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	1076      	asrs	r6, r6, #1
 800bc3e:	3708      	adds	r7, #8
 800bc40:	e777      	b.n	800bb32 <_dtoa_r+0x3ca>
 800bc42:	2502      	movs	r5, #2
 800bc44:	e779      	b.n	800bb3a <_dtoa_r+0x3d2>
 800bc46:	9f00      	ldr	r7, [sp, #0]
 800bc48:	9e03      	ldr	r6, [sp, #12]
 800bc4a:	e794      	b.n	800bb76 <_dtoa_r+0x40e>
 800bc4c:	9901      	ldr	r1, [sp, #4]
 800bc4e:	4b4c      	ldr	r3, [pc, #304]	; (800bd80 <_dtoa_r+0x618>)
 800bc50:	4431      	add	r1, r6
 800bc52:	910d      	str	r1, [sp, #52]	; 0x34
 800bc54:	9908      	ldr	r1, [sp, #32]
 800bc56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bc5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc5e:	2900      	cmp	r1, #0
 800bc60:	d043      	beq.n	800bcea <_dtoa_r+0x582>
 800bc62:	494d      	ldr	r1, [pc, #308]	; (800bd98 <_dtoa_r+0x630>)
 800bc64:	2000      	movs	r0, #0
 800bc66:	f7f4 fdf1 	bl	800084c <__aeabi_ddiv>
 800bc6a:	4652      	mov	r2, sl
 800bc6c:	465b      	mov	r3, fp
 800bc6e:	f7f4 fb0b 	bl	8000288 <__aeabi_dsub>
 800bc72:	9d01      	ldr	r5, [sp, #4]
 800bc74:	4682      	mov	sl, r0
 800bc76:	468b      	mov	fp, r1
 800bc78:	4649      	mov	r1, r9
 800bc7a:	4640      	mov	r0, r8
 800bc7c:	f7f4 ff6c 	bl	8000b58 <__aeabi_d2iz>
 800bc80:	4606      	mov	r6, r0
 800bc82:	f7f4 fc4f 	bl	8000524 <__aeabi_i2d>
 800bc86:	4602      	mov	r2, r0
 800bc88:	460b      	mov	r3, r1
 800bc8a:	4640      	mov	r0, r8
 800bc8c:	4649      	mov	r1, r9
 800bc8e:	f7f4 fafb 	bl	8000288 <__aeabi_dsub>
 800bc92:	3630      	adds	r6, #48	; 0x30
 800bc94:	f805 6b01 	strb.w	r6, [r5], #1
 800bc98:	4652      	mov	r2, sl
 800bc9a:	465b      	mov	r3, fp
 800bc9c:	4680      	mov	r8, r0
 800bc9e:	4689      	mov	r9, r1
 800bca0:	f7f4 ff1c 	bl	8000adc <__aeabi_dcmplt>
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d163      	bne.n	800bd70 <_dtoa_r+0x608>
 800bca8:	4642      	mov	r2, r8
 800bcaa:	464b      	mov	r3, r9
 800bcac:	4936      	ldr	r1, [pc, #216]	; (800bd88 <_dtoa_r+0x620>)
 800bcae:	2000      	movs	r0, #0
 800bcb0:	f7f4 faea 	bl	8000288 <__aeabi_dsub>
 800bcb4:	4652      	mov	r2, sl
 800bcb6:	465b      	mov	r3, fp
 800bcb8:	f7f4 ff10 	bl	8000adc <__aeabi_dcmplt>
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	f040 80b5 	bne.w	800be2c <_dtoa_r+0x6c4>
 800bcc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcc4:	429d      	cmp	r5, r3
 800bcc6:	d081      	beq.n	800bbcc <_dtoa_r+0x464>
 800bcc8:	4b30      	ldr	r3, [pc, #192]	; (800bd8c <_dtoa_r+0x624>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	4650      	mov	r0, sl
 800bcce:	4659      	mov	r1, fp
 800bcd0:	f7f4 fc92 	bl	80005f8 <__aeabi_dmul>
 800bcd4:	4b2d      	ldr	r3, [pc, #180]	; (800bd8c <_dtoa_r+0x624>)
 800bcd6:	4682      	mov	sl, r0
 800bcd8:	468b      	mov	fp, r1
 800bcda:	4640      	mov	r0, r8
 800bcdc:	4649      	mov	r1, r9
 800bcde:	2200      	movs	r2, #0
 800bce0:	f7f4 fc8a 	bl	80005f8 <__aeabi_dmul>
 800bce4:	4680      	mov	r8, r0
 800bce6:	4689      	mov	r9, r1
 800bce8:	e7c6      	b.n	800bc78 <_dtoa_r+0x510>
 800bcea:	4650      	mov	r0, sl
 800bcec:	4659      	mov	r1, fp
 800bcee:	f7f4 fc83 	bl	80005f8 <__aeabi_dmul>
 800bcf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcf4:	9d01      	ldr	r5, [sp, #4]
 800bcf6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcf8:	4682      	mov	sl, r0
 800bcfa:	468b      	mov	fp, r1
 800bcfc:	4649      	mov	r1, r9
 800bcfe:	4640      	mov	r0, r8
 800bd00:	f7f4 ff2a 	bl	8000b58 <__aeabi_d2iz>
 800bd04:	4606      	mov	r6, r0
 800bd06:	f7f4 fc0d 	bl	8000524 <__aeabi_i2d>
 800bd0a:	3630      	adds	r6, #48	; 0x30
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	460b      	mov	r3, r1
 800bd10:	4640      	mov	r0, r8
 800bd12:	4649      	mov	r1, r9
 800bd14:	f7f4 fab8 	bl	8000288 <__aeabi_dsub>
 800bd18:	f805 6b01 	strb.w	r6, [r5], #1
 800bd1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd1e:	429d      	cmp	r5, r3
 800bd20:	4680      	mov	r8, r0
 800bd22:	4689      	mov	r9, r1
 800bd24:	f04f 0200 	mov.w	r2, #0
 800bd28:	d124      	bne.n	800bd74 <_dtoa_r+0x60c>
 800bd2a:	4b1b      	ldr	r3, [pc, #108]	; (800bd98 <_dtoa_r+0x630>)
 800bd2c:	4650      	mov	r0, sl
 800bd2e:	4659      	mov	r1, fp
 800bd30:	f7f4 faac 	bl	800028c <__adddf3>
 800bd34:	4602      	mov	r2, r0
 800bd36:	460b      	mov	r3, r1
 800bd38:	4640      	mov	r0, r8
 800bd3a:	4649      	mov	r1, r9
 800bd3c:	f7f4 feec 	bl	8000b18 <__aeabi_dcmpgt>
 800bd40:	2800      	cmp	r0, #0
 800bd42:	d173      	bne.n	800be2c <_dtoa_r+0x6c4>
 800bd44:	4652      	mov	r2, sl
 800bd46:	465b      	mov	r3, fp
 800bd48:	4913      	ldr	r1, [pc, #76]	; (800bd98 <_dtoa_r+0x630>)
 800bd4a:	2000      	movs	r0, #0
 800bd4c:	f7f4 fa9c 	bl	8000288 <__aeabi_dsub>
 800bd50:	4602      	mov	r2, r0
 800bd52:	460b      	mov	r3, r1
 800bd54:	4640      	mov	r0, r8
 800bd56:	4649      	mov	r1, r9
 800bd58:	f7f4 fec0 	bl	8000adc <__aeabi_dcmplt>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	f43f af35 	beq.w	800bbcc <_dtoa_r+0x464>
 800bd62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bd64:	1e6b      	subs	r3, r5, #1
 800bd66:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bd6c:	2b30      	cmp	r3, #48	; 0x30
 800bd6e:	d0f8      	beq.n	800bd62 <_dtoa_r+0x5fa>
 800bd70:	9700      	str	r7, [sp, #0]
 800bd72:	e049      	b.n	800be08 <_dtoa_r+0x6a0>
 800bd74:	4b05      	ldr	r3, [pc, #20]	; (800bd8c <_dtoa_r+0x624>)
 800bd76:	f7f4 fc3f 	bl	80005f8 <__aeabi_dmul>
 800bd7a:	4680      	mov	r8, r0
 800bd7c:	4689      	mov	r9, r1
 800bd7e:	e7bd      	b.n	800bcfc <_dtoa_r+0x594>
 800bd80:	0800ee08 	.word	0x0800ee08
 800bd84:	0800ede0 	.word	0x0800ede0
 800bd88:	3ff00000 	.word	0x3ff00000
 800bd8c:	40240000 	.word	0x40240000
 800bd90:	401c0000 	.word	0x401c0000
 800bd94:	40140000 	.word	0x40140000
 800bd98:	3fe00000 	.word	0x3fe00000
 800bd9c:	9d01      	ldr	r5, [sp, #4]
 800bd9e:	4656      	mov	r6, sl
 800bda0:	465f      	mov	r7, fp
 800bda2:	4642      	mov	r2, r8
 800bda4:	464b      	mov	r3, r9
 800bda6:	4630      	mov	r0, r6
 800bda8:	4639      	mov	r1, r7
 800bdaa:	f7f4 fd4f 	bl	800084c <__aeabi_ddiv>
 800bdae:	f7f4 fed3 	bl	8000b58 <__aeabi_d2iz>
 800bdb2:	4682      	mov	sl, r0
 800bdb4:	f7f4 fbb6 	bl	8000524 <__aeabi_i2d>
 800bdb8:	4642      	mov	r2, r8
 800bdba:	464b      	mov	r3, r9
 800bdbc:	f7f4 fc1c 	bl	80005f8 <__aeabi_dmul>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	4630      	mov	r0, r6
 800bdc6:	4639      	mov	r1, r7
 800bdc8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bdcc:	f7f4 fa5c 	bl	8000288 <__aeabi_dsub>
 800bdd0:	f805 6b01 	strb.w	r6, [r5], #1
 800bdd4:	9e01      	ldr	r6, [sp, #4]
 800bdd6:	9f03      	ldr	r7, [sp, #12]
 800bdd8:	1bae      	subs	r6, r5, r6
 800bdda:	42b7      	cmp	r7, r6
 800bddc:	4602      	mov	r2, r0
 800bdde:	460b      	mov	r3, r1
 800bde0:	d135      	bne.n	800be4e <_dtoa_r+0x6e6>
 800bde2:	f7f4 fa53 	bl	800028c <__adddf3>
 800bde6:	4642      	mov	r2, r8
 800bde8:	464b      	mov	r3, r9
 800bdea:	4606      	mov	r6, r0
 800bdec:	460f      	mov	r7, r1
 800bdee:	f7f4 fe93 	bl	8000b18 <__aeabi_dcmpgt>
 800bdf2:	b9d0      	cbnz	r0, 800be2a <_dtoa_r+0x6c2>
 800bdf4:	4642      	mov	r2, r8
 800bdf6:	464b      	mov	r3, r9
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	4639      	mov	r1, r7
 800bdfc:	f7f4 fe64 	bl	8000ac8 <__aeabi_dcmpeq>
 800be00:	b110      	cbz	r0, 800be08 <_dtoa_r+0x6a0>
 800be02:	f01a 0f01 	tst.w	sl, #1
 800be06:	d110      	bne.n	800be2a <_dtoa_r+0x6c2>
 800be08:	4620      	mov	r0, r4
 800be0a:	ee18 1a10 	vmov	r1, s16
 800be0e:	f000 faf3 	bl	800c3f8 <_Bfree>
 800be12:	2300      	movs	r3, #0
 800be14:	9800      	ldr	r0, [sp, #0]
 800be16:	702b      	strb	r3, [r5, #0]
 800be18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be1a:	3001      	adds	r0, #1
 800be1c:	6018      	str	r0, [r3, #0]
 800be1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be20:	2b00      	cmp	r3, #0
 800be22:	f43f acf1 	beq.w	800b808 <_dtoa_r+0xa0>
 800be26:	601d      	str	r5, [r3, #0]
 800be28:	e4ee      	b.n	800b808 <_dtoa_r+0xa0>
 800be2a:	9f00      	ldr	r7, [sp, #0]
 800be2c:	462b      	mov	r3, r5
 800be2e:	461d      	mov	r5, r3
 800be30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be34:	2a39      	cmp	r2, #57	; 0x39
 800be36:	d106      	bne.n	800be46 <_dtoa_r+0x6de>
 800be38:	9a01      	ldr	r2, [sp, #4]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d1f7      	bne.n	800be2e <_dtoa_r+0x6c6>
 800be3e:	9901      	ldr	r1, [sp, #4]
 800be40:	2230      	movs	r2, #48	; 0x30
 800be42:	3701      	adds	r7, #1
 800be44:	700a      	strb	r2, [r1, #0]
 800be46:	781a      	ldrb	r2, [r3, #0]
 800be48:	3201      	adds	r2, #1
 800be4a:	701a      	strb	r2, [r3, #0]
 800be4c:	e790      	b.n	800bd70 <_dtoa_r+0x608>
 800be4e:	4ba6      	ldr	r3, [pc, #664]	; (800c0e8 <_dtoa_r+0x980>)
 800be50:	2200      	movs	r2, #0
 800be52:	f7f4 fbd1 	bl	80005f8 <__aeabi_dmul>
 800be56:	2200      	movs	r2, #0
 800be58:	2300      	movs	r3, #0
 800be5a:	4606      	mov	r6, r0
 800be5c:	460f      	mov	r7, r1
 800be5e:	f7f4 fe33 	bl	8000ac8 <__aeabi_dcmpeq>
 800be62:	2800      	cmp	r0, #0
 800be64:	d09d      	beq.n	800bda2 <_dtoa_r+0x63a>
 800be66:	e7cf      	b.n	800be08 <_dtoa_r+0x6a0>
 800be68:	9a08      	ldr	r2, [sp, #32]
 800be6a:	2a00      	cmp	r2, #0
 800be6c:	f000 80d7 	beq.w	800c01e <_dtoa_r+0x8b6>
 800be70:	9a06      	ldr	r2, [sp, #24]
 800be72:	2a01      	cmp	r2, #1
 800be74:	f300 80ba 	bgt.w	800bfec <_dtoa_r+0x884>
 800be78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be7a:	2a00      	cmp	r2, #0
 800be7c:	f000 80b2 	beq.w	800bfe4 <_dtoa_r+0x87c>
 800be80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800be84:	9e07      	ldr	r6, [sp, #28]
 800be86:	9d04      	ldr	r5, [sp, #16]
 800be88:	9a04      	ldr	r2, [sp, #16]
 800be8a:	441a      	add	r2, r3
 800be8c:	9204      	str	r2, [sp, #16]
 800be8e:	9a05      	ldr	r2, [sp, #20]
 800be90:	2101      	movs	r1, #1
 800be92:	441a      	add	r2, r3
 800be94:	4620      	mov	r0, r4
 800be96:	9205      	str	r2, [sp, #20]
 800be98:	f000 fb66 	bl	800c568 <__i2b>
 800be9c:	4607      	mov	r7, r0
 800be9e:	2d00      	cmp	r5, #0
 800bea0:	dd0c      	ble.n	800bebc <_dtoa_r+0x754>
 800bea2:	9b05      	ldr	r3, [sp, #20]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	dd09      	ble.n	800bebc <_dtoa_r+0x754>
 800bea8:	42ab      	cmp	r3, r5
 800beaa:	9a04      	ldr	r2, [sp, #16]
 800beac:	bfa8      	it	ge
 800beae:	462b      	movge	r3, r5
 800beb0:	1ad2      	subs	r2, r2, r3
 800beb2:	9204      	str	r2, [sp, #16]
 800beb4:	9a05      	ldr	r2, [sp, #20]
 800beb6:	1aed      	subs	r5, r5, r3
 800beb8:	1ad3      	subs	r3, r2, r3
 800beba:	9305      	str	r3, [sp, #20]
 800bebc:	9b07      	ldr	r3, [sp, #28]
 800bebe:	b31b      	cbz	r3, 800bf08 <_dtoa_r+0x7a0>
 800bec0:	9b08      	ldr	r3, [sp, #32]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f000 80af 	beq.w	800c026 <_dtoa_r+0x8be>
 800bec8:	2e00      	cmp	r6, #0
 800beca:	dd13      	ble.n	800bef4 <_dtoa_r+0x78c>
 800becc:	4639      	mov	r1, r7
 800bece:	4632      	mov	r2, r6
 800bed0:	4620      	mov	r0, r4
 800bed2:	f000 fc09 	bl	800c6e8 <__pow5mult>
 800bed6:	ee18 2a10 	vmov	r2, s16
 800beda:	4601      	mov	r1, r0
 800bedc:	4607      	mov	r7, r0
 800bede:	4620      	mov	r0, r4
 800bee0:	f000 fb58 	bl	800c594 <__multiply>
 800bee4:	ee18 1a10 	vmov	r1, s16
 800bee8:	4680      	mov	r8, r0
 800beea:	4620      	mov	r0, r4
 800beec:	f000 fa84 	bl	800c3f8 <_Bfree>
 800bef0:	ee08 8a10 	vmov	s16, r8
 800bef4:	9b07      	ldr	r3, [sp, #28]
 800bef6:	1b9a      	subs	r2, r3, r6
 800bef8:	d006      	beq.n	800bf08 <_dtoa_r+0x7a0>
 800befa:	ee18 1a10 	vmov	r1, s16
 800befe:	4620      	mov	r0, r4
 800bf00:	f000 fbf2 	bl	800c6e8 <__pow5mult>
 800bf04:	ee08 0a10 	vmov	s16, r0
 800bf08:	2101      	movs	r1, #1
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	f000 fb2c 	bl	800c568 <__i2b>
 800bf10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	4606      	mov	r6, r0
 800bf16:	f340 8088 	ble.w	800c02a <_dtoa_r+0x8c2>
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	4601      	mov	r1, r0
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f000 fbe2 	bl	800c6e8 <__pow5mult>
 800bf24:	9b06      	ldr	r3, [sp, #24]
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	4606      	mov	r6, r0
 800bf2a:	f340 8081 	ble.w	800c030 <_dtoa_r+0x8c8>
 800bf2e:	f04f 0800 	mov.w	r8, #0
 800bf32:	6933      	ldr	r3, [r6, #16]
 800bf34:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bf38:	6918      	ldr	r0, [r3, #16]
 800bf3a:	f000 fac5 	bl	800c4c8 <__hi0bits>
 800bf3e:	f1c0 0020 	rsb	r0, r0, #32
 800bf42:	9b05      	ldr	r3, [sp, #20]
 800bf44:	4418      	add	r0, r3
 800bf46:	f010 001f 	ands.w	r0, r0, #31
 800bf4a:	f000 8092 	beq.w	800c072 <_dtoa_r+0x90a>
 800bf4e:	f1c0 0320 	rsb	r3, r0, #32
 800bf52:	2b04      	cmp	r3, #4
 800bf54:	f340 808a 	ble.w	800c06c <_dtoa_r+0x904>
 800bf58:	f1c0 001c 	rsb	r0, r0, #28
 800bf5c:	9b04      	ldr	r3, [sp, #16]
 800bf5e:	4403      	add	r3, r0
 800bf60:	9304      	str	r3, [sp, #16]
 800bf62:	9b05      	ldr	r3, [sp, #20]
 800bf64:	4403      	add	r3, r0
 800bf66:	4405      	add	r5, r0
 800bf68:	9305      	str	r3, [sp, #20]
 800bf6a:	9b04      	ldr	r3, [sp, #16]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	dd07      	ble.n	800bf80 <_dtoa_r+0x818>
 800bf70:	ee18 1a10 	vmov	r1, s16
 800bf74:	461a      	mov	r2, r3
 800bf76:	4620      	mov	r0, r4
 800bf78:	f000 fc10 	bl	800c79c <__lshift>
 800bf7c:	ee08 0a10 	vmov	s16, r0
 800bf80:	9b05      	ldr	r3, [sp, #20]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	dd05      	ble.n	800bf92 <_dtoa_r+0x82a>
 800bf86:	4631      	mov	r1, r6
 800bf88:	461a      	mov	r2, r3
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	f000 fc06 	bl	800c79c <__lshift>
 800bf90:	4606      	mov	r6, r0
 800bf92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d06e      	beq.n	800c076 <_dtoa_r+0x90e>
 800bf98:	ee18 0a10 	vmov	r0, s16
 800bf9c:	4631      	mov	r1, r6
 800bf9e:	f000 fc6d 	bl	800c87c <__mcmp>
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	da67      	bge.n	800c076 <_dtoa_r+0x90e>
 800bfa6:	9b00      	ldr	r3, [sp, #0]
 800bfa8:	3b01      	subs	r3, #1
 800bfaa:	ee18 1a10 	vmov	r1, s16
 800bfae:	9300      	str	r3, [sp, #0]
 800bfb0:	220a      	movs	r2, #10
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	f000 fa41 	bl	800c43c <__multadd>
 800bfba:	9b08      	ldr	r3, [sp, #32]
 800bfbc:	ee08 0a10 	vmov	s16, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	f000 81b1 	beq.w	800c328 <_dtoa_r+0xbc0>
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	4639      	mov	r1, r7
 800bfca:	220a      	movs	r2, #10
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f000 fa35 	bl	800c43c <__multadd>
 800bfd2:	9b02      	ldr	r3, [sp, #8]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	4607      	mov	r7, r0
 800bfd8:	f300 808e 	bgt.w	800c0f8 <_dtoa_r+0x990>
 800bfdc:	9b06      	ldr	r3, [sp, #24]
 800bfde:	2b02      	cmp	r3, #2
 800bfe0:	dc51      	bgt.n	800c086 <_dtoa_r+0x91e>
 800bfe2:	e089      	b.n	800c0f8 <_dtoa_r+0x990>
 800bfe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bfe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bfea:	e74b      	b.n	800be84 <_dtoa_r+0x71c>
 800bfec:	9b03      	ldr	r3, [sp, #12]
 800bfee:	1e5e      	subs	r6, r3, #1
 800bff0:	9b07      	ldr	r3, [sp, #28]
 800bff2:	42b3      	cmp	r3, r6
 800bff4:	bfbf      	itttt	lt
 800bff6:	9b07      	ldrlt	r3, [sp, #28]
 800bff8:	9607      	strlt	r6, [sp, #28]
 800bffa:	1af2      	sublt	r2, r6, r3
 800bffc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bffe:	bfb6      	itet	lt
 800c000:	189b      	addlt	r3, r3, r2
 800c002:	1b9e      	subge	r6, r3, r6
 800c004:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c006:	9b03      	ldr	r3, [sp, #12]
 800c008:	bfb8      	it	lt
 800c00a:	2600      	movlt	r6, #0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	bfb7      	itett	lt
 800c010:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c014:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c018:	1a9d      	sublt	r5, r3, r2
 800c01a:	2300      	movlt	r3, #0
 800c01c:	e734      	b.n	800be88 <_dtoa_r+0x720>
 800c01e:	9e07      	ldr	r6, [sp, #28]
 800c020:	9d04      	ldr	r5, [sp, #16]
 800c022:	9f08      	ldr	r7, [sp, #32]
 800c024:	e73b      	b.n	800be9e <_dtoa_r+0x736>
 800c026:	9a07      	ldr	r2, [sp, #28]
 800c028:	e767      	b.n	800befa <_dtoa_r+0x792>
 800c02a:	9b06      	ldr	r3, [sp, #24]
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	dc18      	bgt.n	800c062 <_dtoa_r+0x8fa>
 800c030:	f1ba 0f00 	cmp.w	sl, #0
 800c034:	d115      	bne.n	800c062 <_dtoa_r+0x8fa>
 800c036:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c03a:	b993      	cbnz	r3, 800c062 <_dtoa_r+0x8fa>
 800c03c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c040:	0d1b      	lsrs	r3, r3, #20
 800c042:	051b      	lsls	r3, r3, #20
 800c044:	b183      	cbz	r3, 800c068 <_dtoa_r+0x900>
 800c046:	9b04      	ldr	r3, [sp, #16]
 800c048:	3301      	adds	r3, #1
 800c04a:	9304      	str	r3, [sp, #16]
 800c04c:	9b05      	ldr	r3, [sp, #20]
 800c04e:	3301      	adds	r3, #1
 800c050:	9305      	str	r3, [sp, #20]
 800c052:	f04f 0801 	mov.w	r8, #1
 800c056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f47f af6a 	bne.w	800bf32 <_dtoa_r+0x7ca>
 800c05e:	2001      	movs	r0, #1
 800c060:	e76f      	b.n	800bf42 <_dtoa_r+0x7da>
 800c062:	f04f 0800 	mov.w	r8, #0
 800c066:	e7f6      	b.n	800c056 <_dtoa_r+0x8ee>
 800c068:	4698      	mov	r8, r3
 800c06a:	e7f4      	b.n	800c056 <_dtoa_r+0x8ee>
 800c06c:	f43f af7d 	beq.w	800bf6a <_dtoa_r+0x802>
 800c070:	4618      	mov	r0, r3
 800c072:	301c      	adds	r0, #28
 800c074:	e772      	b.n	800bf5c <_dtoa_r+0x7f4>
 800c076:	9b03      	ldr	r3, [sp, #12]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	dc37      	bgt.n	800c0ec <_dtoa_r+0x984>
 800c07c:	9b06      	ldr	r3, [sp, #24]
 800c07e:	2b02      	cmp	r3, #2
 800c080:	dd34      	ble.n	800c0ec <_dtoa_r+0x984>
 800c082:	9b03      	ldr	r3, [sp, #12]
 800c084:	9302      	str	r3, [sp, #8]
 800c086:	9b02      	ldr	r3, [sp, #8]
 800c088:	b96b      	cbnz	r3, 800c0a6 <_dtoa_r+0x93e>
 800c08a:	4631      	mov	r1, r6
 800c08c:	2205      	movs	r2, #5
 800c08e:	4620      	mov	r0, r4
 800c090:	f000 f9d4 	bl	800c43c <__multadd>
 800c094:	4601      	mov	r1, r0
 800c096:	4606      	mov	r6, r0
 800c098:	ee18 0a10 	vmov	r0, s16
 800c09c:	f000 fbee 	bl	800c87c <__mcmp>
 800c0a0:	2800      	cmp	r0, #0
 800c0a2:	f73f adbb 	bgt.w	800bc1c <_dtoa_r+0x4b4>
 800c0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0a8:	9d01      	ldr	r5, [sp, #4]
 800c0aa:	43db      	mvns	r3, r3
 800c0ac:	9300      	str	r3, [sp, #0]
 800c0ae:	f04f 0800 	mov.w	r8, #0
 800c0b2:	4631      	mov	r1, r6
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	f000 f99f 	bl	800c3f8 <_Bfree>
 800c0ba:	2f00      	cmp	r7, #0
 800c0bc:	f43f aea4 	beq.w	800be08 <_dtoa_r+0x6a0>
 800c0c0:	f1b8 0f00 	cmp.w	r8, #0
 800c0c4:	d005      	beq.n	800c0d2 <_dtoa_r+0x96a>
 800c0c6:	45b8      	cmp	r8, r7
 800c0c8:	d003      	beq.n	800c0d2 <_dtoa_r+0x96a>
 800c0ca:	4641      	mov	r1, r8
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f000 f993 	bl	800c3f8 <_Bfree>
 800c0d2:	4639      	mov	r1, r7
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	f000 f98f 	bl	800c3f8 <_Bfree>
 800c0da:	e695      	b.n	800be08 <_dtoa_r+0x6a0>
 800c0dc:	2600      	movs	r6, #0
 800c0de:	4637      	mov	r7, r6
 800c0e0:	e7e1      	b.n	800c0a6 <_dtoa_r+0x93e>
 800c0e2:	9700      	str	r7, [sp, #0]
 800c0e4:	4637      	mov	r7, r6
 800c0e6:	e599      	b.n	800bc1c <_dtoa_r+0x4b4>
 800c0e8:	40240000 	.word	0x40240000
 800c0ec:	9b08      	ldr	r3, [sp, #32]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	f000 80ca 	beq.w	800c288 <_dtoa_r+0xb20>
 800c0f4:	9b03      	ldr	r3, [sp, #12]
 800c0f6:	9302      	str	r3, [sp, #8]
 800c0f8:	2d00      	cmp	r5, #0
 800c0fa:	dd05      	ble.n	800c108 <_dtoa_r+0x9a0>
 800c0fc:	4639      	mov	r1, r7
 800c0fe:	462a      	mov	r2, r5
 800c100:	4620      	mov	r0, r4
 800c102:	f000 fb4b 	bl	800c79c <__lshift>
 800c106:	4607      	mov	r7, r0
 800c108:	f1b8 0f00 	cmp.w	r8, #0
 800c10c:	d05b      	beq.n	800c1c6 <_dtoa_r+0xa5e>
 800c10e:	6879      	ldr	r1, [r7, #4]
 800c110:	4620      	mov	r0, r4
 800c112:	f000 f931 	bl	800c378 <_Balloc>
 800c116:	4605      	mov	r5, r0
 800c118:	b928      	cbnz	r0, 800c126 <_dtoa_r+0x9be>
 800c11a:	4b87      	ldr	r3, [pc, #540]	; (800c338 <_dtoa_r+0xbd0>)
 800c11c:	4602      	mov	r2, r0
 800c11e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c122:	f7ff bb3b 	b.w	800b79c <_dtoa_r+0x34>
 800c126:	693a      	ldr	r2, [r7, #16]
 800c128:	3202      	adds	r2, #2
 800c12a:	0092      	lsls	r2, r2, #2
 800c12c:	f107 010c 	add.w	r1, r7, #12
 800c130:	300c      	adds	r0, #12
 800c132:	f000 f913 	bl	800c35c <memcpy>
 800c136:	2201      	movs	r2, #1
 800c138:	4629      	mov	r1, r5
 800c13a:	4620      	mov	r0, r4
 800c13c:	f000 fb2e 	bl	800c79c <__lshift>
 800c140:	9b01      	ldr	r3, [sp, #4]
 800c142:	f103 0901 	add.w	r9, r3, #1
 800c146:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c14a:	4413      	add	r3, r2
 800c14c:	9305      	str	r3, [sp, #20]
 800c14e:	f00a 0301 	and.w	r3, sl, #1
 800c152:	46b8      	mov	r8, r7
 800c154:	9304      	str	r3, [sp, #16]
 800c156:	4607      	mov	r7, r0
 800c158:	4631      	mov	r1, r6
 800c15a:	ee18 0a10 	vmov	r0, s16
 800c15e:	f7ff fa77 	bl	800b650 <quorem>
 800c162:	4641      	mov	r1, r8
 800c164:	9002      	str	r0, [sp, #8]
 800c166:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c16a:	ee18 0a10 	vmov	r0, s16
 800c16e:	f000 fb85 	bl	800c87c <__mcmp>
 800c172:	463a      	mov	r2, r7
 800c174:	9003      	str	r0, [sp, #12]
 800c176:	4631      	mov	r1, r6
 800c178:	4620      	mov	r0, r4
 800c17a:	f000 fb9b 	bl	800c8b4 <__mdiff>
 800c17e:	68c2      	ldr	r2, [r0, #12]
 800c180:	f109 3bff 	add.w	fp, r9, #4294967295
 800c184:	4605      	mov	r5, r0
 800c186:	bb02      	cbnz	r2, 800c1ca <_dtoa_r+0xa62>
 800c188:	4601      	mov	r1, r0
 800c18a:	ee18 0a10 	vmov	r0, s16
 800c18e:	f000 fb75 	bl	800c87c <__mcmp>
 800c192:	4602      	mov	r2, r0
 800c194:	4629      	mov	r1, r5
 800c196:	4620      	mov	r0, r4
 800c198:	9207      	str	r2, [sp, #28]
 800c19a:	f000 f92d 	bl	800c3f8 <_Bfree>
 800c19e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c1a2:	ea43 0102 	orr.w	r1, r3, r2
 800c1a6:	9b04      	ldr	r3, [sp, #16]
 800c1a8:	430b      	orrs	r3, r1
 800c1aa:	464d      	mov	r5, r9
 800c1ac:	d10f      	bne.n	800c1ce <_dtoa_r+0xa66>
 800c1ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c1b2:	d02a      	beq.n	800c20a <_dtoa_r+0xaa2>
 800c1b4:	9b03      	ldr	r3, [sp, #12]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	dd02      	ble.n	800c1c0 <_dtoa_r+0xa58>
 800c1ba:	9b02      	ldr	r3, [sp, #8]
 800c1bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c1c0:	f88b a000 	strb.w	sl, [fp]
 800c1c4:	e775      	b.n	800c0b2 <_dtoa_r+0x94a>
 800c1c6:	4638      	mov	r0, r7
 800c1c8:	e7ba      	b.n	800c140 <_dtoa_r+0x9d8>
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	e7e2      	b.n	800c194 <_dtoa_r+0xa2c>
 800c1ce:	9b03      	ldr	r3, [sp, #12]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	db04      	blt.n	800c1de <_dtoa_r+0xa76>
 800c1d4:	9906      	ldr	r1, [sp, #24]
 800c1d6:	430b      	orrs	r3, r1
 800c1d8:	9904      	ldr	r1, [sp, #16]
 800c1da:	430b      	orrs	r3, r1
 800c1dc:	d122      	bne.n	800c224 <_dtoa_r+0xabc>
 800c1de:	2a00      	cmp	r2, #0
 800c1e0:	ddee      	ble.n	800c1c0 <_dtoa_r+0xa58>
 800c1e2:	ee18 1a10 	vmov	r1, s16
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	f000 fad7 	bl	800c79c <__lshift>
 800c1ee:	4631      	mov	r1, r6
 800c1f0:	ee08 0a10 	vmov	s16, r0
 800c1f4:	f000 fb42 	bl	800c87c <__mcmp>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	dc03      	bgt.n	800c204 <_dtoa_r+0xa9c>
 800c1fc:	d1e0      	bne.n	800c1c0 <_dtoa_r+0xa58>
 800c1fe:	f01a 0f01 	tst.w	sl, #1
 800c202:	d0dd      	beq.n	800c1c0 <_dtoa_r+0xa58>
 800c204:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c208:	d1d7      	bne.n	800c1ba <_dtoa_r+0xa52>
 800c20a:	2339      	movs	r3, #57	; 0x39
 800c20c:	f88b 3000 	strb.w	r3, [fp]
 800c210:	462b      	mov	r3, r5
 800c212:	461d      	mov	r5, r3
 800c214:	3b01      	subs	r3, #1
 800c216:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c21a:	2a39      	cmp	r2, #57	; 0x39
 800c21c:	d071      	beq.n	800c302 <_dtoa_r+0xb9a>
 800c21e:	3201      	adds	r2, #1
 800c220:	701a      	strb	r2, [r3, #0]
 800c222:	e746      	b.n	800c0b2 <_dtoa_r+0x94a>
 800c224:	2a00      	cmp	r2, #0
 800c226:	dd07      	ble.n	800c238 <_dtoa_r+0xad0>
 800c228:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c22c:	d0ed      	beq.n	800c20a <_dtoa_r+0xaa2>
 800c22e:	f10a 0301 	add.w	r3, sl, #1
 800c232:	f88b 3000 	strb.w	r3, [fp]
 800c236:	e73c      	b.n	800c0b2 <_dtoa_r+0x94a>
 800c238:	9b05      	ldr	r3, [sp, #20]
 800c23a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c23e:	4599      	cmp	r9, r3
 800c240:	d047      	beq.n	800c2d2 <_dtoa_r+0xb6a>
 800c242:	ee18 1a10 	vmov	r1, s16
 800c246:	2300      	movs	r3, #0
 800c248:	220a      	movs	r2, #10
 800c24a:	4620      	mov	r0, r4
 800c24c:	f000 f8f6 	bl	800c43c <__multadd>
 800c250:	45b8      	cmp	r8, r7
 800c252:	ee08 0a10 	vmov	s16, r0
 800c256:	f04f 0300 	mov.w	r3, #0
 800c25a:	f04f 020a 	mov.w	r2, #10
 800c25e:	4641      	mov	r1, r8
 800c260:	4620      	mov	r0, r4
 800c262:	d106      	bne.n	800c272 <_dtoa_r+0xb0a>
 800c264:	f000 f8ea 	bl	800c43c <__multadd>
 800c268:	4680      	mov	r8, r0
 800c26a:	4607      	mov	r7, r0
 800c26c:	f109 0901 	add.w	r9, r9, #1
 800c270:	e772      	b.n	800c158 <_dtoa_r+0x9f0>
 800c272:	f000 f8e3 	bl	800c43c <__multadd>
 800c276:	4639      	mov	r1, r7
 800c278:	4680      	mov	r8, r0
 800c27a:	2300      	movs	r3, #0
 800c27c:	220a      	movs	r2, #10
 800c27e:	4620      	mov	r0, r4
 800c280:	f000 f8dc 	bl	800c43c <__multadd>
 800c284:	4607      	mov	r7, r0
 800c286:	e7f1      	b.n	800c26c <_dtoa_r+0xb04>
 800c288:	9b03      	ldr	r3, [sp, #12]
 800c28a:	9302      	str	r3, [sp, #8]
 800c28c:	9d01      	ldr	r5, [sp, #4]
 800c28e:	ee18 0a10 	vmov	r0, s16
 800c292:	4631      	mov	r1, r6
 800c294:	f7ff f9dc 	bl	800b650 <quorem>
 800c298:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c29c:	9b01      	ldr	r3, [sp, #4]
 800c29e:	f805 ab01 	strb.w	sl, [r5], #1
 800c2a2:	1aea      	subs	r2, r5, r3
 800c2a4:	9b02      	ldr	r3, [sp, #8]
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	dd09      	ble.n	800c2be <_dtoa_r+0xb56>
 800c2aa:	ee18 1a10 	vmov	r1, s16
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	220a      	movs	r2, #10
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	f000 f8c2 	bl	800c43c <__multadd>
 800c2b8:	ee08 0a10 	vmov	s16, r0
 800c2bc:	e7e7      	b.n	800c28e <_dtoa_r+0xb26>
 800c2be:	9b02      	ldr	r3, [sp, #8]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	bfc8      	it	gt
 800c2c4:	461d      	movgt	r5, r3
 800c2c6:	9b01      	ldr	r3, [sp, #4]
 800c2c8:	bfd8      	it	le
 800c2ca:	2501      	movle	r5, #1
 800c2cc:	441d      	add	r5, r3
 800c2ce:	f04f 0800 	mov.w	r8, #0
 800c2d2:	ee18 1a10 	vmov	r1, s16
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	4620      	mov	r0, r4
 800c2da:	f000 fa5f 	bl	800c79c <__lshift>
 800c2de:	4631      	mov	r1, r6
 800c2e0:	ee08 0a10 	vmov	s16, r0
 800c2e4:	f000 faca 	bl	800c87c <__mcmp>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	dc91      	bgt.n	800c210 <_dtoa_r+0xaa8>
 800c2ec:	d102      	bne.n	800c2f4 <_dtoa_r+0xb8c>
 800c2ee:	f01a 0f01 	tst.w	sl, #1
 800c2f2:	d18d      	bne.n	800c210 <_dtoa_r+0xaa8>
 800c2f4:	462b      	mov	r3, r5
 800c2f6:	461d      	mov	r5, r3
 800c2f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2fc:	2a30      	cmp	r2, #48	; 0x30
 800c2fe:	d0fa      	beq.n	800c2f6 <_dtoa_r+0xb8e>
 800c300:	e6d7      	b.n	800c0b2 <_dtoa_r+0x94a>
 800c302:	9a01      	ldr	r2, [sp, #4]
 800c304:	429a      	cmp	r2, r3
 800c306:	d184      	bne.n	800c212 <_dtoa_r+0xaaa>
 800c308:	9b00      	ldr	r3, [sp, #0]
 800c30a:	3301      	adds	r3, #1
 800c30c:	9300      	str	r3, [sp, #0]
 800c30e:	2331      	movs	r3, #49	; 0x31
 800c310:	7013      	strb	r3, [r2, #0]
 800c312:	e6ce      	b.n	800c0b2 <_dtoa_r+0x94a>
 800c314:	4b09      	ldr	r3, [pc, #36]	; (800c33c <_dtoa_r+0xbd4>)
 800c316:	f7ff ba95 	b.w	800b844 <_dtoa_r+0xdc>
 800c31a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	f47f aa6e 	bne.w	800b7fe <_dtoa_r+0x96>
 800c322:	4b07      	ldr	r3, [pc, #28]	; (800c340 <_dtoa_r+0xbd8>)
 800c324:	f7ff ba8e 	b.w	800b844 <_dtoa_r+0xdc>
 800c328:	9b02      	ldr	r3, [sp, #8]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	dcae      	bgt.n	800c28c <_dtoa_r+0xb24>
 800c32e:	9b06      	ldr	r3, [sp, #24]
 800c330:	2b02      	cmp	r3, #2
 800c332:	f73f aea8 	bgt.w	800c086 <_dtoa_r+0x91e>
 800c336:	e7a9      	b.n	800c28c <_dtoa_r+0xb24>
 800c338:	0800ed73 	.word	0x0800ed73
 800c33c:	0800ecd0 	.word	0x0800ecd0
 800c340:	0800ecf4 	.word	0x0800ecf4

0800c344 <_localeconv_r>:
 800c344:	4800      	ldr	r0, [pc, #0]	; (800c348 <_localeconv_r+0x4>)
 800c346:	4770      	bx	lr
 800c348:	20000258 	.word	0x20000258

0800c34c <malloc>:
 800c34c:	4b02      	ldr	r3, [pc, #8]	; (800c358 <malloc+0xc>)
 800c34e:	4601      	mov	r1, r0
 800c350:	6818      	ldr	r0, [r3, #0]
 800c352:	f000 bc17 	b.w	800cb84 <_malloc_r>
 800c356:	bf00      	nop
 800c358:	20000104 	.word	0x20000104

0800c35c <memcpy>:
 800c35c:	440a      	add	r2, r1
 800c35e:	4291      	cmp	r1, r2
 800c360:	f100 33ff 	add.w	r3, r0, #4294967295
 800c364:	d100      	bne.n	800c368 <memcpy+0xc>
 800c366:	4770      	bx	lr
 800c368:	b510      	push	{r4, lr}
 800c36a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c36e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c372:	4291      	cmp	r1, r2
 800c374:	d1f9      	bne.n	800c36a <memcpy+0xe>
 800c376:	bd10      	pop	{r4, pc}

0800c378 <_Balloc>:
 800c378:	b570      	push	{r4, r5, r6, lr}
 800c37a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c37c:	4604      	mov	r4, r0
 800c37e:	460d      	mov	r5, r1
 800c380:	b976      	cbnz	r6, 800c3a0 <_Balloc+0x28>
 800c382:	2010      	movs	r0, #16
 800c384:	f7ff ffe2 	bl	800c34c <malloc>
 800c388:	4602      	mov	r2, r0
 800c38a:	6260      	str	r0, [r4, #36]	; 0x24
 800c38c:	b920      	cbnz	r0, 800c398 <_Balloc+0x20>
 800c38e:	4b18      	ldr	r3, [pc, #96]	; (800c3f0 <_Balloc+0x78>)
 800c390:	4818      	ldr	r0, [pc, #96]	; (800c3f4 <_Balloc+0x7c>)
 800c392:	2166      	movs	r1, #102	; 0x66
 800c394:	f000 fdd6 	bl	800cf44 <__assert_func>
 800c398:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c39c:	6006      	str	r6, [r0, #0]
 800c39e:	60c6      	str	r6, [r0, #12]
 800c3a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c3a2:	68f3      	ldr	r3, [r6, #12]
 800c3a4:	b183      	cbz	r3, 800c3c8 <_Balloc+0x50>
 800c3a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3ae:	b9b8      	cbnz	r0, 800c3e0 <_Balloc+0x68>
 800c3b0:	2101      	movs	r1, #1
 800c3b2:	fa01 f605 	lsl.w	r6, r1, r5
 800c3b6:	1d72      	adds	r2, r6, #5
 800c3b8:	0092      	lsls	r2, r2, #2
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f000 fb60 	bl	800ca80 <_calloc_r>
 800c3c0:	b160      	cbz	r0, 800c3dc <_Balloc+0x64>
 800c3c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c3c6:	e00e      	b.n	800c3e6 <_Balloc+0x6e>
 800c3c8:	2221      	movs	r2, #33	; 0x21
 800c3ca:	2104      	movs	r1, #4
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	f000 fb57 	bl	800ca80 <_calloc_r>
 800c3d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3d4:	60f0      	str	r0, [r6, #12]
 800c3d6:	68db      	ldr	r3, [r3, #12]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d1e4      	bne.n	800c3a6 <_Balloc+0x2e>
 800c3dc:	2000      	movs	r0, #0
 800c3de:	bd70      	pop	{r4, r5, r6, pc}
 800c3e0:	6802      	ldr	r2, [r0, #0]
 800c3e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c3ec:	e7f7      	b.n	800c3de <_Balloc+0x66>
 800c3ee:	bf00      	nop
 800c3f0:	0800ed01 	.word	0x0800ed01
 800c3f4:	0800ed84 	.word	0x0800ed84

0800c3f8 <_Bfree>:
 800c3f8:	b570      	push	{r4, r5, r6, lr}
 800c3fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c3fc:	4605      	mov	r5, r0
 800c3fe:	460c      	mov	r4, r1
 800c400:	b976      	cbnz	r6, 800c420 <_Bfree+0x28>
 800c402:	2010      	movs	r0, #16
 800c404:	f7ff ffa2 	bl	800c34c <malloc>
 800c408:	4602      	mov	r2, r0
 800c40a:	6268      	str	r0, [r5, #36]	; 0x24
 800c40c:	b920      	cbnz	r0, 800c418 <_Bfree+0x20>
 800c40e:	4b09      	ldr	r3, [pc, #36]	; (800c434 <_Bfree+0x3c>)
 800c410:	4809      	ldr	r0, [pc, #36]	; (800c438 <_Bfree+0x40>)
 800c412:	218a      	movs	r1, #138	; 0x8a
 800c414:	f000 fd96 	bl	800cf44 <__assert_func>
 800c418:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c41c:	6006      	str	r6, [r0, #0]
 800c41e:	60c6      	str	r6, [r0, #12]
 800c420:	b13c      	cbz	r4, 800c432 <_Bfree+0x3a>
 800c422:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c424:	6862      	ldr	r2, [r4, #4]
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c42c:	6021      	str	r1, [r4, #0]
 800c42e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c432:	bd70      	pop	{r4, r5, r6, pc}
 800c434:	0800ed01 	.word	0x0800ed01
 800c438:	0800ed84 	.word	0x0800ed84

0800c43c <__multadd>:
 800c43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c440:	690d      	ldr	r5, [r1, #16]
 800c442:	4607      	mov	r7, r0
 800c444:	460c      	mov	r4, r1
 800c446:	461e      	mov	r6, r3
 800c448:	f101 0c14 	add.w	ip, r1, #20
 800c44c:	2000      	movs	r0, #0
 800c44e:	f8dc 3000 	ldr.w	r3, [ip]
 800c452:	b299      	uxth	r1, r3
 800c454:	fb02 6101 	mla	r1, r2, r1, r6
 800c458:	0c1e      	lsrs	r6, r3, #16
 800c45a:	0c0b      	lsrs	r3, r1, #16
 800c45c:	fb02 3306 	mla	r3, r2, r6, r3
 800c460:	b289      	uxth	r1, r1
 800c462:	3001      	adds	r0, #1
 800c464:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c468:	4285      	cmp	r5, r0
 800c46a:	f84c 1b04 	str.w	r1, [ip], #4
 800c46e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c472:	dcec      	bgt.n	800c44e <__multadd+0x12>
 800c474:	b30e      	cbz	r6, 800c4ba <__multadd+0x7e>
 800c476:	68a3      	ldr	r3, [r4, #8]
 800c478:	42ab      	cmp	r3, r5
 800c47a:	dc19      	bgt.n	800c4b0 <__multadd+0x74>
 800c47c:	6861      	ldr	r1, [r4, #4]
 800c47e:	4638      	mov	r0, r7
 800c480:	3101      	adds	r1, #1
 800c482:	f7ff ff79 	bl	800c378 <_Balloc>
 800c486:	4680      	mov	r8, r0
 800c488:	b928      	cbnz	r0, 800c496 <__multadd+0x5a>
 800c48a:	4602      	mov	r2, r0
 800c48c:	4b0c      	ldr	r3, [pc, #48]	; (800c4c0 <__multadd+0x84>)
 800c48e:	480d      	ldr	r0, [pc, #52]	; (800c4c4 <__multadd+0x88>)
 800c490:	21b5      	movs	r1, #181	; 0xb5
 800c492:	f000 fd57 	bl	800cf44 <__assert_func>
 800c496:	6922      	ldr	r2, [r4, #16]
 800c498:	3202      	adds	r2, #2
 800c49a:	f104 010c 	add.w	r1, r4, #12
 800c49e:	0092      	lsls	r2, r2, #2
 800c4a0:	300c      	adds	r0, #12
 800c4a2:	f7ff ff5b 	bl	800c35c <memcpy>
 800c4a6:	4621      	mov	r1, r4
 800c4a8:	4638      	mov	r0, r7
 800c4aa:	f7ff ffa5 	bl	800c3f8 <_Bfree>
 800c4ae:	4644      	mov	r4, r8
 800c4b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c4b4:	3501      	adds	r5, #1
 800c4b6:	615e      	str	r6, [r3, #20]
 800c4b8:	6125      	str	r5, [r4, #16]
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4c0:	0800ed73 	.word	0x0800ed73
 800c4c4:	0800ed84 	.word	0x0800ed84

0800c4c8 <__hi0bits>:
 800c4c8:	0c03      	lsrs	r3, r0, #16
 800c4ca:	041b      	lsls	r3, r3, #16
 800c4cc:	b9d3      	cbnz	r3, 800c504 <__hi0bits+0x3c>
 800c4ce:	0400      	lsls	r0, r0, #16
 800c4d0:	2310      	movs	r3, #16
 800c4d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c4d6:	bf04      	itt	eq
 800c4d8:	0200      	lsleq	r0, r0, #8
 800c4da:	3308      	addeq	r3, #8
 800c4dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c4e0:	bf04      	itt	eq
 800c4e2:	0100      	lsleq	r0, r0, #4
 800c4e4:	3304      	addeq	r3, #4
 800c4e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c4ea:	bf04      	itt	eq
 800c4ec:	0080      	lsleq	r0, r0, #2
 800c4ee:	3302      	addeq	r3, #2
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	db05      	blt.n	800c500 <__hi0bits+0x38>
 800c4f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c4f8:	f103 0301 	add.w	r3, r3, #1
 800c4fc:	bf08      	it	eq
 800c4fe:	2320      	moveq	r3, #32
 800c500:	4618      	mov	r0, r3
 800c502:	4770      	bx	lr
 800c504:	2300      	movs	r3, #0
 800c506:	e7e4      	b.n	800c4d2 <__hi0bits+0xa>

0800c508 <__lo0bits>:
 800c508:	6803      	ldr	r3, [r0, #0]
 800c50a:	f013 0207 	ands.w	r2, r3, #7
 800c50e:	4601      	mov	r1, r0
 800c510:	d00b      	beq.n	800c52a <__lo0bits+0x22>
 800c512:	07da      	lsls	r2, r3, #31
 800c514:	d423      	bmi.n	800c55e <__lo0bits+0x56>
 800c516:	0798      	lsls	r0, r3, #30
 800c518:	bf49      	itett	mi
 800c51a:	085b      	lsrmi	r3, r3, #1
 800c51c:	089b      	lsrpl	r3, r3, #2
 800c51e:	2001      	movmi	r0, #1
 800c520:	600b      	strmi	r3, [r1, #0]
 800c522:	bf5c      	itt	pl
 800c524:	600b      	strpl	r3, [r1, #0]
 800c526:	2002      	movpl	r0, #2
 800c528:	4770      	bx	lr
 800c52a:	b298      	uxth	r0, r3
 800c52c:	b9a8      	cbnz	r0, 800c55a <__lo0bits+0x52>
 800c52e:	0c1b      	lsrs	r3, r3, #16
 800c530:	2010      	movs	r0, #16
 800c532:	b2da      	uxtb	r2, r3
 800c534:	b90a      	cbnz	r2, 800c53a <__lo0bits+0x32>
 800c536:	3008      	adds	r0, #8
 800c538:	0a1b      	lsrs	r3, r3, #8
 800c53a:	071a      	lsls	r2, r3, #28
 800c53c:	bf04      	itt	eq
 800c53e:	091b      	lsreq	r3, r3, #4
 800c540:	3004      	addeq	r0, #4
 800c542:	079a      	lsls	r2, r3, #30
 800c544:	bf04      	itt	eq
 800c546:	089b      	lsreq	r3, r3, #2
 800c548:	3002      	addeq	r0, #2
 800c54a:	07da      	lsls	r2, r3, #31
 800c54c:	d403      	bmi.n	800c556 <__lo0bits+0x4e>
 800c54e:	085b      	lsrs	r3, r3, #1
 800c550:	f100 0001 	add.w	r0, r0, #1
 800c554:	d005      	beq.n	800c562 <__lo0bits+0x5a>
 800c556:	600b      	str	r3, [r1, #0]
 800c558:	4770      	bx	lr
 800c55a:	4610      	mov	r0, r2
 800c55c:	e7e9      	b.n	800c532 <__lo0bits+0x2a>
 800c55e:	2000      	movs	r0, #0
 800c560:	4770      	bx	lr
 800c562:	2020      	movs	r0, #32
 800c564:	4770      	bx	lr
	...

0800c568 <__i2b>:
 800c568:	b510      	push	{r4, lr}
 800c56a:	460c      	mov	r4, r1
 800c56c:	2101      	movs	r1, #1
 800c56e:	f7ff ff03 	bl	800c378 <_Balloc>
 800c572:	4602      	mov	r2, r0
 800c574:	b928      	cbnz	r0, 800c582 <__i2b+0x1a>
 800c576:	4b05      	ldr	r3, [pc, #20]	; (800c58c <__i2b+0x24>)
 800c578:	4805      	ldr	r0, [pc, #20]	; (800c590 <__i2b+0x28>)
 800c57a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c57e:	f000 fce1 	bl	800cf44 <__assert_func>
 800c582:	2301      	movs	r3, #1
 800c584:	6144      	str	r4, [r0, #20]
 800c586:	6103      	str	r3, [r0, #16]
 800c588:	bd10      	pop	{r4, pc}
 800c58a:	bf00      	nop
 800c58c:	0800ed73 	.word	0x0800ed73
 800c590:	0800ed84 	.word	0x0800ed84

0800c594 <__multiply>:
 800c594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c598:	4691      	mov	r9, r2
 800c59a:	690a      	ldr	r2, [r1, #16]
 800c59c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	bfb8      	it	lt
 800c5a4:	460b      	movlt	r3, r1
 800c5a6:	460c      	mov	r4, r1
 800c5a8:	bfbc      	itt	lt
 800c5aa:	464c      	movlt	r4, r9
 800c5ac:	4699      	movlt	r9, r3
 800c5ae:	6927      	ldr	r7, [r4, #16]
 800c5b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c5b4:	68a3      	ldr	r3, [r4, #8]
 800c5b6:	6861      	ldr	r1, [r4, #4]
 800c5b8:	eb07 060a 	add.w	r6, r7, sl
 800c5bc:	42b3      	cmp	r3, r6
 800c5be:	b085      	sub	sp, #20
 800c5c0:	bfb8      	it	lt
 800c5c2:	3101      	addlt	r1, #1
 800c5c4:	f7ff fed8 	bl	800c378 <_Balloc>
 800c5c8:	b930      	cbnz	r0, 800c5d8 <__multiply+0x44>
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	4b44      	ldr	r3, [pc, #272]	; (800c6e0 <__multiply+0x14c>)
 800c5ce:	4845      	ldr	r0, [pc, #276]	; (800c6e4 <__multiply+0x150>)
 800c5d0:	f240 115d 	movw	r1, #349	; 0x15d
 800c5d4:	f000 fcb6 	bl	800cf44 <__assert_func>
 800c5d8:	f100 0514 	add.w	r5, r0, #20
 800c5dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c5e0:	462b      	mov	r3, r5
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	4543      	cmp	r3, r8
 800c5e6:	d321      	bcc.n	800c62c <__multiply+0x98>
 800c5e8:	f104 0314 	add.w	r3, r4, #20
 800c5ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c5f0:	f109 0314 	add.w	r3, r9, #20
 800c5f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c5f8:	9202      	str	r2, [sp, #8]
 800c5fa:	1b3a      	subs	r2, r7, r4
 800c5fc:	3a15      	subs	r2, #21
 800c5fe:	f022 0203 	bic.w	r2, r2, #3
 800c602:	3204      	adds	r2, #4
 800c604:	f104 0115 	add.w	r1, r4, #21
 800c608:	428f      	cmp	r7, r1
 800c60a:	bf38      	it	cc
 800c60c:	2204      	movcc	r2, #4
 800c60e:	9201      	str	r2, [sp, #4]
 800c610:	9a02      	ldr	r2, [sp, #8]
 800c612:	9303      	str	r3, [sp, #12]
 800c614:	429a      	cmp	r2, r3
 800c616:	d80c      	bhi.n	800c632 <__multiply+0x9e>
 800c618:	2e00      	cmp	r6, #0
 800c61a:	dd03      	ble.n	800c624 <__multiply+0x90>
 800c61c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c620:	2b00      	cmp	r3, #0
 800c622:	d05a      	beq.n	800c6da <__multiply+0x146>
 800c624:	6106      	str	r6, [r0, #16]
 800c626:	b005      	add	sp, #20
 800c628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c62c:	f843 2b04 	str.w	r2, [r3], #4
 800c630:	e7d8      	b.n	800c5e4 <__multiply+0x50>
 800c632:	f8b3 a000 	ldrh.w	sl, [r3]
 800c636:	f1ba 0f00 	cmp.w	sl, #0
 800c63a:	d024      	beq.n	800c686 <__multiply+0xf2>
 800c63c:	f104 0e14 	add.w	lr, r4, #20
 800c640:	46a9      	mov	r9, r5
 800c642:	f04f 0c00 	mov.w	ip, #0
 800c646:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c64a:	f8d9 1000 	ldr.w	r1, [r9]
 800c64e:	fa1f fb82 	uxth.w	fp, r2
 800c652:	b289      	uxth	r1, r1
 800c654:	fb0a 110b 	mla	r1, sl, fp, r1
 800c658:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c65c:	f8d9 2000 	ldr.w	r2, [r9]
 800c660:	4461      	add	r1, ip
 800c662:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c666:	fb0a c20b 	mla	r2, sl, fp, ip
 800c66a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c66e:	b289      	uxth	r1, r1
 800c670:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c674:	4577      	cmp	r7, lr
 800c676:	f849 1b04 	str.w	r1, [r9], #4
 800c67a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c67e:	d8e2      	bhi.n	800c646 <__multiply+0xb2>
 800c680:	9a01      	ldr	r2, [sp, #4]
 800c682:	f845 c002 	str.w	ip, [r5, r2]
 800c686:	9a03      	ldr	r2, [sp, #12]
 800c688:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c68c:	3304      	adds	r3, #4
 800c68e:	f1b9 0f00 	cmp.w	r9, #0
 800c692:	d020      	beq.n	800c6d6 <__multiply+0x142>
 800c694:	6829      	ldr	r1, [r5, #0]
 800c696:	f104 0c14 	add.w	ip, r4, #20
 800c69a:	46ae      	mov	lr, r5
 800c69c:	f04f 0a00 	mov.w	sl, #0
 800c6a0:	f8bc b000 	ldrh.w	fp, [ip]
 800c6a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c6a8:	fb09 220b 	mla	r2, r9, fp, r2
 800c6ac:	4492      	add	sl, r2
 800c6ae:	b289      	uxth	r1, r1
 800c6b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c6b4:	f84e 1b04 	str.w	r1, [lr], #4
 800c6b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c6bc:	f8be 1000 	ldrh.w	r1, [lr]
 800c6c0:	0c12      	lsrs	r2, r2, #16
 800c6c2:	fb09 1102 	mla	r1, r9, r2, r1
 800c6c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c6ca:	4567      	cmp	r7, ip
 800c6cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c6d0:	d8e6      	bhi.n	800c6a0 <__multiply+0x10c>
 800c6d2:	9a01      	ldr	r2, [sp, #4]
 800c6d4:	50a9      	str	r1, [r5, r2]
 800c6d6:	3504      	adds	r5, #4
 800c6d8:	e79a      	b.n	800c610 <__multiply+0x7c>
 800c6da:	3e01      	subs	r6, #1
 800c6dc:	e79c      	b.n	800c618 <__multiply+0x84>
 800c6de:	bf00      	nop
 800c6e0:	0800ed73 	.word	0x0800ed73
 800c6e4:	0800ed84 	.word	0x0800ed84

0800c6e8 <__pow5mult>:
 800c6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6ec:	4615      	mov	r5, r2
 800c6ee:	f012 0203 	ands.w	r2, r2, #3
 800c6f2:	4606      	mov	r6, r0
 800c6f4:	460f      	mov	r7, r1
 800c6f6:	d007      	beq.n	800c708 <__pow5mult+0x20>
 800c6f8:	4c25      	ldr	r4, [pc, #148]	; (800c790 <__pow5mult+0xa8>)
 800c6fa:	3a01      	subs	r2, #1
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c702:	f7ff fe9b 	bl	800c43c <__multadd>
 800c706:	4607      	mov	r7, r0
 800c708:	10ad      	asrs	r5, r5, #2
 800c70a:	d03d      	beq.n	800c788 <__pow5mult+0xa0>
 800c70c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c70e:	b97c      	cbnz	r4, 800c730 <__pow5mult+0x48>
 800c710:	2010      	movs	r0, #16
 800c712:	f7ff fe1b 	bl	800c34c <malloc>
 800c716:	4602      	mov	r2, r0
 800c718:	6270      	str	r0, [r6, #36]	; 0x24
 800c71a:	b928      	cbnz	r0, 800c728 <__pow5mult+0x40>
 800c71c:	4b1d      	ldr	r3, [pc, #116]	; (800c794 <__pow5mult+0xac>)
 800c71e:	481e      	ldr	r0, [pc, #120]	; (800c798 <__pow5mult+0xb0>)
 800c720:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c724:	f000 fc0e 	bl	800cf44 <__assert_func>
 800c728:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c72c:	6004      	str	r4, [r0, #0]
 800c72e:	60c4      	str	r4, [r0, #12]
 800c730:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c734:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c738:	b94c      	cbnz	r4, 800c74e <__pow5mult+0x66>
 800c73a:	f240 2171 	movw	r1, #625	; 0x271
 800c73e:	4630      	mov	r0, r6
 800c740:	f7ff ff12 	bl	800c568 <__i2b>
 800c744:	2300      	movs	r3, #0
 800c746:	f8c8 0008 	str.w	r0, [r8, #8]
 800c74a:	4604      	mov	r4, r0
 800c74c:	6003      	str	r3, [r0, #0]
 800c74e:	f04f 0900 	mov.w	r9, #0
 800c752:	07eb      	lsls	r3, r5, #31
 800c754:	d50a      	bpl.n	800c76c <__pow5mult+0x84>
 800c756:	4639      	mov	r1, r7
 800c758:	4622      	mov	r2, r4
 800c75a:	4630      	mov	r0, r6
 800c75c:	f7ff ff1a 	bl	800c594 <__multiply>
 800c760:	4639      	mov	r1, r7
 800c762:	4680      	mov	r8, r0
 800c764:	4630      	mov	r0, r6
 800c766:	f7ff fe47 	bl	800c3f8 <_Bfree>
 800c76a:	4647      	mov	r7, r8
 800c76c:	106d      	asrs	r5, r5, #1
 800c76e:	d00b      	beq.n	800c788 <__pow5mult+0xa0>
 800c770:	6820      	ldr	r0, [r4, #0]
 800c772:	b938      	cbnz	r0, 800c784 <__pow5mult+0x9c>
 800c774:	4622      	mov	r2, r4
 800c776:	4621      	mov	r1, r4
 800c778:	4630      	mov	r0, r6
 800c77a:	f7ff ff0b 	bl	800c594 <__multiply>
 800c77e:	6020      	str	r0, [r4, #0]
 800c780:	f8c0 9000 	str.w	r9, [r0]
 800c784:	4604      	mov	r4, r0
 800c786:	e7e4      	b.n	800c752 <__pow5mult+0x6a>
 800c788:	4638      	mov	r0, r7
 800c78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c78e:	bf00      	nop
 800c790:	0800eed0 	.word	0x0800eed0
 800c794:	0800ed01 	.word	0x0800ed01
 800c798:	0800ed84 	.word	0x0800ed84

0800c79c <__lshift>:
 800c79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7a0:	460c      	mov	r4, r1
 800c7a2:	6849      	ldr	r1, [r1, #4]
 800c7a4:	6923      	ldr	r3, [r4, #16]
 800c7a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c7aa:	68a3      	ldr	r3, [r4, #8]
 800c7ac:	4607      	mov	r7, r0
 800c7ae:	4691      	mov	r9, r2
 800c7b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c7b4:	f108 0601 	add.w	r6, r8, #1
 800c7b8:	42b3      	cmp	r3, r6
 800c7ba:	db0b      	blt.n	800c7d4 <__lshift+0x38>
 800c7bc:	4638      	mov	r0, r7
 800c7be:	f7ff fddb 	bl	800c378 <_Balloc>
 800c7c2:	4605      	mov	r5, r0
 800c7c4:	b948      	cbnz	r0, 800c7da <__lshift+0x3e>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	4b2a      	ldr	r3, [pc, #168]	; (800c874 <__lshift+0xd8>)
 800c7ca:	482b      	ldr	r0, [pc, #172]	; (800c878 <__lshift+0xdc>)
 800c7cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c7d0:	f000 fbb8 	bl	800cf44 <__assert_func>
 800c7d4:	3101      	adds	r1, #1
 800c7d6:	005b      	lsls	r3, r3, #1
 800c7d8:	e7ee      	b.n	800c7b8 <__lshift+0x1c>
 800c7da:	2300      	movs	r3, #0
 800c7dc:	f100 0114 	add.w	r1, r0, #20
 800c7e0:	f100 0210 	add.w	r2, r0, #16
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	4553      	cmp	r3, sl
 800c7e8:	db37      	blt.n	800c85a <__lshift+0xbe>
 800c7ea:	6920      	ldr	r0, [r4, #16]
 800c7ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c7f0:	f104 0314 	add.w	r3, r4, #20
 800c7f4:	f019 091f 	ands.w	r9, r9, #31
 800c7f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c7fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c800:	d02f      	beq.n	800c862 <__lshift+0xc6>
 800c802:	f1c9 0e20 	rsb	lr, r9, #32
 800c806:	468a      	mov	sl, r1
 800c808:	f04f 0c00 	mov.w	ip, #0
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	fa02 f209 	lsl.w	r2, r2, r9
 800c812:	ea42 020c 	orr.w	r2, r2, ip
 800c816:	f84a 2b04 	str.w	r2, [sl], #4
 800c81a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c81e:	4298      	cmp	r0, r3
 800c820:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c824:	d8f2      	bhi.n	800c80c <__lshift+0x70>
 800c826:	1b03      	subs	r3, r0, r4
 800c828:	3b15      	subs	r3, #21
 800c82a:	f023 0303 	bic.w	r3, r3, #3
 800c82e:	3304      	adds	r3, #4
 800c830:	f104 0215 	add.w	r2, r4, #21
 800c834:	4290      	cmp	r0, r2
 800c836:	bf38      	it	cc
 800c838:	2304      	movcc	r3, #4
 800c83a:	f841 c003 	str.w	ip, [r1, r3]
 800c83e:	f1bc 0f00 	cmp.w	ip, #0
 800c842:	d001      	beq.n	800c848 <__lshift+0xac>
 800c844:	f108 0602 	add.w	r6, r8, #2
 800c848:	3e01      	subs	r6, #1
 800c84a:	4638      	mov	r0, r7
 800c84c:	612e      	str	r6, [r5, #16]
 800c84e:	4621      	mov	r1, r4
 800c850:	f7ff fdd2 	bl	800c3f8 <_Bfree>
 800c854:	4628      	mov	r0, r5
 800c856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c85a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c85e:	3301      	adds	r3, #1
 800c860:	e7c1      	b.n	800c7e6 <__lshift+0x4a>
 800c862:	3904      	subs	r1, #4
 800c864:	f853 2b04 	ldr.w	r2, [r3], #4
 800c868:	f841 2f04 	str.w	r2, [r1, #4]!
 800c86c:	4298      	cmp	r0, r3
 800c86e:	d8f9      	bhi.n	800c864 <__lshift+0xc8>
 800c870:	e7ea      	b.n	800c848 <__lshift+0xac>
 800c872:	bf00      	nop
 800c874:	0800ed73 	.word	0x0800ed73
 800c878:	0800ed84 	.word	0x0800ed84

0800c87c <__mcmp>:
 800c87c:	b530      	push	{r4, r5, lr}
 800c87e:	6902      	ldr	r2, [r0, #16]
 800c880:	690c      	ldr	r4, [r1, #16]
 800c882:	1b12      	subs	r2, r2, r4
 800c884:	d10e      	bne.n	800c8a4 <__mcmp+0x28>
 800c886:	f100 0314 	add.w	r3, r0, #20
 800c88a:	3114      	adds	r1, #20
 800c88c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c890:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c894:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c898:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c89c:	42a5      	cmp	r5, r4
 800c89e:	d003      	beq.n	800c8a8 <__mcmp+0x2c>
 800c8a0:	d305      	bcc.n	800c8ae <__mcmp+0x32>
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	4610      	mov	r0, r2
 800c8a6:	bd30      	pop	{r4, r5, pc}
 800c8a8:	4283      	cmp	r3, r0
 800c8aa:	d3f3      	bcc.n	800c894 <__mcmp+0x18>
 800c8ac:	e7fa      	b.n	800c8a4 <__mcmp+0x28>
 800c8ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c8b2:	e7f7      	b.n	800c8a4 <__mcmp+0x28>

0800c8b4 <__mdiff>:
 800c8b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b8:	460c      	mov	r4, r1
 800c8ba:	4606      	mov	r6, r0
 800c8bc:	4611      	mov	r1, r2
 800c8be:	4620      	mov	r0, r4
 800c8c0:	4690      	mov	r8, r2
 800c8c2:	f7ff ffdb 	bl	800c87c <__mcmp>
 800c8c6:	1e05      	subs	r5, r0, #0
 800c8c8:	d110      	bne.n	800c8ec <__mdiff+0x38>
 800c8ca:	4629      	mov	r1, r5
 800c8cc:	4630      	mov	r0, r6
 800c8ce:	f7ff fd53 	bl	800c378 <_Balloc>
 800c8d2:	b930      	cbnz	r0, 800c8e2 <__mdiff+0x2e>
 800c8d4:	4b3a      	ldr	r3, [pc, #232]	; (800c9c0 <__mdiff+0x10c>)
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	f240 2132 	movw	r1, #562	; 0x232
 800c8dc:	4839      	ldr	r0, [pc, #228]	; (800c9c4 <__mdiff+0x110>)
 800c8de:	f000 fb31 	bl	800cf44 <__assert_func>
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c8e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ec:	bfa4      	itt	ge
 800c8ee:	4643      	movge	r3, r8
 800c8f0:	46a0      	movge	r8, r4
 800c8f2:	4630      	mov	r0, r6
 800c8f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c8f8:	bfa6      	itte	ge
 800c8fa:	461c      	movge	r4, r3
 800c8fc:	2500      	movge	r5, #0
 800c8fe:	2501      	movlt	r5, #1
 800c900:	f7ff fd3a 	bl	800c378 <_Balloc>
 800c904:	b920      	cbnz	r0, 800c910 <__mdiff+0x5c>
 800c906:	4b2e      	ldr	r3, [pc, #184]	; (800c9c0 <__mdiff+0x10c>)
 800c908:	4602      	mov	r2, r0
 800c90a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c90e:	e7e5      	b.n	800c8dc <__mdiff+0x28>
 800c910:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c914:	6926      	ldr	r6, [r4, #16]
 800c916:	60c5      	str	r5, [r0, #12]
 800c918:	f104 0914 	add.w	r9, r4, #20
 800c91c:	f108 0514 	add.w	r5, r8, #20
 800c920:	f100 0e14 	add.w	lr, r0, #20
 800c924:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c928:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c92c:	f108 0210 	add.w	r2, r8, #16
 800c930:	46f2      	mov	sl, lr
 800c932:	2100      	movs	r1, #0
 800c934:	f859 3b04 	ldr.w	r3, [r9], #4
 800c938:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c93c:	fa1f f883 	uxth.w	r8, r3
 800c940:	fa11 f18b 	uxtah	r1, r1, fp
 800c944:	0c1b      	lsrs	r3, r3, #16
 800c946:	eba1 0808 	sub.w	r8, r1, r8
 800c94a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c94e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c952:	fa1f f888 	uxth.w	r8, r8
 800c956:	1419      	asrs	r1, r3, #16
 800c958:	454e      	cmp	r6, r9
 800c95a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c95e:	f84a 3b04 	str.w	r3, [sl], #4
 800c962:	d8e7      	bhi.n	800c934 <__mdiff+0x80>
 800c964:	1b33      	subs	r3, r6, r4
 800c966:	3b15      	subs	r3, #21
 800c968:	f023 0303 	bic.w	r3, r3, #3
 800c96c:	3304      	adds	r3, #4
 800c96e:	3415      	adds	r4, #21
 800c970:	42a6      	cmp	r6, r4
 800c972:	bf38      	it	cc
 800c974:	2304      	movcc	r3, #4
 800c976:	441d      	add	r5, r3
 800c978:	4473      	add	r3, lr
 800c97a:	469e      	mov	lr, r3
 800c97c:	462e      	mov	r6, r5
 800c97e:	4566      	cmp	r6, ip
 800c980:	d30e      	bcc.n	800c9a0 <__mdiff+0xec>
 800c982:	f10c 0203 	add.w	r2, ip, #3
 800c986:	1b52      	subs	r2, r2, r5
 800c988:	f022 0203 	bic.w	r2, r2, #3
 800c98c:	3d03      	subs	r5, #3
 800c98e:	45ac      	cmp	ip, r5
 800c990:	bf38      	it	cc
 800c992:	2200      	movcc	r2, #0
 800c994:	441a      	add	r2, r3
 800c996:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c99a:	b17b      	cbz	r3, 800c9bc <__mdiff+0x108>
 800c99c:	6107      	str	r7, [r0, #16]
 800c99e:	e7a3      	b.n	800c8e8 <__mdiff+0x34>
 800c9a0:	f856 8b04 	ldr.w	r8, [r6], #4
 800c9a4:	fa11 f288 	uxtah	r2, r1, r8
 800c9a8:	1414      	asrs	r4, r2, #16
 800c9aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c9ae:	b292      	uxth	r2, r2
 800c9b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c9b4:	f84e 2b04 	str.w	r2, [lr], #4
 800c9b8:	1421      	asrs	r1, r4, #16
 800c9ba:	e7e0      	b.n	800c97e <__mdiff+0xca>
 800c9bc:	3f01      	subs	r7, #1
 800c9be:	e7ea      	b.n	800c996 <__mdiff+0xe2>
 800c9c0:	0800ed73 	.word	0x0800ed73
 800c9c4:	0800ed84 	.word	0x0800ed84

0800c9c8 <__d2b>:
 800c9c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c9cc:	4689      	mov	r9, r1
 800c9ce:	2101      	movs	r1, #1
 800c9d0:	ec57 6b10 	vmov	r6, r7, d0
 800c9d4:	4690      	mov	r8, r2
 800c9d6:	f7ff fccf 	bl	800c378 <_Balloc>
 800c9da:	4604      	mov	r4, r0
 800c9dc:	b930      	cbnz	r0, 800c9ec <__d2b+0x24>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	4b25      	ldr	r3, [pc, #148]	; (800ca78 <__d2b+0xb0>)
 800c9e2:	4826      	ldr	r0, [pc, #152]	; (800ca7c <__d2b+0xb4>)
 800c9e4:	f240 310a 	movw	r1, #778	; 0x30a
 800c9e8:	f000 faac 	bl	800cf44 <__assert_func>
 800c9ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c9f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c9f4:	bb35      	cbnz	r5, 800ca44 <__d2b+0x7c>
 800c9f6:	2e00      	cmp	r6, #0
 800c9f8:	9301      	str	r3, [sp, #4]
 800c9fa:	d028      	beq.n	800ca4e <__d2b+0x86>
 800c9fc:	4668      	mov	r0, sp
 800c9fe:	9600      	str	r6, [sp, #0]
 800ca00:	f7ff fd82 	bl	800c508 <__lo0bits>
 800ca04:	9900      	ldr	r1, [sp, #0]
 800ca06:	b300      	cbz	r0, 800ca4a <__d2b+0x82>
 800ca08:	9a01      	ldr	r2, [sp, #4]
 800ca0a:	f1c0 0320 	rsb	r3, r0, #32
 800ca0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ca12:	430b      	orrs	r3, r1
 800ca14:	40c2      	lsrs	r2, r0
 800ca16:	6163      	str	r3, [r4, #20]
 800ca18:	9201      	str	r2, [sp, #4]
 800ca1a:	9b01      	ldr	r3, [sp, #4]
 800ca1c:	61a3      	str	r3, [r4, #24]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	bf14      	ite	ne
 800ca22:	2202      	movne	r2, #2
 800ca24:	2201      	moveq	r2, #1
 800ca26:	6122      	str	r2, [r4, #16]
 800ca28:	b1d5      	cbz	r5, 800ca60 <__d2b+0x98>
 800ca2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ca2e:	4405      	add	r5, r0
 800ca30:	f8c9 5000 	str.w	r5, [r9]
 800ca34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ca38:	f8c8 0000 	str.w	r0, [r8]
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	b003      	add	sp, #12
 800ca40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca48:	e7d5      	b.n	800c9f6 <__d2b+0x2e>
 800ca4a:	6161      	str	r1, [r4, #20]
 800ca4c:	e7e5      	b.n	800ca1a <__d2b+0x52>
 800ca4e:	a801      	add	r0, sp, #4
 800ca50:	f7ff fd5a 	bl	800c508 <__lo0bits>
 800ca54:	9b01      	ldr	r3, [sp, #4]
 800ca56:	6163      	str	r3, [r4, #20]
 800ca58:	2201      	movs	r2, #1
 800ca5a:	6122      	str	r2, [r4, #16]
 800ca5c:	3020      	adds	r0, #32
 800ca5e:	e7e3      	b.n	800ca28 <__d2b+0x60>
 800ca60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ca68:	f8c9 0000 	str.w	r0, [r9]
 800ca6c:	6918      	ldr	r0, [r3, #16]
 800ca6e:	f7ff fd2b 	bl	800c4c8 <__hi0bits>
 800ca72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca76:	e7df      	b.n	800ca38 <__d2b+0x70>
 800ca78:	0800ed73 	.word	0x0800ed73
 800ca7c:	0800ed84 	.word	0x0800ed84

0800ca80 <_calloc_r>:
 800ca80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca82:	fba1 2402 	umull	r2, r4, r1, r2
 800ca86:	b94c      	cbnz	r4, 800ca9c <_calloc_r+0x1c>
 800ca88:	4611      	mov	r1, r2
 800ca8a:	9201      	str	r2, [sp, #4]
 800ca8c:	f000 f87a 	bl	800cb84 <_malloc_r>
 800ca90:	9a01      	ldr	r2, [sp, #4]
 800ca92:	4605      	mov	r5, r0
 800ca94:	b930      	cbnz	r0, 800caa4 <_calloc_r+0x24>
 800ca96:	4628      	mov	r0, r5
 800ca98:	b003      	add	sp, #12
 800ca9a:	bd30      	pop	{r4, r5, pc}
 800ca9c:	220c      	movs	r2, #12
 800ca9e:	6002      	str	r2, [r0, #0]
 800caa0:	2500      	movs	r5, #0
 800caa2:	e7f8      	b.n	800ca96 <_calloc_r+0x16>
 800caa4:	4621      	mov	r1, r4
 800caa6:	f7fe f92d 	bl	800ad04 <memset>
 800caaa:	e7f4      	b.n	800ca96 <_calloc_r+0x16>

0800caac <_free_r>:
 800caac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800caae:	2900      	cmp	r1, #0
 800cab0:	d044      	beq.n	800cb3c <_free_r+0x90>
 800cab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cab6:	9001      	str	r0, [sp, #4]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	f1a1 0404 	sub.w	r4, r1, #4
 800cabe:	bfb8      	it	lt
 800cac0:	18e4      	addlt	r4, r4, r3
 800cac2:	f000 fa9b 	bl	800cffc <__malloc_lock>
 800cac6:	4a1e      	ldr	r2, [pc, #120]	; (800cb40 <_free_r+0x94>)
 800cac8:	9801      	ldr	r0, [sp, #4]
 800caca:	6813      	ldr	r3, [r2, #0]
 800cacc:	b933      	cbnz	r3, 800cadc <_free_r+0x30>
 800cace:	6063      	str	r3, [r4, #4]
 800cad0:	6014      	str	r4, [r2, #0]
 800cad2:	b003      	add	sp, #12
 800cad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cad8:	f000 ba96 	b.w	800d008 <__malloc_unlock>
 800cadc:	42a3      	cmp	r3, r4
 800cade:	d908      	bls.n	800caf2 <_free_r+0x46>
 800cae0:	6825      	ldr	r5, [r4, #0]
 800cae2:	1961      	adds	r1, r4, r5
 800cae4:	428b      	cmp	r3, r1
 800cae6:	bf01      	itttt	eq
 800cae8:	6819      	ldreq	r1, [r3, #0]
 800caea:	685b      	ldreq	r3, [r3, #4]
 800caec:	1949      	addeq	r1, r1, r5
 800caee:	6021      	streq	r1, [r4, #0]
 800caf0:	e7ed      	b.n	800cace <_free_r+0x22>
 800caf2:	461a      	mov	r2, r3
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	b10b      	cbz	r3, 800cafc <_free_r+0x50>
 800caf8:	42a3      	cmp	r3, r4
 800cafa:	d9fa      	bls.n	800caf2 <_free_r+0x46>
 800cafc:	6811      	ldr	r1, [r2, #0]
 800cafe:	1855      	adds	r5, r2, r1
 800cb00:	42a5      	cmp	r5, r4
 800cb02:	d10b      	bne.n	800cb1c <_free_r+0x70>
 800cb04:	6824      	ldr	r4, [r4, #0]
 800cb06:	4421      	add	r1, r4
 800cb08:	1854      	adds	r4, r2, r1
 800cb0a:	42a3      	cmp	r3, r4
 800cb0c:	6011      	str	r1, [r2, #0]
 800cb0e:	d1e0      	bne.n	800cad2 <_free_r+0x26>
 800cb10:	681c      	ldr	r4, [r3, #0]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	6053      	str	r3, [r2, #4]
 800cb16:	4421      	add	r1, r4
 800cb18:	6011      	str	r1, [r2, #0]
 800cb1a:	e7da      	b.n	800cad2 <_free_r+0x26>
 800cb1c:	d902      	bls.n	800cb24 <_free_r+0x78>
 800cb1e:	230c      	movs	r3, #12
 800cb20:	6003      	str	r3, [r0, #0]
 800cb22:	e7d6      	b.n	800cad2 <_free_r+0x26>
 800cb24:	6825      	ldr	r5, [r4, #0]
 800cb26:	1961      	adds	r1, r4, r5
 800cb28:	428b      	cmp	r3, r1
 800cb2a:	bf04      	itt	eq
 800cb2c:	6819      	ldreq	r1, [r3, #0]
 800cb2e:	685b      	ldreq	r3, [r3, #4]
 800cb30:	6063      	str	r3, [r4, #4]
 800cb32:	bf04      	itt	eq
 800cb34:	1949      	addeq	r1, r1, r5
 800cb36:	6021      	streq	r1, [r4, #0]
 800cb38:	6054      	str	r4, [r2, #4]
 800cb3a:	e7ca      	b.n	800cad2 <_free_r+0x26>
 800cb3c:	b003      	add	sp, #12
 800cb3e:	bd30      	pop	{r4, r5, pc}
 800cb40:	20002138 	.word	0x20002138

0800cb44 <sbrk_aligned>:
 800cb44:	b570      	push	{r4, r5, r6, lr}
 800cb46:	4e0e      	ldr	r6, [pc, #56]	; (800cb80 <sbrk_aligned+0x3c>)
 800cb48:	460c      	mov	r4, r1
 800cb4a:	6831      	ldr	r1, [r6, #0]
 800cb4c:	4605      	mov	r5, r0
 800cb4e:	b911      	cbnz	r1, 800cb56 <sbrk_aligned+0x12>
 800cb50:	f000 f9e8 	bl	800cf24 <_sbrk_r>
 800cb54:	6030      	str	r0, [r6, #0]
 800cb56:	4621      	mov	r1, r4
 800cb58:	4628      	mov	r0, r5
 800cb5a:	f000 f9e3 	bl	800cf24 <_sbrk_r>
 800cb5e:	1c43      	adds	r3, r0, #1
 800cb60:	d00a      	beq.n	800cb78 <sbrk_aligned+0x34>
 800cb62:	1cc4      	adds	r4, r0, #3
 800cb64:	f024 0403 	bic.w	r4, r4, #3
 800cb68:	42a0      	cmp	r0, r4
 800cb6a:	d007      	beq.n	800cb7c <sbrk_aligned+0x38>
 800cb6c:	1a21      	subs	r1, r4, r0
 800cb6e:	4628      	mov	r0, r5
 800cb70:	f000 f9d8 	bl	800cf24 <_sbrk_r>
 800cb74:	3001      	adds	r0, #1
 800cb76:	d101      	bne.n	800cb7c <sbrk_aligned+0x38>
 800cb78:	f04f 34ff 	mov.w	r4, #4294967295
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	bd70      	pop	{r4, r5, r6, pc}
 800cb80:	2000213c 	.word	0x2000213c

0800cb84 <_malloc_r>:
 800cb84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb88:	1ccd      	adds	r5, r1, #3
 800cb8a:	f025 0503 	bic.w	r5, r5, #3
 800cb8e:	3508      	adds	r5, #8
 800cb90:	2d0c      	cmp	r5, #12
 800cb92:	bf38      	it	cc
 800cb94:	250c      	movcc	r5, #12
 800cb96:	2d00      	cmp	r5, #0
 800cb98:	4607      	mov	r7, r0
 800cb9a:	db01      	blt.n	800cba0 <_malloc_r+0x1c>
 800cb9c:	42a9      	cmp	r1, r5
 800cb9e:	d905      	bls.n	800cbac <_malloc_r+0x28>
 800cba0:	230c      	movs	r3, #12
 800cba2:	603b      	str	r3, [r7, #0]
 800cba4:	2600      	movs	r6, #0
 800cba6:	4630      	mov	r0, r6
 800cba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbac:	4e2e      	ldr	r6, [pc, #184]	; (800cc68 <_malloc_r+0xe4>)
 800cbae:	f000 fa25 	bl	800cffc <__malloc_lock>
 800cbb2:	6833      	ldr	r3, [r6, #0]
 800cbb4:	461c      	mov	r4, r3
 800cbb6:	bb34      	cbnz	r4, 800cc06 <_malloc_r+0x82>
 800cbb8:	4629      	mov	r1, r5
 800cbba:	4638      	mov	r0, r7
 800cbbc:	f7ff ffc2 	bl	800cb44 <sbrk_aligned>
 800cbc0:	1c43      	adds	r3, r0, #1
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	d14d      	bne.n	800cc62 <_malloc_r+0xde>
 800cbc6:	6834      	ldr	r4, [r6, #0]
 800cbc8:	4626      	mov	r6, r4
 800cbca:	2e00      	cmp	r6, #0
 800cbcc:	d140      	bne.n	800cc50 <_malloc_r+0xcc>
 800cbce:	6823      	ldr	r3, [r4, #0]
 800cbd0:	4631      	mov	r1, r6
 800cbd2:	4638      	mov	r0, r7
 800cbd4:	eb04 0803 	add.w	r8, r4, r3
 800cbd8:	f000 f9a4 	bl	800cf24 <_sbrk_r>
 800cbdc:	4580      	cmp	r8, r0
 800cbde:	d13a      	bne.n	800cc56 <_malloc_r+0xd2>
 800cbe0:	6821      	ldr	r1, [r4, #0]
 800cbe2:	3503      	adds	r5, #3
 800cbe4:	1a6d      	subs	r5, r5, r1
 800cbe6:	f025 0503 	bic.w	r5, r5, #3
 800cbea:	3508      	adds	r5, #8
 800cbec:	2d0c      	cmp	r5, #12
 800cbee:	bf38      	it	cc
 800cbf0:	250c      	movcc	r5, #12
 800cbf2:	4629      	mov	r1, r5
 800cbf4:	4638      	mov	r0, r7
 800cbf6:	f7ff ffa5 	bl	800cb44 <sbrk_aligned>
 800cbfa:	3001      	adds	r0, #1
 800cbfc:	d02b      	beq.n	800cc56 <_malloc_r+0xd2>
 800cbfe:	6823      	ldr	r3, [r4, #0]
 800cc00:	442b      	add	r3, r5
 800cc02:	6023      	str	r3, [r4, #0]
 800cc04:	e00e      	b.n	800cc24 <_malloc_r+0xa0>
 800cc06:	6822      	ldr	r2, [r4, #0]
 800cc08:	1b52      	subs	r2, r2, r5
 800cc0a:	d41e      	bmi.n	800cc4a <_malloc_r+0xc6>
 800cc0c:	2a0b      	cmp	r2, #11
 800cc0e:	d916      	bls.n	800cc3e <_malloc_r+0xba>
 800cc10:	1961      	adds	r1, r4, r5
 800cc12:	42a3      	cmp	r3, r4
 800cc14:	6025      	str	r5, [r4, #0]
 800cc16:	bf18      	it	ne
 800cc18:	6059      	strne	r1, [r3, #4]
 800cc1a:	6863      	ldr	r3, [r4, #4]
 800cc1c:	bf08      	it	eq
 800cc1e:	6031      	streq	r1, [r6, #0]
 800cc20:	5162      	str	r2, [r4, r5]
 800cc22:	604b      	str	r3, [r1, #4]
 800cc24:	4638      	mov	r0, r7
 800cc26:	f104 060b 	add.w	r6, r4, #11
 800cc2a:	f000 f9ed 	bl	800d008 <__malloc_unlock>
 800cc2e:	f026 0607 	bic.w	r6, r6, #7
 800cc32:	1d23      	adds	r3, r4, #4
 800cc34:	1af2      	subs	r2, r6, r3
 800cc36:	d0b6      	beq.n	800cba6 <_malloc_r+0x22>
 800cc38:	1b9b      	subs	r3, r3, r6
 800cc3a:	50a3      	str	r3, [r4, r2]
 800cc3c:	e7b3      	b.n	800cba6 <_malloc_r+0x22>
 800cc3e:	6862      	ldr	r2, [r4, #4]
 800cc40:	42a3      	cmp	r3, r4
 800cc42:	bf0c      	ite	eq
 800cc44:	6032      	streq	r2, [r6, #0]
 800cc46:	605a      	strne	r2, [r3, #4]
 800cc48:	e7ec      	b.n	800cc24 <_malloc_r+0xa0>
 800cc4a:	4623      	mov	r3, r4
 800cc4c:	6864      	ldr	r4, [r4, #4]
 800cc4e:	e7b2      	b.n	800cbb6 <_malloc_r+0x32>
 800cc50:	4634      	mov	r4, r6
 800cc52:	6876      	ldr	r6, [r6, #4]
 800cc54:	e7b9      	b.n	800cbca <_malloc_r+0x46>
 800cc56:	230c      	movs	r3, #12
 800cc58:	603b      	str	r3, [r7, #0]
 800cc5a:	4638      	mov	r0, r7
 800cc5c:	f000 f9d4 	bl	800d008 <__malloc_unlock>
 800cc60:	e7a1      	b.n	800cba6 <_malloc_r+0x22>
 800cc62:	6025      	str	r5, [r4, #0]
 800cc64:	e7de      	b.n	800cc24 <_malloc_r+0xa0>
 800cc66:	bf00      	nop
 800cc68:	20002138 	.word	0x20002138

0800cc6c <__ssputs_r>:
 800cc6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc70:	688e      	ldr	r6, [r1, #8]
 800cc72:	429e      	cmp	r6, r3
 800cc74:	4682      	mov	sl, r0
 800cc76:	460c      	mov	r4, r1
 800cc78:	4690      	mov	r8, r2
 800cc7a:	461f      	mov	r7, r3
 800cc7c:	d838      	bhi.n	800ccf0 <__ssputs_r+0x84>
 800cc7e:	898a      	ldrh	r2, [r1, #12]
 800cc80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc84:	d032      	beq.n	800ccec <__ssputs_r+0x80>
 800cc86:	6825      	ldr	r5, [r4, #0]
 800cc88:	6909      	ldr	r1, [r1, #16]
 800cc8a:	eba5 0901 	sub.w	r9, r5, r1
 800cc8e:	6965      	ldr	r5, [r4, #20]
 800cc90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc98:	3301      	adds	r3, #1
 800cc9a:	444b      	add	r3, r9
 800cc9c:	106d      	asrs	r5, r5, #1
 800cc9e:	429d      	cmp	r5, r3
 800cca0:	bf38      	it	cc
 800cca2:	461d      	movcc	r5, r3
 800cca4:	0553      	lsls	r3, r2, #21
 800cca6:	d531      	bpl.n	800cd0c <__ssputs_r+0xa0>
 800cca8:	4629      	mov	r1, r5
 800ccaa:	f7ff ff6b 	bl	800cb84 <_malloc_r>
 800ccae:	4606      	mov	r6, r0
 800ccb0:	b950      	cbnz	r0, 800ccc8 <__ssputs_r+0x5c>
 800ccb2:	230c      	movs	r3, #12
 800ccb4:	f8ca 3000 	str.w	r3, [sl]
 800ccb8:	89a3      	ldrh	r3, [r4, #12]
 800ccba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccbe:	81a3      	strh	r3, [r4, #12]
 800ccc0:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccc8:	6921      	ldr	r1, [r4, #16]
 800ccca:	464a      	mov	r2, r9
 800cccc:	f7ff fb46 	bl	800c35c <memcpy>
 800ccd0:	89a3      	ldrh	r3, [r4, #12]
 800ccd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ccd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccda:	81a3      	strh	r3, [r4, #12]
 800ccdc:	6126      	str	r6, [r4, #16]
 800ccde:	6165      	str	r5, [r4, #20]
 800cce0:	444e      	add	r6, r9
 800cce2:	eba5 0509 	sub.w	r5, r5, r9
 800cce6:	6026      	str	r6, [r4, #0]
 800cce8:	60a5      	str	r5, [r4, #8]
 800ccea:	463e      	mov	r6, r7
 800ccec:	42be      	cmp	r6, r7
 800ccee:	d900      	bls.n	800ccf2 <__ssputs_r+0x86>
 800ccf0:	463e      	mov	r6, r7
 800ccf2:	6820      	ldr	r0, [r4, #0]
 800ccf4:	4632      	mov	r2, r6
 800ccf6:	4641      	mov	r1, r8
 800ccf8:	f000 f966 	bl	800cfc8 <memmove>
 800ccfc:	68a3      	ldr	r3, [r4, #8]
 800ccfe:	1b9b      	subs	r3, r3, r6
 800cd00:	60a3      	str	r3, [r4, #8]
 800cd02:	6823      	ldr	r3, [r4, #0]
 800cd04:	4433      	add	r3, r6
 800cd06:	6023      	str	r3, [r4, #0]
 800cd08:	2000      	movs	r0, #0
 800cd0a:	e7db      	b.n	800ccc4 <__ssputs_r+0x58>
 800cd0c:	462a      	mov	r2, r5
 800cd0e:	f000 f981 	bl	800d014 <_realloc_r>
 800cd12:	4606      	mov	r6, r0
 800cd14:	2800      	cmp	r0, #0
 800cd16:	d1e1      	bne.n	800ccdc <__ssputs_r+0x70>
 800cd18:	6921      	ldr	r1, [r4, #16]
 800cd1a:	4650      	mov	r0, sl
 800cd1c:	f7ff fec6 	bl	800caac <_free_r>
 800cd20:	e7c7      	b.n	800ccb2 <__ssputs_r+0x46>
	...

0800cd24 <_svfiprintf_r>:
 800cd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd28:	4698      	mov	r8, r3
 800cd2a:	898b      	ldrh	r3, [r1, #12]
 800cd2c:	061b      	lsls	r3, r3, #24
 800cd2e:	b09d      	sub	sp, #116	; 0x74
 800cd30:	4607      	mov	r7, r0
 800cd32:	460d      	mov	r5, r1
 800cd34:	4614      	mov	r4, r2
 800cd36:	d50e      	bpl.n	800cd56 <_svfiprintf_r+0x32>
 800cd38:	690b      	ldr	r3, [r1, #16]
 800cd3a:	b963      	cbnz	r3, 800cd56 <_svfiprintf_r+0x32>
 800cd3c:	2140      	movs	r1, #64	; 0x40
 800cd3e:	f7ff ff21 	bl	800cb84 <_malloc_r>
 800cd42:	6028      	str	r0, [r5, #0]
 800cd44:	6128      	str	r0, [r5, #16]
 800cd46:	b920      	cbnz	r0, 800cd52 <_svfiprintf_r+0x2e>
 800cd48:	230c      	movs	r3, #12
 800cd4a:	603b      	str	r3, [r7, #0]
 800cd4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd50:	e0d1      	b.n	800cef6 <_svfiprintf_r+0x1d2>
 800cd52:	2340      	movs	r3, #64	; 0x40
 800cd54:	616b      	str	r3, [r5, #20]
 800cd56:	2300      	movs	r3, #0
 800cd58:	9309      	str	r3, [sp, #36]	; 0x24
 800cd5a:	2320      	movs	r3, #32
 800cd5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd60:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd64:	2330      	movs	r3, #48	; 0x30
 800cd66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cf10 <_svfiprintf_r+0x1ec>
 800cd6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd6e:	f04f 0901 	mov.w	r9, #1
 800cd72:	4623      	mov	r3, r4
 800cd74:	469a      	mov	sl, r3
 800cd76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd7a:	b10a      	cbz	r2, 800cd80 <_svfiprintf_r+0x5c>
 800cd7c:	2a25      	cmp	r2, #37	; 0x25
 800cd7e:	d1f9      	bne.n	800cd74 <_svfiprintf_r+0x50>
 800cd80:	ebba 0b04 	subs.w	fp, sl, r4
 800cd84:	d00b      	beq.n	800cd9e <_svfiprintf_r+0x7a>
 800cd86:	465b      	mov	r3, fp
 800cd88:	4622      	mov	r2, r4
 800cd8a:	4629      	mov	r1, r5
 800cd8c:	4638      	mov	r0, r7
 800cd8e:	f7ff ff6d 	bl	800cc6c <__ssputs_r>
 800cd92:	3001      	adds	r0, #1
 800cd94:	f000 80aa 	beq.w	800ceec <_svfiprintf_r+0x1c8>
 800cd98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd9a:	445a      	add	r2, fp
 800cd9c:	9209      	str	r2, [sp, #36]	; 0x24
 800cd9e:	f89a 3000 	ldrb.w	r3, [sl]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	f000 80a2 	beq.w	800ceec <_svfiprintf_r+0x1c8>
 800cda8:	2300      	movs	r3, #0
 800cdaa:	f04f 32ff 	mov.w	r2, #4294967295
 800cdae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdb2:	f10a 0a01 	add.w	sl, sl, #1
 800cdb6:	9304      	str	r3, [sp, #16]
 800cdb8:	9307      	str	r3, [sp, #28]
 800cdba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdbe:	931a      	str	r3, [sp, #104]	; 0x68
 800cdc0:	4654      	mov	r4, sl
 800cdc2:	2205      	movs	r2, #5
 800cdc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdc8:	4851      	ldr	r0, [pc, #324]	; (800cf10 <_svfiprintf_r+0x1ec>)
 800cdca:	f7f3 fa09 	bl	80001e0 <memchr>
 800cdce:	9a04      	ldr	r2, [sp, #16]
 800cdd0:	b9d8      	cbnz	r0, 800ce0a <_svfiprintf_r+0xe6>
 800cdd2:	06d0      	lsls	r0, r2, #27
 800cdd4:	bf44      	itt	mi
 800cdd6:	2320      	movmi	r3, #32
 800cdd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cddc:	0711      	lsls	r1, r2, #28
 800cdde:	bf44      	itt	mi
 800cde0:	232b      	movmi	r3, #43	; 0x2b
 800cde2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cde6:	f89a 3000 	ldrb.w	r3, [sl]
 800cdea:	2b2a      	cmp	r3, #42	; 0x2a
 800cdec:	d015      	beq.n	800ce1a <_svfiprintf_r+0xf6>
 800cdee:	9a07      	ldr	r2, [sp, #28]
 800cdf0:	4654      	mov	r4, sl
 800cdf2:	2000      	movs	r0, #0
 800cdf4:	f04f 0c0a 	mov.w	ip, #10
 800cdf8:	4621      	mov	r1, r4
 800cdfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdfe:	3b30      	subs	r3, #48	; 0x30
 800ce00:	2b09      	cmp	r3, #9
 800ce02:	d94e      	bls.n	800cea2 <_svfiprintf_r+0x17e>
 800ce04:	b1b0      	cbz	r0, 800ce34 <_svfiprintf_r+0x110>
 800ce06:	9207      	str	r2, [sp, #28]
 800ce08:	e014      	b.n	800ce34 <_svfiprintf_r+0x110>
 800ce0a:	eba0 0308 	sub.w	r3, r0, r8
 800ce0e:	fa09 f303 	lsl.w	r3, r9, r3
 800ce12:	4313      	orrs	r3, r2
 800ce14:	9304      	str	r3, [sp, #16]
 800ce16:	46a2      	mov	sl, r4
 800ce18:	e7d2      	b.n	800cdc0 <_svfiprintf_r+0x9c>
 800ce1a:	9b03      	ldr	r3, [sp, #12]
 800ce1c:	1d19      	adds	r1, r3, #4
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	9103      	str	r1, [sp, #12]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	bfbb      	ittet	lt
 800ce26:	425b      	neglt	r3, r3
 800ce28:	f042 0202 	orrlt.w	r2, r2, #2
 800ce2c:	9307      	strge	r3, [sp, #28]
 800ce2e:	9307      	strlt	r3, [sp, #28]
 800ce30:	bfb8      	it	lt
 800ce32:	9204      	strlt	r2, [sp, #16]
 800ce34:	7823      	ldrb	r3, [r4, #0]
 800ce36:	2b2e      	cmp	r3, #46	; 0x2e
 800ce38:	d10c      	bne.n	800ce54 <_svfiprintf_r+0x130>
 800ce3a:	7863      	ldrb	r3, [r4, #1]
 800ce3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ce3e:	d135      	bne.n	800ceac <_svfiprintf_r+0x188>
 800ce40:	9b03      	ldr	r3, [sp, #12]
 800ce42:	1d1a      	adds	r2, r3, #4
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	9203      	str	r2, [sp, #12]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	bfb8      	it	lt
 800ce4c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce50:	3402      	adds	r4, #2
 800ce52:	9305      	str	r3, [sp, #20]
 800ce54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cf20 <_svfiprintf_r+0x1fc>
 800ce58:	7821      	ldrb	r1, [r4, #0]
 800ce5a:	2203      	movs	r2, #3
 800ce5c:	4650      	mov	r0, sl
 800ce5e:	f7f3 f9bf 	bl	80001e0 <memchr>
 800ce62:	b140      	cbz	r0, 800ce76 <_svfiprintf_r+0x152>
 800ce64:	2340      	movs	r3, #64	; 0x40
 800ce66:	eba0 000a 	sub.w	r0, r0, sl
 800ce6a:	fa03 f000 	lsl.w	r0, r3, r0
 800ce6e:	9b04      	ldr	r3, [sp, #16]
 800ce70:	4303      	orrs	r3, r0
 800ce72:	3401      	adds	r4, #1
 800ce74:	9304      	str	r3, [sp, #16]
 800ce76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce7a:	4826      	ldr	r0, [pc, #152]	; (800cf14 <_svfiprintf_r+0x1f0>)
 800ce7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce80:	2206      	movs	r2, #6
 800ce82:	f7f3 f9ad 	bl	80001e0 <memchr>
 800ce86:	2800      	cmp	r0, #0
 800ce88:	d038      	beq.n	800cefc <_svfiprintf_r+0x1d8>
 800ce8a:	4b23      	ldr	r3, [pc, #140]	; (800cf18 <_svfiprintf_r+0x1f4>)
 800ce8c:	bb1b      	cbnz	r3, 800ced6 <_svfiprintf_r+0x1b2>
 800ce8e:	9b03      	ldr	r3, [sp, #12]
 800ce90:	3307      	adds	r3, #7
 800ce92:	f023 0307 	bic.w	r3, r3, #7
 800ce96:	3308      	adds	r3, #8
 800ce98:	9303      	str	r3, [sp, #12]
 800ce9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce9c:	4433      	add	r3, r6
 800ce9e:	9309      	str	r3, [sp, #36]	; 0x24
 800cea0:	e767      	b.n	800cd72 <_svfiprintf_r+0x4e>
 800cea2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cea6:	460c      	mov	r4, r1
 800cea8:	2001      	movs	r0, #1
 800ceaa:	e7a5      	b.n	800cdf8 <_svfiprintf_r+0xd4>
 800ceac:	2300      	movs	r3, #0
 800ceae:	3401      	adds	r4, #1
 800ceb0:	9305      	str	r3, [sp, #20]
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	f04f 0c0a 	mov.w	ip, #10
 800ceb8:	4620      	mov	r0, r4
 800ceba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cebe:	3a30      	subs	r2, #48	; 0x30
 800cec0:	2a09      	cmp	r2, #9
 800cec2:	d903      	bls.n	800cecc <_svfiprintf_r+0x1a8>
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d0c5      	beq.n	800ce54 <_svfiprintf_r+0x130>
 800cec8:	9105      	str	r1, [sp, #20]
 800ceca:	e7c3      	b.n	800ce54 <_svfiprintf_r+0x130>
 800cecc:	fb0c 2101 	mla	r1, ip, r1, r2
 800ced0:	4604      	mov	r4, r0
 800ced2:	2301      	movs	r3, #1
 800ced4:	e7f0      	b.n	800ceb8 <_svfiprintf_r+0x194>
 800ced6:	ab03      	add	r3, sp, #12
 800ced8:	9300      	str	r3, [sp, #0]
 800ceda:	462a      	mov	r2, r5
 800cedc:	4b0f      	ldr	r3, [pc, #60]	; (800cf1c <_svfiprintf_r+0x1f8>)
 800cede:	a904      	add	r1, sp, #16
 800cee0:	4638      	mov	r0, r7
 800cee2:	f7fd ffb7 	bl	800ae54 <_printf_float>
 800cee6:	1c42      	adds	r2, r0, #1
 800cee8:	4606      	mov	r6, r0
 800ceea:	d1d6      	bne.n	800ce9a <_svfiprintf_r+0x176>
 800ceec:	89ab      	ldrh	r3, [r5, #12]
 800ceee:	065b      	lsls	r3, r3, #25
 800cef0:	f53f af2c 	bmi.w	800cd4c <_svfiprintf_r+0x28>
 800cef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cef6:	b01d      	add	sp, #116	; 0x74
 800cef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cefc:	ab03      	add	r3, sp, #12
 800cefe:	9300      	str	r3, [sp, #0]
 800cf00:	462a      	mov	r2, r5
 800cf02:	4b06      	ldr	r3, [pc, #24]	; (800cf1c <_svfiprintf_r+0x1f8>)
 800cf04:	a904      	add	r1, sp, #16
 800cf06:	4638      	mov	r0, r7
 800cf08:	f7fe fa48 	bl	800b39c <_printf_i>
 800cf0c:	e7eb      	b.n	800cee6 <_svfiprintf_r+0x1c2>
 800cf0e:	bf00      	nop
 800cf10:	0800eedc 	.word	0x0800eedc
 800cf14:	0800eee6 	.word	0x0800eee6
 800cf18:	0800ae55 	.word	0x0800ae55
 800cf1c:	0800cc6d 	.word	0x0800cc6d
 800cf20:	0800eee2 	.word	0x0800eee2

0800cf24 <_sbrk_r>:
 800cf24:	b538      	push	{r3, r4, r5, lr}
 800cf26:	4d06      	ldr	r5, [pc, #24]	; (800cf40 <_sbrk_r+0x1c>)
 800cf28:	2300      	movs	r3, #0
 800cf2a:	4604      	mov	r4, r0
 800cf2c:	4608      	mov	r0, r1
 800cf2e:	602b      	str	r3, [r5, #0]
 800cf30:	f7f5 f9a2 	bl	8002278 <_sbrk>
 800cf34:	1c43      	adds	r3, r0, #1
 800cf36:	d102      	bne.n	800cf3e <_sbrk_r+0x1a>
 800cf38:	682b      	ldr	r3, [r5, #0]
 800cf3a:	b103      	cbz	r3, 800cf3e <_sbrk_r+0x1a>
 800cf3c:	6023      	str	r3, [r4, #0]
 800cf3e:	bd38      	pop	{r3, r4, r5, pc}
 800cf40:	20002140 	.word	0x20002140

0800cf44 <__assert_func>:
 800cf44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf46:	4614      	mov	r4, r2
 800cf48:	461a      	mov	r2, r3
 800cf4a:	4b09      	ldr	r3, [pc, #36]	; (800cf70 <__assert_func+0x2c>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	4605      	mov	r5, r0
 800cf50:	68d8      	ldr	r0, [r3, #12]
 800cf52:	b14c      	cbz	r4, 800cf68 <__assert_func+0x24>
 800cf54:	4b07      	ldr	r3, [pc, #28]	; (800cf74 <__assert_func+0x30>)
 800cf56:	9100      	str	r1, [sp, #0]
 800cf58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf5c:	4906      	ldr	r1, [pc, #24]	; (800cf78 <__assert_func+0x34>)
 800cf5e:	462b      	mov	r3, r5
 800cf60:	f000 f80e 	bl	800cf80 <fiprintf>
 800cf64:	f000 faac 	bl	800d4c0 <abort>
 800cf68:	4b04      	ldr	r3, [pc, #16]	; (800cf7c <__assert_func+0x38>)
 800cf6a:	461c      	mov	r4, r3
 800cf6c:	e7f3      	b.n	800cf56 <__assert_func+0x12>
 800cf6e:	bf00      	nop
 800cf70:	20000104 	.word	0x20000104
 800cf74:	0800eeed 	.word	0x0800eeed
 800cf78:	0800eefa 	.word	0x0800eefa
 800cf7c:	0800ef28 	.word	0x0800ef28

0800cf80 <fiprintf>:
 800cf80:	b40e      	push	{r1, r2, r3}
 800cf82:	b503      	push	{r0, r1, lr}
 800cf84:	4601      	mov	r1, r0
 800cf86:	ab03      	add	r3, sp, #12
 800cf88:	4805      	ldr	r0, [pc, #20]	; (800cfa0 <fiprintf+0x20>)
 800cf8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf8e:	6800      	ldr	r0, [r0, #0]
 800cf90:	9301      	str	r3, [sp, #4]
 800cf92:	f000 f897 	bl	800d0c4 <_vfiprintf_r>
 800cf96:	b002      	add	sp, #8
 800cf98:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf9c:	b003      	add	sp, #12
 800cf9e:	4770      	bx	lr
 800cfa0:	20000104 	.word	0x20000104

0800cfa4 <__ascii_mbtowc>:
 800cfa4:	b082      	sub	sp, #8
 800cfa6:	b901      	cbnz	r1, 800cfaa <__ascii_mbtowc+0x6>
 800cfa8:	a901      	add	r1, sp, #4
 800cfaa:	b142      	cbz	r2, 800cfbe <__ascii_mbtowc+0x1a>
 800cfac:	b14b      	cbz	r3, 800cfc2 <__ascii_mbtowc+0x1e>
 800cfae:	7813      	ldrb	r3, [r2, #0]
 800cfb0:	600b      	str	r3, [r1, #0]
 800cfb2:	7812      	ldrb	r2, [r2, #0]
 800cfb4:	1e10      	subs	r0, r2, #0
 800cfb6:	bf18      	it	ne
 800cfb8:	2001      	movne	r0, #1
 800cfba:	b002      	add	sp, #8
 800cfbc:	4770      	bx	lr
 800cfbe:	4610      	mov	r0, r2
 800cfc0:	e7fb      	b.n	800cfba <__ascii_mbtowc+0x16>
 800cfc2:	f06f 0001 	mvn.w	r0, #1
 800cfc6:	e7f8      	b.n	800cfba <__ascii_mbtowc+0x16>

0800cfc8 <memmove>:
 800cfc8:	4288      	cmp	r0, r1
 800cfca:	b510      	push	{r4, lr}
 800cfcc:	eb01 0402 	add.w	r4, r1, r2
 800cfd0:	d902      	bls.n	800cfd8 <memmove+0x10>
 800cfd2:	4284      	cmp	r4, r0
 800cfd4:	4623      	mov	r3, r4
 800cfd6:	d807      	bhi.n	800cfe8 <memmove+0x20>
 800cfd8:	1e43      	subs	r3, r0, #1
 800cfda:	42a1      	cmp	r1, r4
 800cfdc:	d008      	beq.n	800cff0 <memmove+0x28>
 800cfde:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfe2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfe6:	e7f8      	b.n	800cfda <memmove+0x12>
 800cfe8:	4402      	add	r2, r0
 800cfea:	4601      	mov	r1, r0
 800cfec:	428a      	cmp	r2, r1
 800cfee:	d100      	bne.n	800cff2 <memmove+0x2a>
 800cff0:	bd10      	pop	{r4, pc}
 800cff2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cff6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cffa:	e7f7      	b.n	800cfec <memmove+0x24>

0800cffc <__malloc_lock>:
 800cffc:	4801      	ldr	r0, [pc, #4]	; (800d004 <__malloc_lock+0x8>)
 800cffe:	f000 bc1f 	b.w	800d840 <__retarget_lock_acquire_recursive>
 800d002:	bf00      	nop
 800d004:	20002144 	.word	0x20002144

0800d008 <__malloc_unlock>:
 800d008:	4801      	ldr	r0, [pc, #4]	; (800d010 <__malloc_unlock+0x8>)
 800d00a:	f000 bc1a 	b.w	800d842 <__retarget_lock_release_recursive>
 800d00e:	bf00      	nop
 800d010:	20002144 	.word	0x20002144

0800d014 <_realloc_r>:
 800d014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d018:	4680      	mov	r8, r0
 800d01a:	4614      	mov	r4, r2
 800d01c:	460e      	mov	r6, r1
 800d01e:	b921      	cbnz	r1, 800d02a <_realloc_r+0x16>
 800d020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d024:	4611      	mov	r1, r2
 800d026:	f7ff bdad 	b.w	800cb84 <_malloc_r>
 800d02a:	b92a      	cbnz	r2, 800d038 <_realloc_r+0x24>
 800d02c:	f7ff fd3e 	bl	800caac <_free_r>
 800d030:	4625      	mov	r5, r4
 800d032:	4628      	mov	r0, r5
 800d034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d038:	f000 fc6a 	bl	800d910 <_malloc_usable_size_r>
 800d03c:	4284      	cmp	r4, r0
 800d03e:	4607      	mov	r7, r0
 800d040:	d802      	bhi.n	800d048 <_realloc_r+0x34>
 800d042:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d046:	d812      	bhi.n	800d06e <_realloc_r+0x5a>
 800d048:	4621      	mov	r1, r4
 800d04a:	4640      	mov	r0, r8
 800d04c:	f7ff fd9a 	bl	800cb84 <_malloc_r>
 800d050:	4605      	mov	r5, r0
 800d052:	2800      	cmp	r0, #0
 800d054:	d0ed      	beq.n	800d032 <_realloc_r+0x1e>
 800d056:	42bc      	cmp	r4, r7
 800d058:	4622      	mov	r2, r4
 800d05a:	4631      	mov	r1, r6
 800d05c:	bf28      	it	cs
 800d05e:	463a      	movcs	r2, r7
 800d060:	f7ff f97c 	bl	800c35c <memcpy>
 800d064:	4631      	mov	r1, r6
 800d066:	4640      	mov	r0, r8
 800d068:	f7ff fd20 	bl	800caac <_free_r>
 800d06c:	e7e1      	b.n	800d032 <_realloc_r+0x1e>
 800d06e:	4635      	mov	r5, r6
 800d070:	e7df      	b.n	800d032 <_realloc_r+0x1e>

0800d072 <__sfputc_r>:
 800d072:	6893      	ldr	r3, [r2, #8]
 800d074:	3b01      	subs	r3, #1
 800d076:	2b00      	cmp	r3, #0
 800d078:	b410      	push	{r4}
 800d07a:	6093      	str	r3, [r2, #8]
 800d07c:	da08      	bge.n	800d090 <__sfputc_r+0x1e>
 800d07e:	6994      	ldr	r4, [r2, #24]
 800d080:	42a3      	cmp	r3, r4
 800d082:	db01      	blt.n	800d088 <__sfputc_r+0x16>
 800d084:	290a      	cmp	r1, #10
 800d086:	d103      	bne.n	800d090 <__sfputc_r+0x1e>
 800d088:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d08c:	f000 b94a 	b.w	800d324 <__swbuf_r>
 800d090:	6813      	ldr	r3, [r2, #0]
 800d092:	1c58      	adds	r0, r3, #1
 800d094:	6010      	str	r0, [r2, #0]
 800d096:	7019      	strb	r1, [r3, #0]
 800d098:	4608      	mov	r0, r1
 800d09a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <__sfputs_r>:
 800d0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a2:	4606      	mov	r6, r0
 800d0a4:	460f      	mov	r7, r1
 800d0a6:	4614      	mov	r4, r2
 800d0a8:	18d5      	adds	r5, r2, r3
 800d0aa:	42ac      	cmp	r4, r5
 800d0ac:	d101      	bne.n	800d0b2 <__sfputs_r+0x12>
 800d0ae:	2000      	movs	r0, #0
 800d0b0:	e007      	b.n	800d0c2 <__sfputs_r+0x22>
 800d0b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0b6:	463a      	mov	r2, r7
 800d0b8:	4630      	mov	r0, r6
 800d0ba:	f7ff ffda 	bl	800d072 <__sfputc_r>
 800d0be:	1c43      	adds	r3, r0, #1
 800d0c0:	d1f3      	bne.n	800d0aa <__sfputs_r+0xa>
 800d0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d0c4 <_vfiprintf_r>:
 800d0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c8:	460d      	mov	r5, r1
 800d0ca:	b09d      	sub	sp, #116	; 0x74
 800d0cc:	4614      	mov	r4, r2
 800d0ce:	4698      	mov	r8, r3
 800d0d0:	4606      	mov	r6, r0
 800d0d2:	b118      	cbz	r0, 800d0dc <_vfiprintf_r+0x18>
 800d0d4:	6983      	ldr	r3, [r0, #24]
 800d0d6:	b90b      	cbnz	r3, 800d0dc <_vfiprintf_r+0x18>
 800d0d8:	f000 fb14 	bl	800d704 <__sinit>
 800d0dc:	4b89      	ldr	r3, [pc, #548]	; (800d304 <_vfiprintf_r+0x240>)
 800d0de:	429d      	cmp	r5, r3
 800d0e0:	d11b      	bne.n	800d11a <_vfiprintf_r+0x56>
 800d0e2:	6875      	ldr	r5, [r6, #4]
 800d0e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0e6:	07d9      	lsls	r1, r3, #31
 800d0e8:	d405      	bmi.n	800d0f6 <_vfiprintf_r+0x32>
 800d0ea:	89ab      	ldrh	r3, [r5, #12]
 800d0ec:	059a      	lsls	r2, r3, #22
 800d0ee:	d402      	bmi.n	800d0f6 <_vfiprintf_r+0x32>
 800d0f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0f2:	f000 fba5 	bl	800d840 <__retarget_lock_acquire_recursive>
 800d0f6:	89ab      	ldrh	r3, [r5, #12]
 800d0f8:	071b      	lsls	r3, r3, #28
 800d0fa:	d501      	bpl.n	800d100 <_vfiprintf_r+0x3c>
 800d0fc:	692b      	ldr	r3, [r5, #16]
 800d0fe:	b9eb      	cbnz	r3, 800d13c <_vfiprintf_r+0x78>
 800d100:	4629      	mov	r1, r5
 800d102:	4630      	mov	r0, r6
 800d104:	f000 f96e 	bl	800d3e4 <__swsetup_r>
 800d108:	b1c0      	cbz	r0, 800d13c <_vfiprintf_r+0x78>
 800d10a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d10c:	07dc      	lsls	r4, r3, #31
 800d10e:	d50e      	bpl.n	800d12e <_vfiprintf_r+0x6a>
 800d110:	f04f 30ff 	mov.w	r0, #4294967295
 800d114:	b01d      	add	sp, #116	; 0x74
 800d116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d11a:	4b7b      	ldr	r3, [pc, #492]	; (800d308 <_vfiprintf_r+0x244>)
 800d11c:	429d      	cmp	r5, r3
 800d11e:	d101      	bne.n	800d124 <_vfiprintf_r+0x60>
 800d120:	68b5      	ldr	r5, [r6, #8]
 800d122:	e7df      	b.n	800d0e4 <_vfiprintf_r+0x20>
 800d124:	4b79      	ldr	r3, [pc, #484]	; (800d30c <_vfiprintf_r+0x248>)
 800d126:	429d      	cmp	r5, r3
 800d128:	bf08      	it	eq
 800d12a:	68f5      	ldreq	r5, [r6, #12]
 800d12c:	e7da      	b.n	800d0e4 <_vfiprintf_r+0x20>
 800d12e:	89ab      	ldrh	r3, [r5, #12]
 800d130:	0598      	lsls	r0, r3, #22
 800d132:	d4ed      	bmi.n	800d110 <_vfiprintf_r+0x4c>
 800d134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d136:	f000 fb84 	bl	800d842 <__retarget_lock_release_recursive>
 800d13a:	e7e9      	b.n	800d110 <_vfiprintf_r+0x4c>
 800d13c:	2300      	movs	r3, #0
 800d13e:	9309      	str	r3, [sp, #36]	; 0x24
 800d140:	2320      	movs	r3, #32
 800d142:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d146:	f8cd 800c 	str.w	r8, [sp, #12]
 800d14a:	2330      	movs	r3, #48	; 0x30
 800d14c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d310 <_vfiprintf_r+0x24c>
 800d150:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d154:	f04f 0901 	mov.w	r9, #1
 800d158:	4623      	mov	r3, r4
 800d15a:	469a      	mov	sl, r3
 800d15c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d160:	b10a      	cbz	r2, 800d166 <_vfiprintf_r+0xa2>
 800d162:	2a25      	cmp	r2, #37	; 0x25
 800d164:	d1f9      	bne.n	800d15a <_vfiprintf_r+0x96>
 800d166:	ebba 0b04 	subs.w	fp, sl, r4
 800d16a:	d00b      	beq.n	800d184 <_vfiprintf_r+0xc0>
 800d16c:	465b      	mov	r3, fp
 800d16e:	4622      	mov	r2, r4
 800d170:	4629      	mov	r1, r5
 800d172:	4630      	mov	r0, r6
 800d174:	f7ff ff94 	bl	800d0a0 <__sfputs_r>
 800d178:	3001      	adds	r0, #1
 800d17a:	f000 80aa 	beq.w	800d2d2 <_vfiprintf_r+0x20e>
 800d17e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d180:	445a      	add	r2, fp
 800d182:	9209      	str	r2, [sp, #36]	; 0x24
 800d184:	f89a 3000 	ldrb.w	r3, [sl]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	f000 80a2 	beq.w	800d2d2 <_vfiprintf_r+0x20e>
 800d18e:	2300      	movs	r3, #0
 800d190:	f04f 32ff 	mov.w	r2, #4294967295
 800d194:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d198:	f10a 0a01 	add.w	sl, sl, #1
 800d19c:	9304      	str	r3, [sp, #16]
 800d19e:	9307      	str	r3, [sp, #28]
 800d1a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1a4:	931a      	str	r3, [sp, #104]	; 0x68
 800d1a6:	4654      	mov	r4, sl
 800d1a8:	2205      	movs	r2, #5
 800d1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1ae:	4858      	ldr	r0, [pc, #352]	; (800d310 <_vfiprintf_r+0x24c>)
 800d1b0:	f7f3 f816 	bl	80001e0 <memchr>
 800d1b4:	9a04      	ldr	r2, [sp, #16]
 800d1b6:	b9d8      	cbnz	r0, 800d1f0 <_vfiprintf_r+0x12c>
 800d1b8:	06d1      	lsls	r1, r2, #27
 800d1ba:	bf44      	itt	mi
 800d1bc:	2320      	movmi	r3, #32
 800d1be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1c2:	0713      	lsls	r3, r2, #28
 800d1c4:	bf44      	itt	mi
 800d1c6:	232b      	movmi	r3, #43	; 0x2b
 800d1c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d1d0:	2b2a      	cmp	r3, #42	; 0x2a
 800d1d2:	d015      	beq.n	800d200 <_vfiprintf_r+0x13c>
 800d1d4:	9a07      	ldr	r2, [sp, #28]
 800d1d6:	4654      	mov	r4, sl
 800d1d8:	2000      	movs	r0, #0
 800d1da:	f04f 0c0a 	mov.w	ip, #10
 800d1de:	4621      	mov	r1, r4
 800d1e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1e4:	3b30      	subs	r3, #48	; 0x30
 800d1e6:	2b09      	cmp	r3, #9
 800d1e8:	d94e      	bls.n	800d288 <_vfiprintf_r+0x1c4>
 800d1ea:	b1b0      	cbz	r0, 800d21a <_vfiprintf_r+0x156>
 800d1ec:	9207      	str	r2, [sp, #28]
 800d1ee:	e014      	b.n	800d21a <_vfiprintf_r+0x156>
 800d1f0:	eba0 0308 	sub.w	r3, r0, r8
 800d1f4:	fa09 f303 	lsl.w	r3, r9, r3
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	9304      	str	r3, [sp, #16]
 800d1fc:	46a2      	mov	sl, r4
 800d1fe:	e7d2      	b.n	800d1a6 <_vfiprintf_r+0xe2>
 800d200:	9b03      	ldr	r3, [sp, #12]
 800d202:	1d19      	adds	r1, r3, #4
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	9103      	str	r1, [sp, #12]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	bfbb      	ittet	lt
 800d20c:	425b      	neglt	r3, r3
 800d20e:	f042 0202 	orrlt.w	r2, r2, #2
 800d212:	9307      	strge	r3, [sp, #28]
 800d214:	9307      	strlt	r3, [sp, #28]
 800d216:	bfb8      	it	lt
 800d218:	9204      	strlt	r2, [sp, #16]
 800d21a:	7823      	ldrb	r3, [r4, #0]
 800d21c:	2b2e      	cmp	r3, #46	; 0x2e
 800d21e:	d10c      	bne.n	800d23a <_vfiprintf_r+0x176>
 800d220:	7863      	ldrb	r3, [r4, #1]
 800d222:	2b2a      	cmp	r3, #42	; 0x2a
 800d224:	d135      	bne.n	800d292 <_vfiprintf_r+0x1ce>
 800d226:	9b03      	ldr	r3, [sp, #12]
 800d228:	1d1a      	adds	r2, r3, #4
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	9203      	str	r2, [sp, #12]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	bfb8      	it	lt
 800d232:	f04f 33ff 	movlt.w	r3, #4294967295
 800d236:	3402      	adds	r4, #2
 800d238:	9305      	str	r3, [sp, #20]
 800d23a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d320 <_vfiprintf_r+0x25c>
 800d23e:	7821      	ldrb	r1, [r4, #0]
 800d240:	2203      	movs	r2, #3
 800d242:	4650      	mov	r0, sl
 800d244:	f7f2 ffcc 	bl	80001e0 <memchr>
 800d248:	b140      	cbz	r0, 800d25c <_vfiprintf_r+0x198>
 800d24a:	2340      	movs	r3, #64	; 0x40
 800d24c:	eba0 000a 	sub.w	r0, r0, sl
 800d250:	fa03 f000 	lsl.w	r0, r3, r0
 800d254:	9b04      	ldr	r3, [sp, #16]
 800d256:	4303      	orrs	r3, r0
 800d258:	3401      	adds	r4, #1
 800d25a:	9304      	str	r3, [sp, #16]
 800d25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d260:	482c      	ldr	r0, [pc, #176]	; (800d314 <_vfiprintf_r+0x250>)
 800d262:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d266:	2206      	movs	r2, #6
 800d268:	f7f2 ffba 	bl	80001e0 <memchr>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	d03f      	beq.n	800d2f0 <_vfiprintf_r+0x22c>
 800d270:	4b29      	ldr	r3, [pc, #164]	; (800d318 <_vfiprintf_r+0x254>)
 800d272:	bb1b      	cbnz	r3, 800d2bc <_vfiprintf_r+0x1f8>
 800d274:	9b03      	ldr	r3, [sp, #12]
 800d276:	3307      	adds	r3, #7
 800d278:	f023 0307 	bic.w	r3, r3, #7
 800d27c:	3308      	adds	r3, #8
 800d27e:	9303      	str	r3, [sp, #12]
 800d280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d282:	443b      	add	r3, r7
 800d284:	9309      	str	r3, [sp, #36]	; 0x24
 800d286:	e767      	b.n	800d158 <_vfiprintf_r+0x94>
 800d288:	fb0c 3202 	mla	r2, ip, r2, r3
 800d28c:	460c      	mov	r4, r1
 800d28e:	2001      	movs	r0, #1
 800d290:	e7a5      	b.n	800d1de <_vfiprintf_r+0x11a>
 800d292:	2300      	movs	r3, #0
 800d294:	3401      	adds	r4, #1
 800d296:	9305      	str	r3, [sp, #20]
 800d298:	4619      	mov	r1, r3
 800d29a:	f04f 0c0a 	mov.w	ip, #10
 800d29e:	4620      	mov	r0, r4
 800d2a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2a4:	3a30      	subs	r2, #48	; 0x30
 800d2a6:	2a09      	cmp	r2, #9
 800d2a8:	d903      	bls.n	800d2b2 <_vfiprintf_r+0x1ee>
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d0c5      	beq.n	800d23a <_vfiprintf_r+0x176>
 800d2ae:	9105      	str	r1, [sp, #20]
 800d2b0:	e7c3      	b.n	800d23a <_vfiprintf_r+0x176>
 800d2b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2b6:	4604      	mov	r4, r0
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	e7f0      	b.n	800d29e <_vfiprintf_r+0x1da>
 800d2bc:	ab03      	add	r3, sp, #12
 800d2be:	9300      	str	r3, [sp, #0]
 800d2c0:	462a      	mov	r2, r5
 800d2c2:	4b16      	ldr	r3, [pc, #88]	; (800d31c <_vfiprintf_r+0x258>)
 800d2c4:	a904      	add	r1, sp, #16
 800d2c6:	4630      	mov	r0, r6
 800d2c8:	f7fd fdc4 	bl	800ae54 <_printf_float>
 800d2cc:	4607      	mov	r7, r0
 800d2ce:	1c78      	adds	r0, r7, #1
 800d2d0:	d1d6      	bne.n	800d280 <_vfiprintf_r+0x1bc>
 800d2d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2d4:	07d9      	lsls	r1, r3, #31
 800d2d6:	d405      	bmi.n	800d2e4 <_vfiprintf_r+0x220>
 800d2d8:	89ab      	ldrh	r3, [r5, #12]
 800d2da:	059a      	lsls	r2, r3, #22
 800d2dc:	d402      	bmi.n	800d2e4 <_vfiprintf_r+0x220>
 800d2de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2e0:	f000 faaf 	bl	800d842 <__retarget_lock_release_recursive>
 800d2e4:	89ab      	ldrh	r3, [r5, #12]
 800d2e6:	065b      	lsls	r3, r3, #25
 800d2e8:	f53f af12 	bmi.w	800d110 <_vfiprintf_r+0x4c>
 800d2ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2ee:	e711      	b.n	800d114 <_vfiprintf_r+0x50>
 800d2f0:	ab03      	add	r3, sp, #12
 800d2f2:	9300      	str	r3, [sp, #0]
 800d2f4:	462a      	mov	r2, r5
 800d2f6:	4b09      	ldr	r3, [pc, #36]	; (800d31c <_vfiprintf_r+0x258>)
 800d2f8:	a904      	add	r1, sp, #16
 800d2fa:	4630      	mov	r0, r6
 800d2fc:	f7fe f84e 	bl	800b39c <_printf_i>
 800d300:	e7e4      	b.n	800d2cc <_vfiprintf_r+0x208>
 800d302:	bf00      	nop
 800d304:	0800f054 	.word	0x0800f054
 800d308:	0800f074 	.word	0x0800f074
 800d30c:	0800f034 	.word	0x0800f034
 800d310:	0800eedc 	.word	0x0800eedc
 800d314:	0800eee6 	.word	0x0800eee6
 800d318:	0800ae55 	.word	0x0800ae55
 800d31c:	0800d0a1 	.word	0x0800d0a1
 800d320:	0800eee2 	.word	0x0800eee2

0800d324 <__swbuf_r>:
 800d324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d326:	460e      	mov	r6, r1
 800d328:	4614      	mov	r4, r2
 800d32a:	4605      	mov	r5, r0
 800d32c:	b118      	cbz	r0, 800d336 <__swbuf_r+0x12>
 800d32e:	6983      	ldr	r3, [r0, #24]
 800d330:	b90b      	cbnz	r3, 800d336 <__swbuf_r+0x12>
 800d332:	f000 f9e7 	bl	800d704 <__sinit>
 800d336:	4b21      	ldr	r3, [pc, #132]	; (800d3bc <__swbuf_r+0x98>)
 800d338:	429c      	cmp	r4, r3
 800d33a:	d12b      	bne.n	800d394 <__swbuf_r+0x70>
 800d33c:	686c      	ldr	r4, [r5, #4]
 800d33e:	69a3      	ldr	r3, [r4, #24]
 800d340:	60a3      	str	r3, [r4, #8]
 800d342:	89a3      	ldrh	r3, [r4, #12]
 800d344:	071a      	lsls	r2, r3, #28
 800d346:	d52f      	bpl.n	800d3a8 <__swbuf_r+0x84>
 800d348:	6923      	ldr	r3, [r4, #16]
 800d34a:	b36b      	cbz	r3, 800d3a8 <__swbuf_r+0x84>
 800d34c:	6923      	ldr	r3, [r4, #16]
 800d34e:	6820      	ldr	r0, [r4, #0]
 800d350:	1ac0      	subs	r0, r0, r3
 800d352:	6963      	ldr	r3, [r4, #20]
 800d354:	b2f6      	uxtb	r6, r6
 800d356:	4283      	cmp	r3, r0
 800d358:	4637      	mov	r7, r6
 800d35a:	dc04      	bgt.n	800d366 <__swbuf_r+0x42>
 800d35c:	4621      	mov	r1, r4
 800d35e:	4628      	mov	r0, r5
 800d360:	f000 f93c 	bl	800d5dc <_fflush_r>
 800d364:	bb30      	cbnz	r0, 800d3b4 <__swbuf_r+0x90>
 800d366:	68a3      	ldr	r3, [r4, #8]
 800d368:	3b01      	subs	r3, #1
 800d36a:	60a3      	str	r3, [r4, #8]
 800d36c:	6823      	ldr	r3, [r4, #0]
 800d36e:	1c5a      	adds	r2, r3, #1
 800d370:	6022      	str	r2, [r4, #0]
 800d372:	701e      	strb	r6, [r3, #0]
 800d374:	6963      	ldr	r3, [r4, #20]
 800d376:	3001      	adds	r0, #1
 800d378:	4283      	cmp	r3, r0
 800d37a:	d004      	beq.n	800d386 <__swbuf_r+0x62>
 800d37c:	89a3      	ldrh	r3, [r4, #12]
 800d37e:	07db      	lsls	r3, r3, #31
 800d380:	d506      	bpl.n	800d390 <__swbuf_r+0x6c>
 800d382:	2e0a      	cmp	r6, #10
 800d384:	d104      	bne.n	800d390 <__swbuf_r+0x6c>
 800d386:	4621      	mov	r1, r4
 800d388:	4628      	mov	r0, r5
 800d38a:	f000 f927 	bl	800d5dc <_fflush_r>
 800d38e:	b988      	cbnz	r0, 800d3b4 <__swbuf_r+0x90>
 800d390:	4638      	mov	r0, r7
 800d392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d394:	4b0a      	ldr	r3, [pc, #40]	; (800d3c0 <__swbuf_r+0x9c>)
 800d396:	429c      	cmp	r4, r3
 800d398:	d101      	bne.n	800d39e <__swbuf_r+0x7a>
 800d39a:	68ac      	ldr	r4, [r5, #8]
 800d39c:	e7cf      	b.n	800d33e <__swbuf_r+0x1a>
 800d39e:	4b09      	ldr	r3, [pc, #36]	; (800d3c4 <__swbuf_r+0xa0>)
 800d3a0:	429c      	cmp	r4, r3
 800d3a2:	bf08      	it	eq
 800d3a4:	68ec      	ldreq	r4, [r5, #12]
 800d3a6:	e7ca      	b.n	800d33e <__swbuf_r+0x1a>
 800d3a8:	4621      	mov	r1, r4
 800d3aa:	4628      	mov	r0, r5
 800d3ac:	f000 f81a 	bl	800d3e4 <__swsetup_r>
 800d3b0:	2800      	cmp	r0, #0
 800d3b2:	d0cb      	beq.n	800d34c <__swbuf_r+0x28>
 800d3b4:	f04f 37ff 	mov.w	r7, #4294967295
 800d3b8:	e7ea      	b.n	800d390 <__swbuf_r+0x6c>
 800d3ba:	bf00      	nop
 800d3bc:	0800f054 	.word	0x0800f054
 800d3c0:	0800f074 	.word	0x0800f074
 800d3c4:	0800f034 	.word	0x0800f034

0800d3c8 <__ascii_wctomb>:
 800d3c8:	b149      	cbz	r1, 800d3de <__ascii_wctomb+0x16>
 800d3ca:	2aff      	cmp	r2, #255	; 0xff
 800d3cc:	bf85      	ittet	hi
 800d3ce:	238a      	movhi	r3, #138	; 0x8a
 800d3d0:	6003      	strhi	r3, [r0, #0]
 800d3d2:	700a      	strbls	r2, [r1, #0]
 800d3d4:	f04f 30ff 	movhi.w	r0, #4294967295
 800d3d8:	bf98      	it	ls
 800d3da:	2001      	movls	r0, #1
 800d3dc:	4770      	bx	lr
 800d3de:	4608      	mov	r0, r1
 800d3e0:	4770      	bx	lr
	...

0800d3e4 <__swsetup_r>:
 800d3e4:	4b32      	ldr	r3, [pc, #200]	; (800d4b0 <__swsetup_r+0xcc>)
 800d3e6:	b570      	push	{r4, r5, r6, lr}
 800d3e8:	681d      	ldr	r5, [r3, #0]
 800d3ea:	4606      	mov	r6, r0
 800d3ec:	460c      	mov	r4, r1
 800d3ee:	b125      	cbz	r5, 800d3fa <__swsetup_r+0x16>
 800d3f0:	69ab      	ldr	r3, [r5, #24]
 800d3f2:	b913      	cbnz	r3, 800d3fa <__swsetup_r+0x16>
 800d3f4:	4628      	mov	r0, r5
 800d3f6:	f000 f985 	bl	800d704 <__sinit>
 800d3fa:	4b2e      	ldr	r3, [pc, #184]	; (800d4b4 <__swsetup_r+0xd0>)
 800d3fc:	429c      	cmp	r4, r3
 800d3fe:	d10f      	bne.n	800d420 <__swsetup_r+0x3c>
 800d400:	686c      	ldr	r4, [r5, #4]
 800d402:	89a3      	ldrh	r3, [r4, #12]
 800d404:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d408:	0719      	lsls	r1, r3, #28
 800d40a:	d42c      	bmi.n	800d466 <__swsetup_r+0x82>
 800d40c:	06dd      	lsls	r5, r3, #27
 800d40e:	d411      	bmi.n	800d434 <__swsetup_r+0x50>
 800d410:	2309      	movs	r3, #9
 800d412:	6033      	str	r3, [r6, #0]
 800d414:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d418:	81a3      	strh	r3, [r4, #12]
 800d41a:	f04f 30ff 	mov.w	r0, #4294967295
 800d41e:	e03e      	b.n	800d49e <__swsetup_r+0xba>
 800d420:	4b25      	ldr	r3, [pc, #148]	; (800d4b8 <__swsetup_r+0xd4>)
 800d422:	429c      	cmp	r4, r3
 800d424:	d101      	bne.n	800d42a <__swsetup_r+0x46>
 800d426:	68ac      	ldr	r4, [r5, #8]
 800d428:	e7eb      	b.n	800d402 <__swsetup_r+0x1e>
 800d42a:	4b24      	ldr	r3, [pc, #144]	; (800d4bc <__swsetup_r+0xd8>)
 800d42c:	429c      	cmp	r4, r3
 800d42e:	bf08      	it	eq
 800d430:	68ec      	ldreq	r4, [r5, #12]
 800d432:	e7e6      	b.n	800d402 <__swsetup_r+0x1e>
 800d434:	0758      	lsls	r0, r3, #29
 800d436:	d512      	bpl.n	800d45e <__swsetup_r+0x7a>
 800d438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d43a:	b141      	cbz	r1, 800d44e <__swsetup_r+0x6a>
 800d43c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d440:	4299      	cmp	r1, r3
 800d442:	d002      	beq.n	800d44a <__swsetup_r+0x66>
 800d444:	4630      	mov	r0, r6
 800d446:	f7ff fb31 	bl	800caac <_free_r>
 800d44a:	2300      	movs	r3, #0
 800d44c:	6363      	str	r3, [r4, #52]	; 0x34
 800d44e:	89a3      	ldrh	r3, [r4, #12]
 800d450:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d454:	81a3      	strh	r3, [r4, #12]
 800d456:	2300      	movs	r3, #0
 800d458:	6063      	str	r3, [r4, #4]
 800d45a:	6923      	ldr	r3, [r4, #16]
 800d45c:	6023      	str	r3, [r4, #0]
 800d45e:	89a3      	ldrh	r3, [r4, #12]
 800d460:	f043 0308 	orr.w	r3, r3, #8
 800d464:	81a3      	strh	r3, [r4, #12]
 800d466:	6923      	ldr	r3, [r4, #16]
 800d468:	b94b      	cbnz	r3, 800d47e <__swsetup_r+0x9a>
 800d46a:	89a3      	ldrh	r3, [r4, #12]
 800d46c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d474:	d003      	beq.n	800d47e <__swsetup_r+0x9a>
 800d476:	4621      	mov	r1, r4
 800d478:	4630      	mov	r0, r6
 800d47a:	f000 fa09 	bl	800d890 <__smakebuf_r>
 800d47e:	89a0      	ldrh	r0, [r4, #12]
 800d480:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d484:	f010 0301 	ands.w	r3, r0, #1
 800d488:	d00a      	beq.n	800d4a0 <__swsetup_r+0xbc>
 800d48a:	2300      	movs	r3, #0
 800d48c:	60a3      	str	r3, [r4, #8]
 800d48e:	6963      	ldr	r3, [r4, #20]
 800d490:	425b      	negs	r3, r3
 800d492:	61a3      	str	r3, [r4, #24]
 800d494:	6923      	ldr	r3, [r4, #16]
 800d496:	b943      	cbnz	r3, 800d4aa <__swsetup_r+0xc6>
 800d498:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d49c:	d1ba      	bne.n	800d414 <__swsetup_r+0x30>
 800d49e:	bd70      	pop	{r4, r5, r6, pc}
 800d4a0:	0781      	lsls	r1, r0, #30
 800d4a2:	bf58      	it	pl
 800d4a4:	6963      	ldrpl	r3, [r4, #20]
 800d4a6:	60a3      	str	r3, [r4, #8]
 800d4a8:	e7f4      	b.n	800d494 <__swsetup_r+0xb0>
 800d4aa:	2000      	movs	r0, #0
 800d4ac:	e7f7      	b.n	800d49e <__swsetup_r+0xba>
 800d4ae:	bf00      	nop
 800d4b0:	20000104 	.word	0x20000104
 800d4b4:	0800f054 	.word	0x0800f054
 800d4b8:	0800f074 	.word	0x0800f074
 800d4bc:	0800f034 	.word	0x0800f034

0800d4c0 <abort>:
 800d4c0:	b508      	push	{r3, lr}
 800d4c2:	2006      	movs	r0, #6
 800d4c4:	f000 fa54 	bl	800d970 <raise>
 800d4c8:	2001      	movs	r0, #1
 800d4ca:	f7f4 fe5d 	bl	8002188 <_exit>
	...

0800d4d0 <__sflush_r>:
 800d4d0:	898a      	ldrh	r2, [r1, #12]
 800d4d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d6:	4605      	mov	r5, r0
 800d4d8:	0710      	lsls	r0, r2, #28
 800d4da:	460c      	mov	r4, r1
 800d4dc:	d458      	bmi.n	800d590 <__sflush_r+0xc0>
 800d4de:	684b      	ldr	r3, [r1, #4]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	dc05      	bgt.n	800d4f0 <__sflush_r+0x20>
 800d4e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	dc02      	bgt.n	800d4f0 <__sflush_r+0x20>
 800d4ea:	2000      	movs	r0, #0
 800d4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d4f2:	2e00      	cmp	r6, #0
 800d4f4:	d0f9      	beq.n	800d4ea <__sflush_r+0x1a>
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d4fc:	682f      	ldr	r7, [r5, #0]
 800d4fe:	602b      	str	r3, [r5, #0]
 800d500:	d032      	beq.n	800d568 <__sflush_r+0x98>
 800d502:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d504:	89a3      	ldrh	r3, [r4, #12]
 800d506:	075a      	lsls	r2, r3, #29
 800d508:	d505      	bpl.n	800d516 <__sflush_r+0x46>
 800d50a:	6863      	ldr	r3, [r4, #4]
 800d50c:	1ac0      	subs	r0, r0, r3
 800d50e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d510:	b10b      	cbz	r3, 800d516 <__sflush_r+0x46>
 800d512:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d514:	1ac0      	subs	r0, r0, r3
 800d516:	2300      	movs	r3, #0
 800d518:	4602      	mov	r2, r0
 800d51a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d51c:	6a21      	ldr	r1, [r4, #32]
 800d51e:	4628      	mov	r0, r5
 800d520:	47b0      	blx	r6
 800d522:	1c43      	adds	r3, r0, #1
 800d524:	89a3      	ldrh	r3, [r4, #12]
 800d526:	d106      	bne.n	800d536 <__sflush_r+0x66>
 800d528:	6829      	ldr	r1, [r5, #0]
 800d52a:	291d      	cmp	r1, #29
 800d52c:	d82c      	bhi.n	800d588 <__sflush_r+0xb8>
 800d52e:	4a2a      	ldr	r2, [pc, #168]	; (800d5d8 <__sflush_r+0x108>)
 800d530:	40ca      	lsrs	r2, r1
 800d532:	07d6      	lsls	r6, r2, #31
 800d534:	d528      	bpl.n	800d588 <__sflush_r+0xb8>
 800d536:	2200      	movs	r2, #0
 800d538:	6062      	str	r2, [r4, #4]
 800d53a:	04d9      	lsls	r1, r3, #19
 800d53c:	6922      	ldr	r2, [r4, #16]
 800d53e:	6022      	str	r2, [r4, #0]
 800d540:	d504      	bpl.n	800d54c <__sflush_r+0x7c>
 800d542:	1c42      	adds	r2, r0, #1
 800d544:	d101      	bne.n	800d54a <__sflush_r+0x7a>
 800d546:	682b      	ldr	r3, [r5, #0]
 800d548:	b903      	cbnz	r3, 800d54c <__sflush_r+0x7c>
 800d54a:	6560      	str	r0, [r4, #84]	; 0x54
 800d54c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d54e:	602f      	str	r7, [r5, #0]
 800d550:	2900      	cmp	r1, #0
 800d552:	d0ca      	beq.n	800d4ea <__sflush_r+0x1a>
 800d554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d558:	4299      	cmp	r1, r3
 800d55a:	d002      	beq.n	800d562 <__sflush_r+0x92>
 800d55c:	4628      	mov	r0, r5
 800d55e:	f7ff faa5 	bl	800caac <_free_r>
 800d562:	2000      	movs	r0, #0
 800d564:	6360      	str	r0, [r4, #52]	; 0x34
 800d566:	e7c1      	b.n	800d4ec <__sflush_r+0x1c>
 800d568:	6a21      	ldr	r1, [r4, #32]
 800d56a:	2301      	movs	r3, #1
 800d56c:	4628      	mov	r0, r5
 800d56e:	47b0      	blx	r6
 800d570:	1c41      	adds	r1, r0, #1
 800d572:	d1c7      	bne.n	800d504 <__sflush_r+0x34>
 800d574:	682b      	ldr	r3, [r5, #0]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d0c4      	beq.n	800d504 <__sflush_r+0x34>
 800d57a:	2b1d      	cmp	r3, #29
 800d57c:	d001      	beq.n	800d582 <__sflush_r+0xb2>
 800d57e:	2b16      	cmp	r3, #22
 800d580:	d101      	bne.n	800d586 <__sflush_r+0xb6>
 800d582:	602f      	str	r7, [r5, #0]
 800d584:	e7b1      	b.n	800d4ea <__sflush_r+0x1a>
 800d586:	89a3      	ldrh	r3, [r4, #12]
 800d588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d58c:	81a3      	strh	r3, [r4, #12]
 800d58e:	e7ad      	b.n	800d4ec <__sflush_r+0x1c>
 800d590:	690f      	ldr	r7, [r1, #16]
 800d592:	2f00      	cmp	r7, #0
 800d594:	d0a9      	beq.n	800d4ea <__sflush_r+0x1a>
 800d596:	0793      	lsls	r3, r2, #30
 800d598:	680e      	ldr	r6, [r1, #0]
 800d59a:	bf08      	it	eq
 800d59c:	694b      	ldreq	r3, [r1, #20]
 800d59e:	600f      	str	r7, [r1, #0]
 800d5a0:	bf18      	it	ne
 800d5a2:	2300      	movne	r3, #0
 800d5a4:	eba6 0807 	sub.w	r8, r6, r7
 800d5a8:	608b      	str	r3, [r1, #8]
 800d5aa:	f1b8 0f00 	cmp.w	r8, #0
 800d5ae:	dd9c      	ble.n	800d4ea <__sflush_r+0x1a>
 800d5b0:	6a21      	ldr	r1, [r4, #32]
 800d5b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d5b4:	4643      	mov	r3, r8
 800d5b6:	463a      	mov	r2, r7
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	47b0      	blx	r6
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	dc06      	bgt.n	800d5ce <__sflush_r+0xfe>
 800d5c0:	89a3      	ldrh	r3, [r4, #12]
 800d5c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5c6:	81a3      	strh	r3, [r4, #12]
 800d5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5cc:	e78e      	b.n	800d4ec <__sflush_r+0x1c>
 800d5ce:	4407      	add	r7, r0
 800d5d0:	eba8 0800 	sub.w	r8, r8, r0
 800d5d4:	e7e9      	b.n	800d5aa <__sflush_r+0xda>
 800d5d6:	bf00      	nop
 800d5d8:	20400001 	.word	0x20400001

0800d5dc <_fflush_r>:
 800d5dc:	b538      	push	{r3, r4, r5, lr}
 800d5de:	690b      	ldr	r3, [r1, #16]
 800d5e0:	4605      	mov	r5, r0
 800d5e2:	460c      	mov	r4, r1
 800d5e4:	b913      	cbnz	r3, 800d5ec <_fflush_r+0x10>
 800d5e6:	2500      	movs	r5, #0
 800d5e8:	4628      	mov	r0, r5
 800d5ea:	bd38      	pop	{r3, r4, r5, pc}
 800d5ec:	b118      	cbz	r0, 800d5f6 <_fflush_r+0x1a>
 800d5ee:	6983      	ldr	r3, [r0, #24]
 800d5f0:	b90b      	cbnz	r3, 800d5f6 <_fflush_r+0x1a>
 800d5f2:	f000 f887 	bl	800d704 <__sinit>
 800d5f6:	4b14      	ldr	r3, [pc, #80]	; (800d648 <_fflush_r+0x6c>)
 800d5f8:	429c      	cmp	r4, r3
 800d5fa:	d11b      	bne.n	800d634 <_fflush_r+0x58>
 800d5fc:	686c      	ldr	r4, [r5, #4]
 800d5fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d0ef      	beq.n	800d5e6 <_fflush_r+0xa>
 800d606:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d608:	07d0      	lsls	r0, r2, #31
 800d60a:	d404      	bmi.n	800d616 <_fflush_r+0x3a>
 800d60c:	0599      	lsls	r1, r3, #22
 800d60e:	d402      	bmi.n	800d616 <_fflush_r+0x3a>
 800d610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d612:	f000 f915 	bl	800d840 <__retarget_lock_acquire_recursive>
 800d616:	4628      	mov	r0, r5
 800d618:	4621      	mov	r1, r4
 800d61a:	f7ff ff59 	bl	800d4d0 <__sflush_r>
 800d61e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d620:	07da      	lsls	r2, r3, #31
 800d622:	4605      	mov	r5, r0
 800d624:	d4e0      	bmi.n	800d5e8 <_fflush_r+0xc>
 800d626:	89a3      	ldrh	r3, [r4, #12]
 800d628:	059b      	lsls	r3, r3, #22
 800d62a:	d4dd      	bmi.n	800d5e8 <_fflush_r+0xc>
 800d62c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d62e:	f000 f908 	bl	800d842 <__retarget_lock_release_recursive>
 800d632:	e7d9      	b.n	800d5e8 <_fflush_r+0xc>
 800d634:	4b05      	ldr	r3, [pc, #20]	; (800d64c <_fflush_r+0x70>)
 800d636:	429c      	cmp	r4, r3
 800d638:	d101      	bne.n	800d63e <_fflush_r+0x62>
 800d63a:	68ac      	ldr	r4, [r5, #8]
 800d63c:	e7df      	b.n	800d5fe <_fflush_r+0x22>
 800d63e:	4b04      	ldr	r3, [pc, #16]	; (800d650 <_fflush_r+0x74>)
 800d640:	429c      	cmp	r4, r3
 800d642:	bf08      	it	eq
 800d644:	68ec      	ldreq	r4, [r5, #12]
 800d646:	e7da      	b.n	800d5fe <_fflush_r+0x22>
 800d648:	0800f054 	.word	0x0800f054
 800d64c:	0800f074 	.word	0x0800f074
 800d650:	0800f034 	.word	0x0800f034

0800d654 <std>:
 800d654:	2300      	movs	r3, #0
 800d656:	b510      	push	{r4, lr}
 800d658:	4604      	mov	r4, r0
 800d65a:	e9c0 3300 	strd	r3, r3, [r0]
 800d65e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d662:	6083      	str	r3, [r0, #8]
 800d664:	8181      	strh	r1, [r0, #12]
 800d666:	6643      	str	r3, [r0, #100]	; 0x64
 800d668:	81c2      	strh	r2, [r0, #14]
 800d66a:	6183      	str	r3, [r0, #24]
 800d66c:	4619      	mov	r1, r3
 800d66e:	2208      	movs	r2, #8
 800d670:	305c      	adds	r0, #92	; 0x5c
 800d672:	f7fd fb47 	bl	800ad04 <memset>
 800d676:	4b05      	ldr	r3, [pc, #20]	; (800d68c <std+0x38>)
 800d678:	6263      	str	r3, [r4, #36]	; 0x24
 800d67a:	4b05      	ldr	r3, [pc, #20]	; (800d690 <std+0x3c>)
 800d67c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d67e:	4b05      	ldr	r3, [pc, #20]	; (800d694 <std+0x40>)
 800d680:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d682:	4b05      	ldr	r3, [pc, #20]	; (800d698 <std+0x44>)
 800d684:	6224      	str	r4, [r4, #32]
 800d686:	6323      	str	r3, [r4, #48]	; 0x30
 800d688:	bd10      	pop	{r4, pc}
 800d68a:	bf00      	nop
 800d68c:	0800d9a9 	.word	0x0800d9a9
 800d690:	0800d9cb 	.word	0x0800d9cb
 800d694:	0800da03 	.word	0x0800da03
 800d698:	0800da27 	.word	0x0800da27

0800d69c <_cleanup_r>:
 800d69c:	4901      	ldr	r1, [pc, #4]	; (800d6a4 <_cleanup_r+0x8>)
 800d69e:	f000 b8af 	b.w	800d800 <_fwalk_reent>
 800d6a2:	bf00      	nop
 800d6a4:	0800d5dd 	.word	0x0800d5dd

0800d6a8 <__sfmoreglue>:
 800d6a8:	b570      	push	{r4, r5, r6, lr}
 800d6aa:	2268      	movs	r2, #104	; 0x68
 800d6ac:	1e4d      	subs	r5, r1, #1
 800d6ae:	4355      	muls	r5, r2
 800d6b0:	460e      	mov	r6, r1
 800d6b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d6b6:	f7ff fa65 	bl	800cb84 <_malloc_r>
 800d6ba:	4604      	mov	r4, r0
 800d6bc:	b140      	cbz	r0, 800d6d0 <__sfmoreglue+0x28>
 800d6be:	2100      	movs	r1, #0
 800d6c0:	e9c0 1600 	strd	r1, r6, [r0]
 800d6c4:	300c      	adds	r0, #12
 800d6c6:	60a0      	str	r0, [r4, #8]
 800d6c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d6cc:	f7fd fb1a 	bl	800ad04 <memset>
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	bd70      	pop	{r4, r5, r6, pc}

0800d6d4 <__sfp_lock_acquire>:
 800d6d4:	4801      	ldr	r0, [pc, #4]	; (800d6dc <__sfp_lock_acquire+0x8>)
 800d6d6:	f000 b8b3 	b.w	800d840 <__retarget_lock_acquire_recursive>
 800d6da:	bf00      	nop
 800d6dc:	20002145 	.word	0x20002145

0800d6e0 <__sfp_lock_release>:
 800d6e0:	4801      	ldr	r0, [pc, #4]	; (800d6e8 <__sfp_lock_release+0x8>)
 800d6e2:	f000 b8ae 	b.w	800d842 <__retarget_lock_release_recursive>
 800d6e6:	bf00      	nop
 800d6e8:	20002145 	.word	0x20002145

0800d6ec <__sinit_lock_acquire>:
 800d6ec:	4801      	ldr	r0, [pc, #4]	; (800d6f4 <__sinit_lock_acquire+0x8>)
 800d6ee:	f000 b8a7 	b.w	800d840 <__retarget_lock_acquire_recursive>
 800d6f2:	bf00      	nop
 800d6f4:	20002146 	.word	0x20002146

0800d6f8 <__sinit_lock_release>:
 800d6f8:	4801      	ldr	r0, [pc, #4]	; (800d700 <__sinit_lock_release+0x8>)
 800d6fa:	f000 b8a2 	b.w	800d842 <__retarget_lock_release_recursive>
 800d6fe:	bf00      	nop
 800d700:	20002146 	.word	0x20002146

0800d704 <__sinit>:
 800d704:	b510      	push	{r4, lr}
 800d706:	4604      	mov	r4, r0
 800d708:	f7ff fff0 	bl	800d6ec <__sinit_lock_acquire>
 800d70c:	69a3      	ldr	r3, [r4, #24]
 800d70e:	b11b      	cbz	r3, 800d718 <__sinit+0x14>
 800d710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d714:	f7ff bff0 	b.w	800d6f8 <__sinit_lock_release>
 800d718:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d71c:	6523      	str	r3, [r4, #80]	; 0x50
 800d71e:	4b13      	ldr	r3, [pc, #76]	; (800d76c <__sinit+0x68>)
 800d720:	4a13      	ldr	r2, [pc, #76]	; (800d770 <__sinit+0x6c>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	62a2      	str	r2, [r4, #40]	; 0x28
 800d726:	42a3      	cmp	r3, r4
 800d728:	bf04      	itt	eq
 800d72a:	2301      	moveq	r3, #1
 800d72c:	61a3      	streq	r3, [r4, #24]
 800d72e:	4620      	mov	r0, r4
 800d730:	f000 f820 	bl	800d774 <__sfp>
 800d734:	6060      	str	r0, [r4, #4]
 800d736:	4620      	mov	r0, r4
 800d738:	f000 f81c 	bl	800d774 <__sfp>
 800d73c:	60a0      	str	r0, [r4, #8]
 800d73e:	4620      	mov	r0, r4
 800d740:	f000 f818 	bl	800d774 <__sfp>
 800d744:	2200      	movs	r2, #0
 800d746:	60e0      	str	r0, [r4, #12]
 800d748:	2104      	movs	r1, #4
 800d74a:	6860      	ldr	r0, [r4, #4]
 800d74c:	f7ff ff82 	bl	800d654 <std>
 800d750:	68a0      	ldr	r0, [r4, #8]
 800d752:	2201      	movs	r2, #1
 800d754:	2109      	movs	r1, #9
 800d756:	f7ff ff7d 	bl	800d654 <std>
 800d75a:	68e0      	ldr	r0, [r4, #12]
 800d75c:	2202      	movs	r2, #2
 800d75e:	2112      	movs	r1, #18
 800d760:	f7ff ff78 	bl	800d654 <std>
 800d764:	2301      	movs	r3, #1
 800d766:	61a3      	str	r3, [r4, #24]
 800d768:	e7d2      	b.n	800d710 <__sinit+0xc>
 800d76a:	bf00      	nop
 800d76c:	0800ecbc 	.word	0x0800ecbc
 800d770:	0800d69d 	.word	0x0800d69d

0800d774 <__sfp>:
 800d774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d776:	4607      	mov	r7, r0
 800d778:	f7ff ffac 	bl	800d6d4 <__sfp_lock_acquire>
 800d77c:	4b1e      	ldr	r3, [pc, #120]	; (800d7f8 <__sfp+0x84>)
 800d77e:	681e      	ldr	r6, [r3, #0]
 800d780:	69b3      	ldr	r3, [r6, #24]
 800d782:	b913      	cbnz	r3, 800d78a <__sfp+0x16>
 800d784:	4630      	mov	r0, r6
 800d786:	f7ff ffbd 	bl	800d704 <__sinit>
 800d78a:	3648      	adds	r6, #72	; 0x48
 800d78c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d790:	3b01      	subs	r3, #1
 800d792:	d503      	bpl.n	800d79c <__sfp+0x28>
 800d794:	6833      	ldr	r3, [r6, #0]
 800d796:	b30b      	cbz	r3, 800d7dc <__sfp+0x68>
 800d798:	6836      	ldr	r6, [r6, #0]
 800d79a:	e7f7      	b.n	800d78c <__sfp+0x18>
 800d79c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d7a0:	b9d5      	cbnz	r5, 800d7d8 <__sfp+0x64>
 800d7a2:	4b16      	ldr	r3, [pc, #88]	; (800d7fc <__sfp+0x88>)
 800d7a4:	60e3      	str	r3, [r4, #12]
 800d7a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d7aa:	6665      	str	r5, [r4, #100]	; 0x64
 800d7ac:	f000 f847 	bl	800d83e <__retarget_lock_init_recursive>
 800d7b0:	f7ff ff96 	bl	800d6e0 <__sfp_lock_release>
 800d7b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d7b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d7bc:	6025      	str	r5, [r4, #0]
 800d7be:	61a5      	str	r5, [r4, #24]
 800d7c0:	2208      	movs	r2, #8
 800d7c2:	4629      	mov	r1, r5
 800d7c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d7c8:	f7fd fa9c 	bl	800ad04 <memset>
 800d7cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d7d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d7d4:	4620      	mov	r0, r4
 800d7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7d8:	3468      	adds	r4, #104	; 0x68
 800d7da:	e7d9      	b.n	800d790 <__sfp+0x1c>
 800d7dc:	2104      	movs	r1, #4
 800d7de:	4638      	mov	r0, r7
 800d7e0:	f7ff ff62 	bl	800d6a8 <__sfmoreglue>
 800d7e4:	4604      	mov	r4, r0
 800d7e6:	6030      	str	r0, [r6, #0]
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	d1d5      	bne.n	800d798 <__sfp+0x24>
 800d7ec:	f7ff ff78 	bl	800d6e0 <__sfp_lock_release>
 800d7f0:	230c      	movs	r3, #12
 800d7f2:	603b      	str	r3, [r7, #0]
 800d7f4:	e7ee      	b.n	800d7d4 <__sfp+0x60>
 800d7f6:	bf00      	nop
 800d7f8:	0800ecbc 	.word	0x0800ecbc
 800d7fc:	ffff0001 	.word	0xffff0001

0800d800 <_fwalk_reent>:
 800d800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d804:	4606      	mov	r6, r0
 800d806:	4688      	mov	r8, r1
 800d808:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d80c:	2700      	movs	r7, #0
 800d80e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d812:	f1b9 0901 	subs.w	r9, r9, #1
 800d816:	d505      	bpl.n	800d824 <_fwalk_reent+0x24>
 800d818:	6824      	ldr	r4, [r4, #0]
 800d81a:	2c00      	cmp	r4, #0
 800d81c:	d1f7      	bne.n	800d80e <_fwalk_reent+0xe>
 800d81e:	4638      	mov	r0, r7
 800d820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d824:	89ab      	ldrh	r3, [r5, #12]
 800d826:	2b01      	cmp	r3, #1
 800d828:	d907      	bls.n	800d83a <_fwalk_reent+0x3a>
 800d82a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d82e:	3301      	adds	r3, #1
 800d830:	d003      	beq.n	800d83a <_fwalk_reent+0x3a>
 800d832:	4629      	mov	r1, r5
 800d834:	4630      	mov	r0, r6
 800d836:	47c0      	blx	r8
 800d838:	4307      	orrs	r7, r0
 800d83a:	3568      	adds	r5, #104	; 0x68
 800d83c:	e7e9      	b.n	800d812 <_fwalk_reent+0x12>

0800d83e <__retarget_lock_init_recursive>:
 800d83e:	4770      	bx	lr

0800d840 <__retarget_lock_acquire_recursive>:
 800d840:	4770      	bx	lr

0800d842 <__retarget_lock_release_recursive>:
 800d842:	4770      	bx	lr

0800d844 <__swhatbuf_r>:
 800d844:	b570      	push	{r4, r5, r6, lr}
 800d846:	460e      	mov	r6, r1
 800d848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d84c:	2900      	cmp	r1, #0
 800d84e:	b096      	sub	sp, #88	; 0x58
 800d850:	4614      	mov	r4, r2
 800d852:	461d      	mov	r5, r3
 800d854:	da08      	bge.n	800d868 <__swhatbuf_r+0x24>
 800d856:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d85a:	2200      	movs	r2, #0
 800d85c:	602a      	str	r2, [r5, #0]
 800d85e:	061a      	lsls	r2, r3, #24
 800d860:	d410      	bmi.n	800d884 <__swhatbuf_r+0x40>
 800d862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d866:	e00e      	b.n	800d886 <__swhatbuf_r+0x42>
 800d868:	466a      	mov	r2, sp
 800d86a:	f000 f903 	bl	800da74 <_fstat_r>
 800d86e:	2800      	cmp	r0, #0
 800d870:	dbf1      	blt.n	800d856 <__swhatbuf_r+0x12>
 800d872:	9a01      	ldr	r2, [sp, #4]
 800d874:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d878:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d87c:	425a      	negs	r2, r3
 800d87e:	415a      	adcs	r2, r3
 800d880:	602a      	str	r2, [r5, #0]
 800d882:	e7ee      	b.n	800d862 <__swhatbuf_r+0x1e>
 800d884:	2340      	movs	r3, #64	; 0x40
 800d886:	2000      	movs	r0, #0
 800d888:	6023      	str	r3, [r4, #0]
 800d88a:	b016      	add	sp, #88	; 0x58
 800d88c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d890 <__smakebuf_r>:
 800d890:	898b      	ldrh	r3, [r1, #12]
 800d892:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d894:	079d      	lsls	r5, r3, #30
 800d896:	4606      	mov	r6, r0
 800d898:	460c      	mov	r4, r1
 800d89a:	d507      	bpl.n	800d8ac <__smakebuf_r+0x1c>
 800d89c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d8a0:	6023      	str	r3, [r4, #0]
 800d8a2:	6123      	str	r3, [r4, #16]
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	6163      	str	r3, [r4, #20]
 800d8a8:	b002      	add	sp, #8
 800d8aa:	bd70      	pop	{r4, r5, r6, pc}
 800d8ac:	ab01      	add	r3, sp, #4
 800d8ae:	466a      	mov	r2, sp
 800d8b0:	f7ff ffc8 	bl	800d844 <__swhatbuf_r>
 800d8b4:	9900      	ldr	r1, [sp, #0]
 800d8b6:	4605      	mov	r5, r0
 800d8b8:	4630      	mov	r0, r6
 800d8ba:	f7ff f963 	bl	800cb84 <_malloc_r>
 800d8be:	b948      	cbnz	r0, 800d8d4 <__smakebuf_r+0x44>
 800d8c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8c4:	059a      	lsls	r2, r3, #22
 800d8c6:	d4ef      	bmi.n	800d8a8 <__smakebuf_r+0x18>
 800d8c8:	f023 0303 	bic.w	r3, r3, #3
 800d8cc:	f043 0302 	orr.w	r3, r3, #2
 800d8d0:	81a3      	strh	r3, [r4, #12]
 800d8d2:	e7e3      	b.n	800d89c <__smakebuf_r+0xc>
 800d8d4:	4b0d      	ldr	r3, [pc, #52]	; (800d90c <__smakebuf_r+0x7c>)
 800d8d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d8d8:	89a3      	ldrh	r3, [r4, #12]
 800d8da:	6020      	str	r0, [r4, #0]
 800d8dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8e0:	81a3      	strh	r3, [r4, #12]
 800d8e2:	9b00      	ldr	r3, [sp, #0]
 800d8e4:	6163      	str	r3, [r4, #20]
 800d8e6:	9b01      	ldr	r3, [sp, #4]
 800d8e8:	6120      	str	r0, [r4, #16]
 800d8ea:	b15b      	cbz	r3, 800d904 <__smakebuf_r+0x74>
 800d8ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8f0:	4630      	mov	r0, r6
 800d8f2:	f000 f8d1 	bl	800da98 <_isatty_r>
 800d8f6:	b128      	cbz	r0, 800d904 <__smakebuf_r+0x74>
 800d8f8:	89a3      	ldrh	r3, [r4, #12]
 800d8fa:	f023 0303 	bic.w	r3, r3, #3
 800d8fe:	f043 0301 	orr.w	r3, r3, #1
 800d902:	81a3      	strh	r3, [r4, #12]
 800d904:	89a0      	ldrh	r0, [r4, #12]
 800d906:	4305      	orrs	r5, r0
 800d908:	81a5      	strh	r5, [r4, #12]
 800d90a:	e7cd      	b.n	800d8a8 <__smakebuf_r+0x18>
 800d90c:	0800d69d 	.word	0x0800d69d

0800d910 <_malloc_usable_size_r>:
 800d910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d914:	1f18      	subs	r0, r3, #4
 800d916:	2b00      	cmp	r3, #0
 800d918:	bfbc      	itt	lt
 800d91a:	580b      	ldrlt	r3, [r1, r0]
 800d91c:	18c0      	addlt	r0, r0, r3
 800d91e:	4770      	bx	lr

0800d920 <_raise_r>:
 800d920:	291f      	cmp	r1, #31
 800d922:	b538      	push	{r3, r4, r5, lr}
 800d924:	4604      	mov	r4, r0
 800d926:	460d      	mov	r5, r1
 800d928:	d904      	bls.n	800d934 <_raise_r+0x14>
 800d92a:	2316      	movs	r3, #22
 800d92c:	6003      	str	r3, [r0, #0]
 800d92e:	f04f 30ff 	mov.w	r0, #4294967295
 800d932:	bd38      	pop	{r3, r4, r5, pc}
 800d934:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d936:	b112      	cbz	r2, 800d93e <_raise_r+0x1e>
 800d938:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d93c:	b94b      	cbnz	r3, 800d952 <_raise_r+0x32>
 800d93e:	4620      	mov	r0, r4
 800d940:	f000 f830 	bl	800d9a4 <_getpid_r>
 800d944:	462a      	mov	r2, r5
 800d946:	4601      	mov	r1, r0
 800d948:	4620      	mov	r0, r4
 800d94a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d94e:	f000 b817 	b.w	800d980 <_kill_r>
 800d952:	2b01      	cmp	r3, #1
 800d954:	d00a      	beq.n	800d96c <_raise_r+0x4c>
 800d956:	1c59      	adds	r1, r3, #1
 800d958:	d103      	bne.n	800d962 <_raise_r+0x42>
 800d95a:	2316      	movs	r3, #22
 800d95c:	6003      	str	r3, [r0, #0]
 800d95e:	2001      	movs	r0, #1
 800d960:	e7e7      	b.n	800d932 <_raise_r+0x12>
 800d962:	2400      	movs	r4, #0
 800d964:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d968:	4628      	mov	r0, r5
 800d96a:	4798      	blx	r3
 800d96c:	2000      	movs	r0, #0
 800d96e:	e7e0      	b.n	800d932 <_raise_r+0x12>

0800d970 <raise>:
 800d970:	4b02      	ldr	r3, [pc, #8]	; (800d97c <raise+0xc>)
 800d972:	4601      	mov	r1, r0
 800d974:	6818      	ldr	r0, [r3, #0]
 800d976:	f7ff bfd3 	b.w	800d920 <_raise_r>
 800d97a:	bf00      	nop
 800d97c:	20000104 	.word	0x20000104

0800d980 <_kill_r>:
 800d980:	b538      	push	{r3, r4, r5, lr}
 800d982:	4d07      	ldr	r5, [pc, #28]	; (800d9a0 <_kill_r+0x20>)
 800d984:	2300      	movs	r3, #0
 800d986:	4604      	mov	r4, r0
 800d988:	4608      	mov	r0, r1
 800d98a:	4611      	mov	r1, r2
 800d98c:	602b      	str	r3, [r5, #0]
 800d98e:	f7f4 fbeb 	bl	8002168 <_kill>
 800d992:	1c43      	adds	r3, r0, #1
 800d994:	d102      	bne.n	800d99c <_kill_r+0x1c>
 800d996:	682b      	ldr	r3, [r5, #0]
 800d998:	b103      	cbz	r3, 800d99c <_kill_r+0x1c>
 800d99a:	6023      	str	r3, [r4, #0]
 800d99c:	bd38      	pop	{r3, r4, r5, pc}
 800d99e:	bf00      	nop
 800d9a0:	20002140 	.word	0x20002140

0800d9a4 <_getpid_r>:
 800d9a4:	f7f4 bbd8 	b.w	8002158 <_getpid>

0800d9a8 <__sread>:
 800d9a8:	b510      	push	{r4, lr}
 800d9aa:	460c      	mov	r4, r1
 800d9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9b0:	f000 f894 	bl	800dadc <_read_r>
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	bfab      	itete	ge
 800d9b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d9ba:	89a3      	ldrhlt	r3, [r4, #12]
 800d9bc:	181b      	addge	r3, r3, r0
 800d9be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d9c2:	bfac      	ite	ge
 800d9c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d9c6:	81a3      	strhlt	r3, [r4, #12]
 800d9c8:	bd10      	pop	{r4, pc}

0800d9ca <__swrite>:
 800d9ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9ce:	461f      	mov	r7, r3
 800d9d0:	898b      	ldrh	r3, [r1, #12]
 800d9d2:	05db      	lsls	r3, r3, #23
 800d9d4:	4605      	mov	r5, r0
 800d9d6:	460c      	mov	r4, r1
 800d9d8:	4616      	mov	r6, r2
 800d9da:	d505      	bpl.n	800d9e8 <__swrite+0x1e>
 800d9dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9e0:	2302      	movs	r3, #2
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	f000 f868 	bl	800dab8 <_lseek_r>
 800d9e8:	89a3      	ldrh	r3, [r4, #12]
 800d9ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d9f2:	81a3      	strh	r3, [r4, #12]
 800d9f4:	4632      	mov	r2, r6
 800d9f6:	463b      	mov	r3, r7
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9fe:	f000 b817 	b.w	800da30 <_write_r>

0800da02 <__sseek>:
 800da02:	b510      	push	{r4, lr}
 800da04:	460c      	mov	r4, r1
 800da06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da0a:	f000 f855 	bl	800dab8 <_lseek_r>
 800da0e:	1c43      	adds	r3, r0, #1
 800da10:	89a3      	ldrh	r3, [r4, #12]
 800da12:	bf15      	itete	ne
 800da14:	6560      	strne	r0, [r4, #84]	; 0x54
 800da16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da1e:	81a3      	strheq	r3, [r4, #12]
 800da20:	bf18      	it	ne
 800da22:	81a3      	strhne	r3, [r4, #12]
 800da24:	bd10      	pop	{r4, pc}

0800da26 <__sclose>:
 800da26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da2a:	f000 b813 	b.w	800da54 <_close_r>
	...

0800da30 <_write_r>:
 800da30:	b538      	push	{r3, r4, r5, lr}
 800da32:	4d07      	ldr	r5, [pc, #28]	; (800da50 <_write_r+0x20>)
 800da34:	4604      	mov	r4, r0
 800da36:	4608      	mov	r0, r1
 800da38:	4611      	mov	r1, r2
 800da3a:	2200      	movs	r2, #0
 800da3c:	602a      	str	r2, [r5, #0]
 800da3e:	461a      	mov	r2, r3
 800da40:	f7f4 fbc9 	bl	80021d6 <_write>
 800da44:	1c43      	adds	r3, r0, #1
 800da46:	d102      	bne.n	800da4e <_write_r+0x1e>
 800da48:	682b      	ldr	r3, [r5, #0]
 800da4a:	b103      	cbz	r3, 800da4e <_write_r+0x1e>
 800da4c:	6023      	str	r3, [r4, #0]
 800da4e:	bd38      	pop	{r3, r4, r5, pc}
 800da50:	20002140 	.word	0x20002140

0800da54 <_close_r>:
 800da54:	b538      	push	{r3, r4, r5, lr}
 800da56:	4d06      	ldr	r5, [pc, #24]	; (800da70 <_close_r+0x1c>)
 800da58:	2300      	movs	r3, #0
 800da5a:	4604      	mov	r4, r0
 800da5c:	4608      	mov	r0, r1
 800da5e:	602b      	str	r3, [r5, #0]
 800da60:	f7f4 fbd5 	bl	800220e <_close>
 800da64:	1c43      	adds	r3, r0, #1
 800da66:	d102      	bne.n	800da6e <_close_r+0x1a>
 800da68:	682b      	ldr	r3, [r5, #0]
 800da6a:	b103      	cbz	r3, 800da6e <_close_r+0x1a>
 800da6c:	6023      	str	r3, [r4, #0]
 800da6e:	bd38      	pop	{r3, r4, r5, pc}
 800da70:	20002140 	.word	0x20002140

0800da74 <_fstat_r>:
 800da74:	b538      	push	{r3, r4, r5, lr}
 800da76:	4d07      	ldr	r5, [pc, #28]	; (800da94 <_fstat_r+0x20>)
 800da78:	2300      	movs	r3, #0
 800da7a:	4604      	mov	r4, r0
 800da7c:	4608      	mov	r0, r1
 800da7e:	4611      	mov	r1, r2
 800da80:	602b      	str	r3, [r5, #0]
 800da82:	f7f4 fbd0 	bl	8002226 <_fstat>
 800da86:	1c43      	adds	r3, r0, #1
 800da88:	d102      	bne.n	800da90 <_fstat_r+0x1c>
 800da8a:	682b      	ldr	r3, [r5, #0]
 800da8c:	b103      	cbz	r3, 800da90 <_fstat_r+0x1c>
 800da8e:	6023      	str	r3, [r4, #0]
 800da90:	bd38      	pop	{r3, r4, r5, pc}
 800da92:	bf00      	nop
 800da94:	20002140 	.word	0x20002140

0800da98 <_isatty_r>:
 800da98:	b538      	push	{r3, r4, r5, lr}
 800da9a:	4d06      	ldr	r5, [pc, #24]	; (800dab4 <_isatty_r+0x1c>)
 800da9c:	2300      	movs	r3, #0
 800da9e:	4604      	mov	r4, r0
 800daa0:	4608      	mov	r0, r1
 800daa2:	602b      	str	r3, [r5, #0]
 800daa4:	f7f4 fbcf 	bl	8002246 <_isatty>
 800daa8:	1c43      	adds	r3, r0, #1
 800daaa:	d102      	bne.n	800dab2 <_isatty_r+0x1a>
 800daac:	682b      	ldr	r3, [r5, #0]
 800daae:	b103      	cbz	r3, 800dab2 <_isatty_r+0x1a>
 800dab0:	6023      	str	r3, [r4, #0]
 800dab2:	bd38      	pop	{r3, r4, r5, pc}
 800dab4:	20002140 	.word	0x20002140

0800dab8 <_lseek_r>:
 800dab8:	b538      	push	{r3, r4, r5, lr}
 800daba:	4d07      	ldr	r5, [pc, #28]	; (800dad8 <_lseek_r+0x20>)
 800dabc:	4604      	mov	r4, r0
 800dabe:	4608      	mov	r0, r1
 800dac0:	4611      	mov	r1, r2
 800dac2:	2200      	movs	r2, #0
 800dac4:	602a      	str	r2, [r5, #0]
 800dac6:	461a      	mov	r2, r3
 800dac8:	f7f4 fbc8 	bl	800225c <_lseek>
 800dacc:	1c43      	adds	r3, r0, #1
 800dace:	d102      	bne.n	800dad6 <_lseek_r+0x1e>
 800dad0:	682b      	ldr	r3, [r5, #0]
 800dad2:	b103      	cbz	r3, 800dad6 <_lseek_r+0x1e>
 800dad4:	6023      	str	r3, [r4, #0]
 800dad6:	bd38      	pop	{r3, r4, r5, pc}
 800dad8:	20002140 	.word	0x20002140

0800dadc <_read_r>:
 800dadc:	b538      	push	{r3, r4, r5, lr}
 800dade:	4d07      	ldr	r5, [pc, #28]	; (800dafc <_read_r+0x20>)
 800dae0:	4604      	mov	r4, r0
 800dae2:	4608      	mov	r0, r1
 800dae4:	4611      	mov	r1, r2
 800dae6:	2200      	movs	r2, #0
 800dae8:	602a      	str	r2, [r5, #0]
 800daea:	461a      	mov	r2, r3
 800daec:	f7f4 fb56 	bl	800219c <_read>
 800daf0:	1c43      	adds	r3, r0, #1
 800daf2:	d102      	bne.n	800dafa <_read_r+0x1e>
 800daf4:	682b      	ldr	r3, [r5, #0]
 800daf6:	b103      	cbz	r3, 800dafa <_read_r+0x1e>
 800daf8:	6023      	str	r3, [r4, #0]
 800dafa:	bd38      	pop	{r3, r4, r5, pc}
 800dafc:	20002140 	.word	0x20002140

0800db00 <atanf>:
 800db00:	b538      	push	{r3, r4, r5, lr}
 800db02:	ee10 5a10 	vmov	r5, s0
 800db06:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800db0a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800db0e:	eef0 7a40 	vmov.f32	s15, s0
 800db12:	db10      	blt.n	800db36 <atanf+0x36>
 800db14:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800db18:	dd04      	ble.n	800db24 <atanf+0x24>
 800db1a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800db1e:	eeb0 0a67 	vmov.f32	s0, s15
 800db22:	bd38      	pop	{r3, r4, r5, pc}
 800db24:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800dc5c <atanf+0x15c>
 800db28:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800dc60 <atanf+0x160>
 800db2c:	2d00      	cmp	r5, #0
 800db2e:	bfd8      	it	le
 800db30:	eef0 7a40 	vmovle.f32	s15, s0
 800db34:	e7f3      	b.n	800db1e <atanf+0x1e>
 800db36:	4b4b      	ldr	r3, [pc, #300]	; (800dc64 <atanf+0x164>)
 800db38:	429c      	cmp	r4, r3
 800db3a:	dc10      	bgt.n	800db5e <atanf+0x5e>
 800db3c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800db40:	da0a      	bge.n	800db58 <atanf+0x58>
 800db42:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800dc68 <atanf+0x168>
 800db46:	ee30 7a07 	vadd.f32	s14, s0, s14
 800db4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db4e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800db52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db56:	dce2      	bgt.n	800db1e <atanf+0x1e>
 800db58:	f04f 33ff 	mov.w	r3, #4294967295
 800db5c:	e013      	b.n	800db86 <atanf+0x86>
 800db5e:	f000 f8e7 	bl	800dd30 <fabsf>
 800db62:	4b42      	ldr	r3, [pc, #264]	; (800dc6c <atanf+0x16c>)
 800db64:	429c      	cmp	r4, r3
 800db66:	dc4f      	bgt.n	800dc08 <atanf+0x108>
 800db68:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800db6c:	429c      	cmp	r4, r3
 800db6e:	dc41      	bgt.n	800dbf4 <atanf+0xf4>
 800db70:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800db74:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800db78:	eea0 7a27 	vfma.f32	s14, s0, s15
 800db7c:	2300      	movs	r3, #0
 800db7e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800db82:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800db86:	1c5a      	adds	r2, r3, #1
 800db88:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800db8c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800dc70 <atanf+0x170>
 800db90:	eddf 5a38 	vldr	s11, [pc, #224]	; 800dc74 <atanf+0x174>
 800db94:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800dc78 <atanf+0x178>
 800db98:	ee66 6a06 	vmul.f32	s13, s12, s12
 800db9c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800dba0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800dc7c <atanf+0x17c>
 800dba4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800dba8:	eddf 5a35 	vldr	s11, [pc, #212]	; 800dc80 <atanf+0x180>
 800dbac:	eee7 5a26 	vfma.f32	s11, s14, s13
 800dbb0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800dc84 <atanf+0x184>
 800dbb4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800dbb8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800dc88 <atanf+0x188>
 800dbbc:	eee7 5a26 	vfma.f32	s11, s14, s13
 800dbc0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800dc8c <atanf+0x18c>
 800dbc4:	eea6 5a87 	vfma.f32	s10, s13, s14
 800dbc8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800dc90 <atanf+0x190>
 800dbcc:	eea5 7a26 	vfma.f32	s14, s10, s13
 800dbd0:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800dc94 <atanf+0x194>
 800dbd4:	eea7 5a26 	vfma.f32	s10, s14, s13
 800dbd8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800dc98 <atanf+0x198>
 800dbdc:	eea5 7a26 	vfma.f32	s14, s10, s13
 800dbe0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dbe4:	eea5 7a86 	vfma.f32	s14, s11, s12
 800dbe8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800dbec:	d121      	bne.n	800dc32 <atanf+0x132>
 800dbee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dbf2:	e794      	b.n	800db1e <atanf+0x1e>
 800dbf4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dbf8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800dbfc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dc00:	2301      	movs	r3, #1
 800dc02:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800dc06:	e7be      	b.n	800db86 <atanf+0x86>
 800dc08:	4b24      	ldr	r3, [pc, #144]	; (800dc9c <atanf+0x19c>)
 800dc0a:	429c      	cmp	r4, r3
 800dc0c:	dc0b      	bgt.n	800dc26 <atanf+0x126>
 800dc0e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800dc12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dc16:	eea0 7a27 	vfma.f32	s14, s0, s15
 800dc1a:	2302      	movs	r3, #2
 800dc1c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800dc20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc24:	e7af      	b.n	800db86 <atanf+0x86>
 800dc26:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800dc2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800dc2e:	2303      	movs	r3, #3
 800dc30:	e7a9      	b.n	800db86 <atanf+0x86>
 800dc32:	4a1b      	ldr	r2, [pc, #108]	; (800dca0 <atanf+0x1a0>)
 800dc34:	491b      	ldr	r1, [pc, #108]	; (800dca4 <atanf+0x1a4>)
 800dc36:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800dc3a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800dc3e:	ed93 0a00 	vldr	s0, [r3]
 800dc42:	ee37 7a40 	vsub.f32	s14, s14, s0
 800dc46:	ed92 0a00 	vldr	s0, [r2]
 800dc4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc4e:	2d00      	cmp	r5, #0
 800dc50:	ee70 7a67 	vsub.f32	s15, s0, s15
 800dc54:	bfb8      	it	lt
 800dc56:	eef1 7a67 	vneglt.f32	s15, s15
 800dc5a:	e760      	b.n	800db1e <atanf+0x1e>
 800dc5c:	3fc90fdb 	.word	0x3fc90fdb
 800dc60:	bfc90fdb 	.word	0xbfc90fdb
 800dc64:	3edfffff 	.word	0x3edfffff
 800dc68:	7149f2ca 	.word	0x7149f2ca
 800dc6c:	3f97ffff 	.word	0x3f97ffff
 800dc70:	3c8569d7 	.word	0x3c8569d7
 800dc74:	3d4bda59 	.word	0x3d4bda59
 800dc78:	bd6ef16b 	.word	0xbd6ef16b
 800dc7c:	3d886b35 	.word	0x3d886b35
 800dc80:	3dba2e6e 	.word	0x3dba2e6e
 800dc84:	3e124925 	.word	0x3e124925
 800dc88:	3eaaaaab 	.word	0x3eaaaaab
 800dc8c:	bd15a221 	.word	0xbd15a221
 800dc90:	bd9d8795 	.word	0xbd9d8795
 800dc94:	bde38e38 	.word	0xbde38e38
 800dc98:	be4ccccd 	.word	0xbe4ccccd
 800dc9c:	401bffff 	.word	0x401bffff
 800dca0:	0800f094 	.word	0x0800f094
 800dca4:	0800f0a4 	.word	0x0800f0a4

0800dca8 <cosf>:
 800dca8:	ee10 3a10 	vmov	r3, s0
 800dcac:	b507      	push	{r0, r1, r2, lr}
 800dcae:	4a1e      	ldr	r2, [pc, #120]	; (800dd28 <cosf+0x80>)
 800dcb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	dc06      	bgt.n	800dcc6 <cosf+0x1e>
 800dcb8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800dd2c <cosf+0x84>
 800dcbc:	b003      	add	sp, #12
 800dcbe:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcc2:	f000 bb01 	b.w	800e2c8 <__kernel_cosf>
 800dcc6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dcca:	db04      	blt.n	800dcd6 <cosf+0x2e>
 800dccc:	ee30 0a40 	vsub.f32	s0, s0, s0
 800dcd0:	b003      	add	sp, #12
 800dcd2:	f85d fb04 	ldr.w	pc, [sp], #4
 800dcd6:	4668      	mov	r0, sp
 800dcd8:	f000 f9b6 	bl	800e048 <__ieee754_rem_pio2f>
 800dcdc:	f000 0003 	and.w	r0, r0, #3
 800dce0:	2801      	cmp	r0, #1
 800dce2:	d009      	beq.n	800dcf8 <cosf+0x50>
 800dce4:	2802      	cmp	r0, #2
 800dce6:	d010      	beq.n	800dd0a <cosf+0x62>
 800dce8:	b9b0      	cbnz	r0, 800dd18 <cosf+0x70>
 800dcea:	eddd 0a01 	vldr	s1, [sp, #4]
 800dcee:	ed9d 0a00 	vldr	s0, [sp]
 800dcf2:	f000 fae9 	bl	800e2c8 <__kernel_cosf>
 800dcf6:	e7eb      	b.n	800dcd0 <cosf+0x28>
 800dcf8:	eddd 0a01 	vldr	s1, [sp, #4]
 800dcfc:	ed9d 0a00 	vldr	s0, [sp]
 800dd00:	f000 fdb8 	bl	800e874 <__kernel_sinf>
 800dd04:	eeb1 0a40 	vneg.f32	s0, s0
 800dd08:	e7e2      	b.n	800dcd0 <cosf+0x28>
 800dd0a:	eddd 0a01 	vldr	s1, [sp, #4]
 800dd0e:	ed9d 0a00 	vldr	s0, [sp]
 800dd12:	f000 fad9 	bl	800e2c8 <__kernel_cosf>
 800dd16:	e7f5      	b.n	800dd04 <cosf+0x5c>
 800dd18:	eddd 0a01 	vldr	s1, [sp, #4]
 800dd1c:	ed9d 0a00 	vldr	s0, [sp]
 800dd20:	2001      	movs	r0, #1
 800dd22:	f000 fda7 	bl	800e874 <__kernel_sinf>
 800dd26:	e7d3      	b.n	800dcd0 <cosf+0x28>
 800dd28:	3f490fd8 	.word	0x3f490fd8
 800dd2c:	00000000 	.word	0x00000000

0800dd30 <fabsf>:
 800dd30:	ee10 3a10 	vmov	r3, s0
 800dd34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd38:	ee00 3a10 	vmov	s0, r3
 800dd3c:	4770      	bx	lr
	...

0800dd40 <sinf>:
 800dd40:	ee10 3a10 	vmov	r3, s0
 800dd44:	b507      	push	{r0, r1, r2, lr}
 800dd46:	4a1f      	ldr	r2, [pc, #124]	; (800ddc4 <sinf+0x84>)
 800dd48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	dc07      	bgt.n	800dd60 <sinf+0x20>
 800dd50:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800ddc8 <sinf+0x88>
 800dd54:	2000      	movs	r0, #0
 800dd56:	b003      	add	sp, #12
 800dd58:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd5c:	f000 bd8a 	b.w	800e874 <__kernel_sinf>
 800dd60:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dd64:	db04      	blt.n	800dd70 <sinf+0x30>
 800dd66:	ee30 0a40 	vsub.f32	s0, s0, s0
 800dd6a:	b003      	add	sp, #12
 800dd6c:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd70:	4668      	mov	r0, sp
 800dd72:	f000 f969 	bl	800e048 <__ieee754_rem_pio2f>
 800dd76:	f000 0003 	and.w	r0, r0, #3
 800dd7a:	2801      	cmp	r0, #1
 800dd7c:	d00a      	beq.n	800dd94 <sinf+0x54>
 800dd7e:	2802      	cmp	r0, #2
 800dd80:	d00f      	beq.n	800dda2 <sinf+0x62>
 800dd82:	b9c0      	cbnz	r0, 800ddb6 <sinf+0x76>
 800dd84:	eddd 0a01 	vldr	s1, [sp, #4]
 800dd88:	ed9d 0a00 	vldr	s0, [sp]
 800dd8c:	2001      	movs	r0, #1
 800dd8e:	f000 fd71 	bl	800e874 <__kernel_sinf>
 800dd92:	e7ea      	b.n	800dd6a <sinf+0x2a>
 800dd94:	eddd 0a01 	vldr	s1, [sp, #4]
 800dd98:	ed9d 0a00 	vldr	s0, [sp]
 800dd9c:	f000 fa94 	bl	800e2c8 <__kernel_cosf>
 800dda0:	e7e3      	b.n	800dd6a <sinf+0x2a>
 800dda2:	eddd 0a01 	vldr	s1, [sp, #4]
 800dda6:	ed9d 0a00 	vldr	s0, [sp]
 800ddaa:	2001      	movs	r0, #1
 800ddac:	f000 fd62 	bl	800e874 <__kernel_sinf>
 800ddb0:	eeb1 0a40 	vneg.f32	s0, s0
 800ddb4:	e7d9      	b.n	800dd6a <sinf+0x2a>
 800ddb6:	eddd 0a01 	vldr	s1, [sp, #4]
 800ddba:	ed9d 0a00 	vldr	s0, [sp]
 800ddbe:	f000 fa83 	bl	800e2c8 <__kernel_cosf>
 800ddc2:	e7f5      	b.n	800ddb0 <sinf+0x70>
 800ddc4:	3f490fd8 	.word	0x3f490fd8
 800ddc8:	00000000 	.word	0x00000000

0800ddcc <tanf>:
 800ddcc:	ee10 3a10 	vmov	r3, s0
 800ddd0:	b507      	push	{r0, r1, r2, lr}
 800ddd2:	4a12      	ldr	r2, [pc, #72]	; (800de1c <tanf+0x50>)
 800ddd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	dc07      	bgt.n	800ddec <tanf+0x20>
 800dddc:	eddf 0a10 	vldr	s1, [pc, #64]	; 800de20 <tanf+0x54>
 800dde0:	2001      	movs	r0, #1
 800dde2:	b003      	add	sp, #12
 800dde4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dde8:	f000 bd8c 	b.w	800e904 <__kernel_tanf>
 800ddec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ddf0:	db04      	blt.n	800ddfc <tanf+0x30>
 800ddf2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ddf6:	b003      	add	sp, #12
 800ddf8:	f85d fb04 	ldr.w	pc, [sp], #4
 800ddfc:	4668      	mov	r0, sp
 800ddfe:	f000 f923 	bl	800e048 <__ieee754_rem_pio2f>
 800de02:	0040      	lsls	r0, r0, #1
 800de04:	f000 0002 	and.w	r0, r0, #2
 800de08:	eddd 0a01 	vldr	s1, [sp, #4]
 800de0c:	ed9d 0a00 	vldr	s0, [sp]
 800de10:	f1c0 0001 	rsb	r0, r0, #1
 800de14:	f000 fd76 	bl	800e904 <__kernel_tanf>
 800de18:	e7ed      	b.n	800ddf6 <tanf+0x2a>
 800de1a:	bf00      	nop
 800de1c:	3f490fda 	.word	0x3f490fda
 800de20:	00000000 	.word	0x00000000

0800de24 <asinf>:
 800de24:	b508      	push	{r3, lr}
 800de26:	ed2d 8b02 	vpush	{d8}
 800de2a:	eeb0 8a40 	vmov.f32	s16, s0
 800de2e:	f000 f825 	bl	800de7c <__ieee754_asinf>
 800de32:	eeb4 8a48 	vcmp.f32	s16, s16
 800de36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de3a:	eef0 8a40 	vmov.f32	s17, s0
 800de3e:	d615      	bvs.n	800de6c <asinf+0x48>
 800de40:	eeb0 0a48 	vmov.f32	s0, s16
 800de44:	f7ff ff74 	bl	800dd30 <fabsf>
 800de48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800de4c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800de50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de54:	dd0a      	ble.n	800de6c <asinf+0x48>
 800de56:	f7fc ff2b 	bl	800acb0 <__errno>
 800de5a:	ecbd 8b02 	vpop	{d8}
 800de5e:	2321      	movs	r3, #33	; 0x21
 800de60:	6003      	str	r3, [r0, #0]
 800de62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800de66:	4804      	ldr	r0, [pc, #16]	; (800de78 <asinf+0x54>)
 800de68:	f000 be6e 	b.w	800eb48 <nanf>
 800de6c:	eeb0 0a68 	vmov.f32	s0, s17
 800de70:	ecbd 8b02 	vpop	{d8}
 800de74:	bd08      	pop	{r3, pc}
 800de76:	bf00      	nop
 800de78:	0800ef28 	.word	0x0800ef28

0800de7c <__ieee754_asinf>:
 800de7c:	b538      	push	{r3, r4, r5, lr}
 800de7e:	ee10 5a10 	vmov	r5, s0
 800de82:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800de86:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800de8a:	ed2d 8b04 	vpush	{d8-d9}
 800de8e:	d10c      	bne.n	800deaa <__ieee754_asinf+0x2e>
 800de90:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800e008 <__ieee754_asinf+0x18c>
 800de94:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800e00c <__ieee754_asinf+0x190>
 800de98:	ee60 7a27 	vmul.f32	s15, s0, s15
 800de9c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800dea0:	eeb0 0a67 	vmov.f32	s0, s15
 800dea4:	ecbd 8b04 	vpop	{d8-d9}
 800dea8:	bd38      	pop	{r3, r4, r5, pc}
 800deaa:	dd04      	ble.n	800deb6 <__ieee754_asinf+0x3a>
 800deac:	ee70 7a40 	vsub.f32	s15, s0, s0
 800deb0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800deb4:	e7f6      	b.n	800dea4 <__ieee754_asinf+0x28>
 800deb6:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800deba:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800debe:	da0b      	bge.n	800ded8 <__ieee754_asinf+0x5c>
 800dec0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800dec4:	da52      	bge.n	800df6c <__ieee754_asinf+0xf0>
 800dec6:	eddf 7a52 	vldr	s15, [pc, #328]	; 800e010 <__ieee754_asinf+0x194>
 800deca:	ee70 7a27 	vadd.f32	s15, s0, s15
 800dece:	eef4 7ae8 	vcmpe.f32	s15, s17
 800ded2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ded6:	dce5      	bgt.n	800dea4 <__ieee754_asinf+0x28>
 800ded8:	f7ff ff2a 	bl	800dd30 <fabsf>
 800dedc:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800dee0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800dee4:	ee20 8a08 	vmul.f32	s16, s0, s16
 800dee8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800e014 <__ieee754_asinf+0x198>
 800deec:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800e018 <__ieee754_asinf+0x19c>
 800def0:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800e01c <__ieee754_asinf+0x1a0>
 800def4:	eea8 7a27 	vfma.f32	s14, s16, s15
 800def8:	eddf 7a49 	vldr	s15, [pc, #292]	; 800e020 <__ieee754_asinf+0x1a4>
 800defc:	eee7 7a08 	vfma.f32	s15, s14, s16
 800df00:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800e024 <__ieee754_asinf+0x1a8>
 800df04:	eea7 7a88 	vfma.f32	s14, s15, s16
 800df08:	eddf 7a47 	vldr	s15, [pc, #284]	; 800e028 <__ieee754_asinf+0x1ac>
 800df0c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800df10:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800e02c <__ieee754_asinf+0x1b0>
 800df14:	eea7 9a88 	vfma.f32	s18, s15, s16
 800df18:	eddf 7a45 	vldr	s15, [pc, #276]	; 800e030 <__ieee754_asinf+0x1b4>
 800df1c:	eee8 7a07 	vfma.f32	s15, s16, s14
 800df20:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800e034 <__ieee754_asinf+0x1b8>
 800df24:	eea7 7a88 	vfma.f32	s14, s15, s16
 800df28:	eddf 7a43 	vldr	s15, [pc, #268]	; 800e038 <__ieee754_asinf+0x1bc>
 800df2c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800df30:	eeb0 0a48 	vmov.f32	s0, s16
 800df34:	eee7 8a88 	vfma.f32	s17, s15, s16
 800df38:	f000 f9c2 	bl	800e2c0 <__ieee754_sqrtf>
 800df3c:	4b3f      	ldr	r3, [pc, #252]	; (800e03c <__ieee754_asinf+0x1c0>)
 800df3e:	ee29 9a08 	vmul.f32	s18, s18, s16
 800df42:	429c      	cmp	r4, r3
 800df44:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800df48:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800df4c:	dd3d      	ble.n	800dfca <__ieee754_asinf+0x14e>
 800df4e:	eea0 0a06 	vfma.f32	s0, s0, s12
 800df52:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800e040 <__ieee754_asinf+0x1c4>
 800df56:	eee0 7a26 	vfma.f32	s15, s0, s13
 800df5a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800e00c <__ieee754_asinf+0x190>
 800df5e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800df62:	2d00      	cmp	r5, #0
 800df64:	bfd8      	it	le
 800df66:	eeb1 0a40 	vnegle.f32	s0, s0
 800df6a:	e79b      	b.n	800dea4 <__ieee754_asinf+0x28>
 800df6c:	ee60 7a00 	vmul.f32	s15, s0, s0
 800df70:	eddf 6a28 	vldr	s13, [pc, #160]	; 800e014 <__ieee754_asinf+0x198>
 800df74:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800e018 <__ieee754_asinf+0x19c>
 800df78:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800e02c <__ieee754_asinf+0x1b0>
 800df7c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800df80:	eddf 6a27 	vldr	s13, [pc, #156]	; 800e020 <__ieee754_asinf+0x1a4>
 800df84:	eee7 6a27 	vfma.f32	s13, s14, s15
 800df88:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800e024 <__ieee754_asinf+0x1a8>
 800df8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800df90:	eddf 6a25 	vldr	s13, [pc, #148]	; 800e028 <__ieee754_asinf+0x1ac>
 800df94:	eee7 6a27 	vfma.f32	s13, s14, s15
 800df98:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800e01c <__ieee754_asinf+0x1a0>
 800df9c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dfa0:	eddf 6a23 	vldr	s13, [pc, #140]	; 800e030 <__ieee754_asinf+0x1b4>
 800dfa4:	eee7 6a86 	vfma.f32	s13, s15, s12
 800dfa8:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800e034 <__ieee754_asinf+0x1b8>
 800dfac:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800dfb0:	eddf 6a21 	vldr	s13, [pc, #132]	; 800e038 <__ieee754_asinf+0x1bc>
 800dfb4:	eee6 6a27 	vfma.f32	s13, s12, s15
 800dfb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dfbc:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800dfc0:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800dfc4:	eea0 0a27 	vfma.f32	s0, s0, s15
 800dfc8:	e76c      	b.n	800dea4 <__ieee754_asinf+0x28>
 800dfca:	ee10 3a10 	vmov	r3, s0
 800dfce:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800dfd2:	f023 030f 	bic.w	r3, r3, #15
 800dfd6:	ee07 3a10 	vmov	s14, r3
 800dfda:	eea7 8a47 	vfms.f32	s16, s14, s14
 800dfde:	ee70 7a07 	vadd.f32	s15, s0, s14
 800dfe2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dfe6:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800dfea:	eddf 7a07 	vldr	s15, [pc, #28]	; 800e008 <__ieee754_asinf+0x18c>
 800dfee:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800dff2:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800dff6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800e044 <__ieee754_asinf+0x1c8>
 800dffa:	eeb0 6a40 	vmov.f32	s12, s0
 800dffe:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e002:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e006:	e7aa      	b.n	800df5e <__ieee754_asinf+0xe2>
 800e008:	b33bbd2e 	.word	0xb33bbd2e
 800e00c:	3fc90fdb 	.word	0x3fc90fdb
 800e010:	7149f2ca 	.word	0x7149f2ca
 800e014:	3811ef08 	.word	0x3811ef08
 800e018:	3a4f7f04 	.word	0x3a4f7f04
 800e01c:	3e2aaaab 	.word	0x3e2aaaab
 800e020:	bd241146 	.word	0xbd241146
 800e024:	3e4e0aa8 	.word	0x3e4e0aa8
 800e028:	bea6b090 	.word	0xbea6b090
 800e02c:	3d9dc62e 	.word	0x3d9dc62e
 800e030:	bf303361 	.word	0xbf303361
 800e034:	4001572d 	.word	0x4001572d
 800e038:	c019d139 	.word	0xc019d139
 800e03c:	3f799999 	.word	0x3f799999
 800e040:	333bbd2e 	.word	0x333bbd2e
 800e044:	3f490fdb 	.word	0x3f490fdb

0800e048 <__ieee754_rem_pio2f>:
 800e048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e04a:	ee10 6a10 	vmov	r6, s0
 800e04e:	4b8e      	ldr	r3, [pc, #568]	; (800e288 <__ieee754_rem_pio2f+0x240>)
 800e050:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800e054:	429d      	cmp	r5, r3
 800e056:	b087      	sub	sp, #28
 800e058:	eef0 7a40 	vmov.f32	s15, s0
 800e05c:	4604      	mov	r4, r0
 800e05e:	dc05      	bgt.n	800e06c <__ieee754_rem_pio2f+0x24>
 800e060:	2300      	movs	r3, #0
 800e062:	ed80 0a00 	vstr	s0, [r0]
 800e066:	6043      	str	r3, [r0, #4]
 800e068:	2000      	movs	r0, #0
 800e06a:	e01a      	b.n	800e0a2 <__ieee754_rem_pio2f+0x5a>
 800e06c:	4b87      	ldr	r3, [pc, #540]	; (800e28c <__ieee754_rem_pio2f+0x244>)
 800e06e:	429d      	cmp	r5, r3
 800e070:	dc46      	bgt.n	800e100 <__ieee754_rem_pio2f+0xb8>
 800e072:	2e00      	cmp	r6, #0
 800e074:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800e290 <__ieee754_rem_pio2f+0x248>
 800e078:	4b86      	ldr	r3, [pc, #536]	; (800e294 <__ieee754_rem_pio2f+0x24c>)
 800e07a:	f025 050f 	bic.w	r5, r5, #15
 800e07e:	dd1f      	ble.n	800e0c0 <__ieee754_rem_pio2f+0x78>
 800e080:	429d      	cmp	r5, r3
 800e082:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e086:	d00e      	beq.n	800e0a6 <__ieee754_rem_pio2f+0x5e>
 800e088:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800e298 <__ieee754_rem_pio2f+0x250>
 800e08c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800e090:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e094:	ed80 0a00 	vstr	s0, [r0]
 800e098:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e09c:	2001      	movs	r0, #1
 800e09e:	edc4 7a01 	vstr	s15, [r4, #4]
 800e0a2:	b007      	add	sp, #28
 800e0a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0a6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800e29c <__ieee754_rem_pio2f+0x254>
 800e0aa:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800e2a0 <__ieee754_rem_pio2f+0x258>
 800e0ae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e0b2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800e0b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e0ba:	edc0 6a00 	vstr	s13, [r0]
 800e0be:	e7eb      	b.n	800e098 <__ieee754_rem_pio2f+0x50>
 800e0c0:	429d      	cmp	r5, r3
 800e0c2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e0c6:	d00e      	beq.n	800e0e6 <__ieee754_rem_pio2f+0x9e>
 800e0c8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800e298 <__ieee754_rem_pio2f+0x250>
 800e0cc:	ee37 0a87 	vadd.f32	s0, s15, s14
 800e0d0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e0d4:	ed80 0a00 	vstr	s0, [r0]
 800e0d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e0e0:	edc4 7a01 	vstr	s15, [r4, #4]
 800e0e4:	e7dd      	b.n	800e0a2 <__ieee754_rem_pio2f+0x5a>
 800e0e6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800e29c <__ieee754_rem_pio2f+0x254>
 800e0ea:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800e2a0 <__ieee754_rem_pio2f+0x258>
 800e0ee:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e0f2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800e0f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e0fa:	edc0 6a00 	vstr	s13, [r0]
 800e0fe:	e7eb      	b.n	800e0d8 <__ieee754_rem_pio2f+0x90>
 800e100:	4b68      	ldr	r3, [pc, #416]	; (800e2a4 <__ieee754_rem_pio2f+0x25c>)
 800e102:	429d      	cmp	r5, r3
 800e104:	dc72      	bgt.n	800e1ec <__ieee754_rem_pio2f+0x1a4>
 800e106:	f7ff fe13 	bl	800dd30 <fabsf>
 800e10a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800e2a8 <__ieee754_rem_pio2f+0x260>
 800e10e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e112:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e116:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e11a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e11e:	ee17 0a90 	vmov	r0, s15
 800e122:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800e290 <__ieee754_rem_pio2f+0x248>
 800e126:	eea7 0a67 	vfms.f32	s0, s14, s15
 800e12a:	281f      	cmp	r0, #31
 800e12c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800e298 <__ieee754_rem_pio2f+0x250>
 800e130:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e134:	eeb1 6a47 	vneg.f32	s12, s14
 800e138:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e13c:	ee16 2a90 	vmov	r2, s13
 800e140:	dc1c      	bgt.n	800e17c <__ieee754_rem_pio2f+0x134>
 800e142:	495a      	ldr	r1, [pc, #360]	; (800e2ac <__ieee754_rem_pio2f+0x264>)
 800e144:	1e47      	subs	r7, r0, #1
 800e146:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800e14a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800e14e:	428b      	cmp	r3, r1
 800e150:	d014      	beq.n	800e17c <__ieee754_rem_pio2f+0x134>
 800e152:	6022      	str	r2, [r4, #0]
 800e154:	ed94 7a00 	vldr	s14, [r4]
 800e158:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e15c:	2e00      	cmp	r6, #0
 800e15e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e162:	ed84 0a01 	vstr	s0, [r4, #4]
 800e166:	da9c      	bge.n	800e0a2 <__ieee754_rem_pio2f+0x5a>
 800e168:	eeb1 7a47 	vneg.f32	s14, s14
 800e16c:	eeb1 0a40 	vneg.f32	s0, s0
 800e170:	ed84 7a00 	vstr	s14, [r4]
 800e174:	ed84 0a01 	vstr	s0, [r4, #4]
 800e178:	4240      	negs	r0, r0
 800e17a:	e792      	b.n	800e0a2 <__ieee754_rem_pio2f+0x5a>
 800e17c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e180:	15eb      	asrs	r3, r5, #23
 800e182:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800e186:	2d08      	cmp	r5, #8
 800e188:	dde3      	ble.n	800e152 <__ieee754_rem_pio2f+0x10a>
 800e18a:	eddf 7a44 	vldr	s15, [pc, #272]	; 800e29c <__ieee754_rem_pio2f+0x254>
 800e18e:	eddf 5a44 	vldr	s11, [pc, #272]	; 800e2a0 <__ieee754_rem_pio2f+0x258>
 800e192:	eef0 6a40 	vmov.f32	s13, s0
 800e196:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e19a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800e19e:	eea6 0a27 	vfma.f32	s0, s12, s15
 800e1a2:	eef0 7a40 	vmov.f32	s15, s0
 800e1a6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800e1aa:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800e1ae:	ee15 2a90 	vmov	r2, s11
 800e1b2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e1b6:	1a5b      	subs	r3, r3, r1
 800e1b8:	2b19      	cmp	r3, #25
 800e1ba:	dc04      	bgt.n	800e1c6 <__ieee754_rem_pio2f+0x17e>
 800e1bc:	edc4 5a00 	vstr	s11, [r4]
 800e1c0:	eeb0 0a66 	vmov.f32	s0, s13
 800e1c4:	e7c6      	b.n	800e154 <__ieee754_rem_pio2f+0x10c>
 800e1c6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800e2b0 <__ieee754_rem_pio2f+0x268>
 800e1ca:	eeb0 0a66 	vmov.f32	s0, s13
 800e1ce:	eea6 0a25 	vfma.f32	s0, s12, s11
 800e1d2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800e1d6:	eddf 6a37 	vldr	s13, [pc, #220]	; 800e2b4 <__ieee754_rem_pio2f+0x26c>
 800e1da:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e1de:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800e1e2:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e1e6:	ed84 7a00 	vstr	s14, [r4]
 800e1ea:	e7b3      	b.n	800e154 <__ieee754_rem_pio2f+0x10c>
 800e1ec:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e1f0:	db06      	blt.n	800e200 <__ieee754_rem_pio2f+0x1b8>
 800e1f2:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e1f6:	edc0 7a01 	vstr	s15, [r0, #4]
 800e1fa:	edc0 7a00 	vstr	s15, [r0]
 800e1fe:	e733      	b.n	800e068 <__ieee754_rem_pio2f+0x20>
 800e200:	15ea      	asrs	r2, r5, #23
 800e202:	3a86      	subs	r2, #134	; 0x86
 800e204:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800e208:	ee07 3a90 	vmov	s15, r3
 800e20c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e210:	eddf 6a29 	vldr	s13, [pc, #164]	; 800e2b8 <__ieee754_rem_pio2f+0x270>
 800e214:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e218:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e21c:	ed8d 7a03 	vstr	s14, [sp, #12]
 800e220:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e224:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e228:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e22c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e230:	ed8d 7a04 	vstr	s14, [sp, #16]
 800e234:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e238:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e240:	edcd 7a05 	vstr	s15, [sp, #20]
 800e244:	d11e      	bne.n	800e284 <__ieee754_rem_pio2f+0x23c>
 800e246:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e24e:	bf14      	ite	ne
 800e250:	2302      	movne	r3, #2
 800e252:	2301      	moveq	r3, #1
 800e254:	4919      	ldr	r1, [pc, #100]	; (800e2bc <__ieee754_rem_pio2f+0x274>)
 800e256:	9101      	str	r1, [sp, #4]
 800e258:	2102      	movs	r1, #2
 800e25a:	9100      	str	r1, [sp, #0]
 800e25c:	a803      	add	r0, sp, #12
 800e25e:	4621      	mov	r1, r4
 800e260:	f000 f892 	bl	800e388 <__kernel_rem_pio2f>
 800e264:	2e00      	cmp	r6, #0
 800e266:	f6bf af1c 	bge.w	800e0a2 <__ieee754_rem_pio2f+0x5a>
 800e26a:	edd4 7a00 	vldr	s15, [r4]
 800e26e:	eef1 7a67 	vneg.f32	s15, s15
 800e272:	edc4 7a00 	vstr	s15, [r4]
 800e276:	edd4 7a01 	vldr	s15, [r4, #4]
 800e27a:	eef1 7a67 	vneg.f32	s15, s15
 800e27e:	edc4 7a01 	vstr	s15, [r4, #4]
 800e282:	e779      	b.n	800e178 <__ieee754_rem_pio2f+0x130>
 800e284:	2303      	movs	r3, #3
 800e286:	e7e5      	b.n	800e254 <__ieee754_rem_pio2f+0x20c>
 800e288:	3f490fd8 	.word	0x3f490fd8
 800e28c:	4016cbe3 	.word	0x4016cbe3
 800e290:	3fc90f80 	.word	0x3fc90f80
 800e294:	3fc90fd0 	.word	0x3fc90fd0
 800e298:	37354443 	.word	0x37354443
 800e29c:	37354400 	.word	0x37354400
 800e2a0:	2e85a308 	.word	0x2e85a308
 800e2a4:	43490f80 	.word	0x43490f80
 800e2a8:	3f22f984 	.word	0x3f22f984
 800e2ac:	0800f0b4 	.word	0x0800f0b4
 800e2b0:	2e85a300 	.word	0x2e85a300
 800e2b4:	248d3132 	.word	0x248d3132
 800e2b8:	43800000 	.word	0x43800000
 800e2bc:	0800f134 	.word	0x0800f134

0800e2c0 <__ieee754_sqrtf>:
 800e2c0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e2c4:	4770      	bx	lr
	...

0800e2c8 <__kernel_cosf>:
 800e2c8:	ee10 3a10 	vmov	r3, s0
 800e2cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e2d0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e2d4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e2d8:	da05      	bge.n	800e2e6 <__kernel_cosf+0x1e>
 800e2da:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e2de:	ee17 2a90 	vmov	r2, s15
 800e2e2:	2a00      	cmp	r2, #0
 800e2e4:	d03d      	beq.n	800e362 <__kernel_cosf+0x9a>
 800e2e6:	ee60 5a00 	vmul.f32	s11, s0, s0
 800e2ea:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e368 <__kernel_cosf+0xa0>
 800e2ee:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800e36c <__kernel_cosf+0xa4>
 800e2f2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800e370 <__kernel_cosf+0xa8>
 800e2f6:	4a1f      	ldr	r2, [pc, #124]	; (800e374 <__kernel_cosf+0xac>)
 800e2f8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800e378 <__kernel_cosf+0xb0>
 800e302:	eee7 7a25 	vfma.f32	s15, s14, s11
 800e306:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800e37c <__kernel_cosf+0xb4>
 800e30a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800e30e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800e380 <__kernel_cosf+0xb8>
 800e312:	eee7 7a25 	vfma.f32	s15, s14, s11
 800e316:	eeb0 7a66 	vmov.f32	s14, s13
 800e31a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800e31e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e322:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800e326:	ee67 6a25 	vmul.f32	s13, s14, s11
 800e32a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800e32e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e332:	dc04      	bgt.n	800e33e <__kernel_cosf+0x76>
 800e334:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800e338:	ee36 0a47 	vsub.f32	s0, s12, s14
 800e33c:	4770      	bx	lr
 800e33e:	4a11      	ldr	r2, [pc, #68]	; (800e384 <__kernel_cosf+0xbc>)
 800e340:	4293      	cmp	r3, r2
 800e342:	bfda      	itte	le
 800e344:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800e348:	ee06 3a90 	vmovle	s13, r3
 800e34c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800e350:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e354:	ee36 0a66 	vsub.f32	s0, s12, s13
 800e358:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e35c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e360:	4770      	bx	lr
 800e362:	eeb0 0a46 	vmov.f32	s0, s12
 800e366:	4770      	bx	lr
 800e368:	ad47d74e 	.word	0xad47d74e
 800e36c:	310f74f6 	.word	0x310f74f6
 800e370:	3d2aaaab 	.word	0x3d2aaaab
 800e374:	3e999999 	.word	0x3e999999
 800e378:	b493f27c 	.word	0xb493f27c
 800e37c:	37d00d01 	.word	0x37d00d01
 800e380:	bab60b61 	.word	0xbab60b61
 800e384:	3f480000 	.word	0x3f480000

0800e388 <__kernel_rem_pio2f>:
 800e388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e38c:	ed2d 8b04 	vpush	{d8-d9}
 800e390:	b0d9      	sub	sp, #356	; 0x164
 800e392:	4688      	mov	r8, r1
 800e394:	9002      	str	r0, [sp, #8]
 800e396:	49bb      	ldr	r1, [pc, #748]	; (800e684 <__kernel_rem_pio2f+0x2fc>)
 800e398:	9866      	ldr	r0, [sp, #408]	; 0x198
 800e39a:	9301      	str	r3, [sp, #4]
 800e39c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800e3a0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800e3a4:	1e59      	subs	r1, r3, #1
 800e3a6:	1d13      	adds	r3, r2, #4
 800e3a8:	db27      	blt.n	800e3fa <__kernel_rem_pio2f+0x72>
 800e3aa:	f1b2 0b03 	subs.w	fp, r2, #3
 800e3ae:	bf48      	it	mi
 800e3b0:	f102 0b04 	addmi.w	fp, r2, #4
 800e3b4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800e3b8:	1c45      	adds	r5, r0, #1
 800e3ba:	00ec      	lsls	r4, r5, #3
 800e3bc:	1a47      	subs	r7, r0, r1
 800e3be:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800e694 <__kernel_rem_pio2f+0x30c>
 800e3c2:	9403      	str	r4, [sp, #12]
 800e3c4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800e3c8:	eb0a 0c01 	add.w	ip, sl, r1
 800e3cc:	ae1c      	add	r6, sp, #112	; 0x70
 800e3ce:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800e3d2:	2400      	movs	r4, #0
 800e3d4:	4564      	cmp	r4, ip
 800e3d6:	dd12      	ble.n	800e3fe <__kernel_rem_pio2f+0x76>
 800e3d8:	9b01      	ldr	r3, [sp, #4]
 800e3da:	ac1c      	add	r4, sp, #112	; 0x70
 800e3dc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800e3e0:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800e3e4:	f04f 0c00 	mov.w	ip, #0
 800e3e8:	45d4      	cmp	ip, sl
 800e3ea:	dc27      	bgt.n	800e43c <__kernel_rem_pio2f+0xb4>
 800e3ec:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800e3f0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800e694 <__kernel_rem_pio2f+0x30c>
 800e3f4:	4627      	mov	r7, r4
 800e3f6:	2600      	movs	r6, #0
 800e3f8:	e016      	b.n	800e428 <__kernel_rem_pio2f+0xa0>
 800e3fa:	2000      	movs	r0, #0
 800e3fc:	e7dc      	b.n	800e3b8 <__kernel_rem_pio2f+0x30>
 800e3fe:	42e7      	cmn	r7, r4
 800e400:	bf5d      	ittte	pl
 800e402:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800e406:	ee07 3a90 	vmovpl	s15, r3
 800e40a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800e40e:	eef0 7a47 	vmovmi.f32	s15, s14
 800e412:	ece6 7a01 	vstmia	r6!, {s15}
 800e416:	3401      	adds	r4, #1
 800e418:	e7dc      	b.n	800e3d4 <__kernel_rem_pio2f+0x4c>
 800e41a:	ecf9 6a01 	vldmia	r9!, {s13}
 800e41e:	ed97 7a00 	vldr	s14, [r7]
 800e422:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e426:	3601      	adds	r6, #1
 800e428:	428e      	cmp	r6, r1
 800e42a:	f1a7 0704 	sub.w	r7, r7, #4
 800e42e:	ddf4      	ble.n	800e41a <__kernel_rem_pio2f+0x92>
 800e430:	eceb 7a01 	vstmia	fp!, {s15}
 800e434:	f10c 0c01 	add.w	ip, ip, #1
 800e438:	3404      	adds	r4, #4
 800e43a:	e7d5      	b.n	800e3e8 <__kernel_rem_pio2f+0x60>
 800e43c:	ab08      	add	r3, sp, #32
 800e43e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800e442:	eddf 8a93 	vldr	s17, [pc, #588]	; 800e690 <__kernel_rem_pio2f+0x308>
 800e446:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800e68c <__kernel_rem_pio2f+0x304>
 800e44a:	9304      	str	r3, [sp, #16]
 800e44c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800e450:	4656      	mov	r6, sl
 800e452:	00b3      	lsls	r3, r6, #2
 800e454:	9305      	str	r3, [sp, #20]
 800e456:	ab58      	add	r3, sp, #352	; 0x160
 800e458:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800e45c:	ac08      	add	r4, sp, #32
 800e45e:	ab44      	add	r3, sp, #272	; 0x110
 800e460:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800e464:	46a4      	mov	ip, r4
 800e466:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800e46a:	4637      	mov	r7, r6
 800e46c:	2f00      	cmp	r7, #0
 800e46e:	f1a0 0004 	sub.w	r0, r0, #4
 800e472:	dc4f      	bgt.n	800e514 <__kernel_rem_pio2f+0x18c>
 800e474:	4628      	mov	r0, r5
 800e476:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800e47a:	f000 fb6b 	bl	800eb54 <scalbnf>
 800e47e:	eeb0 8a40 	vmov.f32	s16, s0
 800e482:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800e486:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e48a:	f000 fb1b 	bl	800eac4 <floorf>
 800e48e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800e492:	eea0 8a67 	vfms.f32	s16, s0, s15
 800e496:	2d00      	cmp	r5, #0
 800e498:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800e49c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800e4a0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800e4a4:	ee17 9a90 	vmov	r9, s15
 800e4a8:	ee38 8a40 	vsub.f32	s16, s16, s0
 800e4ac:	dd44      	ble.n	800e538 <__kernel_rem_pio2f+0x1b0>
 800e4ae:	f106 3cff 	add.w	ip, r6, #4294967295
 800e4b2:	ab08      	add	r3, sp, #32
 800e4b4:	f1c5 0e08 	rsb	lr, r5, #8
 800e4b8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800e4bc:	fa47 f00e 	asr.w	r0, r7, lr
 800e4c0:	4481      	add	r9, r0
 800e4c2:	fa00 f00e 	lsl.w	r0, r0, lr
 800e4c6:	1a3f      	subs	r7, r7, r0
 800e4c8:	f1c5 0007 	rsb	r0, r5, #7
 800e4cc:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800e4d0:	4107      	asrs	r7, r0
 800e4d2:	2f00      	cmp	r7, #0
 800e4d4:	dd3f      	ble.n	800e556 <__kernel_rem_pio2f+0x1ce>
 800e4d6:	f04f 0e00 	mov.w	lr, #0
 800e4da:	f109 0901 	add.w	r9, r9, #1
 800e4de:	4673      	mov	r3, lr
 800e4e0:	4576      	cmp	r6, lr
 800e4e2:	dc6b      	bgt.n	800e5bc <__kernel_rem_pio2f+0x234>
 800e4e4:	2d00      	cmp	r5, #0
 800e4e6:	dd04      	ble.n	800e4f2 <__kernel_rem_pio2f+0x16a>
 800e4e8:	2d01      	cmp	r5, #1
 800e4ea:	d078      	beq.n	800e5de <__kernel_rem_pio2f+0x256>
 800e4ec:	2d02      	cmp	r5, #2
 800e4ee:	f000 8081 	beq.w	800e5f4 <__kernel_rem_pio2f+0x26c>
 800e4f2:	2f02      	cmp	r7, #2
 800e4f4:	d12f      	bne.n	800e556 <__kernel_rem_pio2f+0x1ce>
 800e4f6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e4fa:	ee30 8a48 	vsub.f32	s16, s0, s16
 800e4fe:	b353      	cbz	r3, 800e556 <__kernel_rem_pio2f+0x1ce>
 800e500:	4628      	mov	r0, r5
 800e502:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800e506:	f000 fb25 	bl	800eb54 <scalbnf>
 800e50a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800e50e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800e512:	e020      	b.n	800e556 <__kernel_rem_pio2f+0x1ce>
 800e514:	ee60 7a28 	vmul.f32	s15, s0, s17
 800e518:	3f01      	subs	r7, #1
 800e51a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e51e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e522:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800e526:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e52a:	ecac 0a01 	vstmia	ip!, {s0}
 800e52e:	ed90 0a00 	vldr	s0, [r0]
 800e532:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e536:	e799      	b.n	800e46c <__kernel_rem_pio2f+0xe4>
 800e538:	d105      	bne.n	800e546 <__kernel_rem_pio2f+0x1be>
 800e53a:	1e70      	subs	r0, r6, #1
 800e53c:	ab08      	add	r3, sp, #32
 800e53e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800e542:	11ff      	asrs	r7, r7, #7
 800e544:	e7c5      	b.n	800e4d2 <__kernel_rem_pio2f+0x14a>
 800e546:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e54a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e552:	da31      	bge.n	800e5b8 <__kernel_rem_pio2f+0x230>
 800e554:	2700      	movs	r7, #0
 800e556:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e55e:	f040 809b 	bne.w	800e698 <__kernel_rem_pio2f+0x310>
 800e562:	1e74      	subs	r4, r6, #1
 800e564:	46a4      	mov	ip, r4
 800e566:	2000      	movs	r0, #0
 800e568:	45d4      	cmp	ip, sl
 800e56a:	da4a      	bge.n	800e602 <__kernel_rem_pio2f+0x27a>
 800e56c:	2800      	cmp	r0, #0
 800e56e:	d07a      	beq.n	800e666 <__kernel_rem_pio2f+0x2de>
 800e570:	ab08      	add	r3, sp, #32
 800e572:	3d08      	subs	r5, #8
 800e574:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	f000 8081 	beq.w	800e680 <__kernel_rem_pio2f+0x2f8>
 800e57e:	4628      	mov	r0, r5
 800e580:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e584:	00a5      	lsls	r5, r4, #2
 800e586:	f000 fae5 	bl	800eb54 <scalbnf>
 800e58a:	aa44      	add	r2, sp, #272	; 0x110
 800e58c:	1d2b      	adds	r3, r5, #4
 800e58e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800e690 <__kernel_rem_pio2f+0x308>
 800e592:	18d1      	adds	r1, r2, r3
 800e594:	4622      	mov	r2, r4
 800e596:	2a00      	cmp	r2, #0
 800e598:	f280 80ae 	bge.w	800e6f8 <__kernel_rem_pio2f+0x370>
 800e59c:	4622      	mov	r2, r4
 800e59e:	2a00      	cmp	r2, #0
 800e5a0:	f2c0 80cc 	blt.w	800e73c <__kernel_rem_pio2f+0x3b4>
 800e5a4:	a944      	add	r1, sp, #272	; 0x110
 800e5a6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800e5aa:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800e688 <__kernel_rem_pio2f+0x300>
 800e5ae:	eddf 7a39 	vldr	s15, [pc, #228]	; 800e694 <__kernel_rem_pio2f+0x30c>
 800e5b2:	2000      	movs	r0, #0
 800e5b4:	1aa1      	subs	r1, r4, r2
 800e5b6:	e0b6      	b.n	800e726 <__kernel_rem_pio2f+0x39e>
 800e5b8:	2702      	movs	r7, #2
 800e5ba:	e78c      	b.n	800e4d6 <__kernel_rem_pio2f+0x14e>
 800e5bc:	6820      	ldr	r0, [r4, #0]
 800e5be:	b94b      	cbnz	r3, 800e5d4 <__kernel_rem_pio2f+0x24c>
 800e5c0:	b118      	cbz	r0, 800e5ca <__kernel_rem_pio2f+0x242>
 800e5c2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800e5c6:	6020      	str	r0, [r4, #0]
 800e5c8:	2001      	movs	r0, #1
 800e5ca:	f10e 0e01 	add.w	lr, lr, #1
 800e5ce:	3404      	adds	r4, #4
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	e785      	b.n	800e4e0 <__kernel_rem_pio2f+0x158>
 800e5d4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800e5d8:	6020      	str	r0, [r4, #0]
 800e5da:	4618      	mov	r0, r3
 800e5dc:	e7f5      	b.n	800e5ca <__kernel_rem_pio2f+0x242>
 800e5de:	1e74      	subs	r4, r6, #1
 800e5e0:	a808      	add	r0, sp, #32
 800e5e2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800e5e6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800e5ea:	f10d 0c20 	add.w	ip, sp, #32
 800e5ee:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800e5f2:	e77e      	b.n	800e4f2 <__kernel_rem_pio2f+0x16a>
 800e5f4:	1e74      	subs	r4, r6, #1
 800e5f6:	a808      	add	r0, sp, #32
 800e5f8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800e5fc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800e600:	e7f3      	b.n	800e5ea <__kernel_rem_pio2f+0x262>
 800e602:	ab08      	add	r3, sp, #32
 800e604:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800e608:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e60c:	4318      	orrs	r0, r3
 800e60e:	e7ab      	b.n	800e568 <__kernel_rem_pio2f+0x1e0>
 800e610:	f10c 0c01 	add.w	ip, ip, #1
 800e614:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800e618:	2c00      	cmp	r4, #0
 800e61a:	d0f9      	beq.n	800e610 <__kernel_rem_pio2f+0x288>
 800e61c:	9b05      	ldr	r3, [sp, #20]
 800e61e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800e622:	eb0d 0003 	add.w	r0, sp, r3
 800e626:	9b01      	ldr	r3, [sp, #4]
 800e628:	18f4      	adds	r4, r6, r3
 800e62a:	ab1c      	add	r3, sp, #112	; 0x70
 800e62c:	1c77      	adds	r7, r6, #1
 800e62e:	384c      	subs	r0, #76	; 0x4c
 800e630:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e634:	4466      	add	r6, ip
 800e636:	42be      	cmp	r6, r7
 800e638:	f6ff af0b 	blt.w	800e452 <__kernel_rem_pio2f+0xca>
 800e63c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800e640:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e644:	ee07 3a90 	vmov	s15, r3
 800e648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e64c:	f04f 0c00 	mov.w	ip, #0
 800e650:	ece4 7a01 	vstmia	r4!, {s15}
 800e654:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800e694 <__kernel_rem_pio2f+0x30c>
 800e658:	46a1      	mov	r9, r4
 800e65a:	458c      	cmp	ip, r1
 800e65c:	dd07      	ble.n	800e66e <__kernel_rem_pio2f+0x2e6>
 800e65e:	ece0 7a01 	vstmia	r0!, {s15}
 800e662:	3701      	adds	r7, #1
 800e664:	e7e7      	b.n	800e636 <__kernel_rem_pio2f+0x2ae>
 800e666:	9804      	ldr	r0, [sp, #16]
 800e668:	f04f 0c01 	mov.w	ip, #1
 800e66c:	e7d2      	b.n	800e614 <__kernel_rem_pio2f+0x28c>
 800e66e:	ecfe 6a01 	vldmia	lr!, {s13}
 800e672:	ed39 7a01 	vldmdb	r9!, {s14}
 800e676:	f10c 0c01 	add.w	ip, ip, #1
 800e67a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e67e:	e7ec      	b.n	800e65a <__kernel_rem_pio2f+0x2d2>
 800e680:	3c01      	subs	r4, #1
 800e682:	e775      	b.n	800e570 <__kernel_rem_pio2f+0x1e8>
 800e684:	0800f478 	.word	0x0800f478
 800e688:	0800f44c 	.word	0x0800f44c
 800e68c:	43800000 	.word	0x43800000
 800e690:	3b800000 	.word	0x3b800000
 800e694:	00000000 	.word	0x00000000
 800e698:	9b03      	ldr	r3, [sp, #12]
 800e69a:	eeb0 0a48 	vmov.f32	s0, s16
 800e69e:	1a98      	subs	r0, r3, r2
 800e6a0:	f000 fa58 	bl	800eb54 <scalbnf>
 800e6a4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800e68c <__kernel_rem_pio2f+0x304>
 800e6a8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6b0:	db19      	blt.n	800e6e6 <__kernel_rem_pio2f+0x35e>
 800e6b2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800e690 <__kernel_rem_pio2f+0x308>
 800e6b6:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e6ba:	aa08      	add	r2, sp, #32
 800e6bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e6c0:	1c74      	adds	r4, r6, #1
 800e6c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e6c6:	3508      	adds	r5, #8
 800e6c8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e6cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e6d0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e6d4:	ee10 3a10 	vmov	r3, s0
 800e6d8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800e6dc:	ee17 3a90 	vmov	r3, s15
 800e6e0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e6e4:	e74b      	b.n	800e57e <__kernel_rem_pio2f+0x1f6>
 800e6e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e6ea:	aa08      	add	r2, sp, #32
 800e6ec:	ee10 3a10 	vmov	r3, s0
 800e6f0:	4634      	mov	r4, r6
 800e6f2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800e6f6:	e742      	b.n	800e57e <__kernel_rem_pio2f+0x1f6>
 800e6f8:	a808      	add	r0, sp, #32
 800e6fa:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800e6fe:	9001      	str	r0, [sp, #4]
 800e700:	ee07 0a90 	vmov	s15, r0
 800e704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e708:	3a01      	subs	r2, #1
 800e70a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e70e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e712:	ed61 7a01 	vstmdb	r1!, {s15}
 800e716:	e73e      	b.n	800e596 <__kernel_rem_pio2f+0x20e>
 800e718:	ecfc 6a01 	vldmia	ip!, {s13}
 800e71c:	ecb6 7a01 	vldmia	r6!, {s14}
 800e720:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e724:	3001      	adds	r0, #1
 800e726:	4550      	cmp	r0, sl
 800e728:	dc01      	bgt.n	800e72e <__kernel_rem_pio2f+0x3a6>
 800e72a:	4288      	cmp	r0, r1
 800e72c:	ddf4      	ble.n	800e718 <__kernel_rem_pio2f+0x390>
 800e72e:	a858      	add	r0, sp, #352	; 0x160
 800e730:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e734:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800e738:	3a01      	subs	r2, #1
 800e73a:	e730      	b.n	800e59e <__kernel_rem_pio2f+0x216>
 800e73c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800e73e:	2a02      	cmp	r2, #2
 800e740:	dc09      	bgt.n	800e756 <__kernel_rem_pio2f+0x3ce>
 800e742:	2a00      	cmp	r2, #0
 800e744:	dc2a      	bgt.n	800e79c <__kernel_rem_pio2f+0x414>
 800e746:	d043      	beq.n	800e7d0 <__kernel_rem_pio2f+0x448>
 800e748:	f009 0007 	and.w	r0, r9, #7
 800e74c:	b059      	add	sp, #356	; 0x164
 800e74e:	ecbd 8b04 	vpop	{d8-d9}
 800e752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e756:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800e758:	2b03      	cmp	r3, #3
 800e75a:	d1f5      	bne.n	800e748 <__kernel_rem_pio2f+0x3c0>
 800e75c:	ab30      	add	r3, sp, #192	; 0xc0
 800e75e:	442b      	add	r3, r5
 800e760:	461a      	mov	r2, r3
 800e762:	4619      	mov	r1, r3
 800e764:	4620      	mov	r0, r4
 800e766:	2800      	cmp	r0, #0
 800e768:	f1a1 0104 	sub.w	r1, r1, #4
 800e76c:	dc51      	bgt.n	800e812 <__kernel_rem_pio2f+0x48a>
 800e76e:	4621      	mov	r1, r4
 800e770:	2901      	cmp	r1, #1
 800e772:	f1a2 0204 	sub.w	r2, r2, #4
 800e776:	dc5c      	bgt.n	800e832 <__kernel_rem_pio2f+0x4aa>
 800e778:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800e694 <__kernel_rem_pio2f+0x30c>
 800e77c:	3304      	adds	r3, #4
 800e77e:	2c01      	cmp	r4, #1
 800e780:	dc67      	bgt.n	800e852 <__kernel_rem_pio2f+0x4ca>
 800e782:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800e786:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800e78a:	2f00      	cmp	r7, #0
 800e78c:	d167      	bne.n	800e85e <__kernel_rem_pio2f+0x4d6>
 800e78e:	edc8 6a00 	vstr	s13, [r8]
 800e792:	ed88 7a01 	vstr	s14, [r8, #4]
 800e796:	edc8 7a02 	vstr	s15, [r8, #8]
 800e79a:	e7d5      	b.n	800e748 <__kernel_rem_pio2f+0x3c0>
 800e79c:	aa30      	add	r2, sp, #192	; 0xc0
 800e79e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800e694 <__kernel_rem_pio2f+0x30c>
 800e7a2:	4413      	add	r3, r2
 800e7a4:	4622      	mov	r2, r4
 800e7a6:	2a00      	cmp	r2, #0
 800e7a8:	da24      	bge.n	800e7f4 <__kernel_rem_pio2f+0x46c>
 800e7aa:	b34f      	cbz	r7, 800e800 <__kernel_rem_pio2f+0x478>
 800e7ac:	eef1 7a47 	vneg.f32	s15, s14
 800e7b0:	edc8 7a00 	vstr	s15, [r8]
 800e7b4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800e7b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e7bc:	aa31      	add	r2, sp, #196	; 0xc4
 800e7be:	2301      	movs	r3, #1
 800e7c0:	429c      	cmp	r4, r3
 800e7c2:	da20      	bge.n	800e806 <__kernel_rem_pio2f+0x47e>
 800e7c4:	b10f      	cbz	r7, 800e7ca <__kernel_rem_pio2f+0x442>
 800e7c6:	eef1 7a67 	vneg.f32	s15, s15
 800e7ca:	edc8 7a01 	vstr	s15, [r8, #4]
 800e7ce:	e7bb      	b.n	800e748 <__kernel_rem_pio2f+0x3c0>
 800e7d0:	aa30      	add	r2, sp, #192	; 0xc0
 800e7d2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800e694 <__kernel_rem_pio2f+0x30c>
 800e7d6:	4413      	add	r3, r2
 800e7d8:	2c00      	cmp	r4, #0
 800e7da:	da05      	bge.n	800e7e8 <__kernel_rem_pio2f+0x460>
 800e7dc:	b10f      	cbz	r7, 800e7e2 <__kernel_rem_pio2f+0x45a>
 800e7de:	eef1 7a67 	vneg.f32	s15, s15
 800e7e2:	edc8 7a00 	vstr	s15, [r8]
 800e7e6:	e7af      	b.n	800e748 <__kernel_rem_pio2f+0x3c0>
 800e7e8:	ed33 7a01 	vldmdb	r3!, {s14}
 800e7ec:	3c01      	subs	r4, #1
 800e7ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e7f2:	e7f1      	b.n	800e7d8 <__kernel_rem_pio2f+0x450>
 800e7f4:	ed73 7a01 	vldmdb	r3!, {s15}
 800e7f8:	3a01      	subs	r2, #1
 800e7fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e7fe:	e7d2      	b.n	800e7a6 <__kernel_rem_pio2f+0x41e>
 800e800:	eef0 7a47 	vmov.f32	s15, s14
 800e804:	e7d4      	b.n	800e7b0 <__kernel_rem_pio2f+0x428>
 800e806:	ecb2 7a01 	vldmia	r2!, {s14}
 800e80a:	3301      	adds	r3, #1
 800e80c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e810:	e7d6      	b.n	800e7c0 <__kernel_rem_pio2f+0x438>
 800e812:	edd1 7a00 	vldr	s15, [r1]
 800e816:	edd1 6a01 	vldr	s13, [r1, #4]
 800e81a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e81e:	3801      	subs	r0, #1
 800e820:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e824:	ed81 7a00 	vstr	s14, [r1]
 800e828:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e82c:	edc1 7a01 	vstr	s15, [r1, #4]
 800e830:	e799      	b.n	800e766 <__kernel_rem_pio2f+0x3de>
 800e832:	edd2 7a00 	vldr	s15, [r2]
 800e836:	edd2 6a01 	vldr	s13, [r2, #4]
 800e83a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e83e:	3901      	subs	r1, #1
 800e840:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e844:	ed82 7a00 	vstr	s14, [r2]
 800e848:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e84c:	edc2 7a01 	vstr	s15, [r2, #4]
 800e850:	e78e      	b.n	800e770 <__kernel_rem_pio2f+0x3e8>
 800e852:	ed33 7a01 	vldmdb	r3!, {s14}
 800e856:	3c01      	subs	r4, #1
 800e858:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e85c:	e78f      	b.n	800e77e <__kernel_rem_pio2f+0x3f6>
 800e85e:	eef1 6a66 	vneg.f32	s13, s13
 800e862:	eeb1 7a47 	vneg.f32	s14, s14
 800e866:	edc8 6a00 	vstr	s13, [r8]
 800e86a:	ed88 7a01 	vstr	s14, [r8, #4]
 800e86e:	eef1 7a67 	vneg.f32	s15, s15
 800e872:	e790      	b.n	800e796 <__kernel_rem_pio2f+0x40e>

0800e874 <__kernel_sinf>:
 800e874:	ee10 3a10 	vmov	r3, s0
 800e878:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e87c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e880:	da04      	bge.n	800e88c <__kernel_sinf+0x18>
 800e882:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e886:	ee17 3a90 	vmov	r3, s15
 800e88a:	b35b      	cbz	r3, 800e8e4 <__kernel_sinf+0x70>
 800e88c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e890:	eddf 7a15 	vldr	s15, [pc, #84]	; 800e8e8 <__kernel_sinf+0x74>
 800e894:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800e8ec <__kernel_sinf+0x78>
 800e898:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e89c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800e8f0 <__kernel_sinf+0x7c>
 800e8a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e8a4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800e8f4 <__kernel_sinf+0x80>
 800e8a8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e8ac:	eddf 7a12 	vldr	s15, [pc, #72]	; 800e8f8 <__kernel_sinf+0x84>
 800e8b0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800e8b4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e8b8:	b930      	cbnz	r0, 800e8c8 <__kernel_sinf+0x54>
 800e8ba:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800e8fc <__kernel_sinf+0x88>
 800e8be:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e8c2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800e8c6:	4770      	bx	lr
 800e8c8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800e8cc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800e8d0:	eee0 7a86 	vfma.f32	s15, s1, s12
 800e8d4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800e8d8:	eddf 7a09 	vldr	s15, [pc, #36]	; 800e900 <__kernel_sinf+0x8c>
 800e8dc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800e8e0:	ee30 0a60 	vsub.f32	s0, s0, s1
 800e8e4:	4770      	bx	lr
 800e8e6:	bf00      	nop
 800e8e8:	2f2ec9d3 	.word	0x2f2ec9d3
 800e8ec:	b2d72f34 	.word	0xb2d72f34
 800e8f0:	3638ef1b 	.word	0x3638ef1b
 800e8f4:	b9500d01 	.word	0xb9500d01
 800e8f8:	3c088889 	.word	0x3c088889
 800e8fc:	be2aaaab 	.word	0xbe2aaaab
 800e900:	3e2aaaab 	.word	0x3e2aaaab

0800e904 <__kernel_tanf>:
 800e904:	b508      	push	{r3, lr}
 800e906:	ee10 3a10 	vmov	r3, s0
 800e90a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e90e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800e912:	eef0 7a40 	vmov.f32	s15, s0
 800e916:	da17      	bge.n	800e948 <__kernel_tanf+0x44>
 800e918:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800e91c:	ee17 1a10 	vmov	r1, s14
 800e920:	bb41      	cbnz	r1, 800e974 <__kernel_tanf+0x70>
 800e922:	1c43      	adds	r3, r0, #1
 800e924:	4313      	orrs	r3, r2
 800e926:	d108      	bne.n	800e93a <__kernel_tanf+0x36>
 800e928:	f7ff fa02 	bl	800dd30 <fabsf>
 800e92c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e930:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e934:	eeb0 0a67 	vmov.f32	s0, s15
 800e938:	bd08      	pop	{r3, pc}
 800e93a:	2801      	cmp	r0, #1
 800e93c:	d0fa      	beq.n	800e934 <__kernel_tanf+0x30>
 800e93e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e942:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e946:	e7f5      	b.n	800e934 <__kernel_tanf+0x30>
 800e948:	494c      	ldr	r1, [pc, #304]	; (800ea7c <__kernel_tanf+0x178>)
 800e94a:	428a      	cmp	r2, r1
 800e94c:	db12      	blt.n	800e974 <__kernel_tanf+0x70>
 800e94e:	2b00      	cmp	r3, #0
 800e950:	bfb8      	it	lt
 800e952:	eef1 7a40 	vneglt.f32	s15, s0
 800e956:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800ea80 <__kernel_tanf+0x17c>
 800e95a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e95e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800ea84 <__kernel_tanf+0x180>
 800e962:	bfb8      	it	lt
 800e964:	eef1 0a60 	vneglt.f32	s1, s1
 800e968:	ee70 0a60 	vsub.f32	s1, s0, s1
 800e96c:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800e970:	eddf 0a45 	vldr	s1, [pc, #276]	; 800ea88 <__kernel_tanf+0x184>
 800e974:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ea8c <__kernel_tanf+0x188>
 800e978:	ed9f 6a45 	vldr	s12, [pc, #276]	; 800ea90 <__kernel_tanf+0x18c>
 800e97c:	ed9f 5a45 	vldr	s10, [pc, #276]	; 800ea94 <__kernel_tanf+0x190>
 800e980:	493e      	ldr	r1, [pc, #248]	; (800ea7c <__kernel_tanf+0x178>)
 800e982:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800e986:	428a      	cmp	r2, r1
 800e988:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800e98c:	eea7 6a25 	vfma.f32	s12, s14, s11
 800e990:	eddf 5a41 	vldr	s11, [pc, #260]	; 800ea98 <__kernel_tanf+0x194>
 800e994:	eee6 5a07 	vfma.f32	s11, s12, s14
 800e998:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800ea9c <__kernel_tanf+0x198>
 800e99c:	eea5 6a87 	vfma.f32	s12, s11, s14
 800e9a0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800eaa0 <__kernel_tanf+0x19c>
 800e9a4:	eee6 5a07 	vfma.f32	s11, s12, s14
 800e9a8:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800eaa4 <__kernel_tanf+0x1a0>
 800e9ac:	eea5 6a87 	vfma.f32	s12, s11, s14
 800e9b0:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800eaa8 <__kernel_tanf+0x1a4>
 800e9b4:	eee7 5a05 	vfma.f32	s11, s14, s10
 800e9b8:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800eaac <__kernel_tanf+0x1a8>
 800e9bc:	eea5 5a87 	vfma.f32	s10, s11, s14
 800e9c0:	eddf 5a3b 	vldr	s11, [pc, #236]	; 800eab0 <__kernel_tanf+0x1ac>
 800e9c4:	eee5 5a07 	vfma.f32	s11, s10, s14
 800e9c8:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800eab4 <__kernel_tanf+0x1b0>
 800e9cc:	eea5 5a87 	vfma.f32	s10, s11, s14
 800e9d0:	eddf 5a39 	vldr	s11, [pc, #228]	; 800eab8 <__kernel_tanf+0x1b4>
 800e9d4:	eee5 5a07 	vfma.f32	s11, s10, s14
 800e9d8:	eeb0 7a46 	vmov.f32	s14, s12
 800e9dc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e9e0:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800e9e4:	eeb0 6a60 	vmov.f32	s12, s1
 800e9e8:	eea7 6a05 	vfma.f32	s12, s14, s10
 800e9ec:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800eabc <__kernel_tanf+0x1b8>
 800e9f0:	eee6 0a26 	vfma.f32	s1, s12, s13
 800e9f4:	eee5 0a07 	vfma.f32	s1, s10, s14
 800e9f8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800e9fc:	db1d      	blt.n	800ea3a <__kernel_tanf+0x136>
 800e9fe:	ee06 0a90 	vmov	s13, r0
 800ea02:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 800ea06:	ee27 6a07 	vmul.f32	s12, s14, s14
 800ea0a:	ee37 7a00 	vadd.f32	s14, s14, s0
 800ea0e:	179b      	asrs	r3, r3, #30
 800ea10:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800ea14:	f003 0302 	and.w	r3, r3, #2
 800ea18:	f1c3 0301 	rsb	r3, r3, #1
 800ea1c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ea20:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800ea24:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ea28:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ea2c:	ee07 3a90 	vmov	s15, r3
 800ea30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea34:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ea38:	e77c      	b.n	800e934 <__kernel_tanf+0x30>
 800ea3a:	2801      	cmp	r0, #1
 800ea3c:	d01b      	beq.n	800ea76 <__kernel_tanf+0x172>
 800ea3e:	4b20      	ldr	r3, [pc, #128]	; (800eac0 <__kernel_tanf+0x1bc>)
 800ea40:	ee17 2a10 	vmov	r2, s14
 800ea44:	401a      	ands	r2, r3
 800ea46:	ee06 2a10 	vmov	s12, r2
 800ea4a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ea4e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ea52:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800ea56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ea5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ea5e:	ee16 2a90 	vmov	r2, s13
 800ea62:	4013      	ands	r3, r2
 800ea64:	ee07 3a90 	vmov	s15, r3
 800ea68:	eea6 7a27 	vfma.f32	s14, s12, s15
 800ea6c:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800ea70:	eee7 7a26 	vfma.f32	s15, s14, s13
 800ea74:	e75e      	b.n	800e934 <__kernel_tanf+0x30>
 800ea76:	eef0 7a47 	vmov.f32	s15, s14
 800ea7a:	e75b      	b.n	800e934 <__kernel_tanf+0x30>
 800ea7c:	3f2ca140 	.word	0x3f2ca140
 800ea80:	3f490fda 	.word	0x3f490fda
 800ea84:	33222168 	.word	0x33222168
 800ea88:	00000000 	.word	0x00000000
 800ea8c:	b79bae5f 	.word	0xb79bae5f
 800ea90:	38a3f445 	.word	0x38a3f445
 800ea94:	37d95384 	.word	0x37d95384
 800ea98:	3a1a26c8 	.word	0x3a1a26c8
 800ea9c:	3b6b6916 	.word	0x3b6b6916
 800eaa0:	3cb327a4 	.word	0x3cb327a4
 800eaa4:	3e088889 	.word	0x3e088889
 800eaa8:	3895c07a 	.word	0x3895c07a
 800eaac:	398137b9 	.word	0x398137b9
 800eab0:	3abede48 	.word	0x3abede48
 800eab4:	3c11371f 	.word	0x3c11371f
 800eab8:	3d5d0dd1 	.word	0x3d5d0dd1
 800eabc:	3eaaaaab 	.word	0x3eaaaaab
 800eac0:	fffff000 	.word	0xfffff000

0800eac4 <floorf>:
 800eac4:	ee10 3a10 	vmov	r3, s0
 800eac8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800eacc:	3a7f      	subs	r2, #127	; 0x7f
 800eace:	2a16      	cmp	r2, #22
 800ead0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ead4:	dc2a      	bgt.n	800eb2c <floorf+0x68>
 800ead6:	2a00      	cmp	r2, #0
 800ead8:	da11      	bge.n	800eafe <floorf+0x3a>
 800eada:	eddf 7a18 	vldr	s15, [pc, #96]	; 800eb3c <floorf+0x78>
 800eade:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eae2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800eae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaea:	dd05      	ble.n	800eaf8 <floorf+0x34>
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	da23      	bge.n	800eb38 <floorf+0x74>
 800eaf0:	4a13      	ldr	r2, [pc, #76]	; (800eb40 <floorf+0x7c>)
 800eaf2:	2900      	cmp	r1, #0
 800eaf4:	bf18      	it	ne
 800eaf6:	4613      	movne	r3, r2
 800eaf8:	ee00 3a10 	vmov	s0, r3
 800eafc:	4770      	bx	lr
 800eafe:	4911      	ldr	r1, [pc, #68]	; (800eb44 <floorf+0x80>)
 800eb00:	4111      	asrs	r1, r2
 800eb02:	420b      	tst	r3, r1
 800eb04:	d0fa      	beq.n	800eafc <floorf+0x38>
 800eb06:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800eb3c <floorf+0x78>
 800eb0a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eb0e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800eb12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb16:	ddef      	ble.n	800eaf8 <floorf+0x34>
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	bfbe      	ittt	lt
 800eb1c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800eb20:	fa40 f202 	asrlt.w	r2, r0, r2
 800eb24:	189b      	addlt	r3, r3, r2
 800eb26:	ea23 0301 	bic.w	r3, r3, r1
 800eb2a:	e7e5      	b.n	800eaf8 <floorf+0x34>
 800eb2c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800eb30:	d3e4      	bcc.n	800eafc <floorf+0x38>
 800eb32:	ee30 0a00 	vadd.f32	s0, s0, s0
 800eb36:	4770      	bx	lr
 800eb38:	2300      	movs	r3, #0
 800eb3a:	e7dd      	b.n	800eaf8 <floorf+0x34>
 800eb3c:	7149f2ca 	.word	0x7149f2ca
 800eb40:	bf800000 	.word	0xbf800000
 800eb44:	007fffff 	.word	0x007fffff

0800eb48 <nanf>:
 800eb48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800eb50 <nanf+0x8>
 800eb4c:	4770      	bx	lr
 800eb4e:	bf00      	nop
 800eb50:	7fc00000 	.word	0x7fc00000

0800eb54 <scalbnf>:
 800eb54:	ee10 3a10 	vmov	r3, s0
 800eb58:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800eb5c:	d025      	beq.n	800ebaa <scalbnf+0x56>
 800eb5e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800eb62:	d302      	bcc.n	800eb6a <scalbnf+0x16>
 800eb64:	ee30 0a00 	vadd.f32	s0, s0, s0
 800eb68:	4770      	bx	lr
 800eb6a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800eb6e:	d122      	bne.n	800ebb6 <scalbnf+0x62>
 800eb70:	4b2a      	ldr	r3, [pc, #168]	; (800ec1c <scalbnf+0xc8>)
 800eb72:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800ec20 <scalbnf+0xcc>
 800eb76:	4298      	cmp	r0, r3
 800eb78:	ee20 0a27 	vmul.f32	s0, s0, s15
 800eb7c:	db16      	blt.n	800ebac <scalbnf+0x58>
 800eb7e:	ee10 3a10 	vmov	r3, s0
 800eb82:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800eb86:	3a19      	subs	r2, #25
 800eb88:	4402      	add	r2, r0
 800eb8a:	2afe      	cmp	r2, #254	; 0xfe
 800eb8c:	dd15      	ble.n	800ebba <scalbnf+0x66>
 800eb8e:	ee10 3a10 	vmov	r3, s0
 800eb92:	eddf 7a24 	vldr	s15, [pc, #144]	; 800ec24 <scalbnf+0xd0>
 800eb96:	eddf 6a24 	vldr	s13, [pc, #144]	; 800ec28 <scalbnf+0xd4>
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	eeb0 7a67 	vmov.f32	s14, s15
 800eba0:	bfb8      	it	lt
 800eba2:	eef0 7a66 	vmovlt.f32	s15, s13
 800eba6:	ee27 0a27 	vmul.f32	s0, s14, s15
 800ebaa:	4770      	bx	lr
 800ebac:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ec2c <scalbnf+0xd8>
 800ebb0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ebb4:	4770      	bx	lr
 800ebb6:	0dd2      	lsrs	r2, r2, #23
 800ebb8:	e7e6      	b.n	800eb88 <scalbnf+0x34>
 800ebba:	2a00      	cmp	r2, #0
 800ebbc:	dd06      	ble.n	800ebcc <scalbnf+0x78>
 800ebbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ebc2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ebc6:	ee00 3a10 	vmov	s0, r3
 800ebca:	4770      	bx	lr
 800ebcc:	f112 0f16 	cmn.w	r2, #22
 800ebd0:	da1a      	bge.n	800ec08 <scalbnf+0xb4>
 800ebd2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ebd6:	4298      	cmp	r0, r3
 800ebd8:	ee10 3a10 	vmov	r3, s0
 800ebdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ebe0:	dd0a      	ble.n	800ebf8 <scalbnf+0xa4>
 800ebe2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800ec24 <scalbnf+0xd0>
 800ebe6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800ec28 <scalbnf+0xd4>
 800ebea:	eef0 7a40 	vmov.f32	s15, s0
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	bf18      	it	ne
 800ebf2:	eeb0 0a47 	vmovne.f32	s0, s14
 800ebf6:	e7db      	b.n	800ebb0 <scalbnf+0x5c>
 800ebf8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800ec2c <scalbnf+0xd8>
 800ebfc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800ec30 <scalbnf+0xdc>
 800ec00:	eef0 7a40 	vmov.f32	s15, s0
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	e7f3      	b.n	800ebf0 <scalbnf+0x9c>
 800ec08:	3219      	adds	r2, #25
 800ec0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ec0e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ec12:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ec34 <scalbnf+0xe0>
 800ec16:	ee07 3a10 	vmov	s14, r3
 800ec1a:	e7c4      	b.n	800eba6 <scalbnf+0x52>
 800ec1c:	ffff3cb0 	.word	0xffff3cb0
 800ec20:	4c000000 	.word	0x4c000000
 800ec24:	7149f2ca 	.word	0x7149f2ca
 800ec28:	f149f2ca 	.word	0xf149f2ca
 800ec2c:	0da24260 	.word	0x0da24260
 800ec30:	8da24260 	.word	0x8da24260
 800ec34:	33000000 	.word	0x33000000

0800ec38 <_init>:
 800ec38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec3a:	bf00      	nop
 800ec3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec3e:	bc08      	pop	{r3}
 800ec40:	469e      	mov	lr, r3
 800ec42:	4770      	bx	lr

0800ec44 <_fini>:
 800ec44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec46:	bf00      	nop
 800ec48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec4a:	bc08      	pop	{r3}
 800ec4c:	469e      	mov	lr, r3
 800ec4e:	4770      	bx	lr
