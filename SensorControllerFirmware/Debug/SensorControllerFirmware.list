
SensorControllerFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d470  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0800d600  0800d600  0001d600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da44  0800da44  000202d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800da44  0800da44  0001da44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da4c  0800da4c  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da4c  0800da4c  0001da4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da50  0800da50  0001da50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0800da54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202d4  2**0
                  CONTENTS
 10 .bss          00001e58  200002d4  200002d4  000202d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000212c  2000212c  000202d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bc9d  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039a1  00000000  00000000  0003bfa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001828  00000000  00000000  0003f948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016c8  00000000  00000000  00041170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ea0  00000000  00000000  00042838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001defe  00000000  00000000  000666d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c98e1  00000000  00000000  000845d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014deb7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007920  00000000  00000000  0014df08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d5e8 	.word	0x0800d5e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	0800d5e8 	.word	0x0800d5e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f50:	b09c      	sub	sp, #112	; 0x70
 8000f52:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f54:	f000 ff74 	bl	8001e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f58:	f000 f900 	bl	800115c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5c:	f000 fb92 	bl	8001684 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f60:	f000 f966 	bl	8001230 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000f64:	f000 fb64 	bl	8001630 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000f68:	f008 fee6 	bl	8009d38 <MX_USB_DEVICE_Init>
  MX_I2C2_Init();
 8000f6c:	f000 f98e 	bl	800128c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000f70:	f000 fb34 	bl	80015dc <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000f74:	f000 f9ee 	bl	8001354 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000f78:	f000 fa84 	bl	8001484 <MX_TIM8_Init>
  MX_SPI1_Init();
 8000f7c:	f000 f9b4 	bl	80012e8 <MX_SPI1_Init>
  uint8_t regData;
  HAL_StatusTypeDef imuStatus;

  uint8_t logBuf[32];
  uint8_t bufLen;
  uint8_t pwrMgmtData = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	75fb      	strb	r3, [r7, #23]
  uint8_t smplRateData = 0x07;
 8000f84:	2307      	movs	r3, #7
 8000f86:	75bb      	strb	r3, [r7, #22]
  uint8_t configData = 0x00;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	757b      	strb	r3, [r7, #21]

  uint8_t accelData[6];
  uint8_t gyroData[6];

  int16_t Accel_X_RAW = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  int16_t Accel_Y_RAW = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  int16_t Accel_Z_RAW = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

  int16_t Gyro_X_RAW = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  int16_t Gyro_Y_RAW = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  int16_t Gyro_Z_RAW = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

  float Ax, Ay, Az, Gx, Gy, Gz;
  imuStatus = HAL_I2C_Mem_Read(&hi2c1, (0x68 << 1), 0x75, I2C_MEMADD_SIZE_8BIT, &regData, 1, 100);
 8000fb0:	2364      	movs	r3, #100	; 0x64
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	2275      	movs	r2, #117	; 0x75
 8000fc2:	21d0      	movs	r1, #208	; 0xd0
 8000fc4:	4862      	ldr	r0, [pc, #392]	; (8001150 <main+0x204>)
 8000fc6:	f001 fcd7 	bl	8002978 <HAL_I2C_Mem_Read>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

  HAL_I2C_Mem_Write(&hi2c1, (0x68 << 1), 0x6B, I2C_MEMADD_SIZE_8BIT, &pwrMgmtData, 1, 1000);
 8000fd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd4:	9302      	str	r3, [sp, #8]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	f107 0317 	add.w	r3, r7, #23
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	226b      	movs	r2, #107	; 0x6b
 8000fe4:	21d0      	movs	r1, #208	; 0xd0
 8000fe6:	485a      	ldr	r0, [pc, #360]	; (8001150 <main+0x204>)
 8000fe8:	f001 fbcc 	bl	8002784 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(&hi2c1, (0x68 << 1), 0x19, I2C_MEMADD_SIZE_8BIT, &smplRateData, 1, 1000);
 8000fec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff0:	9302      	str	r3, [sp, #8]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	f107 0316 	add.w	r3, r7, #22
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	2219      	movs	r2, #25
 8001000:	21d0      	movs	r1, #208	; 0xd0
 8001002:	4853      	ldr	r0, [pc, #332]	; (8001150 <main+0x204>)
 8001004:	f001 fbbe 	bl	8002784 <HAL_I2C_Mem_Write>

  HAL_I2C_Mem_Write(&hi2c1, (0x68 << 1), 0x1C, I2C_MEMADD_SIZE_8BIT, &configData, 1, 1000);
 8001008:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	2301      	movs	r3, #1
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	f107 0315 	add.w	r3, r7, #21
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2301      	movs	r3, #1
 800101a:	221c      	movs	r2, #28
 800101c:	21d0      	movs	r1, #208	; 0xd0
 800101e:	484c      	ldr	r0, [pc, #304]	; (8001150 <main+0x204>)
 8001020:	f001 fbb0 	bl	8002784 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(&hi2c1, (0x68 << 1), 0x1B, I2C_MEMADD_SIZE_8BIT, &configData, 1, 1000);
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	2301      	movs	r3, #1
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	f107 0315 	add.w	r3, r7, #21
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2301      	movs	r3, #1
 8001036:	221b      	movs	r2, #27
 8001038:	21d0      	movs	r1, #208	; 0xd0
 800103a:	4845      	ldr	r0, [pc, #276]	; (8001150 <main+0x204>)
 800103c:	f001 fba2 	bl	8002784 <HAL_I2C_Mem_Write>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_I2C_Mem_Read (&hi2c1, (0x68 << 1), 0x3B, 1, accelData, 6, 1000);
 8001040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	2306      	movs	r3, #6
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	223b      	movs	r2, #59	; 0x3b
 8001054:	21d0      	movs	r1, #208	; 0xd0
 8001056:	483e      	ldr	r0, [pc, #248]	; (8001150 <main+0x204>)
 8001058:	f001 fc8e 	bl	8002978 <HAL_I2C_Mem_Read>

	  Accel_X_RAW = (int16_t)(accelData[0] << 8 | accelData [1]);
 800105c:	7b3b      	ldrb	r3, [r7, #12]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21a      	sxth	r2, r3
 8001062:	7b7b      	ldrb	r3, [r7, #13]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	  Accel_Y_RAW = (int16_t)(accelData[2] << 8 | accelData [3]);
 800106c:	7bbb      	ldrb	r3, [r7, #14]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b21a      	sxth	r2, r3
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	b21b      	sxth	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	  Accel_Z_RAW = (int16_t)(accelData[4] << 8 | accelData [5]);
 800107c:	7c3b      	ldrb	r3, [r7, #16]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b21a      	sxth	r2, r3
 8001082:	7c7b      	ldrb	r3, [r7, #17]
 8001084:	b21b      	sxth	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	  Ax = Accel_X_RAW/16384.0;
 800108c:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fa47 	bl	8000524 <__aeabi_i2d>
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <main+0x208>)
 800109c:	f7ff fbd6 	bl	800084c <__aeabi_ddiv>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	f7ff fd7e 	bl	8000ba8 <__aeabi_d2f>
 80010ac:	4603      	mov	r3, r0
 80010ae:	647b      	str	r3, [r7, #68]	; 0x44
	  Ay = Accel_Y_RAW/16384.0;
 80010b0:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fa35 	bl	8000524 <__aeabi_i2d>
 80010ba:	f04f 0200 	mov.w	r2, #0
 80010be:	4b25      	ldr	r3, [pc, #148]	; (8001154 <main+0x208>)
 80010c0:	f7ff fbc4 	bl	800084c <__aeabi_ddiv>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4610      	mov	r0, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	f7ff fd6c 	bl	8000ba8 <__aeabi_d2f>
 80010d0:	4603      	mov	r3, r0
 80010d2:	643b      	str	r3, [r7, #64]	; 0x40
	  Az = Accel_Z_RAW/16384.0;
 80010d4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fa23 	bl	8000524 <__aeabi_i2d>
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <main+0x208>)
 80010e4:	f7ff fbb2 	bl	800084c <__aeabi_ddiv>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	f7ff fd5a 	bl	8000ba8 <__aeabi_d2f>
 80010f4:	4603      	mov	r3, r0
 80010f6:	63fb      	str	r3, [r7, #60]	; 0x3c

	  bufLen = snprintf(logBuf, 32, "%f,%f,%f\r\n", Ax, Ay, Az);
 80010f8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80010fa:	f7ff fa25 	bl	8000548 <__aeabi_f2d>
 80010fe:	4604      	mov	r4, r0
 8001100:	460d      	mov	r5, r1
 8001102:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001104:	f7ff fa20 	bl	8000548 <__aeabi_f2d>
 8001108:	4680      	mov	r8, r0
 800110a:	4689      	mov	r9, r1
 800110c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800110e:	f7ff fa1b 	bl	8000548 <__aeabi_f2d>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	f107 0018 	add.w	r0, r7, #24
 800111a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800111e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001122:	e9cd 4500 	strd	r4, r5, [sp]
 8001126:	4a0c      	ldr	r2, [pc, #48]	; (8001158 <main+0x20c>)
 8001128:	2120      	movs	r1, #32
 800112a:	f009 ffcf 	bl	800b0cc <sniprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	  CDC_Transmit_FS((uint8_t *) logBuf, bufLen);
 8001134:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001138:	b29a      	uxth	r2, r3
 800113a:	f107 0318 	add.w	r3, r7, #24
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f008 fecb 	bl	8009edc <CDC_Transmit_FS>

	  HAL_Delay(100);
 8001146:	2064      	movs	r0, #100	; 0x64
 8001148:	f000 feec 	bl	8001f24 <HAL_Delay>
	  HAL_I2C_Mem_Read (&hi2c1, (0x68 << 1), 0x3B, 1, accelData, 6, 1000);
 800114c:	e778      	b.n	8001040 <main+0xf4>
 800114e:	bf00      	nop
 8001150:	200002f0 	.word	0x200002f0
 8001154:	40d00000 	.word	0x40d00000
 8001158:	0800d600 	.word	0x0800d600

0800115c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b094      	sub	sp, #80	; 0x50
 8001160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001162:	f107 0320 	add.w	r3, r7, #32
 8001166:	2230      	movs	r2, #48	; 0x30
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f009 fb3c 	bl	800a7e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	4b28      	ldr	r3, [pc, #160]	; (8001228 <SystemClock_Config+0xcc>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	4a27      	ldr	r2, [pc, #156]	; (8001228 <SystemClock_Config+0xcc>)
 800118a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118e:	6413      	str	r3, [r2, #64]	; 0x40
 8001190:	4b25      	ldr	r3, [pc, #148]	; (8001228 <SystemClock_Config+0xcc>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800119c:	2300      	movs	r3, #0
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	4b22      	ldr	r3, [pc, #136]	; (800122c <SystemClock_Config+0xd0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a21      	ldr	r2, [pc, #132]	; (800122c <SystemClock_Config+0xd0>)
 80011a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	4b1f      	ldr	r3, [pc, #124]	; (800122c <SystemClock_Config+0xd0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011b8:	2301      	movs	r3, #1
 80011ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c2:	2302      	movs	r3, #2
 80011c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011cc:	2308      	movs	r3, #8
 80011ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80011d0:	2360      	movs	r3, #96	; 0x60
 80011d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011d8:	2304      	movs	r3, #4
 80011da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011dc:	f107 0320 	add.w	r3, r7, #32
 80011e0:	4618      	mov	r0, r3
 80011e2:	f003 fbc7 	bl	8004974 <HAL_RCC_OscConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011ec:	f000 faaa 	bl	8001744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f0:	230f      	movs	r3, #15
 80011f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f4:	2302      	movs	r3, #2
 80011f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001200:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001206:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2103      	movs	r1, #3
 800120e:	4618      	mov	r0, r3
 8001210:	f003 fe28 	bl	8004e64 <HAL_RCC_ClockConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800121a:	f000 fa93 	bl	8001744 <Error_Handler>
  }
}
 800121e:	bf00      	nop
 8001220:	3750      	adds	r7, #80	; 0x50
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800
 800122c:	40007000 	.word	0x40007000

08001230 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <MX_I2C1_Init+0x50>)
 8001236:	4a13      	ldr	r2, [pc, #76]	; (8001284 <MX_I2C1_Init+0x54>)
 8001238:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_I2C1_Init+0x50>)
 800123c:	4a12      	ldr	r2, [pc, #72]	; (8001288 <MX_I2C1_Init+0x58>)
 800123e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_I2C1_Init+0x50>)
 800124e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001252:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <MX_I2C1_Init+0x50>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_I2C1_Init+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <MX_I2C1_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_I2C1_Init+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_I2C1_Init+0x50>)
 800126e:	f001 f945 	bl	80024fc <HAL_I2C_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001278:	f000 fa64 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200002f0 	.word	0x200002f0
 8001284:	40005400 	.word	0x40005400
 8001288:	00061a80 	.word	0x00061a80

0800128c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_I2C2_Init+0x50>)
 8001292:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <MX_I2C2_Init+0x54>)
 8001294:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_I2C2_Init+0x50>)
 8001298:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <MX_I2C2_Init+0x58>)
 800129a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_I2C2_Init+0x50>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_I2C2_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_I2C2_Init+0x50>)
 80012aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <MX_I2C2_Init+0x50>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_I2C2_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <MX_I2C2_Init+0x50>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_I2C2_Init+0x50>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012c8:	4804      	ldr	r0, [pc, #16]	; (80012dc <MX_I2C2_Init+0x50>)
 80012ca:	f001 f917 	bl	80024fc <HAL_I2C_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012d4:	f000 fa36 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000344 	.word	0x20000344
 80012e0:	40005800 	.word	0x40005800
 80012e4:	000186a0 	.word	0x000186a0

080012e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <MX_SPI1_Init+0x64>)
 80012ee:	4a18      	ldr	r2, [pc, #96]	; (8001350 <MX_SPI1_Init+0x68>)
 80012f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <MX_SPI1_Init+0x64>)
 80012f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_SPI1_Init+0x64>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <MX_SPI1_Init+0x64>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_SPI1_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_SPI1_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_SPI1_Init+0x64>)
 8001314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001318:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_SPI1_Init+0x64>)
 800131c:	2200      	movs	r2, #0
 800131e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001320:	4b0a      	ldr	r3, [pc, #40]	; (800134c <MX_SPI1_Init+0x64>)
 8001322:	2200      	movs	r2, #0
 8001324:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_SPI1_Init+0x64>)
 8001328:	2200      	movs	r2, #0
 800132a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <MX_SPI1_Init+0x64>)
 800132e:	2200      	movs	r2, #0
 8001330:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_SPI1_Init+0x64>)
 8001334:	220a      	movs	r2, #10
 8001336:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_SPI1_Init+0x64>)
 800133a:	f003 ffb1 	bl	80052a0 <HAL_SPI_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001344:	f000 f9fe 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000398 	.word	0x20000398
 8001350:	40013000 	.word	0x40013000

08001354 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08e      	sub	sp, #56	; 0x38
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001368:	f107 0320 	add.w	r3, r7, #32
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
 8001380:	615a      	str	r2, [r3, #20]
 8001382:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001384:	4b3d      	ldr	r3, [pc, #244]	; (800147c <MX_TIM3_Init+0x128>)
 8001386:	4a3e      	ldr	r2, [pc, #248]	; (8001480 <MX_TIM3_Init+0x12c>)
 8001388:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800138a:	4b3c      	ldr	r3, [pc, #240]	; (800147c <MX_TIM3_Init+0x128>)
 800138c:	2200      	movs	r2, #0
 800138e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001390:	4b3a      	ldr	r3, [pc, #232]	; (800147c <MX_TIM3_Init+0x128>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001396:	4b39      	ldr	r3, [pc, #228]	; (800147c <MX_TIM3_Init+0x128>)
 8001398:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800139c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139e:	4b37      	ldr	r3, [pc, #220]	; (800147c <MX_TIM3_Init+0x128>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a4:	4b35      	ldr	r3, [pc, #212]	; (800147c <MX_TIM3_Init+0x128>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013aa:	4834      	ldr	r0, [pc, #208]	; (800147c <MX_TIM3_Init+0x128>)
 80013ac:	f004 f801 	bl	80053b2 <HAL_TIM_Base_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80013b6:	f000 f9c5 	bl	8001744 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c4:	4619      	mov	r1, r3
 80013c6:	482d      	ldr	r0, [pc, #180]	; (800147c <MX_TIM3_Init+0x128>)
 80013c8:	f004 f95e 	bl	8005688 <HAL_TIM_ConfigClockSource>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80013d2:	f000 f9b7 	bl	8001744 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013d6:	4829      	ldr	r0, [pc, #164]	; (800147c <MX_TIM3_Init+0x128>)
 80013d8:	f004 f83a 	bl	8005450 <HAL_TIM_PWM_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013e2:	f000 f9af 	bl	8001744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ee:	f107 0320 	add.w	r3, r7, #32
 80013f2:	4619      	mov	r1, r3
 80013f4:	4821      	ldr	r0, [pc, #132]	; (800147c <MX_TIM3_Init+0x128>)
 80013f6:	f004 fcf9 	bl	8005dec <HAL_TIMEx_MasterConfigSynchronization>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001400:	f000 f9a0 	bl	8001744 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001404:	2360      	movs	r3, #96	; 0x60
 8001406:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2200      	movs	r2, #0
 8001418:	4619      	mov	r1, r3
 800141a:	4818      	ldr	r0, [pc, #96]	; (800147c <MX_TIM3_Init+0x128>)
 800141c:	f004 f872 	bl	8005504 <HAL_TIM_PWM_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001426:	f000 f98d 	bl	8001744 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2204      	movs	r2, #4
 800142e:	4619      	mov	r1, r3
 8001430:	4812      	ldr	r0, [pc, #72]	; (800147c <MX_TIM3_Init+0x128>)
 8001432:	f004 f867 	bl	8005504 <HAL_TIM_PWM_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800143c:	f000 f982 	bl	8001744 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2208      	movs	r2, #8
 8001444:	4619      	mov	r1, r3
 8001446:	480d      	ldr	r0, [pc, #52]	; (800147c <MX_TIM3_Init+0x128>)
 8001448:	f004 f85c 	bl	8005504 <HAL_TIM_PWM_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001452:	f000 f977 	bl	8001744 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	220c      	movs	r2, #12
 800145a:	4619      	mov	r1, r3
 800145c:	4807      	ldr	r0, [pc, #28]	; (800147c <MX_TIM3_Init+0x128>)
 800145e:	f004 f851 	bl	8005504 <HAL_TIM_PWM_ConfigChannel>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001468:	f000 f96c 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800146c:	4803      	ldr	r0, [pc, #12]	; (800147c <MX_TIM3_Init+0x128>)
 800146e:	f000 fab3 	bl	80019d8 <HAL_TIM_MspPostInit>

}
 8001472:	bf00      	nop
 8001474:	3738      	adds	r7, #56	; 0x38
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200003f0 	.word	0x200003f0
 8001480:	40000400 	.word	0x40000400

08001484 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b096      	sub	sp, #88	; 0x58
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001498:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]
 80014b2:	615a      	str	r2, [r3, #20]
 80014b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	2220      	movs	r2, #32
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f009 f993 	bl	800a7e8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014c2:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <MX_TIM8_Init+0x150>)
 80014c4:	4a44      	ldr	r2, [pc, #272]	; (80015d8 <MX_TIM8_Init+0x154>)
 80014c6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80014c8:	4b42      	ldr	r3, [pc, #264]	; (80015d4 <MX_TIM8_Init+0x150>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ce:	4b41      	ldr	r3, [pc, #260]	; (80015d4 <MX_TIM8_Init+0x150>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80014d4:	4b3f      	ldr	r3, [pc, #252]	; (80015d4 <MX_TIM8_Init+0x150>)
 80014d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014da:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014dc:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <MX_TIM8_Init+0x150>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014e2:	4b3c      	ldr	r3, [pc, #240]	; (80015d4 <MX_TIM8_Init+0x150>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e8:	4b3a      	ldr	r3, [pc, #232]	; (80015d4 <MX_TIM8_Init+0x150>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014ee:	4839      	ldr	r0, [pc, #228]	; (80015d4 <MX_TIM8_Init+0x150>)
 80014f0:	f003 ff5f 	bl	80053b2 <HAL_TIM_Base_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80014fa:	f000 f923 	bl	8001744 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001502:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001504:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001508:	4619      	mov	r1, r3
 800150a:	4832      	ldr	r0, [pc, #200]	; (80015d4 <MX_TIM8_Init+0x150>)
 800150c:	f004 f8bc 	bl	8005688 <HAL_TIM_ConfigClockSource>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001516:	f000 f915 	bl	8001744 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800151a:	482e      	ldr	r0, [pc, #184]	; (80015d4 <MX_TIM8_Init+0x150>)
 800151c:	f003 ff98 	bl	8005450 <HAL_TIM_PWM_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001526:	f000 f90d 	bl	8001744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001532:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001536:	4619      	mov	r1, r3
 8001538:	4826      	ldr	r0, [pc, #152]	; (80015d4 <MX_TIM8_Init+0x150>)
 800153a:	f004 fc57 	bl	8005dec <HAL_TIMEx_MasterConfigSynchronization>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001544:	f000 f8fe 	bl	8001744 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001548:	2360      	movs	r3, #96	; 0x60
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001550:	2300      	movs	r3, #0
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001554:	2300      	movs	r3, #0
 8001556:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001568:	2200      	movs	r2, #0
 800156a:	4619      	mov	r1, r3
 800156c:	4819      	ldr	r0, [pc, #100]	; (80015d4 <MX_TIM8_Init+0x150>)
 800156e:	f003 ffc9 	bl	8005504 <HAL_TIM_PWM_ConfigChannel>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001578:	f000 f8e4 	bl	8001744 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800157c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001580:	2204      	movs	r2, #4
 8001582:	4619      	mov	r1, r3
 8001584:	4813      	ldr	r0, [pc, #76]	; (80015d4 <MX_TIM8_Init+0x150>)
 8001586:	f003 ffbd 	bl	8005504 <HAL_TIM_PWM_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001590:	f000 f8d8 	bl	8001744 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	4807      	ldr	r0, [pc, #28]	; (80015d4 <MX_TIM8_Init+0x150>)
 80015b8:	f004 fc94 	bl	8005ee4 <HAL_TIMEx_ConfigBreakDeadTime>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80015c2:	f000 f8bf 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80015c6:	4803      	ldr	r0, [pc, #12]	; (80015d4 <MX_TIM8_Init+0x150>)
 80015c8:	f000 fa06 	bl	80019d8 <HAL_TIM_MspPostInit>

}
 80015cc:	bf00      	nop
 80015ce:	3758      	adds	r7, #88	; 0x58
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000438 	.word	0x20000438
 80015d8:	40010400 	.word	0x40010400

080015dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	; (800162c <MX_USART1_UART_Init+0x50>)
 80015e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 80015e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 8001602:	220c      	movs	r2, #12
 8001604:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 8001614:	f004 fcb8 	bl	8005f88 <HAL_UART_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800161e:	f000 f891 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000480 	.word	0x20000480
 800162c:	40011000 	.word	0x40011000

08001630 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_USART2_UART_Init+0x4c>)
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <MX_USART2_UART_Init+0x50>)
 8001638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <MX_USART2_UART_Init+0x4c>)
 800163c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_USART2_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_USART2_UART_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <MX_USART2_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_USART2_UART_Init+0x4c>)
 8001656:	220c      	movs	r2, #12
 8001658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <MX_USART2_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_USART2_UART_Init+0x4c>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_USART2_UART_Init+0x4c>)
 8001668:	f004 fc8e 	bl	8005f88 <HAL_UART_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001672:	f000 f867 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200004c4 	.word	0x200004c4
 8001680:	40004400 	.word	0x40004400

08001684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	4b27      	ldr	r3, [pc, #156]	; (800173c <MX_GPIO_Init+0xb8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a26      	ldr	r2, [pc, #152]	; (800173c <MX_GPIO_Init+0xb8>)
 80016a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b24      	ldr	r3, [pc, #144]	; (800173c <MX_GPIO_Init+0xb8>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <MX_GPIO_Init+0xb8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a1f      	ldr	r2, [pc, #124]	; (800173c <MX_GPIO_Init+0xb8>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <MX_GPIO_Init+0xb8>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	4b19      	ldr	r3, [pc, #100]	; (800173c <MX_GPIO_Init+0xb8>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a18      	ldr	r2, [pc, #96]	; (800173c <MX_GPIO_Init+0xb8>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <MX_GPIO_Init+0xb8>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <MX_GPIO_Init+0xb8>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a11      	ldr	r2, [pc, #68]	; (800173c <MX_GPIO_Init+0xb8>)
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <MX_GPIO_Init+0xb8>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001710:	480b      	ldr	r0, [pc, #44]	; (8001740 <MX_GPIO_Init+0xbc>)
 8001712:	f000 fed9 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EEPROM_CS_Pin */
  GPIO_InitStruct.Pin = EEPROM_CS_Pin;
 8001716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800171a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EEPROM_CS_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	4804      	ldr	r0, [pc, #16]	; (8001740 <MX_GPIO_Init+0xbc>)
 8001730:	f000 fd2e 	bl	8002190 <HAL_GPIO_Init>

}
 8001734:	bf00      	nop
 8001736:	3728      	adds	r7, #40	; 0x28
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40023800 	.word	0x40023800
 8001740:	40020400 	.word	0x40020400

08001744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001748:	b672      	cpsid	i
}
 800174a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800174c:	e7fe      	b.n	800174c <Error_Handler+0x8>
	...

08001750 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_MspInit+0x4c>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	4a0f      	ldr	r2, [pc, #60]	; (800179c <HAL_MspInit+0x4c>)
 8001760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001764:	6453      	str	r3, [r2, #68]	; 0x44
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <HAL_MspInit+0x4c>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	603b      	str	r3, [r7, #0]
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_MspInit+0x4c>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a08      	ldr	r2, [pc, #32]	; (800179c <HAL_MspInit+0x4c>)
 800177c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_MspInit+0x4c>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800

080017a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08c      	sub	sp, #48	; 0x30
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a32      	ldr	r2, [pc, #200]	; (8001888 <HAL_I2C_MspInit+0xe8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d12c      	bne.n	800181c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
 80017c6:	4b31      	ldr	r3, [pc, #196]	; (800188c <HAL_I2C_MspInit+0xec>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a30      	ldr	r2, [pc, #192]	; (800188c <HAL_I2C_MspInit+0xec>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b2e      	ldr	r3, [pc, #184]	; (800188c <HAL_I2C_MspInit+0xec>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	61bb      	str	r3, [r7, #24]
 80017dc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017de:	23c0      	movs	r3, #192	; 0xc0
 80017e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017e2:	2312      	movs	r3, #18
 80017e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017ee:	2304      	movs	r3, #4
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f2:	f107 031c 	add.w	r3, r7, #28
 80017f6:	4619      	mov	r1, r3
 80017f8:	4825      	ldr	r0, [pc, #148]	; (8001890 <HAL_I2C_MspInit+0xf0>)
 80017fa:	f000 fcc9 	bl	8002190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <HAL_I2C_MspInit+0xec>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a21      	ldr	r2, [pc, #132]	; (800188c <HAL_I2C_MspInit+0xec>)
 8001808:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
 800180e:	4b1f      	ldr	r3, [pc, #124]	; (800188c <HAL_I2C_MspInit+0xec>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800181a:	e031      	b.n	8001880 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1c      	ldr	r2, [pc, #112]	; (8001894 <HAL_I2C_MspInit+0xf4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d12c      	bne.n	8001880 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_I2C_MspInit+0xec>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a17      	ldr	r2, [pc, #92]	; (800188c <HAL_I2C_MspInit+0xec>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_I2C_MspInit+0xec>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001842:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001848:	2312      	movs	r3, #18
 800184a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001854:	2304      	movs	r3, #4
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	4619      	mov	r1, r3
 800185e:	480c      	ldr	r0, [pc, #48]	; (8001890 <HAL_I2C_MspInit+0xf0>)
 8001860:	f000 fc96 	bl	8002190 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_I2C_MspInit+0xec>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	4a07      	ldr	r2, [pc, #28]	; (800188c <HAL_I2C_MspInit+0xec>)
 800186e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001872:	6413      	str	r3, [r2, #64]	; 0x40
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_I2C_MspInit+0xec>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	bf00      	nop
 8001882:	3730      	adds	r7, #48	; 0x30
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40005400 	.word	0x40005400
 800188c:	40023800 	.word	0x40023800
 8001890:	40020400 	.word	0x40020400
 8001894:	40005800 	.word	0x40005800

08001898 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a28      	ldr	r2, [pc, #160]	; (8001958 <HAL_SPI_MspInit+0xc0>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d149      	bne.n	800194e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	4b27      	ldr	r3, [pc, #156]	; (800195c <HAL_SPI_MspInit+0xc4>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	4a26      	ldr	r2, [pc, #152]	; (800195c <HAL_SPI_MspInit+0xc4>)
 80018c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018c8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ca:	4b24      	ldr	r3, [pc, #144]	; (800195c <HAL_SPI_MspInit+0xc4>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <HAL_SPI_MspInit+0xc4>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a1f      	ldr	r2, [pc, #124]	; (800195c <HAL_SPI_MspInit+0xc4>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <HAL_SPI_MspInit+0xc4>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	4b19      	ldr	r3, [pc, #100]	; (800195c <HAL_SPI_MspInit+0xc4>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a18      	ldr	r2, [pc, #96]	; (800195c <HAL_SPI_MspInit+0xc4>)
 80018fc:	f043 0302 	orr.w	r3, r3, #2
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <HAL_SPI_MspInit+0xc4>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800190e:	2320      	movs	r3, #32
 8001910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191a:	2303      	movs	r3, #3
 800191c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800191e:	2305      	movs	r3, #5
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4619      	mov	r1, r3
 8001928:	480d      	ldr	r0, [pc, #52]	; (8001960 <HAL_SPI_MspInit+0xc8>)
 800192a:	f000 fc31 	bl	8002190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800192e:	2330      	movs	r3, #48	; 0x30
 8001930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800193e:	2305      	movs	r3, #5
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4806      	ldr	r0, [pc, #24]	; (8001964 <HAL_SPI_MspInit+0xcc>)
 800194a:	f000 fc21 	bl	8002190 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	; 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40013000 	.word	0x40013000
 800195c:	40023800 	.word	0x40023800
 8001960:	40020000 	.word	0x40020000
 8001964:	40020400 	.word	0x40020400

08001968 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a15      	ldr	r2, [pc, #84]	; (80019cc <HAL_TIM_Base_MspInit+0x64>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d10e      	bne.n	8001998 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <HAL_TIM_Base_MspInit+0x68>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a13      	ldr	r2, [pc, #76]	; (80019d0 <HAL_TIM_Base_MspInit+0x68>)
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <HAL_TIM_Base_MspInit+0x68>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001996:	e012      	b.n	80019be <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0d      	ldr	r2, [pc, #52]	; (80019d4 <HAL_TIM_Base_MspInit+0x6c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d10d      	bne.n	80019be <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_TIM_Base_MspInit+0x68>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <HAL_TIM_Base_MspInit+0x68>)
 80019ac:	f043 0302 	orr.w	r3, r3, #2
 80019b0:	6453      	str	r3, [r2, #68]	; 0x44
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <HAL_TIM_Base_MspInit+0x68>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40000400 	.word	0x40000400
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40010400 	.word	0x40010400

080019d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a33      	ldr	r2, [pc, #204]	; (8001ac4 <HAL_TIM_MspPostInit+0xec>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d13c      	bne.n	8001a74 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	4b32      	ldr	r3, [pc, #200]	; (8001ac8 <HAL_TIM_MspPostInit+0xf0>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a31      	ldr	r2, [pc, #196]	; (8001ac8 <HAL_TIM_MspPostInit+0xf0>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b2f      	ldr	r3, [pc, #188]	; (8001ac8 <HAL_TIM_MspPostInit+0xf0>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <HAL_TIM_MspPostInit+0xf0>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a2a      	ldr	r2, [pc, #168]	; (8001ac8 <HAL_TIM_MspPostInit+0xf0>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <HAL_TIM_MspPostInit+0xf0>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a32:	23c0      	movs	r3, #192	; 0xc0
 8001a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a42:	2302      	movs	r3, #2
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	481f      	ldr	r0, [pc, #124]	; (8001acc <HAL_TIM_MspPostInit+0xf4>)
 8001a4e:	f000 fb9f 	bl	8002190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a52:	2303      	movs	r3, #3
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a62:	2302      	movs	r3, #2
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4818      	ldr	r0, [pc, #96]	; (8001ad0 <HAL_TIM_MspPostInit+0xf8>)
 8001a6e:	f000 fb8f 	bl	8002190 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001a72:	e022      	b.n	8001aba <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM8)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a16      	ldr	r2, [pc, #88]	; (8001ad4 <HAL_TIM_MspPostInit+0xfc>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d11d      	bne.n	8001aba <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <HAL_TIM_MspPostInit+0xf0>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a10      	ldr	r2, [pc, #64]	; (8001ac8 <HAL_TIM_MspPostInit+0xf0>)
 8001a88:	f043 0304 	orr.w	r3, r3, #4
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <HAL_TIM_MspPostInit+0xf0>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a9a:	23c0      	movs	r3, #192	; 0xc0
 8001a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4808      	ldr	r0, [pc, #32]	; (8001ad8 <HAL_TIM_MspPostInit+0x100>)
 8001ab6:	f000 fb6b 	bl	8002190 <HAL_GPIO_Init>
}
 8001aba:	bf00      	nop
 8001abc:	3728      	adds	r7, #40	; 0x28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40000400 	.word	0x40000400
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40020000 	.word	0x40020000
 8001ad0:	40020400 	.word	0x40020400
 8001ad4:	40010400 	.word	0x40010400
 8001ad8:	40020800 	.word	0x40020800

08001adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08c      	sub	sp, #48	; 0x30
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a32      	ldr	r2, [pc, #200]	; (8001bc4 <HAL_UART_MspInit+0xe8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d12d      	bne.n	8001b5a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <HAL_UART_MspInit+0xec>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	4a30      	ldr	r2, [pc, #192]	; (8001bc8 <HAL_UART_MspInit+0xec>)
 8001b08:	f043 0310 	orr.w	r3, r3, #16
 8001b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0e:	4b2e      	ldr	r3, [pc, #184]	; (8001bc8 <HAL_UART_MspInit+0xec>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	61bb      	str	r3, [r7, #24]
 8001b18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <HAL_UART_MspInit+0xec>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a29      	ldr	r2, [pc, #164]	; (8001bc8 <HAL_UART_MspInit+0xec>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <HAL_UART_MspInit+0xec>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b44:	2303      	movs	r3, #3
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b48:	2307      	movs	r3, #7
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	4619      	mov	r1, r3
 8001b52:	481e      	ldr	r0, [pc, #120]	; (8001bcc <HAL_UART_MspInit+0xf0>)
 8001b54:	f000 fb1c 	bl	8002190 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b58:	e030      	b.n	8001bbc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a1c      	ldr	r2, [pc, #112]	; (8001bd0 <HAL_UART_MspInit+0xf4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d12b      	bne.n	8001bbc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <HAL_UART_MspInit+0xec>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	4a16      	ldr	r2, [pc, #88]	; (8001bc8 <HAL_UART_MspInit+0xec>)
 8001b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b72:	6413      	str	r3, [r2, #64]	; 0x40
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <HAL_UART_MspInit+0xec>)
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <HAL_UART_MspInit+0xec>)
 8001b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b88:	4a0f      	ldr	r2, [pc, #60]	; (8001bc8 <HAL_UART_MspInit+0xec>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b90:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <HAL_UART_MspInit+0xec>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b9c:	230c      	movs	r3, #12
 8001b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bac:	2307      	movs	r3, #7
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4805      	ldr	r0, [pc, #20]	; (8001bcc <HAL_UART_MspInit+0xf0>)
 8001bb8:	f000 faea 	bl	8002190 <HAL_GPIO_Init>
}
 8001bbc:	bf00      	nop
 8001bbe:	3730      	adds	r7, #48	; 0x30
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40011000 	.word	0x40011000
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40020000 	.word	0x40020000
 8001bd0:	40004400 	.word	0x40004400

08001bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <NMI_Handler+0x4>

08001bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bde:	e7fe      	b.n	8001bde <HardFault_Handler+0x4>

08001be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <MemManage_Handler+0x4>

08001be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <BusFault_Handler+0x4>

08001bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <UsageFault_Handler+0x4>

08001bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c20:	f000 f960 	bl	8001ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <OTG_FS_IRQHandler+0x10>)
 8001c2e:	f001 fd74 	bl	800371a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200019f0 	.word	0x200019f0

08001c3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
	return 1;
 8001c40:	2301      	movs	r3, #1
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_kill>:

int _kill(int pid, int sig)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c56:	f008 fd9d 	bl	800a794 <__errno>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2216      	movs	r2, #22
 8001c5e:	601a      	str	r2, [r3, #0]
	return -1;
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_exit>:

void _exit (int status)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ffe7 	bl	8001c4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c7e:	e7fe      	b.n	8001c7e <_exit+0x12>

08001c80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	e00a      	b.n	8001ca8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c92:	f3af 8000 	nop.w
 8001c96:	4601      	mov	r1, r0
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	60ba      	str	r2, [r7, #8]
 8001c9e:	b2ca      	uxtb	r2, r1
 8001ca0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	dbf0      	blt.n	8001c92 <_read+0x12>
	}

return len;
 8001cb0:	687b      	ldr	r3, [r7, #4]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e009      	b.n	8001ce0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	60ba      	str	r2, [r7, #8]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	dbf1      	blt.n	8001ccc <_write+0x12>
	}
	return len;
 8001ce8:	687b      	ldr	r3, [r7, #4]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_close>:

int _close(int file)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
	return -1;
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d1a:	605a      	str	r2, [r3, #4]
	return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <_isatty>:

int _isatty(int file)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
	return 1;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
	return 0;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <_sbrk+0x5c>)
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <_sbrk+0x60>)
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d70:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <_sbrk+0x64>)
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <_sbrk+0x68>)
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d207      	bcs.n	8001d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d8c:	f008 fd02 	bl	800a794 <__errno>
 8001d90:	4603      	mov	r3, r0
 8001d92:	220c      	movs	r2, #12
 8001d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9a:	e009      	b.n	8001db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <_sbrk+0x64>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <_sbrk+0x64>)
 8001dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20020000 	.word	0x20020000
 8001dbc:	00000400 	.word	0x00000400
 8001dc0:	20000508 	.word	0x20000508
 8001dc4:	20002130 	.word	0x20002130

08001dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <SystemInit+0x20>)
 8001dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <SystemInit+0x20>)
 8001dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001df0:	480d      	ldr	r0, [pc, #52]	; (8001e28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001df2:	490e      	ldr	r1, [pc, #56]	; (8001e2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001df4:	4a0e      	ldr	r2, [pc, #56]	; (8001e30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df8:	e002      	b.n	8001e00 <LoopCopyDataInit>

08001dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfe:	3304      	adds	r3, #4

08001e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e04:	d3f9      	bcc.n	8001dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e06:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e08:	4c0b      	ldr	r4, [pc, #44]	; (8001e38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e0c:	e001      	b.n	8001e12 <LoopFillZerobss>

08001e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e10:	3204      	adds	r2, #4

08001e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e14:	d3fb      	bcc.n	8001e0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e16:	f7ff ffd7 	bl	8001dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e1a:	f008 fcc1 	bl	800a7a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e1e:	f7ff f895 	bl	8000f4c <main>
  bx  lr    
 8001e22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e2c:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8001e30:	0800da54 	.word	0x0800da54
  ldr r2, =_sbss
 8001e34:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8001e38:	2000212c 	.word	0x2000212c

08001e3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e3c:	e7fe      	b.n	8001e3c <ADC_IRQHandler>
	...

08001e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e44:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <HAL_Init+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0d      	ldr	r2, [pc, #52]	; (8001e80 <HAL_Init+0x40>)
 8001e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_Init+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <HAL_Init+0x40>)
 8001e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <HAL_Init+0x40>)
 8001e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e68:	2003      	movs	r0, #3
 8001e6a:	f000 f94f 	bl	800210c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e6e:	200f      	movs	r0, #15
 8001e70:	f000 f808 	bl	8001e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e74:	f7ff fc6c 	bl	8001750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_InitTick+0x54>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_InitTick+0x58>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	4619      	mov	r1, r3
 8001e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 f967 	bl	8002176 <HAL_SYSTICK_Config>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00e      	b.n	8001ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b0f      	cmp	r3, #15
 8001eb6:	d80a      	bhi.n	8001ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	f000 f92f 	bl	8002122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec4:	4a06      	ldr	r2, [pc, #24]	; (8001ee0 <HAL_InitTick+0x5c>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e000      	b.n	8001ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	20000008 	.word	0x20000008
 8001ee0:	20000004 	.word	0x20000004

08001ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_IncTick+0x20>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_IncTick+0x24>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <HAL_IncTick+0x24>)
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000008 	.word	0x20000008
 8001f08:	2000050c 	.word	0x2000050c

08001f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <HAL_GetTick+0x14>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	2000050c 	.word	0x2000050c

08001f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f2c:	f7ff ffee 	bl	8001f0c <HAL_GetTick>
 8001f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3c:	d005      	beq.n	8001f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_Delay+0x44>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4413      	add	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f4a:	bf00      	nop
 8001f4c:	f7ff ffde 	bl	8001f0c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d8f7      	bhi.n	8001f4c <HAL_Delay+0x28>
  {
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000008 	.word	0x20000008

08001f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9e:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	60d3      	str	r3, [r2, #12]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <__NVIC_GetPriorityGrouping+0x18>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	f003 0307 	and.w	r3, r3, #7
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	db0b      	blt.n	8001ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	f003 021f 	and.w	r2, r3, #31
 8001fe8:	4907      	ldr	r1, [pc, #28]	; (8002008 <__NVIC_EnableIRQ+0x38>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000e100 	.word	0xe000e100

0800200c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	6039      	str	r1, [r7, #0]
 8002016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	2b00      	cmp	r3, #0
 800201e:	db0a      	blt.n	8002036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	490c      	ldr	r1, [pc, #48]	; (8002058 <__NVIC_SetPriority+0x4c>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	0112      	lsls	r2, r2, #4
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	440b      	add	r3, r1
 8002030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002034:	e00a      	b.n	800204c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4908      	ldr	r1, [pc, #32]	; (800205c <__NVIC_SetPriority+0x50>)
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	3b04      	subs	r3, #4
 8002044:	0112      	lsls	r2, r2, #4
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	440b      	add	r3, r1
 800204a:	761a      	strb	r2, [r3, #24]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000e100 	.word	0xe000e100
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f1c3 0307 	rsb	r3, r3, #7
 800207a:	2b04      	cmp	r3, #4
 800207c:	bf28      	it	cs
 800207e:	2304      	movcs	r3, #4
 8002080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3304      	adds	r3, #4
 8002086:	2b06      	cmp	r3, #6
 8002088:	d902      	bls.n	8002090 <NVIC_EncodePriority+0x30>
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3b03      	subs	r3, #3
 800208e:	e000      	b.n	8002092 <NVIC_EncodePriority+0x32>
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	f04f 32ff 	mov.w	r2, #4294967295
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43da      	mvns	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	401a      	ands	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	43d9      	mvns	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	4313      	orrs	r3, r2
         );
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3724      	adds	r7, #36	; 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d8:	d301      	bcc.n	80020de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020da:	2301      	movs	r3, #1
 80020dc:	e00f      	b.n	80020fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020de:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <SysTick_Config+0x40>)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020e6:	210f      	movs	r1, #15
 80020e8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ec:	f7ff ff8e 	bl	800200c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <SysTick_Config+0x40>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <SysTick_Config+0x40>)
 80020f8:	2207      	movs	r2, #7
 80020fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	e000e010 	.word	0xe000e010

0800210c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ff29 	bl	8001f6c <__NVIC_SetPriorityGrouping>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002122:	b580      	push	{r7, lr}
 8002124:	b086      	sub	sp, #24
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002134:	f7ff ff3e 	bl	8001fb4 <__NVIC_GetPriorityGrouping>
 8002138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	6978      	ldr	r0, [r7, #20]
 8002140:	f7ff ff8e 	bl	8002060 <NVIC_EncodePriority>
 8002144:	4602      	mov	r2, r0
 8002146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff5d 	bl	800200c <__NVIC_SetPriority>
}
 8002152:	bf00      	nop
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff31 	bl	8001fd0 <__NVIC_EnableIRQ>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ffa2 	bl	80020c8 <SysTick_Config>
 8002184:	4603      	mov	r3, r0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	; 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	e16b      	b.n	8002484 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021ac:	2201      	movs	r2, #1
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	f040 815a 	bne.w	800247e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d005      	beq.n	80021e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d130      	bne.n	8002244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	2203      	movs	r2, #3
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002218:	2201      	movs	r2, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 0201 	and.w	r2, r3, #1
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b03      	cmp	r3, #3
 800224e:	d017      	beq.n	8002280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d123      	bne.n	80022d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	08da      	lsrs	r2, r3, #3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3208      	adds	r2, #8
 8002294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	220f      	movs	r2, #15
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	08da      	lsrs	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3208      	adds	r2, #8
 80022ce:	69b9      	ldr	r1, [r7, #24]
 80022d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2203      	movs	r2, #3
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0203 	and.w	r2, r3, #3
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80b4 	beq.w	800247e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	4b60      	ldr	r3, [pc, #384]	; (800249c <HAL_GPIO_Init+0x30c>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	4a5f      	ldr	r2, [pc, #380]	; (800249c <HAL_GPIO_Init+0x30c>)
 8002320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002324:	6453      	str	r3, [r2, #68]	; 0x44
 8002326:	4b5d      	ldr	r3, [pc, #372]	; (800249c <HAL_GPIO_Init+0x30c>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002332:	4a5b      	ldr	r2, [pc, #364]	; (80024a0 <HAL_GPIO_Init+0x310>)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	089b      	lsrs	r3, r3, #2
 8002338:	3302      	adds	r3, #2
 800233a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	220f      	movs	r2, #15
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a52      	ldr	r2, [pc, #328]	; (80024a4 <HAL_GPIO_Init+0x314>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d02b      	beq.n	80023b6 <HAL_GPIO_Init+0x226>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a51      	ldr	r2, [pc, #324]	; (80024a8 <HAL_GPIO_Init+0x318>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d025      	beq.n	80023b2 <HAL_GPIO_Init+0x222>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a50      	ldr	r2, [pc, #320]	; (80024ac <HAL_GPIO_Init+0x31c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d01f      	beq.n	80023ae <HAL_GPIO_Init+0x21e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a4f      	ldr	r2, [pc, #316]	; (80024b0 <HAL_GPIO_Init+0x320>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d019      	beq.n	80023aa <HAL_GPIO_Init+0x21a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4e      	ldr	r2, [pc, #312]	; (80024b4 <HAL_GPIO_Init+0x324>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d013      	beq.n	80023a6 <HAL_GPIO_Init+0x216>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4d      	ldr	r2, [pc, #308]	; (80024b8 <HAL_GPIO_Init+0x328>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d00d      	beq.n	80023a2 <HAL_GPIO_Init+0x212>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a4c      	ldr	r2, [pc, #304]	; (80024bc <HAL_GPIO_Init+0x32c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d007      	beq.n	800239e <HAL_GPIO_Init+0x20e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a4b      	ldr	r2, [pc, #300]	; (80024c0 <HAL_GPIO_Init+0x330>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d101      	bne.n	800239a <HAL_GPIO_Init+0x20a>
 8002396:	2307      	movs	r3, #7
 8002398:	e00e      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 800239a:	2308      	movs	r3, #8
 800239c:	e00c      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 800239e:	2306      	movs	r3, #6
 80023a0:	e00a      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 80023a2:	2305      	movs	r3, #5
 80023a4:	e008      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 80023a6:	2304      	movs	r3, #4
 80023a8:	e006      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 80023aa:	2303      	movs	r3, #3
 80023ac:	e004      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e002      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 80023b6:	2300      	movs	r3, #0
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	f002 0203 	and.w	r2, r2, #3
 80023be:	0092      	lsls	r2, r2, #2
 80023c0:	4093      	lsls	r3, r2
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c8:	4935      	ldr	r1, [pc, #212]	; (80024a0 <HAL_GPIO_Init+0x310>)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	089b      	lsrs	r3, r3, #2
 80023ce:	3302      	adds	r3, #2
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023d6:	4b3b      	ldr	r3, [pc, #236]	; (80024c4 <HAL_GPIO_Init+0x334>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023fa:	4a32      	ldr	r2, [pc, #200]	; (80024c4 <HAL_GPIO_Init+0x334>)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002400:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <HAL_GPIO_Init+0x334>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002424:	4a27      	ldr	r2, [pc, #156]	; (80024c4 <HAL_GPIO_Init+0x334>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800242a:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <HAL_GPIO_Init+0x334>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800244e:	4a1d      	ldr	r2, [pc, #116]	; (80024c4 <HAL_GPIO_Init+0x334>)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HAL_GPIO_Init+0x334>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002478:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <HAL_GPIO_Init+0x334>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3301      	adds	r3, #1
 8002482:	61fb      	str	r3, [r7, #28]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	2b0f      	cmp	r3, #15
 8002488:	f67f ae90 	bls.w	80021ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3724      	adds	r7, #36	; 0x24
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800
 80024a0:	40013800 	.word	0x40013800
 80024a4:	40020000 	.word	0x40020000
 80024a8:	40020400 	.word	0x40020400
 80024ac:	40020800 	.word	0x40020800
 80024b0:	40020c00 	.word	0x40020c00
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40021400 	.word	0x40021400
 80024bc:	40021800 	.word	0x40021800
 80024c0:	40021c00 	.word	0x40021c00
 80024c4:	40013c00 	.word	0x40013c00

080024c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
 80024d4:	4613      	mov	r3, r2
 80024d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d8:	787b      	ldrb	r3, [r7, #1]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024e4:	e003      	b.n	80024ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024e6:	887b      	ldrh	r3, [r7, #2]
 80024e8:	041a      	lsls	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	619a      	str	r2, [r3, #24]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e12b      	b.n	8002766 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff f93c 	bl	80017a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2224      	movs	r2, #36	; 0x24
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0201 	bic.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800254e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800255e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002560:	f002 fe76 	bl	8005250 <HAL_RCC_GetPCLK1Freq>
 8002564:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4a81      	ldr	r2, [pc, #516]	; (8002770 <HAL_I2C_Init+0x274>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d807      	bhi.n	8002580 <HAL_I2C_Init+0x84>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4a80      	ldr	r2, [pc, #512]	; (8002774 <HAL_I2C_Init+0x278>)
 8002574:	4293      	cmp	r3, r2
 8002576:	bf94      	ite	ls
 8002578:	2301      	movls	r3, #1
 800257a:	2300      	movhi	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	e006      	b.n	800258e <HAL_I2C_Init+0x92>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4a7d      	ldr	r2, [pc, #500]	; (8002778 <HAL_I2C_Init+0x27c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	bf94      	ite	ls
 8002588:	2301      	movls	r3, #1
 800258a:	2300      	movhi	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e0e7      	b.n	8002766 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4a78      	ldr	r2, [pc, #480]	; (800277c <HAL_I2C_Init+0x280>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	0c9b      	lsrs	r3, r3, #18
 80025a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	4a6a      	ldr	r2, [pc, #424]	; (8002770 <HAL_I2C_Init+0x274>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d802      	bhi.n	80025d0 <HAL_I2C_Init+0xd4>
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	3301      	adds	r3, #1
 80025ce:	e009      	b.n	80025e4 <HAL_I2C_Init+0xe8>
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	4a69      	ldr	r2, [pc, #420]	; (8002780 <HAL_I2C_Init+0x284>)
 80025dc:	fba2 2303 	umull	r2, r3, r2, r3
 80025e0:	099b      	lsrs	r3, r3, #6
 80025e2:	3301      	adds	r3, #1
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	430b      	orrs	r3, r1
 80025ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	495c      	ldr	r1, [pc, #368]	; (8002770 <HAL_I2C_Init+0x274>)
 8002600:	428b      	cmp	r3, r1
 8002602:	d819      	bhi.n	8002638 <HAL_I2C_Init+0x13c>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	1e59      	subs	r1, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002612:	1c59      	adds	r1, r3, #1
 8002614:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002618:	400b      	ands	r3, r1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_I2C_Init+0x138>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1e59      	subs	r1, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	fbb1 f3f3 	udiv	r3, r1, r3
 800262c:	3301      	adds	r3, #1
 800262e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002632:	e051      	b.n	80026d8 <HAL_I2C_Init+0x1dc>
 8002634:	2304      	movs	r3, #4
 8002636:	e04f      	b.n	80026d8 <HAL_I2C_Init+0x1dc>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d111      	bne.n	8002664 <HAL_I2C_Init+0x168>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1e58      	subs	r0, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6859      	ldr	r1, [r3, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	440b      	add	r3, r1
 800264e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002652:	3301      	adds	r3, #1
 8002654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	e012      	b.n	800268a <HAL_I2C_Init+0x18e>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1e58      	subs	r0, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6859      	ldr	r1, [r3, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	0099      	lsls	r1, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	fbb0 f3f3 	udiv	r3, r0, r3
 800267a:	3301      	adds	r3, #1
 800267c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf0c      	ite	eq
 8002684:	2301      	moveq	r3, #1
 8002686:	2300      	movne	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_I2C_Init+0x196>
 800268e:	2301      	movs	r3, #1
 8002690:	e022      	b.n	80026d8 <HAL_I2C_Init+0x1dc>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10e      	bne.n	80026b8 <HAL_I2C_Init+0x1bc>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1e58      	subs	r0, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6859      	ldr	r1, [r3, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	440b      	add	r3, r1
 80026a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ac:	3301      	adds	r3, #1
 80026ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b6:	e00f      	b.n	80026d8 <HAL_I2C_Init+0x1dc>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1e58      	subs	r0, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6859      	ldr	r1, [r3, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	0099      	lsls	r1, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ce:	3301      	adds	r3, #1
 80026d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	6809      	ldr	r1, [r1, #0]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69da      	ldr	r2, [r3, #28]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002706:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6911      	ldr	r1, [r2, #16]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68d2      	ldr	r2, [r2, #12]
 8002712:	4311      	orrs	r1, r2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	430b      	orrs	r3, r1
 800271a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695a      	ldr	r2, [r3, #20]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2220      	movs	r2, #32
 8002752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	000186a0 	.word	0x000186a0
 8002774:	001e847f 	.word	0x001e847f
 8002778:	003d08ff 	.word	0x003d08ff
 800277c:	431bde83 	.word	0x431bde83
 8002780:	10624dd3 	.word	0x10624dd3

08002784 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af02      	add	r7, sp, #8
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	4608      	mov	r0, r1
 800278e:	4611      	mov	r1, r2
 8002790:	461a      	mov	r2, r3
 8002792:	4603      	mov	r3, r0
 8002794:	817b      	strh	r3, [r7, #10]
 8002796:	460b      	mov	r3, r1
 8002798:	813b      	strh	r3, [r7, #8]
 800279a:	4613      	mov	r3, r2
 800279c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800279e:	f7ff fbb5 	bl	8001f0c <HAL_GetTick>
 80027a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b20      	cmp	r3, #32
 80027ae:	f040 80d9 	bne.w	8002964 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	2319      	movs	r3, #25
 80027b8:	2201      	movs	r2, #1
 80027ba:	496d      	ldr	r1, [pc, #436]	; (8002970 <HAL_I2C_Mem_Write+0x1ec>)
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 fc7f 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027c8:	2302      	movs	r3, #2
 80027ca:	e0cc      	b.n	8002966 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_I2C_Mem_Write+0x56>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e0c5      	b.n	8002966 <HAL_I2C_Mem_Write+0x1e2>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d007      	beq.n	8002800 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0201 	orr.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800280e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2221      	movs	r2, #33	; 0x21
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2240      	movs	r2, #64	; 0x40
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a3a      	ldr	r2, [r7, #32]
 800282a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002830:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4a4d      	ldr	r2, [pc, #308]	; (8002974 <HAL_I2C_Mem_Write+0x1f0>)
 8002840:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002842:	88f8      	ldrh	r0, [r7, #6]
 8002844:	893a      	ldrh	r2, [r7, #8]
 8002846:	8979      	ldrh	r1, [r7, #10]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	4603      	mov	r3, r0
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 fab6 	bl	8002dc4 <I2C_RequestMemoryWrite>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d052      	beq.n	8002904 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e081      	b.n	8002966 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 fd00 	bl	800326c <I2C_WaitOnTXEFlagUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00d      	beq.n	800288e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	2b04      	cmp	r3, #4
 8002878:	d107      	bne.n	800288a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002888:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e06b      	b.n	8002966 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	781a      	ldrb	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d11b      	bne.n	8002904 <HAL_I2C_Mem_Write+0x180>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d017      	beq.n	8002904 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	781a      	ldrb	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1aa      	bne.n	8002862 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 fcec 	bl	80032ee <I2C_WaitOnBTFFlagUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00d      	beq.n	8002938 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	2b04      	cmp	r3, #4
 8002922:	d107      	bne.n	8002934 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002932:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e016      	b.n	8002966 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	e000      	b.n	8002966 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002964:	2302      	movs	r3, #2
  }
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	00100002 	.word	0x00100002
 8002974:	ffff0000 	.word	0xffff0000

08002978 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08c      	sub	sp, #48	; 0x30
 800297c:	af02      	add	r7, sp, #8
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	4608      	mov	r0, r1
 8002982:	4611      	mov	r1, r2
 8002984:	461a      	mov	r2, r3
 8002986:	4603      	mov	r3, r0
 8002988:	817b      	strh	r3, [r7, #10]
 800298a:	460b      	mov	r3, r1
 800298c:	813b      	strh	r3, [r7, #8]
 800298e:	4613      	mov	r3, r2
 8002990:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002992:	f7ff fabb 	bl	8001f0c <HAL_GetTick>
 8002996:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	f040 8208 	bne.w	8002db6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	2319      	movs	r3, #25
 80029ac:	2201      	movs	r2, #1
 80029ae:	497b      	ldr	r1, [pc, #492]	; (8002b9c <HAL_I2C_Mem_Read+0x224>)
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 fb85 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80029bc:	2302      	movs	r3, #2
 80029be:	e1fb      	b.n	8002db8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_I2C_Mem_Read+0x56>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e1f4      	b.n	8002db8 <HAL_I2C_Mem_Read+0x440>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d007      	beq.n	80029f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2222      	movs	r2, #34	; 0x22
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2240      	movs	r2, #64	; 0x40
 8002a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4a5b      	ldr	r2, [pc, #364]	; (8002ba0 <HAL_I2C_Mem_Read+0x228>)
 8002a34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a36:	88f8      	ldrh	r0, [r7, #6]
 8002a38:	893a      	ldrh	r2, [r7, #8]
 8002a3a:	8979      	ldrh	r1, [r7, #10]
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	4603      	mov	r3, r0
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 fa52 	bl	8002ef0 <I2C_RequestMemoryRead>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e1b0      	b.n	8002db8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d113      	bne.n	8002a86 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a5e:	2300      	movs	r3, #0
 8002a60:	623b      	str	r3, [r7, #32]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	623b      	str	r3, [r7, #32]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	623b      	str	r3, [r7, #32]
 8002a72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	e184      	b.n	8002d90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d11b      	bne.n	8002ac6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	e164      	b.n	8002d90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d11b      	bne.n	8002b06 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002adc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	61bb      	str	r3, [r7, #24]
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	e144      	b.n	8002d90 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b1c:	e138      	b.n	8002d90 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	f200 80f1 	bhi.w	8002d0a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d123      	bne.n	8002b78 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fc1b 	bl	8003370 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e139      	b.n	8002db8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b76:	e10b      	b.n	8002d90 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d14e      	bne.n	8002c1e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b86:	2200      	movs	r2, #0
 8002b88:	4906      	ldr	r1, [pc, #24]	; (8002ba4 <HAL_I2C_Mem_Read+0x22c>)
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 fa98 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d008      	beq.n	8002ba8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e10e      	b.n	8002db8 <HAL_I2C_Mem_Read+0x440>
 8002b9a:	bf00      	nop
 8002b9c:	00100002 	.word	0x00100002
 8002ba0:	ffff0000 	.word	0xffff0000
 8002ba4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	691a      	ldr	r2, [r3, #16]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c1c:	e0b8      	b.n	8002d90 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c24:	2200      	movs	r2, #0
 8002c26:	4966      	ldr	r1, [pc, #408]	; (8002dc0 <HAL_I2C_Mem_Read+0x448>)
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 fa49 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0bf      	b.n	8002db8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691a      	ldr	r2, [r3, #16]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c80:	2200      	movs	r2, #0
 8002c82:	494f      	ldr	r1, [pc, #316]	; (8002dc0 <HAL_I2C_Mem_Read+0x448>)
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 fa1b 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e091      	b.n	8002db8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691a      	ldr	r2, [r3, #16]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d08:	e042      	b.n	8002d90 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fb2e 	bl	8003370 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e04c      	b.n	8002db8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d118      	bne.n	8002d90 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f47f aec2 	bne.w	8002b1e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e000      	b.n	8002db8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002db6:	2302      	movs	r3, #2
  }
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3728      	adds	r7, #40	; 0x28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	00010004 	.word	0x00010004

08002dc4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	4608      	mov	r0, r1
 8002dce:	4611      	mov	r1, r2
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	817b      	strh	r3, [r7, #10]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	813b      	strh	r3, [r7, #8]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f960 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00d      	beq.n	8002e22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e14:	d103      	bne.n	8002e1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e05f      	b.n	8002ee2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e22:	897b      	ldrh	r3, [r7, #10]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	6a3a      	ldr	r2, [r7, #32]
 8002e36:	492d      	ldr	r1, [pc, #180]	; (8002eec <I2C_RequestMemoryWrite+0x128>)
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f998 	bl	800316e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e04c      	b.n	8002ee2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e60:	6a39      	ldr	r1, [r7, #32]
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fa02 	bl	800326c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00d      	beq.n	8002e8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d107      	bne.n	8002e86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e02b      	b.n	8002ee2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d105      	bne.n	8002e9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e90:	893b      	ldrh	r3, [r7, #8]
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	611a      	str	r2, [r3, #16]
 8002e9a:	e021      	b.n	8002ee0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e9c:	893b      	ldrh	r3, [r7, #8]
 8002e9e:	0a1b      	lsrs	r3, r3, #8
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eac:	6a39      	ldr	r1, [r7, #32]
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f9dc 	bl	800326c <I2C_WaitOnTXEFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00d      	beq.n	8002ed6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d107      	bne.n	8002ed2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e005      	b.n	8002ee2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ed6:	893b      	ldrh	r3, [r7, #8]
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	00010002 	.word	0x00010002

08002ef0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	4608      	mov	r0, r1
 8002efa:	4611      	mov	r1, r2
 8002efc:	461a      	mov	r2, r3
 8002efe:	4603      	mov	r3, r0
 8002f00:	817b      	strh	r3, [r7, #10]
 8002f02:	460b      	mov	r3, r1
 8002f04:	813b      	strh	r3, [r7, #8]
 8002f06:	4613      	mov	r3, r2
 8002f08:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f18:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f8c2 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00d      	beq.n	8002f5e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f50:	d103      	bne.n	8002f5a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e0aa      	b.n	80030b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f5e:	897b      	ldrh	r3, [r7, #10]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	6a3a      	ldr	r2, [r7, #32]
 8002f72:	4952      	ldr	r1, [pc, #328]	; (80030bc <I2C_RequestMemoryRead+0x1cc>)
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f8fa 	bl	800316e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e097      	b.n	80030b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9c:	6a39      	ldr	r1, [r7, #32]
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 f964 	bl	800326c <I2C_WaitOnTXEFlagUntilTimeout>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00d      	beq.n	8002fc6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d107      	bne.n	8002fc2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e076      	b.n	80030b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d105      	bne.n	8002fd8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fcc:	893b      	ldrh	r3, [r7, #8]
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	611a      	str	r2, [r3, #16]
 8002fd6:	e021      	b.n	800301c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fd8:	893b      	ldrh	r3, [r7, #8]
 8002fda:	0a1b      	lsrs	r3, r3, #8
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe8:	6a39      	ldr	r1, [r7, #32]
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 f93e 	bl	800326c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00d      	beq.n	8003012 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d107      	bne.n	800300e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800300c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e050      	b.n	80030b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003012:	893b      	ldrh	r3, [r7, #8]
 8003014:	b2da      	uxtb	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800301c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301e:	6a39      	ldr	r1, [r7, #32]
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f923 	bl	800326c <I2C_WaitOnTXEFlagUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00d      	beq.n	8003048 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	2b04      	cmp	r3, #4
 8003032:	d107      	bne.n	8003044 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003042:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e035      	b.n	80030b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003056:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	2200      	movs	r2, #0
 8003060:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f82b 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00d      	beq.n	800308c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800307e:	d103      	bne.n	8003088 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003086:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e013      	b.n	80030b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800308c:	897b      	ldrh	r3, [r7, #10]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	b2da      	uxtb	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	6a3a      	ldr	r2, [r7, #32]
 80030a0:	4906      	ldr	r1, [pc, #24]	; (80030bc <I2C_RequestMemoryRead+0x1cc>)
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f863 	bl	800316e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	00010002 	.word	0x00010002

080030c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	4613      	mov	r3, r2
 80030ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030d0:	e025      	b.n	800311e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d021      	beq.n	800311e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030da:	f7fe ff17 	bl	8001f0c <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d302      	bcc.n	80030f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d116      	bne.n	800311e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f043 0220 	orr.w	r2, r3, #32
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e023      	b.n	8003166 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	0c1b      	lsrs	r3, r3, #16
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d10d      	bne.n	8003144 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	43da      	mvns	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4013      	ands	r3, r2
 8003134:	b29b      	uxth	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	bf0c      	ite	eq
 800313a:	2301      	moveq	r3, #1
 800313c:	2300      	movne	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	e00c      	b.n	800315e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	43da      	mvns	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	4013      	ands	r3, r2
 8003150:	b29b      	uxth	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	bf0c      	ite	eq
 8003156:	2301      	moveq	r3, #1
 8003158:	2300      	movne	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	461a      	mov	r2, r3
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	429a      	cmp	r2, r3
 8003162:	d0b6      	beq.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b084      	sub	sp, #16
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800317c:	e051      	b.n	8003222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800318c:	d123      	bne.n	80031d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800319c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f043 0204 	orr.w	r2, r3, #4
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e046      	b.n	8003264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031dc:	d021      	beq.n	8003222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031de:	f7fe fe95 	bl	8001f0c <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d302      	bcc.n	80031f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d116      	bne.n	8003222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f043 0220 	orr.w	r2, r3, #32
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e020      	b.n	8003264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	0c1b      	lsrs	r3, r3, #16
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	d10c      	bne.n	8003246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	43da      	mvns	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4013      	ands	r3, r2
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	bf14      	ite	ne
 800323e:	2301      	movne	r3, #1
 8003240:	2300      	moveq	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	e00b      	b.n	800325e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	43da      	mvns	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	4013      	ands	r3, r2
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	bf14      	ite	ne
 8003258:	2301      	movne	r3, #1
 800325a:	2300      	moveq	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d18d      	bne.n	800317e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003278:	e02d      	b.n	80032d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f8ce 	bl	800341c <I2C_IsAcknowledgeFailed>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e02d      	b.n	80032e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003290:	d021      	beq.n	80032d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003292:	f7fe fe3b 	bl	8001f0c <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d302      	bcc.n	80032a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d116      	bne.n	80032d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f043 0220 	orr.w	r2, r3, #32
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e007      	b.n	80032e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e0:	2b80      	cmp	r3, #128	; 0x80
 80032e2:	d1ca      	bne.n	800327a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b084      	sub	sp, #16
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032fa:	e02d      	b.n	8003358 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 f88d 	bl	800341c <I2C_IsAcknowledgeFailed>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e02d      	b.n	8003368 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003312:	d021      	beq.n	8003358 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003314:	f7fe fdfa 	bl	8001f0c <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	429a      	cmp	r2, r3
 8003322:	d302      	bcc.n	800332a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d116      	bne.n	8003358 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e007      	b.n	8003368 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b04      	cmp	r3, #4
 8003364:	d1ca      	bne.n	80032fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800337c:	e042      	b.n	8003404 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b10      	cmp	r3, #16
 800338a:	d119      	bne.n	80033c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f06f 0210 	mvn.w	r2, #16
 8003394:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e029      	b.n	8003414 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c0:	f7fe fda4 	bl	8001f0c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d302      	bcc.n	80033d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d116      	bne.n	8003404 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	f043 0220 	orr.w	r2, r3, #32
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e007      	b.n	8003414 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340e:	2b40      	cmp	r3, #64	; 0x40
 8003410:	d1b5      	bne.n	800337e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003432:	d11b      	bne.n	800346c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800343c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	f043 0204 	orr.w	r2, r3, #4
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800347a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800347c:	b08f      	sub	sp, #60	; 0x3c
 800347e:	af0a      	add	r7, sp, #40	; 0x28
 8003480:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e10f      	b.n	80036ac <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f006 fe60 	bl	800a16c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2203      	movs	r2, #3
 80034b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f003 f933 	bl	8006736 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	603b      	str	r3, [r7, #0]
 80034d6:	687e      	ldr	r6, [r7, #4]
 80034d8:	466d      	mov	r5, sp
 80034da:	f106 0410 	add.w	r4, r6, #16
 80034de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80034ee:	1d33      	adds	r3, r6, #4
 80034f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034f2:	6838      	ldr	r0, [r7, #0]
 80034f4:	f003 f80a 	bl	800650c <USB_CoreInit>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d005      	beq.n	800350a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2202      	movs	r2, #2
 8003502:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e0d0      	b.n	80036ac <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2100      	movs	r1, #0
 8003510:	4618      	mov	r0, r3
 8003512:	f003 f921 	bl	8006758 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003516:	2300      	movs	r3, #0
 8003518:	73fb      	strb	r3, [r7, #15]
 800351a:	e04a      	b.n	80035b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800351c:	7bfa      	ldrb	r2, [r7, #15]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	333d      	adds	r3, #61	; 0x3d
 800352c:	2201      	movs	r2, #1
 800352e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003530:	7bfa      	ldrb	r2, [r7, #15]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	333c      	adds	r3, #60	; 0x3c
 8003540:	7bfa      	ldrb	r2, [r7, #15]
 8003542:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003544:	7bfa      	ldrb	r2, [r7, #15]
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	b298      	uxth	r0, r3
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	3344      	adds	r3, #68	; 0x44
 8003558:	4602      	mov	r2, r0
 800355a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	3340      	adds	r3, #64	; 0x40
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003570:	7bfa      	ldrb	r2, [r7, #15]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	3348      	adds	r3, #72	; 0x48
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003584:	7bfa      	ldrb	r2, [r7, #15]
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	334c      	adds	r3, #76	; 0x4c
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003598:	7bfa      	ldrb	r2, [r7, #15]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	3354      	adds	r3, #84	; 0x54
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	3301      	adds	r3, #1
 80035b0:	73fb      	strb	r3, [r7, #15]
 80035b2:	7bfa      	ldrb	r2, [r7, #15]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d3af      	bcc.n	800351c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035bc:	2300      	movs	r3, #0
 80035be:	73fb      	strb	r3, [r7, #15]
 80035c0:	e044      	b.n	800364c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80035d4:	2200      	movs	r2, #0
 80035d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035ee:	7bfa      	ldrb	r2, [r7, #15]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800361a:	7bfa      	ldrb	r2, [r7, #15]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003630:	7bfa      	ldrb	r2, [r7, #15]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003646:	7bfb      	ldrb	r3, [r7, #15]
 8003648:	3301      	adds	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
 800364c:	7bfa      	ldrb	r2, [r7, #15]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	429a      	cmp	r2, r3
 8003654:	d3b5      	bcc.n	80035c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	687e      	ldr	r6, [r7, #4]
 800365e:	466d      	mov	r5, sp
 8003660:	f106 0410 	add.w	r4, r6, #16
 8003664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800366a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800366c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003670:	e885 0003 	stmia.w	r5, {r0, r1}
 8003674:	1d33      	adds	r3, r6, #4
 8003676:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003678:	6838      	ldr	r0, [r7, #0]
 800367a:	f003 f8b9 	bl	80067f0 <USB_DevInit>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e00d      	b.n	80036ac <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f004 fa08 	bl	8007aba <USB_DevDisconnect>

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_PCD_Start+0x1c>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e020      	b.n	8003712 <HAL_PCD_Start+0x5e>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d109      	bne.n	80036f4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d005      	beq.n	80036f4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f003 f80b 	bl	8006714 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f004 f9b8 	bl	8007a78 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800371a:	b590      	push	{r4, r7, lr}
 800371c:	b08d      	sub	sp, #52	; 0x34
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f004 fa76 	bl	8007c22 <USB_GetMode>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	f040 848a 	bne.w	8004052 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f004 f9da 	bl	8007afc <USB_ReadInterrupts>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 8480 	beq.w	8004050 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	0a1b      	lsrs	r3, r3, #8
 800375a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f004 f9c7 	bl	8007afc <USB_ReadInterrupts>
 800376e:	4603      	mov	r3, r0
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b02      	cmp	r3, #2
 8003776:	d107      	bne.n	8003788 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f002 0202 	and.w	r2, r2, #2
 8003786:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f004 f9b5 	bl	8007afc <USB_ReadInterrupts>
 8003792:	4603      	mov	r3, r0
 8003794:	f003 0310 	and.w	r3, r3, #16
 8003798:	2b10      	cmp	r3, #16
 800379a:	d161      	bne.n	8003860 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699a      	ldr	r2, [r3, #24]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0210 	bic.w	r2, r2, #16
 80037aa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f003 020f 	and.w	r2, r3, #15
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	4413      	add	r3, r2
 80037c8:	3304      	adds	r3, #4
 80037ca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	0c5b      	lsrs	r3, r3, #17
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d124      	bne.n	8003822 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d035      	beq.n	8003850 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	461a      	mov	r2, r3
 80037f6:	6a38      	ldr	r0, [r7, #32]
 80037f8:	f003 ffec 	bl	80077d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003808:	441a      	add	r2, r3
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	6a1a      	ldr	r2, [r3, #32]
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800381a:	441a      	add	r2, r3
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	621a      	str	r2, [r3, #32]
 8003820:	e016      	b.n	8003850 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	0c5b      	lsrs	r3, r3, #17
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	2b06      	cmp	r3, #6
 800382c:	d110      	bne.n	8003850 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003834:	2208      	movs	r2, #8
 8003836:	4619      	mov	r1, r3
 8003838:	6a38      	ldr	r0, [r7, #32]
 800383a:	f003 ffcb 	bl	80077d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	6a1a      	ldr	r2, [r3, #32]
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800384a:	441a      	add	r2, r3
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699a      	ldr	r2, [r3, #24]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0210 	orr.w	r2, r2, #16
 800385e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f004 f949 	bl	8007afc <USB_ReadInterrupts>
 800386a:	4603      	mov	r3, r0
 800386c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003870:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003874:	f040 80a7 	bne.w	80039c6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f004 f94e 	bl	8007b22 <USB_ReadDevAllOutEpInterrupt>
 8003886:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003888:	e099      	b.n	80039be <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 808e 	beq.w	80039b2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	4611      	mov	r1, r2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f004 f972 	bl	8007b8a <USB_ReadDevOutEPInterrupt>
 80038a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00c      	beq.n	80038cc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038be:	461a      	mov	r2, r3
 80038c0:	2301      	movs	r3, #1
 80038c2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80038c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fec2 	bl	8004650 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00c      	beq.n	80038f0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e2:	461a      	mov	r2, r3
 80038e4:	2308      	movs	r3, #8
 80038e6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80038e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 ff98 	bl	8004820 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	4413      	add	r3, r2
 8003902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003906:	461a      	mov	r2, r3
 8003908:	2310      	movs	r3, #16
 800390a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d030      	beq.n	8003978 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391e:	2b80      	cmp	r3, #128	; 0x80
 8003920:	d109      	bne.n	8003936 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003930:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003934:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003938:	4613      	mov	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	4413      	add	r3, r2
 8003948:	3304      	adds	r3, #4
 800394a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	78db      	ldrb	r3, [r3, #3]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d108      	bne.n	8003966 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2200      	movs	r2, #0
 8003958:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	b2db      	uxtb	r3, r3
 800395e:	4619      	mov	r1, r3
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f006 fd09 	bl	800a378 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	4413      	add	r3, r2
 800396e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003972:	461a      	mov	r2, r3
 8003974:	2302      	movs	r3, #2
 8003976:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	2b00      	cmp	r3, #0
 8003980:	d008      	beq.n	8003994 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	4413      	add	r3, r2
 800398a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398e:	461a      	mov	r2, r3
 8003990:	2320      	movs	r3, #32
 8003992:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d009      	beq.n	80039b2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039aa:	461a      	mov	r2, r3
 80039ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039b0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	3301      	adds	r3, #1
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80039b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ba:	085b      	lsrs	r3, r3, #1
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f47f af62 	bne.w	800388a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f004 f896 	bl	8007afc <USB_ReadInterrupts>
 80039d0:	4603      	mov	r3, r0
 80039d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039da:	f040 80db 	bne.w	8003b94 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f004 f8b7 	bl	8007b56 <USB_ReadDevAllInEpInterrupt>
 80039e8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80039ee:	e0cd      	b.n	8003b8c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80039f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 80c2 	beq.w	8003b80 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	4611      	mov	r1, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f004 f8dd 	bl	8007bc6 <USB_ReadDevInEPInterrupt>
 8003a0c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d057      	beq.n	8003ac8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	2201      	movs	r2, #1
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	69f9      	ldr	r1, [r7, #28]
 8003a34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a38:	4013      	ands	r3, r2
 8003a3a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d132      	bne.n	8003abc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	334c      	adds	r3, #76	; 0x4c
 8003a66:	6819      	ldr	r1, [r3, #0]
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4403      	add	r3, r0
 8003a76:	3348      	adds	r3, #72	; 0x48
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4419      	add	r1, r3
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a80:	4613      	mov	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4403      	add	r3, r0
 8003a8a:	334c      	adds	r3, #76	; 0x4c
 8003a8c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d113      	bne.n	8003abc <HAL_PCD_IRQHandler+0x3a2>
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a98:	4613      	mov	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	3354      	adds	r3, #84	; 0x54
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d108      	bne.n	8003abc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	f004 f8e4 	bl	8007c84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f006 fbd3 	bl	800a26e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d008      	beq.n	8003ae4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	015a      	lsls	r2, r3, #5
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ade:	461a      	mov	r2, r3
 8003ae0:	2308      	movs	r3, #8
 8003ae2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d008      	beq.n	8003b00 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	015a      	lsls	r2, r3, #5
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afa:	461a      	mov	r2, r3
 8003afc:	2310      	movs	r3, #16
 8003afe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d008      	beq.n	8003b1c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b16:	461a      	mov	r2, r3
 8003b18:	2340      	movs	r3, #64	; 0x40
 8003b1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d023      	beq.n	8003b6e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003b26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b28:	6a38      	ldr	r0, [r7, #32]
 8003b2a:	f002 ffc5 	bl	8006ab8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	3338      	adds	r3, #56	; 0x38
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3304      	adds	r3, #4
 8003b40:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	78db      	ldrb	r3, [r3, #3]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d108      	bne.n	8003b5c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	4619      	mov	r1, r3
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f006 fc20 	bl	800a39c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b68:	461a      	mov	r2, r3
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fcdb 	bl	8004536 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	3301      	adds	r3, #1
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	085b      	lsrs	r3, r3, #1
 8003b8a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f47f af2e 	bne.w	80039f0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f003 ffaf 	bl	8007afc <USB_ReadInterrupts>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ba8:	d122      	bne.n	8003bf0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	69fa      	ldr	r2, [r7, #28]
 8003bb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bb8:	f023 0301 	bic.w	r3, r3, #1
 8003bbc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d108      	bne.n	8003bda <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fec2 	bl	800495c <HAL_PCDEx_LPM_Callback>
 8003bd8:	e002      	b.n	8003be0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f006 fbbe 	bl	800a35c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695a      	ldr	r2, [r3, #20]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003bee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f003 ff81 	bl	8007afc <USB_ReadInterrupts>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c04:	d112      	bne.n	8003c2c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d102      	bne.n	8003c1c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f006 fb7a 	bl	800a310 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695a      	ldr	r2, [r3, #20]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003c2a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f003 ff63 	bl	8007afc <USB_ReadInterrupts>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c40:	f040 80b7 	bne.w	8003db2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	69fa      	ldr	r2, [r7, #28]
 8003c4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c52:	f023 0301 	bic.w	r3, r3, #1
 8003c56:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2110      	movs	r1, #16
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f002 ff2a 	bl	8006ab8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c64:	2300      	movs	r3, #0
 8003c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c68:	e046      	b.n	8003cf8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c76:	461a      	mov	r2, r3
 8003c78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c7c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c8e:	0151      	lsls	r1, r2, #5
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	440a      	add	r2, r1
 8003c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c9c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003caa:	461a      	mov	r2, r3
 8003cac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cb0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc2:	0151      	lsls	r1, r2, #5
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	440a      	add	r2, r1
 8003cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ccc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cd0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ce2:	0151      	lsls	r1, r2, #5
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	440a      	add	r2, r1
 8003ce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cf0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d3b3      	bcc.n	8003c6a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d10:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d14:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d016      	beq.n	8003d4c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d2e:	f043 030b 	orr.w	r3, r3, #11
 8003d32:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	69fa      	ldr	r2, [r7, #28]
 8003d40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d44:	f043 030b 	orr.w	r3, r3, #11
 8003d48:	6453      	str	r3, [r2, #68]	; 0x44
 8003d4a:	e015      	b.n	8003d78 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d5e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003d62:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d72:	f043 030b 	orr.w	r3, r3, #11
 8003d76:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	69fa      	ldr	r2, [r7, #28]
 8003d82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d86:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d8a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f003 ff71 	bl	8007c84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003db0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f003 fea0 	bl	8007afc <USB_ReadInterrupts>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc6:	d124      	bne.n	8003e12 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f003 ff36 	bl	8007c3e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f002 feeb 	bl	8006bb2 <USB_GetDevSpeed>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	461a      	mov	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681c      	ldr	r4, [r3, #0]
 8003de8:	f001 fa26 	bl	8005238 <HAL_RCC_GetHCLKFreq>
 8003dec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	461a      	mov	r2, r3
 8003df6:	4620      	mov	r0, r4
 8003df8:	f002 fbea 	bl	80065d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f006 fa5e 	bl	800a2be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695a      	ldr	r2, [r3, #20]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e10:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f003 fe70 	bl	8007afc <USB_ReadInterrupts>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d10a      	bne.n	8003e3c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f006 fa3b 	bl	800a2a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f002 0208 	and.w	r2, r2, #8
 8003e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f003 fe5b 	bl	8007afc <USB_ReadInterrupts>
 8003e46:	4603      	mov	r3, r0
 8003e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4c:	2b80      	cmp	r3, #128	; 0x80
 8003e4e:	d122      	bne.n	8003e96 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e60:	e014      	b.n	8003e8c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e66:	4613      	mov	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	440b      	add	r3, r1
 8003e70:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d105      	bne.n	8003e86 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	4619      	mov	r1, r3
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fb27 	bl	80044d4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	3301      	adds	r3, #1
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d3e5      	bcc.n	8003e62 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f003 fe2e 	bl	8007afc <USB_ReadInterrupts>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eaa:	d13b      	bne.n	8003f24 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eac:	2301      	movs	r3, #1
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb0:	e02b      	b.n	8003f0a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4413      	add	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	3340      	adds	r3, #64	; 0x40
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d115      	bne.n	8003f04 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003ed8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	da12      	bge.n	8003f04 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	440b      	add	r3, r1
 8003eec:	333f      	adds	r3, #63	; 0x3f
 8003eee:	2201      	movs	r2, #1
 8003ef0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	4619      	mov	r1, r3
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fae8 	bl	80044d4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	3301      	adds	r3, #1
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d3ce      	bcc.n	8003eb2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695a      	ldr	r2, [r3, #20]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003f22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f003 fde7 	bl	8007afc <USB_ReadInterrupts>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f38:	d155      	bne.n	8003fe6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3e:	e045      	b.n	8003fcc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f54:	4613      	mov	r3, r2
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	4413      	add	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d12e      	bne.n	8003fc6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	da2b      	bge.n	8003fc6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003f7a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d121      	bne.n	8003fc6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f86:	4613      	mov	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003f94:	2201      	movs	r2, #1
 8003f96:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10a      	bne.n	8003fc6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fc2:	6053      	str	r3, [r2, #4]
            break;
 8003fc4:	e007      	b.n	8003fd6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	3301      	adds	r3, #1
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d3b4      	bcc.n	8003f40 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003fe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f003 fd86 	bl	8007afc <USB_ReadInterrupts>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ffa:	d10a      	bne.n	8004012 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f006 f9df 	bl	800a3c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695a      	ldr	r2, [r3, #20]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004010:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f003 fd70 	bl	8007afc <USB_ReadInterrupts>
 800401c:	4603      	mov	r3, r0
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b04      	cmp	r3, #4
 8004024:	d115      	bne.n	8004052 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f006 f9cf 	bl	800a3dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6859      	ldr	r1, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	e000      	b.n	8004052 <HAL_PCD_IRQHandler+0x938>
      return;
 8004050:	bf00      	nop
    }
  }
}
 8004052:	3734      	adds	r7, #52	; 0x34
 8004054:	46bd      	mov	sp, r7
 8004056:	bd90      	pop	{r4, r7, pc}

08004058 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_PCD_SetAddress+0x1a>
 800406e:	2302      	movs	r3, #2
 8004070:	e013      	b.n	800409a <HAL_PCD_SetAddress+0x42>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	78fa      	ldrb	r2, [r7, #3]
 800407e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f003 fcce 	bl	8007a2c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	4608      	mov	r0, r1
 80040ac:	4611      	mov	r1, r2
 80040ae:	461a      	mov	r2, r3
 80040b0:	4603      	mov	r3, r0
 80040b2:	70fb      	strb	r3, [r7, #3]
 80040b4:	460b      	mov	r3, r1
 80040b6:	803b      	strh	r3, [r7, #0]
 80040b8:	4613      	mov	r3, r2
 80040ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	da0f      	bge.n	80040e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	f003 020f 	and.w	r2, r3, #15
 80040ce:	4613      	mov	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	3338      	adds	r3, #56	; 0x38
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	4413      	add	r3, r2
 80040dc:	3304      	adds	r3, #4
 80040de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	705a      	strb	r2, [r3, #1]
 80040e6:	e00f      	b.n	8004108 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	f003 020f 	and.w	r2, r3, #15
 80040ee:	4613      	mov	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4413      	add	r3, r2
 80040fe:	3304      	adds	r3, #4
 8004100:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	b2da      	uxtb	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004114:	883a      	ldrh	r2, [r7, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	78ba      	ldrb	r2, [r7, #2]
 800411e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	785b      	ldrb	r3, [r3, #1]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d004      	beq.n	8004132 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004132:	78bb      	ldrb	r3, [r7, #2]
 8004134:	2b02      	cmp	r3, #2
 8004136:	d102      	bne.n	800413e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_PCD_EP_Open+0xaa>
 8004148:	2302      	movs	r3, #2
 800414a:	e00e      	b.n	800416a <HAL_PCD_EP_Open+0xc8>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68f9      	ldr	r1, [r7, #12]
 800415a:	4618      	mov	r0, r3
 800415c:	f002 fd4e 	bl	8006bfc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004168:	7afb      	ldrb	r3, [r7, #11]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	460b      	mov	r3, r1
 800417c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800417e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004182:	2b00      	cmp	r3, #0
 8004184:	da0f      	bge.n	80041a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	f003 020f 	and.w	r2, r3, #15
 800418c:	4613      	mov	r3, r2
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	3338      	adds	r3, #56	; 0x38
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	4413      	add	r3, r2
 800419a:	3304      	adds	r3, #4
 800419c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2201      	movs	r2, #1
 80041a2:	705a      	strb	r2, [r3, #1]
 80041a4:	e00f      	b.n	80041c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041a6:	78fb      	ldrb	r3, [r7, #3]
 80041a8:	f003 020f 	and.w	r2, r3, #15
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	4413      	add	r3, r2
 80041bc:	3304      	adds	r3, #4
 80041be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_PCD_EP_Close+0x6e>
 80041dc:	2302      	movs	r3, #2
 80041de:	e00e      	b.n	80041fe <HAL_PCD_EP_Close+0x8c>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68f9      	ldr	r1, [r7, #12]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f002 fd8c 	bl	8006d0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b086      	sub	sp, #24
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
 8004212:	460b      	mov	r3, r1
 8004214:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004216:	7afb      	ldrb	r3, [r7, #11]
 8004218:	f003 020f 	and.w	r2, r3, #15
 800421c:	4613      	mov	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	3304      	adds	r3, #4
 800422e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2200      	movs	r2, #0
 8004240:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2200      	movs	r2, #0
 8004246:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004248:	7afb      	ldrb	r3, [r7, #11]
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	b2da      	uxtb	r2, r3
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d102      	bne.n	8004262 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004262:	7afb      	ldrb	r3, [r7, #11]
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	6979      	ldr	r1, [r7, #20]
 800427a:	f003 f86b 	bl	8007354 <USB_EP0StartXfer>
 800427e:	e008      	b.n	8004292 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	6979      	ldr	r1, [r7, #20]
 800428e:	f002 fe19 	bl	8006ec4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	f003 020f 	and.w	r2, r3, #15
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	4613      	mov	r3, r2
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80042be:	681b      	ldr	r3, [r3, #0]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	607a      	str	r2, [r7, #4]
 80042d6:	603b      	str	r3, [r7, #0]
 80042d8:	460b      	mov	r3, r1
 80042da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042dc:	7afb      	ldrb	r3, [r7, #11]
 80042de:	f003 020f 	and.w	r2, r3, #15
 80042e2:	4613      	mov	r3, r2
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	4413      	add	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	3338      	adds	r3, #56	; 0x38
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	3304      	adds	r3, #4
 80042f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2200      	movs	r2, #0
 8004304:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2201      	movs	r2, #1
 800430a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800430c:	7afb      	ldrb	r3, [r7, #11]
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	b2da      	uxtb	r2, r3
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d102      	bne.n	8004326 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004326:	7afb      	ldrb	r3, [r7, #11]
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	2b00      	cmp	r3, #0
 800432e:	d109      	bne.n	8004344 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6818      	ldr	r0, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	461a      	mov	r2, r3
 800433c:	6979      	ldr	r1, [r7, #20]
 800433e:	f003 f809 	bl	8007354 <USB_EP0StartXfer>
 8004342:	e008      	b.n	8004356 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	6979      	ldr	r1, [r7, #20]
 8004352:	f002 fdb7 	bl	8006ec4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	f003 020f 	and.w	r2, r3, #15
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	429a      	cmp	r2, r3
 8004378:	d901      	bls.n	800437e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e050      	b.n	8004420 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800437e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004382:	2b00      	cmp	r3, #0
 8004384:	da0f      	bge.n	80043a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004386:	78fb      	ldrb	r3, [r7, #3]
 8004388:	f003 020f 	and.w	r2, r3, #15
 800438c:	4613      	mov	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	4413      	add	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	3338      	adds	r3, #56	; 0x38
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	4413      	add	r3, r2
 800439a:	3304      	adds	r3, #4
 800439c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2201      	movs	r2, #1
 80043a2:	705a      	strb	r2, [r3, #1]
 80043a4:	e00d      	b.n	80043c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043a6:	78fa      	ldrb	r2, [r7, #3]
 80043a8:	4613      	mov	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	4413      	add	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	4413      	add	r3, r2
 80043b8:	3304      	adds	r3, #4
 80043ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2201      	movs	r2, #1
 80043c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_PCD_EP_SetStall+0x82>
 80043de:	2302      	movs	r3, #2
 80043e0:	e01e      	b.n	8004420 <HAL_PCD_EP_SetStall+0xc0>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68f9      	ldr	r1, [r7, #12]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f003 fa47 	bl	8007884 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	f003 030f 	and.w	r3, r3, #15
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	b2d9      	uxtb	r1, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004410:	461a      	mov	r2, r3
 8004412:	f003 fc37 	bl	8007c84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	f003 020f 	and.w	r2, r3, #15
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	429a      	cmp	r2, r3
 8004440:	d901      	bls.n	8004446 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e042      	b.n	80044cc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004446:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800444a:	2b00      	cmp	r3, #0
 800444c:	da0f      	bge.n	800446e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800444e:	78fb      	ldrb	r3, [r7, #3]
 8004450:	f003 020f 	and.w	r2, r3, #15
 8004454:	4613      	mov	r3, r2
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	3338      	adds	r3, #56	; 0x38
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	4413      	add	r3, r2
 8004462:	3304      	adds	r3, #4
 8004464:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	705a      	strb	r2, [r3, #1]
 800446c:	e00f      	b.n	800448e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800446e:	78fb      	ldrb	r3, [r7, #3]
 8004470:	f003 020f 	and.w	r2, r3, #15
 8004474:	4613      	mov	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	4413      	add	r3, r2
 8004484:	3304      	adds	r3, #4
 8004486:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	b2da      	uxtb	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_PCD_EP_ClrStall+0x86>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e00e      	b.n	80044cc <HAL_PCD_EP_ClrStall+0xa4>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68f9      	ldr	r1, [r7, #12]
 80044bc:	4618      	mov	r0, r3
 80044be:	f003 fa4f 	bl	8007960 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80044e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	da0c      	bge.n	8004502 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	f003 020f 	and.w	r2, r3, #15
 80044ee:	4613      	mov	r3, r2
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	3338      	adds	r3, #56	; 0x38
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	4413      	add	r3, r2
 80044fc:	3304      	adds	r3, #4
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	e00c      	b.n	800451c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	f003 020f 	and.w	r2, r3, #15
 8004508:	4613      	mov	r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	4413      	add	r3, r2
 8004518:	3304      	adds	r3, #4
 800451a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68f9      	ldr	r1, [r7, #12]
 8004522:	4618      	mov	r0, r3
 8004524:	f003 f86e 	bl	8007604 <USB_EPStopXfer>
 8004528:	4603      	mov	r3, r0
 800452a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800452c:	7afb      	ldrb	r3, [r7, #11]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b08a      	sub	sp, #40	; 0x28
 800453a:	af02      	add	r7, sp, #8
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	4613      	mov	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	4413      	add	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	3338      	adds	r3, #56	; 0x38
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	4413      	add	r3, r2
 800455a:	3304      	adds	r3, #4
 800455c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a1a      	ldr	r2, [r3, #32]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	429a      	cmp	r2, r3
 8004568:	d901      	bls.n	800456e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e06c      	b.n	8004648 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	699a      	ldr	r2, [r3, #24]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	429a      	cmp	r2, r3
 8004582:	d902      	bls.n	800458a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	3303      	adds	r3, #3
 800458e:	089b      	lsrs	r3, r3, #2
 8004590:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004592:	e02b      	b.n	80045ec <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	699a      	ldr	r2, [r3, #24]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	69fa      	ldr	r2, [r7, #28]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d902      	bls.n	80045b0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	3303      	adds	r3, #3
 80045b4:	089b      	lsrs	r3, r3, #2
 80045b6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6919      	ldr	r1, [r3, #16]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	4603      	mov	r3, r0
 80045ce:	6978      	ldr	r0, [r7, #20]
 80045d0:	f003 f8c2 	bl	8007758 <USB_WritePacket>

    ep->xfer_buff  += len;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	441a      	add	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a1a      	ldr	r2, [r3, #32]
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	441a      	add	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d809      	bhi.n	8004616 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a1a      	ldr	r2, [r3, #32]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800460a:	429a      	cmp	r2, r3
 800460c:	d203      	bcs.n	8004616 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1be      	bne.n	8004594 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	699a      	ldr	r2, [r3, #24]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	429a      	cmp	r2, r3
 8004620:	d811      	bhi.n	8004646 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	2201      	movs	r2, #1
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	43db      	mvns	r3, r3
 800463c:	6939      	ldr	r1, [r7, #16]
 800463e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004642:	4013      	ands	r3, r2
 8004644:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3720      	adds	r7, #32
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	333c      	adds	r3, #60	; 0x3c
 8004668:	3304      	adds	r3, #4
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d17b      	bne.n	800477e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b00      	cmp	r3, #0
 800468e:	d015      	beq.n	80046bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	4a61      	ldr	r2, [pc, #388]	; (8004818 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	f240 80b9 	bls.w	800480c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 80b3 	beq.w	800480c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b2:	461a      	mov	r2, r3
 80046b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046b8:	6093      	str	r3, [r2, #8]
 80046ba:	e0a7      	b.n	800480c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d009      	beq.n	80046da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d2:	461a      	mov	r2, r3
 80046d4:	2320      	movs	r3, #32
 80046d6:	6093      	str	r3, [r2, #8]
 80046d8:	e098      	b.n	800480c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f040 8093 	bne.w	800480c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	4a4b      	ldr	r2, [pc, #300]	; (8004818 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d90f      	bls.n	800470e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00a      	beq.n	800470e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004704:	461a      	mov	r2, r3
 8004706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800470a:	6093      	str	r3, [r2, #8]
 800470c:	e07e      	b.n	800480c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	4613      	mov	r3, r2
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	4413      	add	r3, r2
 8004720:	3304      	adds	r3, #4
 8004722:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	69da      	ldr	r2, [r3, #28]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	0159      	lsls	r1, r3, #5
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	440b      	add	r3, r1
 8004730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800473a:	1ad2      	subs	r2, r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d114      	bne.n	8004770 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d109      	bne.n	8004762 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6818      	ldr	r0, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004758:	461a      	mov	r2, r3
 800475a:	2101      	movs	r1, #1
 800475c:	f003 fa92 	bl	8007c84 <USB_EP0_OutStart>
 8004760:	e006      	b.n	8004770 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	441a      	add	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	4619      	mov	r1, r3
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f005 fd5e 	bl	800a238 <HAL_PCD_DataOutStageCallback>
 800477c:	e046      	b.n	800480c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	4a26      	ldr	r2, [pc, #152]	; (800481c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d124      	bne.n	80047d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479c:	461a      	mov	r2, r3
 800479e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047a2:	6093      	str	r3, [r2, #8]
 80047a4:	e032      	b.n	800480c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047bc:	461a      	mov	r2, r3
 80047be:	2320      	movs	r3, #32
 80047c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	4619      	mov	r1, r3
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f005 fd35 	bl	800a238 <HAL_PCD_DataOutStageCallback>
 80047ce:	e01d      	b.n	800480c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d114      	bne.n	8004800 <PCD_EP_OutXfrComplete_int+0x1b0>
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	4613      	mov	r3, r2
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	4413      	add	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d108      	bne.n	8004800 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047f8:	461a      	mov	r2, r3
 80047fa:	2100      	movs	r1, #0
 80047fc:	f003 fa42 	bl	8007c84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	4619      	mov	r1, r3
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f005 fd16 	bl	800a238 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3720      	adds	r7, #32
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	4f54300a 	.word	0x4f54300a
 800481c:	4f54310a 	.word	0x4f54310a

08004820 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	333c      	adds	r3, #60	; 0x3c
 8004838:	3304      	adds	r3, #4
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4a15      	ldr	r2, [pc, #84]	; (80048a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d90e      	bls.n	8004874 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800485c:	2b00      	cmp	r3, #0
 800485e:	d009      	beq.n	8004874 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486c:	461a      	mov	r2, r3
 800486e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004872:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f005 fccd 	bl	800a214 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4a0a      	ldr	r2, [pc, #40]	; (80048a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d90c      	bls.n	800489c <PCD_EP_OutSetupPacket_int+0x7c>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d108      	bne.n	800489c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004894:	461a      	mov	r2, r3
 8004896:	2101      	movs	r1, #1
 8004898:	f003 f9f4 	bl	8007c84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	4f54300a 	.word	0x4f54300a

080048ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	70fb      	strb	r3, [r7, #3]
 80048b8:	4613      	mov	r3, r2
 80048ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d107      	bne.n	80048da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80048ca:	883b      	ldrh	r3, [r7, #0]
 80048cc:	0419      	lsls	r1, r3, #16
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	629a      	str	r2, [r3, #40]	; 0x28
 80048d8:	e028      	b.n	800492c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e0:	0c1b      	lsrs	r3, r3, #16
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	4413      	add	r3, r2
 80048e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048e8:	2300      	movs	r3, #0
 80048ea:	73fb      	strb	r3, [r7, #15]
 80048ec:	e00d      	b.n	800490a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	3340      	adds	r3, #64	; 0x40
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	0c1b      	lsrs	r3, r3, #16
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	4413      	add	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	3301      	adds	r3, #1
 8004908:	73fb      	strb	r3, [r7, #15]
 800490a:	7bfa      	ldrb	r2, [r7, #15]
 800490c:	78fb      	ldrb	r3, [r7, #3]
 800490e:	3b01      	subs	r3, #1
 8004910:	429a      	cmp	r2, r3
 8004912:	d3ec      	bcc.n	80048ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004914:	883b      	ldrh	r3, [r7, #0]
 8004916:	0418      	lsls	r0, r3, #16
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6819      	ldr	r1, [r3, #0]
 800491c:	78fb      	ldrb	r3, [r7, #3]
 800491e:	3b01      	subs	r3, #1
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	4302      	orrs	r2, r0
 8004924:	3340      	adds	r3, #64	; 0x40
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	440b      	add	r3, r1
 800492a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	460b      	mov	r3, r1
 8004944:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	887a      	ldrh	r2, [r7, #2]
 800494c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e267      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d075      	beq.n	8004a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004992:	4b88      	ldr	r3, [pc, #544]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	2b04      	cmp	r3, #4
 800499c:	d00c      	beq.n	80049b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800499e:	4b85      	ldr	r3, [pc, #532]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d112      	bne.n	80049d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049aa:	4b82      	ldr	r3, [pc, #520]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049b6:	d10b      	bne.n	80049d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b8:	4b7e      	ldr	r3, [pc, #504]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d05b      	beq.n	8004a7c <HAL_RCC_OscConfig+0x108>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d157      	bne.n	8004a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e242      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d8:	d106      	bne.n	80049e8 <HAL_RCC_OscConfig+0x74>
 80049da:	4b76      	ldr	r3, [pc, #472]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a75      	ldr	r2, [pc, #468]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	e01d      	b.n	8004a24 <HAL_RCC_OscConfig+0xb0>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCC_OscConfig+0x98>
 80049f2:	4b70      	ldr	r3, [pc, #448]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a6f      	ldr	r2, [pc, #444]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	4b6d      	ldr	r3, [pc, #436]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a6c      	ldr	r2, [pc, #432]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e00b      	b.n	8004a24 <HAL_RCC_OscConfig+0xb0>
 8004a0c:	4b69      	ldr	r3, [pc, #420]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a68      	ldr	r2, [pc, #416]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	4b66      	ldr	r3, [pc, #408]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a65      	ldr	r2, [pc, #404]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d013      	beq.n	8004a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2c:	f7fd fa6e 	bl	8001f0c <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a34:	f7fd fa6a 	bl	8001f0c <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	; 0x64
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e207      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a46:	4b5b      	ldr	r3, [pc, #364]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCC_OscConfig+0xc0>
 8004a52:	e014      	b.n	8004a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a54:	f7fd fa5a 	bl	8001f0c <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a5c:	f7fd fa56 	bl	8001f0c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	; 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e1f3      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6e:	4b51      	ldr	r3, [pc, #324]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0xe8>
 8004a7a:	e000      	b.n	8004a7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d063      	beq.n	8004b52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a8a:	4b4a      	ldr	r3, [pc, #296]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00b      	beq.n	8004aae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a96:	4b47      	ldr	r3, [pc, #284]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d11c      	bne.n	8004adc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aa2:	4b44      	ldr	r3, [pc, #272]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d116      	bne.n	8004adc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aae:	4b41      	ldr	r3, [pc, #260]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x152>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d001      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e1c7      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac6:	4b3b      	ldr	r3, [pc, #236]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	4937      	ldr	r1, [pc, #220]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ada:	e03a      	b.n	8004b52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d020      	beq.n	8004b26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ae4:	4b34      	ldr	r3, [pc, #208]	; (8004bb8 <HAL_RCC_OscConfig+0x244>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aea:	f7fd fa0f 	bl	8001f0c <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004af2:	f7fd fa0b 	bl	8001f0c <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e1a8      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b04:	4b2b      	ldr	r3, [pc, #172]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b10:	4b28      	ldr	r3, [pc, #160]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	4925      	ldr	r1, [pc, #148]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	600b      	str	r3, [r1, #0]
 8004b24:	e015      	b.n	8004b52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b26:	4b24      	ldr	r3, [pc, #144]	; (8004bb8 <HAL_RCC_OscConfig+0x244>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fd f9ee 	bl	8001f0c <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b34:	f7fd f9ea 	bl	8001f0c <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e187      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b46:	4b1b      	ldr	r3, [pc, #108]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f0      	bne.n	8004b34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d036      	beq.n	8004bcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d016      	beq.n	8004b94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b66:	4b15      	ldr	r3, [pc, #84]	; (8004bbc <HAL_RCC_OscConfig+0x248>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6c:	f7fd f9ce 	bl	8001f0c <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b74:	f7fd f9ca 	bl	8001f0c <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e167      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b86:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCC_OscConfig+0x200>
 8004b92:	e01b      	b.n	8004bcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b94:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <HAL_RCC_OscConfig+0x248>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b9a:	f7fd f9b7 	bl	8001f0c <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ba0:	e00e      	b.n	8004bc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ba2:	f7fd f9b3 	bl	8001f0c <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d907      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e150      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	42470000 	.word	0x42470000
 8004bbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bc0:	4b88      	ldr	r3, [pc, #544]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1ea      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8097 	beq.w	8004d08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bde:	4b81      	ldr	r3, [pc, #516]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10f      	bne.n	8004c0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	60bb      	str	r3, [r7, #8]
 8004bee:	4b7d      	ldr	r3, [pc, #500]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	4a7c      	ldr	r2, [pc, #496]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bfa:	4b7a      	ldr	r3, [pc, #488]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c02:	60bb      	str	r3, [r7, #8]
 8004c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c06:	2301      	movs	r3, #1
 8004c08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c0a:	4b77      	ldr	r3, [pc, #476]	; (8004de8 <HAL_RCC_OscConfig+0x474>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d118      	bne.n	8004c48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c16:	4b74      	ldr	r3, [pc, #464]	; (8004de8 <HAL_RCC_OscConfig+0x474>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a73      	ldr	r2, [pc, #460]	; (8004de8 <HAL_RCC_OscConfig+0x474>)
 8004c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c22:	f7fd f973 	bl	8001f0c <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c2a:	f7fd f96f 	bl	8001f0c <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e10c      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c3c:	4b6a      	ldr	r3, [pc, #424]	; (8004de8 <HAL_RCC_OscConfig+0x474>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0f0      	beq.n	8004c2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d106      	bne.n	8004c5e <HAL_RCC_OscConfig+0x2ea>
 8004c50:	4b64      	ldr	r3, [pc, #400]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c54:	4a63      	ldr	r2, [pc, #396]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c56:	f043 0301 	orr.w	r3, r3, #1
 8004c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c5c:	e01c      	b.n	8004c98 <HAL_RCC_OscConfig+0x324>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b05      	cmp	r3, #5
 8004c64:	d10c      	bne.n	8004c80 <HAL_RCC_OscConfig+0x30c>
 8004c66:	4b5f      	ldr	r3, [pc, #380]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6a:	4a5e      	ldr	r2, [pc, #376]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c6c:	f043 0304 	orr.w	r3, r3, #4
 8004c70:	6713      	str	r3, [r2, #112]	; 0x70
 8004c72:	4b5c      	ldr	r3, [pc, #368]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	4a5b      	ldr	r2, [pc, #364]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c7e:	e00b      	b.n	8004c98 <HAL_RCC_OscConfig+0x324>
 8004c80:	4b58      	ldr	r3, [pc, #352]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c84:	4a57      	ldr	r2, [pc, #348]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c86:	f023 0301 	bic.w	r3, r3, #1
 8004c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c8c:	4b55      	ldr	r3, [pc, #340]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c90:	4a54      	ldr	r2, [pc, #336]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c92:	f023 0304 	bic.w	r3, r3, #4
 8004c96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d015      	beq.n	8004ccc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca0:	f7fd f934 	bl	8001f0c <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca8:	f7fd f930 	bl	8001f0c <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e0cb      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cbe:	4b49      	ldr	r3, [pc, #292]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0ee      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x334>
 8004cca:	e014      	b.n	8004cf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ccc:	f7fd f91e 	bl	8001f0c <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cd2:	e00a      	b.n	8004cea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cd4:	f7fd f91a 	bl	8001f0c <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e0b5      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cea:	4b3e      	ldr	r3, [pc, #248]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1ee      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cf6:	7dfb      	ldrb	r3, [r7, #23]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d105      	bne.n	8004d08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cfc:	4b39      	ldr	r3, [pc, #228]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	4a38      	ldr	r2, [pc, #224]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80a1 	beq.w	8004e54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d12:	4b34      	ldr	r3, [pc, #208]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d05c      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d141      	bne.n	8004daa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d26:	4b31      	ldr	r3, [pc, #196]	; (8004dec <HAL_RCC_OscConfig+0x478>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2c:	f7fd f8ee 	bl	8001f0c <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d34:	f7fd f8ea 	bl	8001f0c <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e087      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d46:	4b27      	ldr	r3, [pc, #156]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1f0      	bne.n	8004d34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69da      	ldr	r2, [r3, #28]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	019b      	lsls	r3, r3, #6
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	085b      	lsrs	r3, r3, #1
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	041b      	lsls	r3, r3, #16
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	061b      	lsls	r3, r3, #24
 8004d76:	491b      	ldr	r1, [pc, #108]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d7c:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <HAL_RCC_OscConfig+0x478>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d82:	f7fd f8c3 	bl	8001f0c <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d8a:	f7fd f8bf 	bl	8001f0c <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e05c      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d9c:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0f0      	beq.n	8004d8a <HAL_RCC_OscConfig+0x416>
 8004da8:	e054      	b.n	8004e54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004daa:	4b10      	ldr	r3, [pc, #64]	; (8004dec <HAL_RCC_OscConfig+0x478>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db0:	f7fd f8ac 	bl	8001f0c <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004db8:	f7fd f8a8 	bl	8001f0c <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e045      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dca:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f0      	bne.n	8004db8 <HAL_RCC_OscConfig+0x444>
 8004dd6:	e03d      	b.n	8004e54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d107      	bne.n	8004df0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e038      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
 8004de4:	40023800 	.word	0x40023800
 8004de8:	40007000 	.word	0x40007000
 8004dec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004df0:	4b1b      	ldr	r3, [pc, #108]	; (8004e60 <HAL_RCC_OscConfig+0x4ec>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d028      	beq.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d121      	bne.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d11a      	bne.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e20:	4013      	ands	r3, r2
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d111      	bne.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e36:	085b      	lsrs	r3, r3, #1
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d107      	bne.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40023800 	.word	0x40023800

08004e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e0cc      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e78:	4b68      	ldr	r3, [pc, #416]	; (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d90c      	bls.n	8004ea0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e86:	4b65      	ldr	r3, [pc, #404]	; (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	b2d2      	uxtb	r2, r2
 8004e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8e:	4b63      	ldr	r3, [pc, #396]	; (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e0b8      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d020      	beq.n	8004eee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eb8:	4b59      	ldr	r3, [pc, #356]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	4a58      	ldr	r2, [pc, #352]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ec2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ed0:	4b53      	ldr	r3, [pc, #332]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	4a52      	ldr	r2, [pc, #328]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004eda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004edc:	4b50      	ldr	r3, [pc, #320]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	494d      	ldr	r1, [pc, #308]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d044      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d107      	bne.n	8004f12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f02:	4b47      	ldr	r3, [pc, #284]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d119      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e07f      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d003      	beq.n	8004f22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d107      	bne.n	8004f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f22:	4b3f      	ldr	r3, [pc, #252]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d109      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e06f      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f32:	4b3b      	ldr	r3, [pc, #236]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e067      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f42:	4b37      	ldr	r3, [pc, #220]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f023 0203 	bic.w	r2, r3, #3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	4934      	ldr	r1, [pc, #208]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f54:	f7fc ffda 	bl	8001f0c <HAL_GetTick>
 8004f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f5a:	e00a      	b.n	8004f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f5c:	f7fc ffd6 	bl	8001f0c <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e04f      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f72:	4b2b      	ldr	r3, [pc, #172]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 020c 	and.w	r2, r3, #12
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d1eb      	bne.n	8004f5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f84:	4b25      	ldr	r3, [pc, #148]	; (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d20c      	bcs.n	8004fac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f92:	4b22      	ldr	r3, [pc, #136]	; (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9a:	4b20      	ldr	r3, [pc, #128]	; (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d001      	beq.n	8004fac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e032      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fb8:	4b19      	ldr	r3, [pc, #100]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	4916      	ldr	r1, [pc, #88]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d009      	beq.n	8004fea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fd6:	4b12      	ldr	r3, [pc, #72]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	490e      	ldr	r1, [pc, #56]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fea:	f000 f821 	bl	8005030 <HAL_RCC_GetSysClockFreq>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	091b      	lsrs	r3, r3, #4
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	490a      	ldr	r1, [pc, #40]	; (8005024 <HAL_RCC_ClockConfig+0x1c0>)
 8004ffc:	5ccb      	ldrb	r3, [r1, r3]
 8004ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8005002:	4a09      	ldr	r2, [pc, #36]	; (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8005004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005006:	4b09      	ldr	r3, [pc, #36]	; (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f7fc ff3a 	bl	8001e84 <HAL_InitTick>

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40023c00 	.word	0x40023c00
 8005020:	40023800 	.word	0x40023800
 8005024:	0800d654 	.word	0x0800d654
 8005028:	20000000 	.word	0x20000000
 800502c:	20000004 	.word	0x20000004

08005030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005034:	b094      	sub	sp, #80	; 0x50
 8005036:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	647b      	str	r3, [r7, #68]	; 0x44
 800503c:	2300      	movs	r3, #0
 800503e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005040:	2300      	movs	r3, #0
 8005042:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005048:	4b79      	ldr	r3, [pc, #484]	; (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f003 030c 	and.w	r3, r3, #12
 8005050:	2b08      	cmp	r3, #8
 8005052:	d00d      	beq.n	8005070 <HAL_RCC_GetSysClockFreq+0x40>
 8005054:	2b08      	cmp	r3, #8
 8005056:	f200 80e1 	bhi.w	800521c <HAL_RCC_GetSysClockFreq+0x1ec>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <HAL_RCC_GetSysClockFreq+0x34>
 800505e:	2b04      	cmp	r3, #4
 8005060:	d003      	beq.n	800506a <HAL_RCC_GetSysClockFreq+0x3a>
 8005062:	e0db      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005064:	4b73      	ldr	r3, [pc, #460]	; (8005234 <HAL_RCC_GetSysClockFreq+0x204>)
 8005066:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005068:	e0db      	b.n	8005222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800506a:	4b72      	ldr	r3, [pc, #456]	; (8005234 <HAL_RCC_GetSysClockFreq+0x204>)
 800506c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800506e:	e0d8      	b.n	8005222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005070:	4b6f      	ldr	r3, [pc, #444]	; (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005078:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800507a:	4b6d      	ldr	r3, [pc, #436]	; (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d063      	beq.n	800514e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005086:	4b6a      	ldr	r3, [pc, #424]	; (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	099b      	lsrs	r3, r3, #6
 800508c:	2200      	movs	r2, #0
 800508e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005090:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005098:	633b      	str	r3, [r7, #48]	; 0x30
 800509a:	2300      	movs	r3, #0
 800509c:	637b      	str	r3, [r7, #52]	; 0x34
 800509e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80050a2:	4622      	mov	r2, r4
 80050a4:	462b      	mov	r3, r5
 80050a6:	f04f 0000 	mov.w	r0, #0
 80050aa:	f04f 0100 	mov.w	r1, #0
 80050ae:	0159      	lsls	r1, r3, #5
 80050b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050b4:	0150      	lsls	r0, r2, #5
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4621      	mov	r1, r4
 80050bc:	1a51      	subs	r1, r2, r1
 80050be:	6139      	str	r1, [r7, #16]
 80050c0:	4629      	mov	r1, r5
 80050c2:	eb63 0301 	sbc.w	r3, r3, r1
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050d4:	4659      	mov	r1, fp
 80050d6:	018b      	lsls	r3, r1, #6
 80050d8:	4651      	mov	r1, sl
 80050da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050de:	4651      	mov	r1, sl
 80050e0:	018a      	lsls	r2, r1, #6
 80050e2:	4651      	mov	r1, sl
 80050e4:	ebb2 0801 	subs.w	r8, r2, r1
 80050e8:	4659      	mov	r1, fp
 80050ea:	eb63 0901 	sbc.w	r9, r3, r1
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005102:	4690      	mov	r8, r2
 8005104:	4699      	mov	r9, r3
 8005106:	4623      	mov	r3, r4
 8005108:	eb18 0303 	adds.w	r3, r8, r3
 800510c:	60bb      	str	r3, [r7, #8]
 800510e:	462b      	mov	r3, r5
 8005110:	eb49 0303 	adc.w	r3, r9, r3
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005122:	4629      	mov	r1, r5
 8005124:	028b      	lsls	r3, r1, #10
 8005126:	4621      	mov	r1, r4
 8005128:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800512c:	4621      	mov	r1, r4
 800512e:	028a      	lsls	r2, r1, #10
 8005130:	4610      	mov	r0, r2
 8005132:	4619      	mov	r1, r3
 8005134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005136:	2200      	movs	r2, #0
 8005138:	62bb      	str	r3, [r7, #40]	; 0x28
 800513a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800513c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005140:	f7fb fd82 	bl	8000c48 <__aeabi_uldivmod>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4613      	mov	r3, r2
 800514a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800514c:	e058      	b.n	8005200 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800514e:	4b38      	ldr	r3, [pc, #224]	; (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	099b      	lsrs	r3, r3, #6
 8005154:	2200      	movs	r2, #0
 8005156:	4618      	mov	r0, r3
 8005158:	4611      	mov	r1, r2
 800515a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800515e:	623b      	str	r3, [r7, #32]
 8005160:	2300      	movs	r3, #0
 8005162:	627b      	str	r3, [r7, #36]	; 0x24
 8005164:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005168:	4642      	mov	r2, r8
 800516a:	464b      	mov	r3, r9
 800516c:	f04f 0000 	mov.w	r0, #0
 8005170:	f04f 0100 	mov.w	r1, #0
 8005174:	0159      	lsls	r1, r3, #5
 8005176:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800517a:	0150      	lsls	r0, r2, #5
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4641      	mov	r1, r8
 8005182:	ebb2 0a01 	subs.w	sl, r2, r1
 8005186:	4649      	mov	r1, r9
 8005188:	eb63 0b01 	sbc.w	fp, r3, r1
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005198:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800519c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051a0:	ebb2 040a 	subs.w	r4, r2, sl
 80051a4:	eb63 050b 	sbc.w	r5, r3, fp
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	00eb      	lsls	r3, r5, #3
 80051b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051b6:	00e2      	lsls	r2, r4, #3
 80051b8:	4614      	mov	r4, r2
 80051ba:	461d      	mov	r5, r3
 80051bc:	4643      	mov	r3, r8
 80051be:	18e3      	adds	r3, r4, r3
 80051c0:	603b      	str	r3, [r7, #0]
 80051c2:	464b      	mov	r3, r9
 80051c4:	eb45 0303 	adc.w	r3, r5, r3
 80051c8:	607b      	str	r3, [r7, #4]
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051d6:	4629      	mov	r1, r5
 80051d8:	028b      	lsls	r3, r1, #10
 80051da:	4621      	mov	r1, r4
 80051dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051e0:	4621      	mov	r1, r4
 80051e2:	028a      	lsls	r2, r1, #10
 80051e4:	4610      	mov	r0, r2
 80051e6:	4619      	mov	r1, r3
 80051e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ea:	2200      	movs	r2, #0
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	61fa      	str	r2, [r7, #28]
 80051f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051f4:	f7fb fd28 	bl	8000c48 <__aeabi_uldivmod>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4613      	mov	r3, r2
 80051fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005200:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	0c1b      	lsrs	r3, r3, #16
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	3301      	adds	r3, #1
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005210:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005214:	fbb2 f3f3 	udiv	r3, r2, r3
 8005218:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800521a:	e002      	b.n	8005222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800521c:	4b05      	ldr	r3, [pc, #20]	; (8005234 <HAL_RCC_GetSysClockFreq+0x204>)
 800521e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005220:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005224:	4618      	mov	r0, r3
 8005226:	3750      	adds	r7, #80	; 0x50
 8005228:	46bd      	mov	sp, r7
 800522a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800522e:	bf00      	nop
 8005230:	40023800 	.word	0x40023800
 8005234:	00f42400 	.word	0x00f42400

08005238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800523c:	4b03      	ldr	r3, [pc, #12]	; (800524c <HAL_RCC_GetHCLKFreq+0x14>)
 800523e:	681b      	ldr	r3, [r3, #0]
}
 8005240:	4618      	mov	r0, r3
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	20000000 	.word	0x20000000

08005250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005254:	f7ff fff0 	bl	8005238 <HAL_RCC_GetHCLKFreq>
 8005258:	4602      	mov	r2, r0
 800525a:	4b05      	ldr	r3, [pc, #20]	; (8005270 <HAL_RCC_GetPCLK1Freq+0x20>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	0a9b      	lsrs	r3, r3, #10
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	4903      	ldr	r1, [pc, #12]	; (8005274 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005266:	5ccb      	ldrb	r3, [r1, r3]
 8005268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800526c:	4618      	mov	r0, r3
 800526e:	bd80      	pop	{r7, pc}
 8005270:	40023800 	.word	0x40023800
 8005274:	0800d664 	.word	0x0800d664

08005278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800527c:	f7ff ffdc 	bl	8005238 <HAL_RCC_GetHCLKFreq>
 8005280:	4602      	mov	r2, r0
 8005282:	4b05      	ldr	r3, [pc, #20]	; (8005298 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	0b5b      	lsrs	r3, r3, #13
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	4903      	ldr	r1, [pc, #12]	; (800529c <HAL_RCC_GetPCLK2Freq+0x24>)
 800528e:	5ccb      	ldrb	r3, [r1, r3]
 8005290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005294:	4618      	mov	r0, r3
 8005296:	bd80      	pop	{r7, pc}
 8005298:	40023800 	.word	0x40023800
 800529c:	0800d664 	.word	0x0800d664

080052a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e07b      	b.n	80053aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d108      	bne.n	80052cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052c2:	d009      	beq.n	80052d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	61da      	str	r2, [r3, #28]
 80052ca:	e005      	b.n	80052d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fc fad0 	bl	8001898 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800530e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005348:	431a      	orrs	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535c:	ea42 0103 	orr.w	r1, r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	0c1b      	lsrs	r3, r3, #16
 8005376:	f003 0104 	and.w	r1, r3, #4
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	f003 0210 	and.w	r2, r3, #16
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69da      	ldr	r2, [r3, #28]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005398:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b082      	sub	sp, #8
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e041      	b.n	8005448 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d106      	bne.n	80053de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7fc fac5 	bl	8001968 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2202      	movs	r2, #2
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3304      	adds	r3, #4
 80053ee:	4619      	mov	r1, r3
 80053f0:	4610      	mov	r0, r2
 80053f2:	f000 fa11 	bl	8005818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e041      	b.n	80054e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f839 	bl	80054ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3304      	adds	r3, #4
 800548c:	4619      	mov	r1, r3
 800548e:	4610      	mov	r0, r2
 8005490:	f000 f9c2 	bl	8005818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
	...

08005504 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800551e:	2302      	movs	r3, #2
 8005520:	e0ae      	b.n	8005680 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b0c      	cmp	r3, #12
 800552e:	f200 809f 	bhi.w	8005670 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005532:	a201      	add	r2, pc, #4	; (adr r2, 8005538 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005538:	0800556d 	.word	0x0800556d
 800553c:	08005671 	.word	0x08005671
 8005540:	08005671 	.word	0x08005671
 8005544:	08005671 	.word	0x08005671
 8005548:	080055ad 	.word	0x080055ad
 800554c:	08005671 	.word	0x08005671
 8005550:	08005671 	.word	0x08005671
 8005554:	08005671 	.word	0x08005671
 8005558:	080055ef 	.word	0x080055ef
 800555c:	08005671 	.word	0x08005671
 8005560:	08005671 	.word	0x08005671
 8005564:	08005671 	.word	0x08005671
 8005568:	0800562f 	.word	0x0800562f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 f9f0 	bl	8005958 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0208 	orr.w	r2, r2, #8
 8005586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0204 	bic.w	r2, r2, #4
 8005596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6999      	ldr	r1, [r3, #24]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	691a      	ldr	r2, [r3, #16]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	619a      	str	r2, [r3, #24]
      break;
 80055aa:	e064      	b.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68b9      	ldr	r1, [r7, #8]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fa40 	bl	8005a38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6999      	ldr	r1, [r3, #24]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	021a      	lsls	r2, r3, #8
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	619a      	str	r2, [r3, #24]
      break;
 80055ec:	e043      	b.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 fa95 	bl	8005b24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f042 0208 	orr.w	r2, r2, #8
 8005608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0204 	bic.w	r2, r2, #4
 8005618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69d9      	ldr	r1, [r3, #28]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	61da      	str	r2, [r3, #28]
      break;
 800562c:	e023      	b.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68b9      	ldr	r1, [r7, #8]
 8005634:	4618      	mov	r0, r3
 8005636:	f000 fae9 	bl	8005c0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69da      	ldr	r2, [r3, #28]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69da      	ldr	r2, [r3, #28]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69d9      	ldr	r1, [r3, #28]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	021a      	lsls	r2, r3, #8
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	61da      	str	r2, [r3, #28]
      break;
 800566e:	e002      	b.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	75fb      	strb	r3, [r7, #23]
      break;
 8005674:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800567e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_TIM_ConfigClockSource+0x1c>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e0b4      	b.n	800580e <HAL_TIM_ConfigClockSource+0x186>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056dc:	d03e      	beq.n	800575c <HAL_TIM_ConfigClockSource+0xd4>
 80056de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e2:	f200 8087 	bhi.w	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 80056e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ea:	f000 8086 	beq.w	80057fa <HAL_TIM_ConfigClockSource+0x172>
 80056ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f2:	d87f      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 80056f4:	2b70      	cmp	r3, #112	; 0x70
 80056f6:	d01a      	beq.n	800572e <HAL_TIM_ConfigClockSource+0xa6>
 80056f8:	2b70      	cmp	r3, #112	; 0x70
 80056fa:	d87b      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 80056fc:	2b60      	cmp	r3, #96	; 0x60
 80056fe:	d050      	beq.n	80057a2 <HAL_TIM_ConfigClockSource+0x11a>
 8005700:	2b60      	cmp	r3, #96	; 0x60
 8005702:	d877      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005704:	2b50      	cmp	r3, #80	; 0x50
 8005706:	d03c      	beq.n	8005782 <HAL_TIM_ConfigClockSource+0xfa>
 8005708:	2b50      	cmp	r3, #80	; 0x50
 800570a:	d873      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 800570c:	2b40      	cmp	r3, #64	; 0x40
 800570e:	d058      	beq.n	80057c2 <HAL_TIM_ConfigClockSource+0x13a>
 8005710:	2b40      	cmp	r3, #64	; 0x40
 8005712:	d86f      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005714:	2b30      	cmp	r3, #48	; 0x30
 8005716:	d064      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005718:	2b30      	cmp	r3, #48	; 0x30
 800571a:	d86b      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 800571c:	2b20      	cmp	r3, #32
 800571e:	d060      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005720:	2b20      	cmp	r3, #32
 8005722:	d867      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005724:	2b00      	cmp	r3, #0
 8005726:	d05c      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005728:	2b10      	cmp	r3, #16
 800572a:	d05a      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x15a>
 800572c:	e062      	b.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6818      	ldr	r0, [r3, #0]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6899      	ldr	r1, [r3, #8]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f000 fb35 	bl	8005dac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005750:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	609a      	str	r2, [r3, #8]
      break;
 800575a:	e04f      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	6899      	ldr	r1, [r3, #8]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f000 fb1e 	bl	8005dac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800577e:	609a      	str	r2, [r3, #8]
      break;
 8005780:	e03c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6818      	ldr	r0, [r3, #0]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	6859      	ldr	r1, [r3, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	461a      	mov	r2, r3
 8005790:	f000 fa92 	bl	8005cb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2150      	movs	r1, #80	; 0x50
 800579a:	4618      	mov	r0, r3
 800579c:	f000 faeb 	bl	8005d76 <TIM_ITRx_SetConfig>
      break;
 80057a0:	e02c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	6859      	ldr	r1, [r3, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	461a      	mov	r2, r3
 80057b0:	f000 fab1 	bl	8005d16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2160      	movs	r1, #96	; 0x60
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fadb 	bl	8005d76 <TIM_ITRx_SetConfig>
      break;
 80057c0:	e01c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6859      	ldr	r1, [r3, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	461a      	mov	r2, r3
 80057d0:	f000 fa72 	bl	8005cb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2140      	movs	r1, #64	; 0x40
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 facb 	bl	8005d76 <TIM_ITRx_SetConfig>
      break;
 80057e0:	e00c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4619      	mov	r1, r3
 80057ec:	4610      	mov	r0, r2
 80057ee:	f000 fac2 	bl	8005d76 <TIM_ITRx_SetConfig>
      break;
 80057f2:	e003      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	73fb      	strb	r3, [r7, #15]
      break;
 80057f8:	e000      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800580c:	7bfb      	ldrb	r3, [r7, #15]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a40      	ldr	r2, [pc, #256]	; (800592c <TIM_Base_SetConfig+0x114>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d013      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005836:	d00f      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a3d      	ldr	r2, [pc, #244]	; (8005930 <TIM_Base_SetConfig+0x118>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00b      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a3c      	ldr	r2, [pc, #240]	; (8005934 <TIM_Base_SetConfig+0x11c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d007      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a3b      	ldr	r2, [pc, #236]	; (8005938 <TIM_Base_SetConfig+0x120>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d003      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a3a      	ldr	r2, [pc, #232]	; (800593c <TIM_Base_SetConfig+0x124>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d108      	bne.n	800586a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a2f      	ldr	r2, [pc, #188]	; (800592c <TIM_Base_SetConfig+0x114>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d02b      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005878:	d027      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a2c      	ldr	r2, [pc, #176]	; (8005930 <TIM_Base_SetConfig+0x118>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d023      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a2b      	ldr	r2, [pc, #172]	; (8005934 <TIM_Base_SetConfig+0x11c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d01f      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a2a      	ldr	r2, [pc, #168]	; (8005938 <TIM_Base_SetConfig+0x120>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d01b      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a29      	ldr	r2, [pc, #164]	; (800593c <TIM_Base_SetConfig+0x124>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d017      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a28      	ldr	r2, [pc, #160]	; (8005940 <TIM_Base_SetConfig+0x128>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d013      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a27      	ldr	r2, [pc, #156]	; (8005944 <TIM_Base_SetConfig+0x12c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00f      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a26      	ldr	r2, [pc, #152]	; (8005948 <TIM_Base_SetConfig+0x130>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00b      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a25      	ldr	r2, [pc, #148]	; (800594c <TIM_Base_SetConfig+0x134>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d007      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a24      	ldr	r2, [pc, #144]	; (8005950 <TIM_Base_SetConfig+0x138>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d003      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a23      	ldr	r2, [pc, #140]	; (8005954 <TIM_Base_SetConfig+0x13c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d108      	bne.n	80058dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a0a      	ldr	r2, [pc, #40]	; (800592c <TIM_Base_SetConfig+0x114>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d003      	beq.n	8005910 <TIM_Base_SetConfig+0xf8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a0c      	ldr	r2, [pc, #48]	; (800593c <TIM_Base_SetConfig+0x124>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d103      	bne.n	8005918 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	691a      	ldr	r2, [r3, #16]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	615a      	str	r2, [r3, #20]
}
 800591e:	bf00      	nop
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40010000 	.word	0x40010000
 8005930:	40000400 	.word	0x40000400
 8005934:	40000800 	.word	0x40000800
 8005938:	40000c00 	.word	0x40000c00
 800593c:	40010400 	.word	0x40010400
 8005940:	40014000 	.word	0x40014000
 8005944:	40014400 	.word	0x40014400
 8005948:	40014800 	.word	0x40014800
 800594c:	40001800 	.word	0x40001800
 8005950:	40001c00 	.word	0x40001c00
 8005954:	40002000 	.word	0x40002000

08005958 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	f023 0201 	bic.w	r2, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 0303 	bic.w	r3, r3, #3
 800598e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f023 0302 	bic.w	r3, r3, #2
 80059a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a20      	ldr	r2, [pc, #128]	; (8005a30 <TIM_OC1_SetConfig+0xd8>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_OC1_SetConfig+0x64>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a1f      	ldr	r2, [pc, #124]	; (8005a34 <TIM_OC1_SetConfig+0xdc>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d10c      	bne.n	80059d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f023 0308 	bic.w	r3, r3, #8
 80059c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f023 0304 	bic.w	r3, r3, #4
 80059d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a15      	ldr	r2, [pc, #84]	; (8005a30 <TIM_OC1_SetConfig+0xd8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d003      	beq.n	80059e6 <TIM_OC1_SetConfig+0x8e>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a14      	ldr	r2, [pc, #80]	; (8005a34 <TIM_OC1_SetConfig+0xdc>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d111      	bne.n	8005a0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	621a      	str	r2, [r3, #32]
}
 8005a24:	bf00      	nop
 8005a26:	371c      	adds	r7, #28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	40010000 	.word	0x40010000
 8005a34:	40010400 	.word	0x40010400

08005a38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	f023 0210 	bic.w	r2, r3, #16
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f023 0320 	bic.w	r3, r3, #32
 8005a82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	011b      	lsls	r3, r3, #4
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a22      	ldr	r2, [pc, #136]	; (8005b1c <TIM_OC2_SetConfig+0xe4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d003      	beq.n	8005aa0 <TIM_OC2_SetConfig+0x68>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a21      	ldr	r2, [pc, #132]	; (8005b20 <TIM_OC2_SetConfig+0xe8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d10d      	bne.n	8005abc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a17      	ldr	r2, [pc, #92]	; (8005b1c <TIM_OC2_SetConfig+0xe4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d003      	beq.n	8005acc <TIM_OC2_SetConfig+0x94>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a16      	ldr	r2, [pc, #88]	; (8005b20 <TIM_OC2_SetConfig+0xe8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d113      	bne.n	8005af4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ad2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ada:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	621a      	str	r2, [r3, #32]
}
 8005b0e:	bf00      	nop
 8005b10:	371c      	adds	r7, #28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	40010000 	.word	0x40010000
 8005b20:	40010400 	.word	0x40010400

08005b24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0303 	bic.w	r3, r3, #3
 8005b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a21      	ldr	r2, [pc, #132]	; (8005c04 <TIM_OC3_SetConfig+0xe0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d003      	beq.n	8005b8a <TIM_OC3_SetConfig+0x66>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a20      	ldr	r2, [pc, #128]	; (8005c08 <TIM_OC3_SetConfig+0xe4>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d10d      	bne.n	8005ba6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a16      	ldr	r2, [pc, #88]	; (8005c04 <TIM_OC3_SetConfig+0xe0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d003      	beq.n	8005bb6 <TIM_OC3_SetConfig+0x92>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a15      	ldr	r2, [pc, #84]	; (8005c08 <TIM_OC3_SetConfig+0xe4>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d113      	bne.n	8005bde <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	621a      	str	r2, [r3, #32]
}
 8005bf8:	bf00      	nop
 8005bfa:	371c      	adds	r7, #28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	40010000 	.word	0x40010000
 8005c08:	40010400 	.word	0x40010400

08005c0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	021b      	lsls	r3, r3, #8
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	031b      	lsls	r3, r3, #12
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a12      	ldr	r2, [pc, #72]	; (8005cb0 <TIM_OC4_SetConfig+0xa4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d003      	beq.n	8005c74 <TIM_OC4_SetConfig+0x68>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a11      	ldr	r2, [pc, #68]	; (8005cb4 <TIM_OC4_SetConfig+0xa8>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d109      	bne.n	8005c88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	019b      	lsls	r3, r3, #6
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	621a      	str	r2, [r3, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	371c      	adds	r7, #28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40010000 	.word	0x40010000
 8005cb4:	40010400 	.word	0x40010400

08005cb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	f023 0201 	bic.w	r2, r3, #1
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f023 030a 	bic.w	r3, r3, #10
 8005cf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	621a      	str	r2, [r3, #32]
}
 8005d0a:	bf00      	nop
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b087      	sub	sp, #28
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	f023 0210 	bic.w	r2, r3, #16
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	031b      	lsls	r3, r3, #12
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	621a      	str	r2, [r3, #32]
}
 8005d6a:	bf00      	nop
 8005d6c:	371c      	adds	r7, #28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b085      	sub	sp, #20
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	f043 0307 	orr.w	r3, r3, #7
 8005d98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	609a      	str	r2, [r3, #8]
}
 8005da0:	bf00      	nop
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	021a      	lsls	r2, r3, #8
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	609a      	str	r2, [r3, #8]
}
 8005de0:	bf00      	nop
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d101      	bne.n	8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e00:	2302      	movs	r3, #2
 8005e02:	e05a      	b.n	8005eba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a21      	ldr	r2, [pc, #132]	; (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d022      	beq.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e50:	d01d      	beq.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a1d      	ldr	r2, [pc, #116]	; (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d018      	beq.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a1b      	ldr	r2, [pc, #108]	; (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d013      	beq.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1a      	ldr	r2, [pc, #104]	; (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00e      	beq.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a18      	ldr	r2, [pc, #96]	; (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d009      	beq.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a17      	ldr	r2, [pc, #92]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d004      	beq.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a15      	ldr	r2, [pc, #84]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d10c      	bne.n	8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40010000 	.word	0x40010000
 8005ecc:	40000400 	.word	0x40000400
 8005ed0:	40000800 	.word	0x40000800
 8005ed4:	40000c00 	.word	0x40000c00
 8005ed8:	40010400 	.word	0x40010400
 8005edc:	40014000 	.word	0x40014000
 8005ee0:	40001800 	.word	0x40001800

08005ee4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e03d      	b.n	8005f7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e03f      	b.n	800601a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d106      	bne.n	8005fb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7fb fd94 	bl	8001adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2224      	movs	r2, #36	; 0x24
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f829 	bl	8006024 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	691a      	ldr	r2, [r3, #16]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fe0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	695a      	ldr	r2, [r3, #20]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ff0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006000:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2220      	movs	r2, #32
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2220      	movs	r2, #32
 8006014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
	...

08006024 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006028:	b0c0      	sub	sp, #256	; 0x100
 800602a:	af00      	add	r7, sp, #0
 800602c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800603c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006040:	68d9      	ldr	r1, [r3, #12]
 8006042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	ea40 0301 	orr.w	r3, r0, r1
 800604c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800604e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	431a      	orrs	r2, r3
 800605c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	431a      	orrs	r2, r3
 8006064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	4313      	orrs	r3, r2
 800606c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800607c:	f021 010c 	bic.w	r1, r1, #12
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800608a:	430b      	orrs	r3, r1
 800608c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800608e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800609a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609e:	6999      	ldr	r1, [r3, #24]
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	ea40 0301 	orr.w	r3, r0, r1
 80060aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	4b8f      	ldr	r3, [pc, #572]	; (80062f0 <UART_SetConfig+0x2cc>)
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d005      	beq.n	80060c4 <UART_SetConfig+0xa0>
 80060b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	4b8d      	ldr	r3, [pc, #564]	; (80062f4 <UART_SetConfig+0x2d0>)
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d104      	bne.n	80060ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060c4:	f7ff f8d8 	bl	8005278 <HAL_RCC_GetPCLK2Freq>
 80060c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80060cc:	e003      	b.n	80060d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060ce:	f7ff f8bf 	bl	8005250 <HAL_RCC_GetPCLK1Freq>
 80060d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e0:	f040 810c 	bne.w	80062fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060e8:	2200      	movs	r2, #0
 80060ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80060f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80060f6:	4622      	mov	r2, r4
 80060f8:	462b      	mov	r3, r5
 80060fa:	1891      	adds	r1, r2, r2
 80060fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80060fe:	415b      	adcs	r3, r3
 8006100:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006102:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006106:	4621      	mov	r1, r4
 8006108:	eb12 0801 	adds.w	r8, r2, r1
 800610c:	4629      	mov	r1, r5
 800610e:	eb43 0901 	adc.w	r9, r3, r1
 8006112:	f04f 0200 	mov.w	r2, #0
 8006116:	f04f 0300 	mov.w	r3, #0
 800611a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800611e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006122:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006126:	4690      	mov	r8, r2
 8006128:	4699      	mov	r9, r3
 800612a:	4623      	mov	r3, r4
 800612c:	eb18 0303 	adds.w	r3, r8, r3
 8006130:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006134:	462b      	mov	r3, r5
 8006136:	eb49 0303 	adc.w	r3, r9, r3
 800613a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800613e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800614a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800614e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006152:	460b      	mov	r3, r1
 8006154:	18db      	adds	r3, r3, r3
 8006156:	653b      	str	r3, [r7, #80]	; 0x50
 8006158:	4613      	mov	r3, r2
 800615a:	eb42 0303 	adc.w	r3, r2, r3
 800615e:	657b      	str	r3, [r7, #84]	; 0x54
 8006160:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006164:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006168:	f7fa fd6e 	bl	8000c48 <__aeabi_uldivmod>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4b61      	ldr	r3, [pc, #388]	; (80062f8 <UART_SetConfig+0x2d4>)
 8006172:	fba3 2302 	umull	r2, r3, r3, r2
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	011c      	lsls	r4, r3, #4
 800617a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800617e:	2200      	movs	r2, #0
 8006180:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006184:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006188:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800618c:	4642      	mov	r2, r8
 800618e:	464b      	mov	r3, r9
 8006190:	1891      	adds	r1, r2, r2
 8006192:	64b9      	str	r1, [r7, #72]	; 0x48
 8006194:	415b      	adcs	r3, r3
 8006196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006198:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800619c:	4641      	mov	r1, r8
 800619e:	eb12 0a01 	adds.w	sl, r2, r1
 80061a2:	4649      	mov	r1, r9
 80061a4:	eb43 0b01 	adc.w	fp, r3, r1
 80061a8:	f04f 0200 	mov.w	r2, #0
 80061ac:	f04f 0300 	mov.w	r3, #0
 80061b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061bc:	4692      	mov	sl, r2
 80061be:	469b      	mov	fp, r3
 80061c0:	4643      	mov	r3, r8
 80061c2:	eb1a 0303 	adds.w	r3, sl, r3
 80061c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061ca:	464b      	mov	r3, r9
 80061cc:	eb4b 0303 	adc.w	r3, fp, r3
 80061d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80061e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80061e8:	460b      	mov	r3, r1
 80061ea:	18db      	adds	r3, r3, r3
 80061ec:	643b      	str	r3, [r7, #64]	; 0x40
 80061ee:	4613      	mov	r3, r2
 80061f0:	eb42 0303 	adc.w	r3, r2, r3
 80061f4:	647b      	str	r3, [r7, #68]	; 0x44
 80061f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061fe:	f7fa fd23 	bl	8000c48 <__aeabi_uldivmod>
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	4611      	mov	r1, r2
 8006208:	4b3b      	ldr	r3, [pc, #236]	; (80062f8 <UART_SetConfig+0x2d4>)
 800620a:	fba3 2301 	umull	r2, r3, r3, r1
 800620e:	095b      	lsrs	r3, r3, #5
 8006210:	2264      	movs	r2, #100	; 0x64
 8006212:	fb02 f303 	mul.w	r3, r2, r3
 8006216:	1acb      	subs	r3, r1, r3
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800621e:	4b36      	ldr	r3, [pc, #216]	; (80062f8 <UART_SetConfig+0x2d4>)
 8006220:	fba3 2302 	umull	r2, r3, r3, r2
 8006224:	095b      	lsrs	r3, r3, #5
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800622c:	441c      	add	r4, r3
 800622e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006232:	2200      	movs	r2, #0
 8006234:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006238:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800623c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006240:	4642      	mov	r2, r8
 8006242:	464b      	mov	r3, r9
 8006244:	1891      	adds	r1, r2, r2
 8006246:	63b9      	str	r1, [r7, #56]	; 0x38
 8006248:	415b      	adcs	r3, r3
 800624a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800624c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006250:	4641      	mov	r1, r8
 8006252:	1851      	adds	r1, r2, r1
 8006254:	6339      	str	r1, [r7, #48]	; 0x30
 8006256:	4649      	mov	r1, r9
 8006258:	414b      	adcs	r3, r1
 800625a:	637b      	str	r3, [r7, #52]	; 0x34
 800625c:	f04f 0200 	mov.w	r2, #0
 8006260:	f04f 0300 	mov.w	r3, #0
 8006264:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006268:	4659      	mov	r1, fp
 800626a:	00cb      	lsls	r3, r1, #3
 800626c:	4651      	mov	r1, sl
 800626e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006272:	4651      	mov	r1, sl
 8006274:	00ca      	lsls	r2, r1, #3
 8006276:	4610      	mov	r0, r2
 8006278:	4619      	mov	r1, r3
 800627a:	4603      	mov	r3, r0
 800627c:	4642      	mov	r2, r8
 800627e:	189b      	adds	r3, r3, r2
 8006280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006284:	464b      	mov	r3, r9
 8006286:	460a      	mov	r2, r1
 8006288:	eb42 0303 	adc.w	r3, r2, r3
 800628c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800629c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80062a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80062a4:	460b      	mov	r3, r1
 80062a6:	18db      	adds	r3, r3, r3
 80062a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80062aa:	4613      	mov	r3, r2
 80062ac:	eb42 0303 	adc.w	r3, r2, r3
 80062b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80062ba:	f7fa fcc5 	bl	8000c48 <__aeabi_uldivmod>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	4b0d      	ldr	r3, [pc, #52]	; (80062f8 <UART_SetConfig+0x2d4>)
 80062c4:	fba3 1302 	umull	r1, r3, r3, r2
 80062c8:	095b      	lsrs	r3, r3, #5
 80062ca:	2164      	movs	r1, #100	; 0x64
 80062cc:	fb01 f303 	mul.w	r3, r1, r3
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	3332      	adds	r3, #50	; 0x32
 80062d6:	4a08      	ldr	r2, [pc, #32]	; (80062f8 <UART_SetConfig+0x2d4>)
 80062d8:	fba2 2303 	umull	r2, r3, r2, r3
 80062dc:	095b      	lsrs	r3, r3, #5
 80062de:	f003 0207 	and.w	r2, r3, #7
 80062e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4422      	add	r2, r4
 80062ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062ec:	e105      	b.n	80064fa <UART_SetConfig+0x4d6>
 80062ee:	bf00      	nop
 80062f0:	40011000 	.word	0x40011000
 80062f4:	40011400 	.word	0x40011400
 80062f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006300:	2200      	movs	r2, #0
 8006302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006306:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800630a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800630e:	4642      	mov	r2, r8
 8006310:	464b      	mov	r3, r9
 8006312:	1891      	adds	r1, r2, r2
 8006314:	6239      	str	r1, [r7, #32]
 8006316:	415b      	adcs	r3, r3
 8006318:	627b      	str	r3, [r7, #36]	; 0x24
 800631a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800631e:	4641      	mov	r1, r8
 8006320:	1854      	adds	r4, r2, r1
 8006322:	4649      	mov	r1, r9
 8006324:	eb43 0501 	adc.w	r5, r3, r1
 8006328:	f04f 0200 	mov.w	r2, #0
 800632c:	f04f 0300 	mov.w	r3, #0
 8006330:	00eb      	lsls	r3, r5, #3
 8006332:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006336:	00e2      	lsls	r2, r4, #3
 8006338:	4614      	mov	r4, r2
 800633a:	461d      	mov	r5, r3
 800633c:	4643      	mov	r3, r8
 800633e:	18e3      	adds	r3, r4, r3
 8006340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006344:	464b      	mov	r3, r9
 8006346:	eb45 0303 	adc.w	r3, r5, r3
 800634a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800634e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800635a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800635e:	f04f 0200 	mov.w	r2, #0
 8006362:	f04f 0300 	mov.w	r3, #0
 8006366:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800636a:	4629      	mov	r1, r5
 800636c:	008b      	lsls	r3, r1, #2
 800636e:	4621      	mov	r1, r4
 8006370:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006374:	4621      	mov	r1, r4
 8006376:	008a      	lsls	r2, r1, #2
 8006378:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800637c:	f7fa fc64 	bl	8000c48 <__aeabi_uldivmod>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	4b60      	ldr	r3, [pc, #384]	; (8006508 <UART_SetConfig+0x4e4>)
 8006386:	fba3 2302 	umull	r2, r3, r3, r2
 800638a:	095b      	lsrs	r3, r3, #5
 800638c:	011c      	lsls	r4, r3, #4
 800638e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006392:	2200      	movs	r2, #0
 8006394:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006398:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800639c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80063a0:	4642      	mov	r2, r8
 80063a2:	464b      	mov	r3, r9
 80063a4:	1891      	adds	r1, r2, r2
 80063a6:	61b9      	str	r1, [r7, #24]
 80063a8:	415b      	adcs	r3, r3
 80063aa:	61fb      	str	r3, [r7, #28]
 80063ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063b0:	4641      	mov	r1, r8
 80063b2:	1851      	adds	r1, r2, r1
 80063b4:	6139      	str	r1, [r7, #16]
 80063b6:	4649      	mov	r1, r9
 80063b8:	414b      	adcs	r3, r1
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	f04f 0200 	mov.w	r2, #0
 80063c0:	f04f 0300 	mov.w	r3, #0
 80063c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063c8:	4659      	mov	r1, fp
 80063ca:	00cb      	lsls	r3, r1, #3
 80063cc:	4651      	mov	r1, sl
 80063ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063d2:	4651      	mov	r1, sl
 80063d4:	00ca      	lsls	r2, r1, #3
 80063d6:	4610      	mov	r0, r2
 80063d8:	4619      	mov	r1, r3
 80063da:	4603      	mov	r3, r0
 80063dc:	4642      	mov	r2, r8
 80063de:	189b      	adds	r3, r3, r2
 80063e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063e4:	464b      	mov	r3, r9
 80063e6:	460a      	mov	r2, r1
 80063e8:	eb42 0303 	adc.w	r3, r2, r3
 80063ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80063fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006408:	4649      	mov	r1, r9
 800640a:	008b      	lsls	r3, r1, #2
 800640c:	4641      	mov	r1, r8
 800640e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006412:	4641      	mov	r1, r8
 8006414:	008a      	lsls	r2, r1, #2
 8006416:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800641a:	f7fa fc15 	bl	8000c48 <__aeabi_uldivmod>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4b39      	ldr	r3, [pc, #228]	; (8006508 <UART_SetConfig+0x4e4>)
 8006424:	fba3 1302 	umull	r1, r3, r3, r2
 8006428:	095b      	lsrs	r3, r3, #5
 800642a:	2164      	movs	r1, #100	; 0x64
 800642c:	fb01 f303 	mul.w	r3, r1, r3
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	3332      	adds	r3, #50	; 0x32
 8006436:	4a34      	ldr	r2, [pc, #208]	; (8006508 <UART_SetConfig+0x4e4>)
 8006438:	fba2 2303 	umull	r2, r3, r2, r3
 800643c:	095b      	lsrs	r3, r3, #5
 800643e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006442:	441c      	add	r4, r3
 8006444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006448:	2200      	movs	r2, #0
 800644a:	673b      	str	r3, [r7, #112]	; 0x70
 800644c:	677a      	str	r2, [r7, #116]	; 0x74
 800644e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006452:	4642      	mov	r2, r8
 8006454:	464b      	mov	r3, r9
 8006456:	1891      	adds	r1, r2, r2
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	415b      	adcs	r3, r3
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006462:	4641      	mov	r1, r8
 8006464:	1851      	adds	r1, r2, r1
 8006466:	6039      	str	r1, [r7, #0]
 8006468:	4649      	mov	r1, r9
 800646a:	414b      	adcs	r3, r1
 800646c:	607b      	str	r3, [r7, #4]
 800646e:	f04f 0200 	mov.w	r2, #0
 8006472:	f04f 0300 	mov.w	r3, #0
 8006476:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800647a:	4659      	mov	r1, fp
 800647c:	00cb      	lsls	r3, r1, #3
 800647e:	4651      	mov	r1, sl
 8006480:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006484:	4651      	mov	r1, sl
 8006486:	00ca      	lsls	r2, r1, #3
 8006488:	4610      	mov	r0, r2
 800648a:	4619      	mov	r1, r3
 800648c:	4603      	mov	r3, r0
 800648e:	4642      	mov	r2, r8
 8006490:	189b      	adds	r3, r3, r2
 8006492:	66bb      	str	r3, [r7, #104]	; 0x68
 8006494:	464b      	mov	r3, r9
 8006496:	460a      	mov	r2, r1
 8006498:	eb42 0303 	adc.w	r3, r2, r3
 800649c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800649e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	663b      	str	r3, [r7, #96]	; 0x60
 80064a8:	667a      	str	r2, [r7, #100]	; 0x64
 80064aa:	f04f 0200 	mov.w	r2, #0
 80064ae:	f04f 0300 	mov.w	r3, #0
 80064b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80064b6:	4649      	mov	r1, r9
 80064b8:	008b      	lsls	r3, r1, #2
 80064ba:	4641      	mov	r1, r8
 80064bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064c0:	4641      	mov	r1, r8
 80064c2:	008a      	lsls	r2, r1, #2
 80064c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80064c8:	f7fa fbbe 	bl	8000c48 <__aeabi_uldivmod>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4b0d      	ldr	r3, [pc, #52]	; (8006508 <UART_SetConfig+0x4e4>)
 80064d2:	fba3 1302 	umull	r1, r3, r3, r2
 80064d6:	095b      	lsrs	r3, r3, #5
 80064d8:	2164      	movs	r1, #100	; 0x64
 80064da:	fb01 f303 	mul.w	r3, r1, r3
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	011b      	lsls	r3, r3, #4
 80064e2:	3332      	adds	r3, #50	; 0x32
 80064e4:	4a08      	ldr	r2, [pc, #32]	; (8006508 <UART_SetConfig+0x4e4>)
 80064e6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ea:	095b      	lsrs	r3, r3, #5
 80064ec:	f003 020f 	and.w	r2, r3, #15
 80064f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4422      	add	r2, r4
 80064f8:	609a      	str	r2, [r3, #8]
}
 80064fa:	bf00      	nop
 80064fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006500:	46bd      	mov	sp, r7
 8006502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006506:	bf00      	nop
 8006508:	51eb851f 	.word	0x51eb851f

0800650c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800650c:	b084      	sub	sp, #16
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	f107 001c 	add.w	r0, r7, #28
 800651a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800651e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006520:	2b01      	cmp	r3, #1
 8006522:	d122      	bne.n	800656a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006528:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800654c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800654e:	2b01      	cmp	r3, #1
 8006550:	d105      	bne.n	800655e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f001 fbee 	bl	8007d40 <USB_CoreReset>
 8006564:	4603      	mov	r3, r0
 8006566:	73fb      	strb	r3, [r7, #15]
 8006568:	e01a      	b.n	80065a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f001 fbe2 	bl	8007d40 <USB_CoreReset>
 800657c:	4603      	mov	r3, r0
 800657e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006582:	2b00      	cmp	r3, #0
 8006584:	d106      	bne.n	8006594 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	639a      	str	r2, [r3, #56]	; 0x38
 8006592:	e005      	b.n	80065a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006598:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d10b      	bne.n	80065be <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f043 0206 	orr.w	r2, r3, #6
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f043 0220 	orr.w	r2, r3, #32
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80065be:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065ca:	b004      	add	sp, #16
 80065cc:	4770      	bx	lr
	...

080065d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	4613      	mov	r3, r2
 80065dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80065de:	79fb      	ldrb	r3, [r7, #7]
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d165      	bne.n	80066b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	4a41      	ldr	r2, [pc, #260]	; (80066ec <USB_SetTurnaroundTime+0x11c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d906      	bls.n	80065fa <USB_SetTurnaroundTime+0x2a>
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	4a40      	ldr	r2, [pc, #256]	; (80066f0 <USB_SetTurnaroundTime+0x120>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d202      	bcs.n	80065fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80065f4:	230f      	movs	r3, #15
 80065f6:	617b      	str	r3, [r7, #20]
 80065f8:	e062      	b.n	80066c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	4a3c      	ldr	r2, [pc, #240]	; (80066f0 <USB_SetTurnaroundTime+0x120>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d306      	bcc.n	8006610 <USB_SetTurnaroundTime+0x40>
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	4a3b      	ldr	r2, [pc, #236]	; (80066f4 <USB_SetTurnaroundTime+0x124>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d202      	bcs.n	8006610 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800660a:	230e      	movs	r3, #14
 800660c:	617b      	str	r3, [r7, #20]
 800660e:	e057      	b.n	80066c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	4a38      	ldr	r2, [pc, #224]	; (80066f4 <USB_SetTurnaroundTime+0x124>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d306      	bcc.n	8006626 <USB_SetTurnaroundTime+0x56>
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	4a37      	ldr	r2, [pc, #220]	; (80066f8 <USB_SetTurnaroundTime+0x128>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d202      	bcs.n	8006626 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006620:	230d      	movs	r3, #13
 8006622:	617b      	str	r3, [r7, #20]
 8006624:	e04c      	b.n	80066c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	4a33      	ldr	r2, [pc, #204]	; (80066f8 <USB_SetTurnaroundTime+0x128>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d306      	bcc.n	800663c <USB_SetTurnaroundTime+0x6c>
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	4a32      	ldr	r2, [pc, #200]	; (80066fc <USB_SetTurnaroundTime+0x12c>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d802      	bhi.n	800663c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006636:	230c      	movs	r3, #12
 8006638:	617b      	str	r3, [r7, #20]
 800663a:	e041      	b.n	80066c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	4a2f      	ldr	r2, [pc, #188]	; (80066fc <USB_SetTurnaroundTime+0x12c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d906      	bls.n	8006652 <USB_SetTurnaroundTime+0x82>
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	4a2e      	ldr	r2, [pc, #184]	; (8006700 <USB_SetTurnaroundTime+0x130>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d802      	bhi.n	8006652 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800664c:	230b      	movs	r3, #11
 800664e:	617b      	str	r3, [r7, #20]
 8006650:	e036      	b.n	80066c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	4a2a      	ldr	r2, [pc, #168]	; (8006700 <USB_SetTurnaroundTime+0x130>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d906      	bls.n	8006668 <USB_SetTurnaroundTime+0x98>
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	4a29      	ldr	r2, [pc, #164]	; (8006704 <USB_SetTurnaroundTime+0x134>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d802      	bhi.n	8006668 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006662:	230a      	movs	r3, #10
 8006664:	617b      	str	r3, [r7, #20]
 8006666:	e02b      	b.n	80066c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	4a26      	ldr	r2, [pc, #152]	; (8006704 <USB_SetTurnaroundTime+0x134>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d906      	bls.n	800667e <USB_SetTurnaroundTime+0xae>
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	4a25      	ldr	r2, [pc, #148]	; (8006708 <USB_SetTurnaroundTime+0x138>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d202      	bcs.n	800667e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006678:	2309      	movs	r3, #9
 800667a:	617b      	str	r3, [r7, #20]
 800667c:	e020      	b.n	80066c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	4a21      	ldr	r2, [pc, #132]	; (8006708 <USB_SetTurnaroundTime+0x138>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d306      	bcc.n	8006694 <USB_SetTurnaroundTime+0xc4>
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	4a20      	ldr	r2, [pc, #128]	; (800670c <USB_SetTurnaroundTime+0x13c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d802      	bhi.n	8006694 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800668e:	2308      	movs	r3, #8
 8006690:	617b      	str	r3, [r7, #20]
 8006692:	e015      	b.n	80066c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	4a1d      	ldr	r2, [pc, #116]	; (800670c <USB_SetTurnaroundTime+0x13c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d906      	bls.n	80066aa <USB_SetTurnaroundTime+0xda>
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	4a1c      	ldr	r2, [pc, #112]	; (8006710 <USB_SetTurnaroundTime+0x140>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d202      	bcs.n	80066aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80066a4:	2307      	movs	r3, #7
 80066a6:	617b      	str	r3, [r7, #20]
 80066a8:	e00a      	b.n	80066c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80066aa:	2306      	movs	r3, #6
 80066ac:	617b      	str	r3, [r7, #20]
 80066ae:	e007      	b.n	80066c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80066b0:	79fb      	ldrb	r3, [r7, #7]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d102      	bne.n	80066bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80066b6:	2309      	movs	r3, #9
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	e001      	b.n	80066c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80066bc:	2309      	movs	r3, #9
 80066be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	029b      	lsls	r3, r3, #10
 80066d4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80066d8:	431a      	orrs	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	371c      	adds	r7, #28
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	00d8acbf 	.word	0x00d8acbf
 80066f0:	00e4e1c0 	.word	0x00e4e1c0
 80066f4:	00f42400 	.word	0x00f42400
 80066f8:	01067380 	.word	0x01067380
 80066fc:	011a499f 	.word	0x011a499f
 8006700:	01312cff 	.word	0x01312cff
 8006704:	014ca43f 	.word	0x014ca43f
 8006708:	016e3600 	.word	0x016e3600
 800670c:	01a6ab1f 	.word	0x01a6ab1f
 8006710:	01e84800 	.word	0x01e84800

08006714 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f043 0201 	orr.w	r2, r3, #1
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f023 0201 	bic.w	r2, r3, #1
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	460b      	mov	r3, r1
 8006762:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006764:	2300      	movs	r3, #0
 8006766:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006774:	78fb      	ldrb	r3, [r7, #3]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d115      	bne.n	80067a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006786:	2001      	movs	r0, #1
 8006788:	f7fb fbcc 	bl	8001f24 <HAL_Delay>
      ms++;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	3301      	adds	r3, #1
 8006790:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f001 fa45 	bl	8007c22 <USB_GetMode>
 8006798:	4603      	mov	r3, r0
 800679a:	2b01      	cmp	r3, #1
 800679c:	d01e      	beq.n	80067dc <USB_SetCurrentMode+0x84>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2b31      	cmp	r3, #49	; 0x31
 80067a2:	d9f0      	bls.n	8006786 <USB_SetCurrentMode+0x2e>
 80067a4:	e01a      	b.n	80067dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80067a6:	78fb      	ldrb	r3, [r7, #3]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d115      	bne.n	80067d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80067b8:	2001      	movs	r0, #1
 80067ba:	f7fb fbb3 	bl	8001f24 <HAL_Delay>
      ms++;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3301      	adds	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f001 fa2c 	bl	8007c22 <USB_GetMode>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d005      	beq.n	80067dc <USB_SetCurrentMode+0x84>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2b31      	cmp	r3, #49	; 0x31
 80067d4:	d9f0      	bls.n	80067b8 <USB_SetCurrentMode+0x60>
 80067d6:	e001      	b.n	80067dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e005      	b.n	80067e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2b32      	cmp	r3, #50	; 0x32
 80067e0:	d101      	bne.n	80067e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e000      	b.n	80067e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067f0:	b084      	sub	sp, #16
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b086      	sub	sp, #24
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80067fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800680a:	2300      	movs	r3, #0
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	e009      	b.n	8006824 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	3340      	adds	r3, #64	; 0x40
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	2200      	movs	r2, #0
 800681c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	3301      	adds	r3, #1
 8006822:	613b      	str	r3, [r7, #16]
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	2b0e      	cmp	r3, #14
 8006828:	d9f2      	bls.n	8006810 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800682a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800682c:	2b00      	cmp	r3, #0
 800682e:	d11c      	bne.n	800686a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800683e:	f043 0302 	orr.w	r3, r3, #2
 8006842:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006848:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006854:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006860:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	639a      	str	r2, [r3, #56]	; 0x38
 8006868:	e00b      	b.n	8006882 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006888:	461a      	mov	r2, r3
 800688a:	2300      	movs	r3, #0
 800688c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006894:	4619      	mov	r1, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800689c:	461a      	mov	r2, r3
 800689e:	680b      	ldr	r3, [r1, #0]
 80068a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d10c      	bne.n	80068c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80068a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d104      	bne.n	80068b8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80068ae:	2100      	movs	r1, #0
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f965 	bl	8006b80 <USB_SetDevSpeed>
 80068b6:	e008      	b.n	80068ca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80068b8:	2101      	movs	r1, #1
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f960 	bl	8006b80 <USB_SetDevSpeed>
 80068c0:	e003      	b.n	80068ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80068c2:	2103      	movs	r1, #3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f95b 	bl	8006b80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068ca:	2110      	movs	r1, #16
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f8f3 	bl	8006ab8 <USB_FlushTxFifo>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f91f 	bl	8006b20 <USB_FlushRxFifo>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f2:	461a      	mov	r2, r3
 80068f4:	2300      	movs	r3, #0
 80068f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068fe:	461a      	mov	r2, r3
 8006900:	2300      	movs	r3, #0
 8006902:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690a:	461a      	mov	r2, r3
 800690c:	2300      	movs	r3, #0
 800690e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006910:	2300      	movs	r3, #0
 8006912:	613b      	str	r3, [r7, #16]
 8006914:	e043      	b.n	800699e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800692c:	d118      	bne.n	8006960 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10a      	bne.n	800694a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4413      	add	r3, r2
 800693c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006940:	461a      	mov	r2, r3
 8006942:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006946:	6013      	str	r3, [r2, #0]
 8006948:	e013      	b.n	8006972 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4413      	add	r3, r2
 8006952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006956:	461a      	mov	r2, r3
 8006958:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800695c:	6013      	str	r3, [r2, #0]
 800695e:	e008      	b.n	8006972 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800696c:	461a      	mov	r2, r3
 800696e:	2300      	movs	r3, #0
 8006970:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	4413      	add	r3, r2
 800697a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697e:	461a      	mov	r2, r3
 8006980:	2300      	movs	r3, #0
 8006982:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006990:	461a      	mov	r2, r3
 8006992:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006996:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	3301      	adds	r3, #1
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d3b7      	bcc.n	8006916 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069a6:	2300      	movs	r3, #0
 80069a8:	613b      	str	r3, [r7, #16]
 80069aa:	e043      	b.n	8006a34 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069c2:	d118      	bne.n	80069f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10a      	bne.n	80069e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d6:	461a      	mov	r2, r3
 80069d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	e013      	b.n	8006a08 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ec:	461a      	mov	r2, r3
 80069ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	e008      	b.n	8006a08 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a02:	461a      	mov	r2, r3
 8006a04:	2300      	movs	r3, #0
 8006a06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a14:	461a      	mov	r2, r3
 8006a16:	2300      	movs	r3, #0
 8006a18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a26:	461a      	mov	r2, r3
 8006a28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	3301      	adds	r3, #1
 8006a32:	613b      	str	r3, [r7, #16]
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d3b7      	bcc.n	80069ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d105      	bne.n	8006a70 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	f043 0210 	orr.w	r2, r3, #16
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	699a      	ldr	r2, [r3, #24]
 8006a74:	4b0f      	ldr	r3, [pc, #60]	; (8006ab4 <USB_DevInit+0x2c4>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d005      	beq.n	8006a8e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	f043 0208 	orr.w	r2, r3, #8
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d107      	bne.n	8006aa4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a9c:	f043 0304 	orr.w	r3, r3, #4
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ab0:	b004      	add	sp, #16
 8006ab2:	4770      	bx	lr
 8006ab4:	803c3800 	.word	0x803c3800

08006ab8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4a13      	ldr	r2, [pc, #76]	; (8006b1c <USB_FlushTxFifo+0x64>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d901      	bls.n	8006ad8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e01b      	b.n	8006b10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	daf2      	bge.n	8006ac6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	019b      	lsls	r3, r3, #6
 8006ae8:	f043 0220 	orr.w	r2, r3, #32
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	3301      	adds	r3, #1
 8006af4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4a08      	ldr	r2, [pc, #32]	; (8006b1c <USB_FlushTxFifo+0x64>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d901      	bls.n	8006b02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e006      	b.n	8006b10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	f003 0320 	and.w	r3, r3, #32
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	d0f0      	beq.n	8006af0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	00030d40 	.word	0x00030d40

08006b20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4a11      	ldr	r2, [pc, #68]	; (8006b7c <USB_FlushRxFifo+0x5c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d901      	bls.n	8006b3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e018      	b.n	8006b70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	daf2      	bge.n	8006b2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2210      	movs	r2, #16
 8006b4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	3301      	adds	r3, #1
 8006b54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	4a08      	ldr	r2, [pc, #32]	; (8006b7c <USB_FlushRxFifo+0x5c>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d901      	bls.n	8006b62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e006      	b.n	8006b70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 0310 	and.w	r3, r3, #16
 8006b6a:	2b10      	cmp	r3, #16
 8006b6c:	d0f0      	beq.n	8006b50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	00030d40 	.word	0x00030d40

08006b80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	78fb      	ldrb	r3, [r7, #3]
 8006b9a:	68f9      	ldr	r1, [r7, #12]
 8006b9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3714      	adds	r7, #20
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b087      	sub	sp, #28
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f003 0306 	and.w	r3, r3, #6
 8006bca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d102      	bne.n	8006bd8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	75fb      	strb	r3, [r7, #23]
 8006bd6:	e00a      	b.n	8006bee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d002      	beq.n	8006be4 <USB_GetDevSpeed+0x32>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b06      	cmp	r3, #6
 8006be2:	d102      	bne.n	8006bea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006be4:	2302      	movs	r3, #2
 8006be6:	75fb      	strb	r3, [r7, #23]
 8006be8:	e001      	b.n	8006bee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006bea:	230f      	movs	r3, #15
 8006bec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	371c      	adds	r7, #28
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	785b      	ldrb	r3, [r3, #1]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d13a      	bne.n	8006c8e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c1e:	69da      	ldr	r2, [r3, #28]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	f003 030f 	and.w	r3, r3, #15
 8006c28:	2101      	movs	r1, #1
 8006c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	68f9      	ldr	r1, [r7, #12]
 8006c32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c36:	4313      	orrs	r3, r2
 8006c38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d155      	bne.n	8006cfc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	791b      	ldrb	r3, [r3, #4]
 8006c6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	059b      	lsls	r3, r3, #22
 8006c72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c74:	4313      	orrs	r3, r2
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	0151      	lsls	r1, r2, #5
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	440a      	add	r2, r1
 8006c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c8a:	6013      	str	r3, [r2, #0]
 8006c8c:	e036      	b.n	8006cfc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c94:	69da      	ldr	r2, [r3, #28]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca4:	041b      	lsls	r3, r3, #16
 8006ca6:	68f9      	ldr	r1, [r7, #12]
 8006ca8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cac:	4313      	orrs	r3, r2
 8006cae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d11a      	bne.n	8006cfc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	791b      	ldrb	r3, [r3, #4]
 8006ce0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006ce2:	430b      	orrs	r3, r1
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	0151      	lsls	r1, r2, #5
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	440a      	add	r2, r1
 8006cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cfa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
	...

08006d0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	785b      	ldrb	r3, [r3, #1]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d161      	bne.n	8006dec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d3e:	d11f      	bne.n	8006d80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	0151      	lsls	r1, r2, #5
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	440a      	add	r2, r1
 8006d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	0151      	lsls	r1, r2, #5
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	440a      	add	r2, r1
 8006d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	f003 030f 	and.w	r3, r3, #15
 8006d90:	2101      	movs	r1, #1
 8006d92:	fa01 f303 	lsl.w	r3, r1, r3
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	43db      	mvns	r3, r3
 8006d9a:	68f9      	ldr	r1, [r7, #12]
 8006d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006da0:	4013      	ands	r3, r2
 8006da2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006daa:	69da      	ldr	r2, [r3, #28]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	f003 030f 	and.w	r3, r3, #15
 8006db4:	2101      	movs	r1, #1
 8006db6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	43db      	mvns	r3, r3
 8006dbe:	68f9      	ldr	r1, [r7, #12]
 8006dc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	0159      	lsls	r1, r3, #5
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	440b      	add	r3, r1
 8006dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de2:	4619      	mov	r1, r3
 8006de4:	4b35      	ldr	r3, [pc, #212]	; (8006ebc <USB_DeactivateEndpoint+0x1b0>)
 8006de6:	4013      	ands	r3, r2
 8006de8:	600b      	str	r3, [r1, #0]
 8006dea:	e060      	b.n	8006eae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e02:	d11f      	bne.n	8006e44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	0151      	lsls	r1, r2, #5
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	440a      	add	r2, r1
 8006e1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	0151      	lsls	r1, r2, #5
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	440a      	add	r2, r1
 8006e3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	f003 030f 	and.w	r3, r3, #15
 8006e54:	2101      	movs	r1, #1
 8006e56:	fa01 f303 	lsl.w	r3, r1, r3
 8006e5a:	041b      	lsls	r3, r3, #16
 8006e5c:	43db      	mvns	r3, r3
 8006e5e:	68f9      	ldr	r1, [r7, #12]
 8006e60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e64:	4013      	ands	r3, r2
 8006e66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e6e:	69da      	ldr	r2, [r3, #28]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	f003 030f 	and.w	r3, r3, #15
 8006e78:	2101      	movs	r1, #1
 8006e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e7e:	041b      	lsls	r3, r3, #16
 8006e80:	43db      	mvns	r3, r3
 8006e82:	68f9      	ldr	r1, [r7, #12]
 8006e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e88:	4013      	ands	r3, r2
 8006e8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	0159      	lsls	r1, r3, #5
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	440b      	add	r3, r1
 8006ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <USB_DeactivateEndpoint+0x1b4>)
 8006eaa:	4013      	ands	r3, r2
 8006eac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3714      	adds	r7, #20
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	ec337800 	.word	0xec337800
 8006ec0:	eff37800 	.word	0xeff37800

08006ec4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08a      	sub	sp, #40	; 0x28
 8006ec8:	af02      	add	r7, sp, #8
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	785b      	ldrb	r3, [r3, #1]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	f040 815c 	bne.w	800719e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d132      	bne.n	8006f54 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	0151      	lsls	r1, r2, #5
 8006f00:	69fa      	ldr	r2, [r7, #28]
 8006f02:	440a      	add	r2, r1
 8006f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	0151      	lsls	r1, r2, #5
 8006f24:	69fa      	ldr	r2, [r7, #28]
 8006f26:	440a      	add	r2, r1
 8006f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	0151      	lsls	r1, r2, #5
 8006f44:	69fa      	ldr	r2, [r7, #28]
 8006f46:	440a      	add	r2, r1
 8006f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f4c:	0cdb      	lsrs	r3, r3, #19
 8006f4e:	04db      	lsls	r3, r3, #19
 8006f50:	6113      	str	r3, [r2, #16]
 8006f52:	e074      	b.n	800703e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	69ba      	ldr	r2, [r7, #24]
 8006f64:	0151      	lsls	r1, r2, #5
 8006f66:	69fa      	ldr	r2, [r7, #28]
 8006f68:	440a      	add	r2, r1
 8006f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f6e:	0cdb      	lsrs	r3, r3, #19
 8006f70:	04db      	lsls	r3, r3, #19
 8006f72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	0151      	lsls	r1, r2, #5
 8006f86:	69fa      	ldr	r2, [r7, #28]
 8006f88:	440a      	add	r2, r1
 8006f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	015a      	lsls	r2, r3, #5
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	6999      	ldr	r1, [r3, #24]
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	440b      	add	r3, r1
 8006fb0:	1e59      	subs	r1, r3, #1
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006fbc:	4b9d      	ldr	r3, [pc, #628]	; (8007234 <USB_EPStartXfer+0x370>)
 8006fbe:	400b      	ands	r3, r1
 8006fc0:	69b9      	ldr	r1, [r7, #24]
 8006fc2:	0148      	lsls	r0, r1, #5
 8006fc4:	69f9      	ldr	r1, [r7, #28]
 8006fc6:	4401      	add	r1, r0
 8006fc8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fdc:	691a      	ldr	r2, [r3, #16]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fe6:	69b9      	ldr	r1, [r7, #24]
 8006fe8:	0148      	lsls	r0, r1, #5
 8006fea:	69f9      	ldr	r1, [r7, #28]
 8006fec:	4401      	add	r1, r0
 8006fee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	791b      	ldrb	r3, [r3, #4]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d11f      	bne.n	800703e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	4413      	add	r3, r2
 8007006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	0151      	lsls	r1, r2, #5
 8007010:	69fa      	ldr	r2, [r7, #28]
 8007012:	440a      	add	r2, r1
 8007014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007018:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800701c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	4413      	add	r3, r2
 8007026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	0151      	lsls	r1, r2, #5
 8007030:	69fa      	ldr	r2, [r7, #28]
 8007032:	440a      	add	r2, r1
 8007034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007038:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800703c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800703e:	79fb      	ldrb	r3, [r7, #7]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d14b      	bne.n	80070dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d009      	beq.n	8007060 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007058:	461a      	mov	r2, r3
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	791b      	ldrb	r3, [r3, #4]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d128      	bne.n	80070ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007074:	2b00      	cmp	r3, #0
 8007076:	d110      	bne.n	800709a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	69ba      	ldr	r2, [r7, #24]
 8007088:	0151      	lsls	r1, r2, #5
 800708a:	69fa      	ldr	r2, [r7, #28]
 800708c:	440a      	add	r2, r1
 800708e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007092:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007096:	6013      	str	r3, [r2, #0]
 8007098:	e00f      	b.n	80070ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	0151      	lsls	r1, r2, #5
 80070ac:	69fa      	ldr	r2, [r7, #28]
 80070ae:	440a      	add	r2, r1
 80070b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	0151      	lsls	r1, r2, #5
 80070cc:	69fa      	ldr	r2, [r7, #28]
 80070ce:	440a      	add	r2, r1
 80070d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	e133      	b.n	8007344 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	0151      	lsls	r1, r2, #5
 80070ee:	69fa      	ldr	r2, [r7, #28]
 80070f0:	440a      	add	r2, r1
 80070f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	791b      	ldrb	r3, [r3, #4]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d015      	beq.n	8007130 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 811b 	beq.w	8007344 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	f003 030f 	and.w	r3, r3, #15
 800711e:	2101      	movs	r1, #1
 8007120:	fa01 f303 	lsl.w	r3, r1, r3
 8007124:	69f9      	ldr	r1, [r7, #28]
 8007126:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800712a:	4313      	orrs	r3, r2
 800712c:	634b      	str	r3, [r1, #52]	; 0x34
 800712e:	e109      	b.n	8007344 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713c:	2b00      	cmp	r3, #0
 800713e:	d110      	bne.n	8007162 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	4413      	add	r3, r2
 8007148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	0151      	lsls	r1, r2, #5
 8007152:	69fa      	ldr	r2, [r7, #28]
 8007154:	440a      	add	r2, r1
 8007156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800715a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	e00f      	b.n	8007182 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	69ba      	ldr	r2, [r7, #24]
 8007172:	0151      	lsls	r1, r2, #5
 8007174:	69fa      	ldr	r2, [r7, #28]
 8007176:	440a      	add	r2, r1
 8007178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800717c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007180:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	6919      	ldr	r1, [r3, #16]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	781a      	ldrb	r2, [r3, #0]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	b298      	uxth	r0, r3
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	9300      	str	r3, [sp, #0]
 8007194:	4603      	mov	r3, r0
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 fade 	bl	8007758 <USB_WritePacket>
 800719c:	e0d2      	b.n	8007344 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	69ba      	ldr	r2, [r7, #24]
 80071ae:	0151      	lsls	r1, r2, #5
 80071b0:	69fa      	ldr	r2, [r7, #28]
 80071b2:	440a      	add	r2, r1
 80071b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071b8:	0cdb      	lsrs	r3, r3, #19
 80071ba:	04db      	lsls	r3, r3, #19
 80071bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	0151      	lsls	r1, r2, #5
 80071d0:	69fa      	ldr	r2, [r7, #28]
 80071d2:	440a      	add	r2, r1
 80071d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d126      	bne.n	8007238 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f6:	691a      	ldr	r2, [r3, #16]
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007200:	69b9      	ldr	r1, [r7, #24]
 8007202:	0148      	lsls	r0, r1, #5
 8007204:	69f9      	ldr	r1, [r7, #28]
 8007206:	4401      	add	r1, r0
 8007208:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800720c:	4313      	orrs	r3, r2
 800720e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	4413      	add	r3, r2
 8007218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	69ba      	ldr	r2, [r7, #24]
 8007220:	0151      	lsls	r1, r2, #5
 8007222:	69fa      	ldr	r2, [r7, #28]
 8007224:	440a      	add	r2, r1
 8007226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800722a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800722e:	6113      	str	r3, [r2, #16]
 8007230:	e03a      	b.n	80072a8 <USB_EPStartXfer+0x3e4>
 8007232:	bf00      	nop
 8007234:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	699a      	ldr	r2, [r3, #24]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	4413      	add	r3, r2
 8007242:	1e5a      	subs	r2, r3, #1
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	fbb2 f3f3 	udiv	r3, r2, r3
 800724c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	8afa      	ldrh	r2, [r7, #22]
 8007254:	fb03 f202 	mul.w	r2, r3, r2
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007268:	691a      	ldr	r2, [r3, #16]
 800726a:	8afb      	ldrh	r3, [r7, #22]
 800726c:	04d9      	lsls	r1, r3, #19
 800726e:	4b38      	ldr	r3, [pc, #224]	; (8007350 <USB_EPStartXfer+0x48c>)
 8007270:	400b      	ands	r3, r1
 8007272:	69b9      	ldr	r1, [r7, #24]
 8007274:	0148      	lsls	r0, r1, #5
 8007276:	69f9      	ldr	r1, [r7, #28]
 8007278:	4401      	add	r1, r0
 800727a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800727e:	4313      	orrs	r3, r2
 8007280:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	4413      	add	r3, r2
 800728a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728e:	691a      	ldr	r2, [r3, #16]
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	69db      	ldr	r3, [r3, #28]
 8007294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007298:	69b9      	ldr	r1, [r7, #24]
 800729a:	0148      	lsls	r0, r1, #5
 800729c:	69f9      	ldr	r1, [r7, #28]
 800729e:	4401      	add	r1, r0
 80072a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072a4:	4313      	orrs	r3, r2
 80072a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80072a8:	79fb      	ldrb	r3, [r7, #7]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d10d      	bne.n	80072ca <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d009      	beq.n	80072ca <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	6919      	ldr	r1, [r3, #16]
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c6:	460a      	mov	r2, r1
 80072c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	791b      	ldrb	r3, [r3, #4]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d128      	bne.n	8007324 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d110      	bne.n	8007304 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	69ba      	ldr	r2, [r7, #24]
 80072f2:	0151      	lsls	r1, r2, #5
 80072f4:	69fa      	ldr	r2, [r7, #28]
 80072f6:	440a      	add	r2, r1
 80072f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007300:	6013      	str	r3, [r2, #0]
 8007302:	e00f      	b.n	8007324 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	69ba      	ldr	r2, [r7, #24]
 8007314:	0151      	lsls	r1, r2, #5
 8007316:	69fa      	ldr	r2, [r7, #28]
 8007318:	440a      	add	r2, r1
 800731a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800731e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007322:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	69ba      	ldr	r2, [r7, #24]
 8007334:	0151      	lsls	r1, r2, #5
 8007336:	69fa      	ldr	r2, [r7, #28]
 8007338:	440a      	add	r2, r1
 800733a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800733e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007342:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3720      	adds	r7, #32
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	1ff80000 	.word	0x1ff80000

08007354 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007354:	b480      	push	{r7}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	4613      	mov	r3, r2
 8007360:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	785b      	ldrb	r3, [r3, #1]
 8007370:	2b01      	cmp	r3, #1
 8007372:	f040 80ce 	bne.w	8007512 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d132      	bne.n	80073e4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	0151      	lsls	r1, r2, #5
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	440a      	add	r2, r1
 8007394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007398:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800739c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	0151      	lsls	r1, r2, #5
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	440a      	add	r2, r1
 80073b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	015a      	lsls	r2, r3, #5
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	4413      	add	r3, r2
 80073ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	0151      	lsls	r1, r2, #5
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	440a      	add	r2, r1
 80073d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073dc:	0cdb      	lsrs	r3, r3, #19
 80073de:	04db      	lsls	r3, r3, #19
 80073e0:	6113      	str	r3, [r2, #16]
 80073e2:	e04e      	b.n	8007482 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	015a      	lsls	r2, r3, #5
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	0151      	lsls	r1, r2, #5
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	440a      	add	r2, r1
 80073fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073fe:	0cdb      	lsrs	r3, r3, #19
 8007400:	04db      	lsls	r3, r3, #19
 8007402:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	4413      	add	r3, r2
 800740c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	0151      	lsls	r1, r2, #5
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	440a      	add	r2, r1
 800741a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800741e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007422:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007426:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	699a      	ldr	r2, [r3, #24]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	429a      	cmp	r2, r3
 8007432:	d903      	bls.n	800743c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	68da      	ldr	r2, [r3, #12]
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	4413      	add	r3, r2
 8007444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	0151      	lsls	r1, r2, #5
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	440a      	add	r2, r1
 8007452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007456:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800745a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	015a      	lsls	r2, r3, #5
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	4413      	add	r3, r2
 8007464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007468:	691a      	ldr	r2, [r3, #16]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007472:	6939      	ldr	r1, [r7, #16]
 8007474:	0148      	lsls	r0, r1, #5
 8007476:	6979      	ldr	r1, [r7, #20]
 8007478:	4401      	add	r1, r0
 800747a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800747e:	4313      	orrs	r3, r2
 8007480:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007482:	79fb      	ldrb	r3, [r7, #7]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d11e      	bne.n	80074c6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	695b      	ldr	r3, [r3, #20]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d009      	beq.n	80074a4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	4413      	add	r3, r2
 8007498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749c:	461a      	mov	r2, r3
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	0151      	lsls	r1, r2, #5
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	440a      	add	r2, r1
 80074ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074c2:	6013      	str	r3, [r2, #0]
 80074c4:	e097      	b.n	80075f6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	0151      	lsls	r1, r2, #5
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	440a      	add	r2, r1
 80074dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074e4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 8083 	beq.w	80075f6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	f003 030f 	and.w	r3, r3, #15
 8007500:	2101      	movs	r1, #1
 8007502:	fa01 f303 	lsl.w	r3, r1, r3
 8007506:	6979      	ldr	r1, [r7, #20]
 8007508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800750c:	4313      	orrs	r3, r2
 800750e:	634b      	str	r3, [r1, #52]	; 0x34
 8007510:	e071      	b.n	80075f6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	015a      	lsls	r2, r3, #5
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	4413      	add	r3, r2
 800751a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	0151      	lsls	r1, r2, #5
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	440a      	add	r2, r1
 8007528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800752c:	0cdb      	lsrs	r3, r3, #19
 800752e:	04db      	lsls	r3, r3, #19
 8007530:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	015a      	lsls	r2, r3, #5
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	4413      	add	r3, r2
 800753a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	0151      	lsls	r1, r2, #5
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	440a      	add	r2, r1
 8007548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800754c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007550:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007554:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	68da      	ldr	r2, [r3, #12]
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	68da      	ldr	r2, [r3, #12]
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	4413      	add	r3, r2
 8007576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	0151      	lsls	r1, r2, #5
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	440a      	add	r2, r1
 8007584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007588:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800758c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759a:	691a      	ldr	r2, [r3, #16]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075a4:	6939      	ldr	r1, [r7, #16]
 80075a6:	0148      	lsls	r0, r1, #5
 80075a8:	6979      	ldr	r1, [r7, #20]
 80075aa:	4401      	add	r1, r0
 80075ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075b0:	4313      	orrs	r3, r2
 80075b2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d10d      	bne.n	80075d6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d009      	beq.n	80075d6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	6919      	ldr	r1, [r3, #16]
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	015a      	lsls	r2, r3, #5
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	4413      	add	r3, r2
 80075ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d2:	460a      	mov	r2, r1
 80075d4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	015a      	lsls	r2, r3, #5
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	4413      	add	r3, r2
 80075de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	0151      	lsls	r1, r2, #5
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	440a      	add	r2, r1
 80075ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	371c      	adds	r7, #28
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007604:	b480      	push	{r7}
 8007606:	b087      	sub	sp, #28
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800760e:	2300      	movs	r3, #0
 8007610:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	785b      	ldrb	r3, [r3, #1]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d14a      	bne.n	80076b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	015a      	lsls	r2, r3, #5
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	4413      	add	r3, r2
 800762c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007636:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800763a:	f040 8086 	bne.w	800774a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	4413      	add	r3, r2
 8007648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	7812      	ldrb	r2, [r2, #0]
 8007652:	0151      	lsls	r1, r2, #5
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	440a      	add	r2, r1
 8007658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800765c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007660:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	7812      	ldrb	r2, [r2, #0]
 8007676:	0151      	lsls	r1, r2, #5
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	440a      	add	r2, r1
 800767c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007680:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007684:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	3301      	adds	r3, #1
 800768a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007692:	4293      	cmp	r3, r2
 8007694:	d902      	bls.n	800769c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	75fb      	strb	r3, [r7, #23]
          break;
 800769a:	e056      	b.n	800774a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076b4:	d0e7      	beq.n	8007686 <USB_EPStopXfer+0x82>
 80076b6:	e048      	b.n	800774a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	015a      	lsls	r2, r3, #5
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	4413      	add	r3, r2
 80076c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076d0:	d13b      	bne.n	800774a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	015a      	lsls	r2, r3, #5
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	4413      	add	r3, r2
 80076dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	7812      	ldrb	r2, [r2, #0]
 80076e6:	0151      	lsls	r1, r2, #5
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	440a      	add	r2, r1
 80076ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	7812      	ldrb	r2, [r2, #0]
 800770a:	0151      	lsls	r1, r2, #5
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	440a      	add	r2, r1
 8007710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007714:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007718:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3301      	adds	r3, #1
 800771e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f242 7210 	movw	r2, #10000	; 0x2710
 8007726:	4293      	cmp	r3, r2
 8007728:	d902      	bls.n	8007730 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	75fb      	strb	r3, [r7, #23]
          break;
 800772e:	e00c      	b.n	800774a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	4413      	add	r3, r2
 800773a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007748:	d0e7      	beq.n	800771a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800774a:	7dfb      	ldrb	r3, [r7, #23]
}
 800774c:	4618      	mov	r0, r3
 800774e:	371c      	adds	r7, #28
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007758:	b480      	push	{r7}
 800775a:	b089      	sub	sp, #36	; 0x24
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	4611      	mov	r1, r2
 8007764:	461a      	mov	r2, r3
 8007766:	460b      	mov	r3, r1
 8007768:	71fb      	strb	r3, [r7, #7]
 800776a:	4613      	mov	r3, r2
 800776c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007776:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800777a:	2b00      	cmp	r3, #0
 800777c:	d123      	bne.n	80077c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800777e:	88bb      	ldrh	r3, [r7, #4]
 8007780:	3303      	adds	r3, #3
 8007782:	089b      	lsrs	r3, r3, #2
 8007784:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007786:	2300      	movs	r3, #0
 8007788:	61bb      	str	r3, [r7, #24]
 800778a:	e018      	b.n	80077be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800778c:	79fb      	ldrb	r3, [r7, #7]
 800778e:	031a      	lsls	r2, r3, #12
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	4413      	add	r3, r2
 8007794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007798:	461a      	mov	r2, r3
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	3301      	adds	r3, #1
 80077a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	3301      	adds	r3, #1
 80077aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	3301      	adds	r3, #1
 80077b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	3301      	adds	r3, #1
 80077b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	3301      	adds	r3, #1
 80077bc:	61bb      	str	r3, [r7, #24]
 80077be:	69ba      	ldr	r2, [r7, #24]
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d3e2      	bcc.n	800778c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3724      	adds	r7, #36	; 0x24
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b08b      	sub	sp, #44	; 0x2c
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	4613      	mov	r3, r2
 80077e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80077ea:	88fb      	ldrh	r3, [r7, #6]
 80077ec:	089b      	lsrs	r3, r3, #2
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80077f2:	88fb      	ldrh	r3, [r7, #6]
 80077f4:	f003 0303 	and.w	r3, r3, #3
 80077f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80077fa:	2300      	movs	r3, #0
 80077fc:	623b      	str	r3, [r7, #32]
 80077fe:	e014      	b.n	800782a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	601a      	str	r2, [r3, #0]
    pDest++;
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	3301      	adds	r3, #1
 8007810:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	3301      	adds	r3, #1
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	3301      	adds	r3, #1
 800781c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	3301      	adds	r3, #1
 8007822:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007824:	6a3b      	ldr	r3, [r7, #32]
 8007826:	3301      	adds	r3, #1
 8007828:	623b      	str	r3, [r7, #32]
 800782a:	6a3a      	ldr	r2, [r7, #32]
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	429a      	cmp	r2, r3
 8007830:	d3e6      	bcc.n	8007800 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007832:	8bfb      	ldrh	r3, [r7, #30]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d01e      	beq.n	8007876 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007842:	461a      	mov	r2, r3
 8007844:	f107 0310 	add.w	r3, r7, #16
 8007848:	6812      	ldr	r2, [r2, #0]
 800784a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	b2db      	uxtb	r3, r3
 8007852:	00db      	lsls	r3, r3, #3
 8007854:	fa22 f303 	lsr.w	r3, r2, r3
 8007858:	b2da      	uxtb	r2, r3
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	701a      	strb	r2, [r3, #0]
      i++;
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	3301      	adds	r3, #1
 8007862:	623b      	str	r3, [r7, #32]
      pDest++;
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	3301      	adds	r3, #1
 8007868:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800786a:	8bfb      	ldrh	r3, [r7, #30]
 800786c:	3b01      	subs	r3, #1
 800786e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007870:	8bfb      	ldrh	r3, [r7, #30]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1ea      	bne.n	800784c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007878:	4618      	mov	r0, r3
 800787a:	372c      	adds	r7, #44	; 0x2c
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	785b      	ldrb	r3, [r3, #1]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d12c      	bne.n	80078fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	db12      	blt.n	80078d8 <USB_EPSetStall+0x54>
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00f      	beq.n	80078d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	0151      	lsls	r1, r2, #5
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	440a      	add	r2, r1
 80078ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	0151      	lsls	r1, r2, #5
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	440a      	add	r2, r1
 80078ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	e02b      	b.n	8007952 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4413      	add	r3, r2
 8007902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	db12      	blt.n	8007932 <USB_EPSetStall+0xae>
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00f      	beq.n	8007932 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	015a      	lsls	r2, r3, #5
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	4413      	add	r3, r2
 800791a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	0151      	lsls	r1, r2, #5
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	440a      	add	r2, r1
 8007928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800792c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007930:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	015a      	lsls	r2, r3, #5
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	4413      	add	r3, r2
 800793a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	0151      	lsls	r1, r2, #5
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	440a      	add	r2, r1
 8007948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800794c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007950:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	785b      	ldrb	r3, [r3, #1]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d128      	bne.n	80079ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	4413      	add	r3, r2
 8007984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	0151      	lsls	r1, r2, #5
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	440a      	add	r2, r1
 8007992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007996:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800799a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	791b      	ldrb	r3, [r3, #4]
 80079a0:	2b03      	cmp	r3, #3
 80079a2:	d003      	beq.n	80079ac <USB_EPClearStall+0x4c>
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	791b      	ldrb	r3, [r3, #4]
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d138      	bne.n	8007a1e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	0151      	lsls	r1, r2, #5
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	440a      	add	r2, r1
 80079c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079ca:	6013      	str	r3, [r2, #0]
 80079cc:	e027      	b.n	8007a1e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	015a      	lsls	r2, r3, #5
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	0151      	lsls	r1, r2, #5
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	440a      	add	r2, r1
 80079e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	791b      	ldrb	r3, [r3, #4]
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d003      	beq.n	80079fe <USB_EPClearStall+0x9e>
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	791b      	ldrb	r3, [r3, #4]
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d10f      	bne.n	8007a1e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	0151      	lsls	r1, r2, #5
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	440a      	add	r2, r1
 8007a14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a1c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	460b      	mov	r3, r1
 8007a36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a4a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007a4e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	78fb      	ldrb	r3, [r7, #3]
 8007a5a:	011b      	lsls	r3, r3, #4
 8007a5c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007a60:	68f9      	ldr	r1, [r7, #12]
 8007a62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a66:	4313      	orrs	r3, r2
 8007a68:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a92:	f023 0303 	bic.w	r3, r3, #3
 8007a96:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007aa6:	f023 0302 	bic.w	r3, r3, #2
 8007aaa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b085      	sub	sp, #20
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ad4:	f023 0303 	bic.w	r3, r3, #3
 8007ad8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ae8:	f043 0302 	orr.w	r3, r3, #2
 8007aec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	4013      	ands	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b14:	68fb      	ldr	r3, [r7, #12]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b085      	sub	sp, #20
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b3e:	69db      	ldr	r3, [r3, #28]
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	4013      	ands	r3, r2
 8007b44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	0c1b      	lsrs	r3, r3, #16
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b085      	sub	sp, #20
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b72:	69db      	ldr	r3, [r3, #28]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	4013      	ands	r3, r2
 8007b78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	b29b      	uxth	r3, r3
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr

08007b8a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b085      	sub	sp, #20
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	460b      	mov	r3, r1
 8007b94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007b9a:	78fb      	ldrb	r3, [r7, #3]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b087      	sub	sp, #28
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	460b      	mov	r3, r1
 8007bd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007bea:	78fb      	ldrb	r3, [r7, #3]
 8007bec:	f003 030f 	and.w	r3, r3, #15
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf6:	01db      	lsls	r3, r3, #7
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007c00:	78fb      	ldrb	r3, [r7, #3]
 8007c02:	015a      	lsls	r2, r3, #5
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	4413      	add	r3, r2
 8007c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	4013      	ands	r3, r2
 8007c12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c14:	68bb      	ldr	r3, [r7, #8]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b083      	sub	sp, #12
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	f003 0301 	and.w	r3, r3, #1
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b085      	sub	sp, #20
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c58:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007c5c:	f023 0307 	bic.w	r3, r3, #7
 8007c60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	607a      	str	r2, [r7, #4]
 8007c90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	333c      	adds	r3, #60	; 0x3c
 8007c9a:	3304      	adds	r3, #4
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	4a26      	ldr	r2, [pc, #152]	; (8007d3c <USB_EP0_OutStart+0xb8>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d90a      	bls.n	8007cbe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cb8:	d101      	bne.n	8007cbe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	e037      	b.n	8007d2e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cec:	f043 0318 	orr.w	r3, r3, #24
 8007cf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d00:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007d04:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007d06:	7afb      	ldrb	r3, [r7, #11]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d10f      	bne.n	8007d2c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d12:	461a      	mov	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d26:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007d2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	371c      	adds	r7, #28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	4f54300a 	.word	0x4f54300a

08007d40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	4a13      	ldr	r2, [pc, #76]	; (8007da4 <USB_CoreReset+0x64>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d901      	bls.n	8007d5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e01b      	b.n	8007d96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	daf2      	bge.n	8007d4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d66:	2300      	movs	r3, #0
 8007d68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	f043 0201 	orr.w	r2, r3, #1
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4a09      	ldr	r2, [pc, #36]	; (8007da4 <USB_CoreReset+0x64>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d901      	bls.n	8007d88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e006      	b.n	8007d96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d0f0      	beq.n	8007d76 <USB_CoreReset+0x36>

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	00030d40 	.word	0x00030d40

08007da8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	460b      	mov	r3, r1
 8007db2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007db4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007db8:	f002 fca8 	bl	800a70c <USBD_static_malloc>
 8007dbc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d109      	bne.n	8007dd8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	32b0      	adds	r2, #176	; 0xb0
 8007dce:	2100      	movs	r1, #0
 8007dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	e0d4      	b.n	8007f82 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007dd8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007ddc:	2100      	movs	r1, #0
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f002 fd02 	bl	800a7e8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	32b0      	adds	r2, #176	; 0xb0
 8007dee:	68f9      	ldr	r1, [r7, #12]
 8007df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	32b0      	adds	r2, #176	; 0xb0
 8007dfe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	7c1b      	ldrb	r3, [r3, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d138      	bne.n	8007e82 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007e10:	4b5e      	ldr	r3, [pc, #376]	; (8007f8c <USBD_CDC_Init+0x1e4>)
 8007e12:	7819      	ldrb	r1, [r3, #0]
 8007e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e18:	2202      	movs	r2, #2
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f002 fb53 	bl	800a4c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007e20:	4b5a      	ldr	r3, [pc, #360]	; (8007f8c <USBD_CDC_Init+0x1e4>)
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	f003 020f 	and.w	r2, r3, #15
 8007e28:	6879      	ldr	r1, [r7, #4]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	4413      	add	r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	440b      	add	r3, r1
 8007e34:	3324      	adds	r3, #36	; 0x24
 8007e36:	2201      	movs	r2, #1
 8007e38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007e3a:	4b55      	ldr	r3, [pc, #340]	; (8007f90 <USBD_CDC_Init+0x1e8>)
 8007e3c:	7819      	ldrb	r1, [r3, #0]
 8007e3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e42:	2202      	movs	r2, #2
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f002 fb3e 	bl	800a4c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007e4a:	4b51      	ldr	r3, [pc, #324]	; (8007f90 <USBD_CDC_Init+0x1e8>)
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	f003 020f 	and.w	r2, r3, #15
 8007e52:	6879      	ldr	r1, [r7, #4]
 8007e54:	4613      	mov	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	440b      	add	r3, r1
 8007e5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e62:	2201      	movs	r2, #1
 8007e64:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007e66:	4b4b      	ldr	r3, [pc, #300]	; (8007f94 <USBD_CDC_Init+0x1ec>)
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	f003 020f 	and.w	r2, r3, #15
 8007e6e:	6879      	ldr	r1, [r7, #4]
 8007e70:	4613      	mov	r3, r2
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	440b      	add	r3, r1
 8007e7a:	3326      	adds	r3, #38	; 0x26
 8007e7c:	2210      	movs	r2, #16
 8007e7e:	801a      	strh	r2, [r3, #0]
 8007e80:	e035      	b.n	8007eee <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007e82:	4b42      	ldr	r3, [pc, #264]	; (8007f8c <USBD_CDC_Init+0x1e4>)
 8007e84:	7819      	ldrb	r1, [r3, #0]
 8007e86:	2340      	movs	r3, #64	; 0x40
 8007e88:	2202      	movs	r2, #2
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f002 fb1b 	bl	800a4c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007e90:	4b3e      	ldr	r3, [pc, #248]	; (8007f8c <USBD_CDC_Init+0x1e4>)
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	f003 020f 	and.w	r2, r3, #15
 8007e98:	6879      	ldr	r1, [r7, #4]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4413      	add	r3, r2
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	440b      	add	r3, r1
 8007ea4:	3324      	adds	r3, #36	; 0x24
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007eaa:	4b39      	ldr	r3, [pc, #228]	; (8007f90 <USBD_CDC_Init+0x1e8>)
 8007eac:	7819      	ldrb	r1, [r3, #0]
 8007eae:	2340      	movs	r3, #64	; 0x40
 8007eb0:	2202      	movs	r2, #2
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f002 fb07 	bl	800a4c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007eb8:	4b35      	ldr	r3, [pc, #212]	; (8007f90 <USBD_CDC_Init+0x1e8>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	f003 020f 	and.w	r2, r3, #15
 8007ec0:	6879      	ldr	r1, [r7, #4]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4413      	add	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	440b      	add	r3, r1
 8007ecc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007ed4:	4b2f      	ldr	r3, [pc, #188]	; (8007f94 <USBD_CDC_Init+0x1ec>)
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	f003 020f 	and.w	r2, r3, #15
 8007edc:	6879      	ldr	r1, [r7, #4]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	440b      	add	r3, r1
 8007ee8:	3326      	adds	r3, #38	; 0x26
 8007eea:	2210      	movs	r2, #16
 8007eec:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007eee:	4b29      	ldr	r3, [pc, #164]	; (8007f94 <USBD_CDC_Init+0x1ec>)
 8007ef0:	7819      	ldrb	r1, [r3, #0]
 8007ef2:	2308      	movs	r3, #8
 8007ef4:	2203      	movs	r2, #3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f002 fae5 	bl	800a4c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007efc:	4b25      	ldr	r3, [pc, #148]	; (8007f94 <USBD_CDC_Init+0x1ec>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	f003 020f 	and.w	r2, r3, #15
 8007f04:	6879      	ldr	r1, [r7, #4]
 8007f06:	4613      	mov	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	4413      	add	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	440b      	add	r3, r1
 8007f10:	3324      	adds	r3, #36	; 0x24
 8007f12:	2201      	movs	r2, #1
 8007f14:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	33b0      	adds	r3, #176	; 0xb0
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4413      	add	r3, r2
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	e018      	b.n	8007f82 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	7c1b      	ldrb	r3, [r3, #16]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10a      	bne.n	8007f6e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f58:	4b0d      	ldr	r3, [pc, #52]	; (8007f90 <USBD_CDC_Init+0x1e8>)
 8007f5a:	7819      	ldrb	r1, [r3, #0]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f002 fb9c 	bl	800a6a4 <USBD_LL_PrepareReceive>
 8007f6c:	e008      	b.n	8007f80 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f6e:	4b08      	ldr	r3, [pc, #32]	; (8007f90 <USBD_CDC_Init+0x1e8>)
 8007f70:	7819      	ldrb	r1, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f78:	2340      	movs	r3, #64	; 0x40
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f002 fb92 	bl	800a6a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20000093 	.word	0x20000093
 8007f90:	20000094 	.word	0x20000094
 8007f94:	20000095 	.word	0x20000095

08007f98 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007fa4:	4b3a      	ldr	r3, [pc, #232]	; (8008090 <USBD_CDC_DeInit+0xf8>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f002 fab1 	bl	800a512 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007fb0:	4b37      	ldr	r3, [pc, #220]	; (8008090 <USBD_CDC_DeInit+0xf8>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	f003 020f 	and.w	r2, r3, #15
 8007fb8:	6879      	ldr	r1, [r7, #4]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	440b      	add	r3, r1
 8007fc4:	3324      	adds	r3, #36	; 0x24
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007fca:	4b32      	ldr	r3, [pc, #200]	; (8008094 <USBD_CDC_DeInit+0xfc>)
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f002 fa9e 	bl	800a512 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007fd6:	4b2f      	ldr	r3, [pc, #188]	; (8008094 <USBD_CDC_DeInit+0xfc>)
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	f003 020f 	and.w	r2, r3, #15
 8007fde:	6879      	ldr	r1, [r7, #4]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4413      	add	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	440b      	add	r3, r1
 8007fea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007fee:	2200      	movs	r2, #0
 8007ff0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007ff2:	4b29      	ldr	r3, [pc, #164]	; (8008098 <USBD_CDC_DeInit+0x100>)
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f002 fa8a 	bl	800a512 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007ffe:	4b26      	ldr	r3, [pc, #152]	; (8008098 <USBD_CDC_DeInit+0x100>)
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	f003 020f 	and.w	r2, r3, #15
 8008006:	6879      	ldr	r1, [r7, #4]
 8008008:	4613      	mov	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4413      	add	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	440b      	add	r3, r1
 8008012:	3324      	adds	r3, #36	; 0x24
 8008014:	2200      	movs	r2, #0
 8008016:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008018:	4b1f      	ldr	r3, [pc, #124]	; (8008098 <USBD_CDC_DeInit+0x100>)
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	f003 020f 	and.w	r2, r3, #15
 8008020:	6879      	ldr	r1, [r7, #4]
 8008022:	4613      	mov	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	440b      	add	r3, r1
 800802c:	3326      	adds	r3, #38	; 0x26
 800802e:	2200      	movs	r2, #0
 8008030:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	32b0      	adds	r2, #176	; 0xb0
 800803c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d01f      	beq.n	8008084 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	33b0      	adds	r3, #176	; 0xb0
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4413      	add	r3, r2
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	32b0      	adds	r2, #176	; 0xb0
 8008062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008066:	4618      	mov	r0, r3
 8008068:	f002 fb5e 	bl	800a728 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	32b0      	adds	r2, #176	; 0xb0
 8008076:	2100      	movs	r1, #0
 8008078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	20000093 	.word	0x20000093
 8008094:	20000094 	.word	0x20000094
 8008098:	20000095 	.word	0x20000095

0800809c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	32b0      	adds	r2, #176	; 0xb0
 80080b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80080b6:	2300      	movs	r3, #0
 80080b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80080ba:	2300      	movs	r3, #0
 80080bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d101      	bne.n	80080cc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e0bf      	b.n	800824c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d050      	beq.n	800817a <USBD_CDC_Setup+0xde>
 80080d8:	2b20      	cmp	r3, #32
 80080da:	f040 80af 	bne.w	800823c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	88db      	ldrh	r3, [r3, #6]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d03a      	beq.n	800815c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	b25b      	sxtb	r3, r3
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	da1b      	bge.n	8008128 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	33b0      	adds	r3, #176	; 0xb0
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4413      	add	r3, r2
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008106:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008108:	683a      	ldr	r2, [r7, #0]
 800810a:	88d2      	ldrh	r2, [r2, #6]
 800810c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	88db      	ldrh	r3, [r3, #6]
 8008112:	2b07      	cmp	r3, #7
 8008114:	bf28      	it	cs
 8008116:	2307      	movcs	r3, #7
 8008118:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	89fa      	ldrh	r2, [r7, #14]
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f001 fd89 	bl	8009c38 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008126:	e090      	b.n	800824a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	785a      	ldrb	r2, [r3, #1]
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	88db      	ldrh	r3, [r3, #6]
 8008136:	2b3f      	cmp	r3, #63	; 0x3f
 8008138:	d803      	bhi.n	8008142 <USBD_CDC_Setup+0xa6>
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	88db      	ldrh	r3, [r3, #6]
 800813e:	b2da      	uxtb	r2, r3
 8008140:	e000      	b.n	8008144 <USBD_CDC_Setup+0xa8>
 8008142:	2240      	movs	r2, #64	; 0x40
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800814a:	6939      	ldr	r1, [r7, #16]
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008152:	461a      	mov	r2, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f001 fd9b 	bl	8009c90 <USBD_CtlPrepareRx>
      break;
 800815a:	e076      	b.n	800824a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	33b0      	adds	r3, #176	; 0xb0
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	7850      	ldrb	r0, [r2, #1]
 8008172:	2200      	movs	r2, #0
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	4798      	blx	r3
      break;
 8008178:	e067      	b.n	800824a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	785b      	ldrb	r3, [r3, #1]
 800817e:	2b0b      	cmp	r3, #11
 8008180:	d851      	bhi.n	8008226 <USBD_CDC_Setup+0x18a>
 8008182:	a201      	add	r2, pc, #4	; (adr r2, 8008188 <USBD_CDC_Setup+0xec>)
 8008184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008188:	080081b9 	.word	0x080081b9
 800818c:	08008235 	.word	0x08008235
 8008190:	08008227 	.word	0x08008227
 8008194:	08008227 	.word	0x08008227
 8008198:	08008227 	.word	0x08008227
 800819c:	08008227 	.word	0x08008227
 80081a0:	08008227 	.word	0x08008227
 80081a4:	08008227 	.word	0x08008227
 80081a8:	08008227 	.word	0x08008227
 80081ac:	08008227 	.word	0x08008227
 80081b0:	080081e3 	.word	0x080081e3
 80081b4:	0800820d 	.word	0x0800820d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d107      	bne.n	80081d4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80081c4:	f107 030a 	add.w	r3, r7, #10
 80081c8:	2202      	movs	r2, #2
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f001 fd33 	bl	8009c38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081d2:	e032      	b.n	800823a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f001 fcbd 	bl	8009b56 <USBD_CtlError>
            ret = USBD_FAIL;
 80081dc:	2303      	movs	r3, #3
 80081de:	75fb      	strb	r3, [r7, #23]
          break;
 80081e0:	e02b      	b.n	800823a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	d107      	bne.n	80081fe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80081ee:	f107 030d 	add.w	r3, r7, #13
 80081f2:	2201      	movs	r2, #1
 80081f4:	4619      	mov	r1, r3
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f001 fd1e 	bl	8009c38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081fc:	e01d      	b.n	800823a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f001 fca8 	bl	8009b56 <USBD_CtlError>
            ret = USBD_FAIL;
 8008206:	2303      	movs	r3, #3
 8008208:	75fb      	strb	r3, [r7, #23]
          break;
 800820a:	e016      	b.n	800823a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008212:	b2db      	uxtb	r3, r3
 8008214:	2b03      	cmp	r3, #3
 8008216:	d00f      	beq.n	8008238 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008218:	6839      	ldr	r1, [r7, #0]
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f001 fc9b 	bl	8009b56 <USBD_CtlError>
            ret = USBD_FAIL;
 8008220:	2303      	movs	r3, #3
 8008222:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008224:	e008      	b.n	8008238 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f001 fc94 	bl	8009b56 <USBD_CtlError>
          ret = USBD_FAIL;
 800822e:	2303      	movs	r3, #3
 8008230:	75fb      	strb	r3, [r7, #23]
          break;
 8008232:	e002      	b.n	800823a <USBD_CDC_Setup+0x19e>
          break;
 8008234:	bf00      	nop
 8008236:	e008      	b.n	800824a <USBD_CDC_Setup+0x1ae>
          break;
 8008238:	bf00      	nop
      }
      break;
 800823a:	e006      	b.n	800824a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f001 fc89 	bl	8009b56 <USBD_CtlError>
      ret = USBD_FAIL;
 8008244:	2303      	movs	r3, #3
 8008246:	75fb      	strb	r3, [r7, #23]
      break;
 8008248:	bf00      	nop
  }

  return (uint8_t)ret;
 800824a:	7dfb      	ldrb	r3, [r7, #23]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3718      	adds	r7, #24
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	460b      	mov	r3, r1
 800825e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008266:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	32b0      	adds	r2, #176	; 0xb0
 8008272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800827a:	2303      	movs	r3, #3
 800827c:	e065      	b.n	800834a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	32b0      	adds	r2, #176	; 0xb0
 8008288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800828c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800828e:	78fb      	ldrb	r3, [r7, #3]
 8008290:	f003 020f 	and.w	r2, r3, #15
 8008294:	6879      	ldr	r1, [r7, #4]
 8008296:	4613      	mov	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4413      	add	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	440b      	add	r3, r1
 80082a0:	3318      	adds	r3, #24
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d02f      	beq.n	8008308 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80082a8:	78fb      	ldrb	r3, [r7, #3]
 80082aa:	f003 020f 	and.w	r2, r3, #15
 80082ae:	6879      	ldr	r1, [r7, #4]
 80082b0:	4613      	mov	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	440b      	add	r3, r1
 80082ba:	3318      	adds	r3, #24
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	78fb      	ldrb	r3, [r7, #3]
 80082c0:	f003 010f 	and.w	r1, r3, #15
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	460b      	mov	r3, r1
 80082c8:	00db      	lsls	r3, r3, #3
 80082ca:	440b      	add	r3, r1
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4403      	add	r3, r0
 80082d0:	3348      	adds	r3, #72	; 0x48
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80082d8:	fb01 f303 	mul.w	r3, r1, r3
 80082dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d112      	bne.n	8008308 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80082e2:	78fb      	ldrb	r3, [r7, #3]
 80082e4:	f003 020f 	and.w	r2, r3, #15
 80082e8:	6879      	ldr	r1, [r7, #4]
 80082ea:	4613      	mov	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	440b      	add	r3, r1
 80082f4:	3318      	adds	r3, #24
 80082f6:	2200      	movs	r2, #0
 80082f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80082fa:	78f9      	ldrb	r1, [r7, #3]
 80082fc:	2300      	movs	r3, #0
 80082fe:	2200      	movs	r2, #0
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f002 f9ae 	bl	800a662 <USBD_LL_Transmit>
 8008306:	e01f      	b.n	8008348 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2200      	movs	r2, #0
 800830c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	33b0      	adds	r3, #176	; 0xb0
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d010      	beq.n	8008348 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	33b0      	adds	r3, #176	; 0xb0
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008344:	78fa      	ldrb	r2, [r7, #3]
 8008346:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b084      	sub	sp, #16
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	460b      	mov	r3, r1
 800835c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	32b0      	adds	r2, #176	; 0xb0
 8008368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800836c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	32b0      	adds	r2, #176	; 0xb0
 8008378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008380:	2303      	movs	r3, #3
 8008382:	e01a      	b.n	80083ba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008384:	78fb      	ldrb	r3, [r7, #3]
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f002 f9ac 	bl	800a6e6 <USBD_LL_GetRxDataSize>
 800838e:	4602      	mov	r2, r0
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	33b0      	adds	r3, #176	; 0xb0
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80083b4:	4611      	mov	r1, r2
 80083b6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b084      	sub	sp, #16
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	32b0      	adds	r2, #176	; 0xb0
 80083d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d101      	bne.n	80083e4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e025      	b.n	8008430 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	33b0      	adds	r3, #176	; 0xb0
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d01a      	beq.n	800842e <USBD_CDC_EP0_RxReady+0x6c>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80083fe:	2bff      	cmp	r3, #255	; 0xff
 8008400:	d015      	beq.n	800842e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	33b0      	adds	r3, #176	; 0xb0
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800841a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008422:	b292      	uxth	r2, r2
 8008424:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	22ff      	movs	r2, #255	; 0xff
 800842a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008440:	2182      	movs	r1, #130	; 0x82
 8008442:	4818      	ldr	r0, [pc, #96]	; (80084a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008444:	f000 fd4f 	bl	8008ee6 <USBD_GetEpDesc>
 8008448:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800844a:	2101      	movs	r1, #1
 800844c:	4815      	ldr	r0, [pc, #84]	; (80084a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800844e:	f000 fd4a 	bl	8008ee6 <USBD_GetEpDesc>
 8008452:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008454:	2181      	movs	r1, #129	; 0x81
 8008456:	4813      	ldr	r0, [pc, #76]	; (80084a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008458:	f000 fd45 	bl	8008ee6 <USBD_GetEpDesc>
 800845c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	2210      	movs	r2, #16
 8008468:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d006      	beq.n	800847e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	2200      	movs	r2, #0
 8008474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008478:	711a      	strb	r2, [r3, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d006      	beq.n	8008492 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800848c:	711a      	strb	r2, [r3, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2243      	movs	r2, #67	; 0x43
 8008496:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008498:	4b02      	ldr	r3, [pc, #8]	; (80084a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800849a:	4618      	mov	r0, r3
 800849c:	3718      	adds	r7, #24
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20000050 	.word	0x20000050

080084a8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80084b0:	2182      	movs	r1, #130	; 0x82
 80084b2:	4818      	ldr	r0, [pc, #96]	; (8008514 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80084b4:	f000 fd17 	bl	8008ee6 <USBD_GetEpDesc>
 80084b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80084ba:	2101      	movs	r1, #1
 80084bc:	4815      	ldr	r0, [pc, #84]	; (8008514 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80084be:	f000 fd12 	bl	8008ee6 <USBD_GetEpDesc>
 80084c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80084c4:	2181      	movs	r1, #129	; 0x81
 80084c6:	4813      	ldr	r0, [pc, #76]	; (8008514 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80084c8:	f000 fd0d 	bl	8008ee6 <USBD_GetEpDesc>
 80084cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d002      	beq.n	80084da <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	2210      	movs	r2, #16
 80084d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d006      	beq.n	80084ee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	2200      	movs	r2, #0
 80084e4:	711a      	strb	r2, [r3, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f042 0202 	orr.w	r2, r2, #2
 80084ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d006      	beq.n	8008502 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	711a      	strb	r2, [r3, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f042 0202 	orr.w	r2, r2, #2
 8008500:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2243      	movs	r2, #67	; 0x43
 8008506:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008508:	4b02      	ldr	r3, [pc, #8]	; (8008514 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800850a:	4618      	mov	r0, r3
 800850c:	3718      	adds	r7, #24
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	20000050 	.word	0x20000050

08008518 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008520:	2182      	movs	r1, #130	; 0x82
 8008522:	4818      	ldr	r0, [pc, #96]	; (8008584 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008524:	f000 fcdf 	bl	8008ee6 <USBD_GetEpDesc>
 8008528:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800852a:	2101      	movs	r1, #1
 800852c:	4815      	ldr	r0, [pc, #84]	; (8008584 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800852e:	f000 fcda 	bl	8008ee6 <USBD_GetEpDesc>
 8008532:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008534:	2181      	movs	r1, #129	; 0x81
 8008536:	4813      	ldr	r0, [pc, #76]	; (8008584 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008538:	f000 fcd5 	bl	8008ee6 <USBD_GetEpDesc>
 800853c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d002      	beq.n	800854a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	2210      	movs	r2, #16
 8008548:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d006      	beq.n	800855e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	2200      	movs	r2, #0
 8008554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008558:	711a      	strb	r2, [r3, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d006      	beq.n	8008572 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800856c:	711a      	strb	r2, [r3, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2243      	movs	r2, #67	; 0x43
 8008576:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008578:	4b02      	ldr	r3, [pc, #8]	; (8008584 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800857a:	4618      	mov	r0, r3
 800857c:	3718      	adds	r7, #24
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	20000050 	.word	0x20000050

08008588 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	220a      	movs	r2, #10
 8008594:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008596:	4b03      	ldr	r3, [pc, #12]	; (80085a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008598:	4618      	mov	r0, r3
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr
 80085a4:	2000000c 	.word	0x2000000c

080085a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e009      	b.n	80085d0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	33b0      	adds	r3, #176	; 0xb0
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80085dc:	b480      	push	{r7}
 80085de:	b087      	sub	sp, #28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	32b0      	adds	r2, #176	; 0xb0
 80085f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d101      	bne.n	8008602 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80085fe:	2303      	movs	r3, #3
 8008600:	e008      	b.n	8008614 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	371c      	adds	r7, #28
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	32b0      	adds	r2, #176	; 0xb0
 8008634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008638:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d101      	bne.n	8008644 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008640:	2303      	movs	r3, #3
 8008642:	e004      	b.n	800864e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
	...

0800865c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	32b0      	adds	r2, #176	; 0xb0
 800866e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008672:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008674:	2301      	movs	r3, #1
 8008676:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	32b0      	adds	r2, #176	; 0xb0
 8008682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800868a:	2303      	movs	r3, #3
 800868c:	e025      	b.n	80086da <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008694:	2b00      	cmp	r3, #0
 8008696:	d11f      	bne.n	80086d8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	2201      	movs	r2, #1
 800869c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80086a0:	4b10      	ldr	r3, [pc, #64]	; (80086e4 <USBD_CDC_TransmitPacket+0x88>)
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	f003 020f 	and.w	r2, r3, #15
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	4613      	mov	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4403      	add	r3, r0
 80086ba:	3318      	adds	r3, #24
 80086bc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80086be:	4b09      	ldr	r3, [pc, #36]	; (80086e4 <USBD_CDC_TransmitPacket+0x88>)
 80086c0:	7819      	ldrb	r1, [r3, #0]
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f001 ffc7 	bl	800a662 <USBD_LL_Transmit>

    ret = USBD_OK;
 80086d4:	2300      	movs	r3, #0
 80086d6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	20000093 	.word	0x20000093

080086e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	32b0      	adds	r2, #176	; 0xb0
 80086fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086fe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	32b0      	adds	r2, #176	; 0xb0
 800870a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008712:	2303      	movs	r3, #3
 8008714:	e018      	b.n	8008748 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	7c1b      	ldrb	r3, [r3, #16]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10a      	bne.n	8008734 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800871e:	4b0c      	ldr	r3, [pc, #48]	; (8008750 <USBD_CDC_ReceivePacket+0x68>)
 8008720:	7819      	ldrb	r1, [r3, #0]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f001 ffb9 	bl	800a6a4 <USBD_LL_PrepareReceive>
 8008732:	e008      	b.n	8008746 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008734:	4b06      	ldr	r3, [pc, #24]	; (8008750 <USBD_CDC_ReceivePacket+0x68>)
 8008736:	7819      	ldrb	r1, [r3, #0]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800873e:	2340      	movs	r3, #64	; 0x40
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f001 ffaf 	bl	800a6a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	20000094 	.word	0x20000094

08008754 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	4613      	mov	r3, r2
 8008760:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d101      	bne.n	800876c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008768:	2303      	movs	r3, #3
 800876a:	e01f      	b.n	80087ac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2200      	movs	r2, #0
 8008770:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2200      	movs	r2, #0
 8008778:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d003      	beq.n	8008792 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	79fa      	ldrb	r2, [r7, #7]
 800879e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f001 fe29 	bl	800a3f8 <USBD_LL_Init>
 80087a6:	4603      	mov	r3, r0
 80087a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80087aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3718      	adds	r7, #24
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087be:	2300      	movs	r3, #0
 80087c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d101      	bne.n	80087cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80087c8:	2303      	movs	r3, #3
 80087ca:	e025      	b.n	8008818 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	32ae      	adds	r2, #174	; 0xae
 80087de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00f      	beq.n	8008808 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	32ae      	adds	r2, #174	; 0xae
 80087f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f8:	f107 020e 	add.w	r2, r7, #14
 80087fc:	4610      	mov	r0, r2
 80087fe:	4798      	blx	r3
 8008800:	4602      	mov	r2, r0
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800880e:	1c5a      	adds	r2, r3, #1
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f001 fe31 	bl	800a490 <USBD_LL_Start>
 800882e:	4603      	mov	r3, r0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008840:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008842:	4618      	mov	r0, r3
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b084      	sub	sp, #16
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	460b      	mov	r3, r1
 8008858:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008864:	2b00      	cmp	r3, #0
 8008866:	d009      	beq.n	800887c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	78fa      	ldrb	r2, [r7, #3]
 8008872:	4611      	mov	r1, r2
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	4798      	blx	r3
 8008878:	4603      	mov	r3, r0
 800887a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800887c:	7bfb      	ldrb	r3, [r7, #15]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b084      	sub	sp, #16
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	460b      	mov	r3, r1
 8008890:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	78fa      	ldrb	r2, [r7, #3]
 80088a0:	4611      	mov	r1, r2
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	4798      	blx	r3
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80088ac:	2303      	movs	r3, #3
 80088ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b084      	sub	sp, #16
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80088ca:	6839      	ldr	r1, [r7, #0]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f001 f908 	bl	8009ae2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80088e0:	461a      	mov	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80088ee:	f003 031f 	and.w	r3, r3, #31
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d01a      	beq.n	800892c <USBD_LL_SetupStage+0x72>
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d822      	bhi.n	8008940 <USBD_LL_SetupStage+0x86>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d002      	beq.n	8008904 <USBD_LL_SetupStage+0x4a>
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d00a      	beq.n	8008918 <USBD_LL_SetupStage+0x5e>
 8008902:	e01d      	b.n	8008940 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800890a:	4619      	mov	r1, r3
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fb5f 	bl	8008fd0 <USBD_StdDevReq>
 8008912:	4603      	mov	r3, r0
 8008914:	73fb      	strb	r3, [r7, #15]
      break;
 8008916:	e020      	b.n	800895a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fbc7 	bl	80090b4 <USBD_StdItfReq>
 8008926:	4603      	mov	r3, r0
 8008928:	73fb      	strb	r3, [r7, #15]
      break;
 800892a:	e016      	b.n	800895a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008932:	4619      	mov	r1, r3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fc29 	bl	800918c <USBD_StdEPReq>
 800893a:	4603      	mov	r3, r0
 800893c:	73fb      	strb	r3, [r7, #15]
      break;
 800893e:	e00c      	b.n	800895a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008946:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800894a:	b2db      	uxtb	r3, r3
 800894c:	4619      	mov	r1, r3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f001 fdfe 	bl	800a550 <USBD_LL_StallEP>
 8008954:	4603      	mov	r3, r0
 8008956:	73fb      	strb	r3, [r7, #15]
      break;
 8008958:	bf00      	nop
  }

  return ret;
 800895a:	7bfb      	ldrb	r3, [r7, #15]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	460b      	mov	r3, r1
 800896e:	607a      	str	r2, [r7, #4]
 8008970:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008972:	2300      	movs	r3, #0
 8008974:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008976:	7afb      	ldrb	r3, [r7, #11]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d16e      	bne.n	8008a5a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008982:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800898a:	2b03      	cmp	r3, #3
 800898c:	f040 8098 	bne.w	8008ac0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	689a      	ldr	r2, [r3, #8]
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	429a      	cmp	r2, r3
 800899a:	d913      	bls.n	80089c4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	689a      	ldr	r2, [r3, #8]
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	1ad2      	subs	r2, r2, r3
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	68da      	ldr	r2, [r3, #12]
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	4293      	cmp	r3, r2
 80089b4:	bf28      	it	cs
 80089b6:	4613      	movcs	r3, r2
 80089b8:	461a      	mov	r2, r3
 80089ba:	6879      	ldr	r1, [r7, #4]
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f001 f984 	bl	8009cca <USBD_CtlContinueRx>
 80089c2:	e07d      	b.n	8008ac0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80089ca:	f003 031f 	and.w	r3, r3, #31
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d014      	beq.n	80089fc <USBD_LL_DataOutStage+0x98>
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d81d      	bhi.n	8008a12 <USBD_LL_DataOutStage+0xae>
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d002      	beq.n	80089e0 <USBD_LL_DataOutStage+0x7c>
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d003      	beq.n	80089e6 <USBD_LL_DataOutStage+0x82>
 80089de:	e018      	b.n	8008a12 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80089e0:	2300      	movs	r3, #0
 80089e2:	75bb      	strb	r3, [r7, #22]
            break;
 80089e4:	e018      	b.n	8008a18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	4619      	mov	r1, r3
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 fa5e 	bl	8008eb2 <USBD_CoreFindIF>
 80089f6:	4603      	mov	r3, r0
 80089f8:	75bb      	strb	r3, [r7, #22]
            break;
 80089fa:	e00d      	b.n	8008a18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	4619      	mov	r1, r3
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f000 fa60 	bl	8008ecc <USBD_CoreFindEP>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	75bb      	strb	r3, [r7, #22]
            break;
 8008a10:	e002      	b.n	8008a18 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	75bb      	strb	r3, [r7, #22]
            break;
 8008a16:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008a18:	7dbb      	ldrb	r3, [r7, #22]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d119      	bne.n	8008a52 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b03      	cmp	r3, #3
 8008a28:	d113      	bne.n	8008a52 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008a2a:	7dba      	ldrb	r2, [r7, #22]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	32ae      	adds	r2, #174	; 0xae
 8008a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00b      	beq.n	8008a52 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008a3a:	7dba      	ldrb	r2, [r7, #22]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008a42:	7dba      	ldrb	r2, [r7, #22]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	32ae      	adds	r2, #174	; 0xae
 8008a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f001 f94a 	bl	8009cec <USBD_CtlSendStatus>
 8008a58:	e032      	b.n	8008ac0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008a5a:	7afb      	ldrb	r3, [r7, #11]
 8008a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	4619      	mov	r1, r3
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 fa31 	bl	8008ecc <USBD_CoreFindEP>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a6e:	7dbb      	ldrb	r3, [r7, #22]
 8008a70:	2bff      	cmp	r3, #255	; 0xff
 8008a72:	d025      	beq.n	8008ac0 <USBD_LL_DataOutStage+0x15c>
 8008a74:	7dbb      	ldrb	r3, [r7, #22]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d122      	bne.n	8008ac0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d117      	bne.n	8008ab6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008a86:	7dba      	ldrb	r2, [r7, #22]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	32ae      	adds	r2, #174	; 0xae
 8008a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00f      	beq.n	8008ab6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008a96:	7dba      	ldrb	r2, [r7, #22]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008a9e:	7dba      	ldrb	r2, [r7, #22]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	32ae      	adds	r2, #174	; 0xae
 8008aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	7afa      	ldrb	r2, [r7, #11]
 8008aac:	4611      	mov	r1, r2
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	4798      	blx	r3
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008ab6:	7dfb      	ldrb	r3, [r7, #23]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008abc:	7dfb      	ldrb	r3, [r7, #23]
 8008abe:	e000      	b.n	8008ac2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3718      	adds	r7, #24
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b086      	sub	sp, #24
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	60f8      	str	r0, [r7, #12]
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	607a      	str	r2, [r7, #4]
 8008ad6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008ad8:	7afb      	ldrb	r3, [r7, #11]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d16f      	bne.n	8008bbe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	3314      	adds	r3, #20
 8008ae2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d15a      	bne.n	8008ba4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	689a      	ldr	r2, [r3, #8]
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d914      	bls.n	8008b24 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	689a      	ldr	r2, [r3, #8]
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	1ad2      	subs	r2, r2, r3
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	6879      	ldr	r1, [r7, #4]
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f001 f8ac 	bl	8009c6e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b16:	2300      	movs	r3, #0
 8008b18:	2200      	movs	r2, #0
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f001 fdc1 	bl	800a6a4 <USBD_LL_PrepareReceive>
 8008b22:	e03f      	b.n	8008ba4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	68da      	ldr	r2, [r3, #12]
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d11c      	bne.n	8008b6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d316      	bcc.n	8008b6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d20f      	bcs.n	8008b6a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f001 f88d 	bl	8009c6e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	2200      	movs	r2, #0
 8008b60:	2100      	movs	r1, #0
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f001 fd9e 	bl	800a6a4 <USBD_LL_PrepareReceive>
 8008b68:	e01c      	b.n	8008ba4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b03      	cmp	r3, #3
 8008b74:	d10f      	bne.n	8008b96 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d009      	beq.n	8008b96 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b96:	2180      	movs	r1, #128	; 0x80
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f001 fcd9 	bl	800a550 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f001 f8b7 	bl	8009d12 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d03a      	beq.n	8008c24 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f7ff fe42 	bl	8008838 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008bbc:	e032      	b.n	8008c24 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008bbe:	7afb      	ldrb	r3, [r7, #11]
 8008bc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f000 f97f 	bl	8008ecc <USBD_CoreFindEP>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bd2:	7dfb      	ldrb	r3, [r7, #23]
 8008bd4:	2bff      	cmp	r3, #255	; 0xff
 8008bd6:	d025      	beq.n	8008c24 <USBD_LL_DataInStage+0x15a>
 8008bd8:	7dfb      	ldrb	r3, [r7, #23]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d122      	bne.n	8008c24 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b03      	cmp	r3, #3
 8008be8:	d11c      	bne.n	8008c24 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008bea:	7dfa      	ldrb	r2, [r7, #23]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	32ae      	adds	r2, #174	; 0xae
 8008bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf4:	695b      	ldr	r3, [r3, #20]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d014      	beq.n	8008c24 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008bfa:	7dfa      	ldrb	r2, [r7, #23]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008c02:	7dfa      	ldrb	r2, [r7, #23]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	32ae      	adds	r2, #174	; 0xae
 8008c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	7afa      	ldrb	r2, [r7, #11]
 8008c10:	4611      	mov	r1, r2
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	4798      	blx	r3
 8008c16:	4603      	mov	r3, r0
 8008c18:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008c1a:	7dbb      	ldrb	r3, [r7, #22]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d001      	beq.n	8008c24 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008c20:	7dbb      	ldrb	r3, [r7, #22]
 8008c22:	e000      	b.n	8008c26 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3718      	adds	r7, #24
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b084      	sub	sp, #16
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d014      	beq.n	8008c94 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00e      	beq.n	8008c94 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	6852      	ldr	r2, [r2, #4]
 8008c82:	b2d2      	uxtb	r2, r2
 8008c84:	4611      	mov	r1, r2
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	4798      	blx	r3
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d001      	beq.n	8008c94 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008c90:	2303      	movs	r3, #3
 8008c92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c94:	2340      	movs	r3, #64	; 0x40
 8008c96:	2200      	movs	r2, #0
 8008c98:	2100      	movs	r1, #0
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f001 fc13 	bl	800a4c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2240      	movs	r2, #64	; 0x40
 8008cac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008cb0:	2340      	movs	r3, #64	; 0x40
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	2180      	movs	r1, #128	; 0x80
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f001 fc05 	bl	800a4c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2240      	movs	r2, #64	; 0x40
 8008cc6:	621a      	str	r2, [r3, #32]

  return ret;
 8008cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b083      	sub	sp, #12
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	460b      	mov	r3, r1
 8008cdc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	78fa      	ldrb	r2, [r7, #3]
 8008ce2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b083      	sub	sp, #12
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d00:	b2da      	uxtb	r2, r3
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2204      	movs	r2, #4
 8008d0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	370c      	adds	r7, #12
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr

08008d1e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008d1e:	b480      	push	{r7}
 8008d20:	b083      	sub	sp, #12
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	2b04      	cmp	r3, #4
 8008d30:	d106      	bne.n	8008d40 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008d38:	b2da      	uxtb	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	370c      	adds	r7, #12
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr

08008d4e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b082      	sub	sp, #8
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	d110      	bne.n	8008d84 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00b      	beq.n	8008d84 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d72:	69db      	ldr	r3, [r3, #28]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d005      	beq.n	8008d84 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d7e:	69db      	ldr	r3, [r3, #28]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b082      	sub	sp, #8
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
 8008d96:	460b      	mov	r3, r1
 8008d98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	32ae      	adds	r2, #174	; 0xae
 8008da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e01c      	b.n	8008dea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	2b03      	cmp	r3, #3
 8008dba:	d115      	bne.n	8008de8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	32ae      	adds	r2, #174	; 0xae
 8008dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dca:	6a1b      	ldr	r3, [r3, #32]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00b      	beq.n	8008de8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	32ae      	adds	r2, #174	; 0xae
 8008dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dde:	6a1b      	ldr	r3, [r3, #32]
 8008de0:	78fa      	ldrb	r2, [r7, #3]
 8008de2:	4611      	mov	r1, r2
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b082      	sub	sp, #8
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	32ae      	adds	r2, #174	; 0xae
 8008e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d101      	bne.n	8008e14 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008e10:	2303      	movs	r3, #3
 8008e12:	e01c      	b.n	8008e4e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b03      	cmp	r3, #3
 8008e1e:	d115      	bne.n	8008e4c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	32ae      	adds	r2, #174	; 0xae
 8008e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00b      	beq.n	8008e4c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	32ae      	adds	r2, #174	; 0xae
 8008e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e44:	78fa      	ldrb	r2, [r7, #3]
 8008e46:	4611      	mov	r1, r2
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008e56:	b480      	push	{r7}
 8008e58:	b083      	sub	sp, #12
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00e      	beq.n	8008ea8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	6852      	ldr	r2, [r2, #4]
 8008e96:	b2d2      	uxtb	r2, r2
 8008e98:	4611      	mov	r1, r2
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	4798      	blx	r3
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d001      	beq.n	8008ea8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b083      	sub	sp, #12
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	460b      	mov	r3, r1
 8008ebc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ebe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ed8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b086      	sub	sp, #24
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	460b      	mov	r3, r1
 8008ef0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	885b      	ldrh	r3, [r3, #2]
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d920      	bls.n	8008f50 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008f16:	e013      	b.n	8008f40 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008f18:	f107 030a 	add.w	r3, r7, #10
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	6978      	ldr	r0, [r7, #20]
 8008f20:	f000 f81b 	bl	8008f5a <USBD_GetNextDesc>
 8008f24:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	785b      	ldrb	r3, [r3, #1]
 8008f2a:	2b05      	cmp	r3, #5
 8008f2c:	d108      	bne.n	8008f40 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	789b      	ldrb	r3, [r3, #2]
 8008f36:	78fa      	ldrb	r2, [r7, #3]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d008      	beq.n	8008f4e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	885b      	ldrh	r3, [r3, #2]
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	897b      	ldrh	r3, [r7, #10]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d8e5      	bhi.n	8008f18 <USBD_GetEpDesc+0x32>
 8008f4c:	e000      	b.n	8008f50 <USBD_GetEpDesc+0x6a>
          break;
 8008f4e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008f50:	693b      	ldr	r3, [r7, #16]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3718      	adds	r7, #24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	b085      	sub	sp, #20
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
 8008f62:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	881a      	ldrh	r2, [r3, #0]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	4413      	add	r3, r2
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4413      	add	r3, r2
 8008f84:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008f86:	68fb      	ldr	r3, [r7, #12]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b087      	sub	sp, #28
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008fb2:	8a3b      	ldrh	r3, [r7, #16]
 8008fb4:	021b      	lsls	r3, r3, #8
 8008fb6:	b21a      	sxth	r2, r3
 8008fb8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	b21b      	sxth	r3, r3
 8008fc0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008fc2:	89fb      	ldrh	r3, [r7, #14]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	371c      	adds	r7, #28
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fe6:	2b40      	cmp	r3, #64	; 0x40
 8008fe8:	d005      	beq.n	8008ff6 <USBD_StdDevReq+0x26>
 8008fea:	2b40      	cmp	r3, #64	; 0x40
 8008fec:	d857      	bhi.n	800909e <USBD_StdDevReq+0xce>
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00f      	beq.n	8009012 <USBD_StdDevReq+0x42>
 8008ff2:	2b20      	cmp	r3, #32
 8008ff4:	d153      	bne.n	800909e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	32ae      	adds	r2, #174	; 0xae
 8009000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	6839      	ldr	r1, [r7, #0]
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	4798      	blx	r3
 800900c:	4603      	mov	r3, r0
 800900e:	73fb      	strb	r3, [r7, #15]
      break;
 8009010:	e04a      	b.n	80090a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	785b      	ldrb	r3, [r3, #1]
 8009016:	2b09      	cmp	r3, #9
 8009018:	d83b      	bhi.n	8009092 <USBD_StdDevReq+0xc2>
 800901a:	a201      	add	r2, pc, #4	; (adr r2, 8009020 <USBD_StdDevReq+0x50>)
 800901c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009020:	08009075 	.word	0x08009075
 8009024:	08009089 	.word	0x08009089
 8009028:	08009093 	.word	0x08009093
 800902c:	0800907f 	.word	0x0800907f
 8009030:	08009093 	.word	0x08009093
 8009034:	08009053 	.word	0x08009053
 8009038:	08009049 	.word	0x08009049
 800903c:	08009093 	.word	0x08009093
 8009040:	0800906b 	.word	0x0800906b
 8009044:	0800905d 	.word	0x0800905d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fa3c 	bl	80094c8 <USBD_GetDescriptor>
          break;
 8009050:	e024      	b.n	800909c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fba1 	bl	800979c <USBD_SetAddress>
          break;
 800905a:	e01f      	b.n	800909c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fbe0 	bl	8009824 <USBD_SetConfig>
 8009064:	4603      	mov	r3, r0
 8009066:	73fb      	strb	r3, [r7, #15]
          break;
 8009068:	e018      	b.n	800909c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800906a:	6839      	ldr	r1, [r7, #0]
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 fc83 	bl	8009978 <USBD_GetConfig>
          break;
 8009072:	e013      	b.n	800909c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fcb4 	bl	80099e4 <USBD_GetStatus>
          break;
 800907c:	e00e      	b.n	800909c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fce3 	bl	8009a4c <USBD_SetFeature>
          break;
 8009086:	e009      	b.n	800909c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009088:	6839      	ldr	r1, [r7, #0]
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fd07 	bl	8009a9e <USBD_ClrFeature>
          break;
 8009090:	e004      	b.n	800909c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 fd5e 	bl	8009b56 <USBD_CtlError>
          break;
 800909a:	bf00      	nop
      }
      break;
 800909c:	e004      	b.n	80090a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800909e:	6839      	ldr	r1, [r7, #0]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fd58 	bl	8009b56 <USBD_CtlError>
      break;
 80090a6:	bf00      	nop
  }

  return ret;
 80090a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop

080090b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090be:	2300      	movs	r3, #0
 80090c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090ca:	2b40      	cmp	r3, #64	; 0x40
 80090cc:	d005      	beq.n	80090da <USBD_StdItfReq+0x26>
 80090ce:	2b40      	cmp	r3, #64	; 0x40
 80090d0:	d852      	bhi.n	8009178 <USBD_StdItfReq+0xc4>
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <USBD_StdItfReq+0x26>
 80090d6:	2b20      	cmp	r3, #32
 80090d8:	d14e      	bne.n	8009178 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	3b01      	subs	r3, #1
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d840      	bhi.n	800916a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	889b      	ldrh	r3, [r3, #4]
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d836      	bhi.n	8009160 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	889b      	ldrh	r3, [r3, #4]
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	4619      	mov	r1, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7ff fed9 	bl	8008eb2 <USBD_CoreFindIF>
 8009100:	4603      	mov	r3, r0
 8009102:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009104:	7bbb      	ldrb	r3, [r7, #14]
 8009106:	2bff      	cmp	r3, #255	; 0xff
 8009108:	d01d      	beq.n	8009146 <USBD_StdItfReq+0x92>
 800910a:	7bbb      	ldrb	r3, [r7, #14]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d11a      	bne.n	8009146 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009110:	7bba      	ldrb	r2, [r7, #14]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	32ae      	adds	r2, #174	; 0xae
 8009116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00f      	beq.n	8009140 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009120:	7bba      	ldrb	r2, [r7, #14]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009128:	7bba      	ldrb	r2, [r7, #14]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	32ae      	adds	r2, #174	; 0xae
 800912e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	4798      	blx	r3
 800913a:	4603      	mov	r3, r0
 800913c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800913e:	e004      	b.n	800914a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009140:	2303      	movs	r3, #3
 8009142:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009144:	e001      	b.n	800914a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009146:	2303      	movs	r3, #3
 8009148:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	88db      	ldrh	r3, [r3, #6]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d110      	bne.n	8009174 <USBD_StdItfReq+0xc0>
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d10d      	bne.n	8009174 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fdc7 	bl	8009cec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800915e:	e009      	b.n	8009174 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009160:	6839      	ldr	r1, [r7, #0]
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fcf7 	bl	8009b56 <USBD_CtlError>
          break;
 8009168:	e004      	b.n	8009174 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800916a:	6839      	ldr	r1, [r7, #0]
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fcf2 	bl	8009b56 <USBD_CtlError>
          break;
 8009172:	e000      	b.n	8009176 <USBD_StdItfReq+0xc2>
          break;
 8009174:	bf00      	nop
      }
      break;
 8009176:	e004      	b.n	8009182 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fceb 	bl	8009b56 <USBD_CtlError>
      break;
 8009180:	bf00      	nop
  }

  return ret;
 8009182:	7bfb      	ldrb	r3, [r7, #15]
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	889b      	ldrh	r3, [r3, #4]
 800919e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091a8:	2b40      	cmp	r3, #64	; 0x40
 80091aa:	d007      	beq.n	80091bc <USBD_StdEPReq+0x30>
 80091ac:	2b40      	cmp	r3, #64	; 0x40
 80091ae:	f200 817f 	bhi.w	80094b0 <USBD_StdEPReq+0x324>
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d02a      	beq.n	800920c <USBD_StdEPReq+0x80>
 80091b6:	2b20      	cmp	r3, #32
 80091b8:	f040 817a 	bne.w	80094b0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80091bc:	7bbb      	ldrb	r3, [r7, #14]
 80091be:	4619      	mov	r1, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7ff fe83 	bl	8008ecc <USBD_CoreFindEP>
 80091c6:	4603      	mov	r3, r0
 80091c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80091ca:	7b7b      	ldrb	r3, [r7, #13]
 80091cc:	2bff      	cmp	r3, #255	; 0xff
 80091ce:	f000 8174 	beq.w	80094ba <USBD_StdEPReq+0x32e>
 80091d2:	7b7b      	ldrb	r3, [r7, #13]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f040 8170 	bne.w	80094ba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80091da:	7b7a      	ldrb	r2, [r7, #13]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80091e2:	7b7a      	ldrb	r2, [r7, #13]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	32ae      	adds	r2, #174	; 0xae
 80091e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 8163 	beq.w	80094ba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80091f4:	7b7a      	ldrb	r2, [r7, #13]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	32ae      	adds	r2, #174	; 0xae
 80091fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	4798      	blx	r3
 8009206:	4603      	mov	r3, r0
 8009208:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800920a:	e156      	b.n	80094ba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	785b      	ldrb	r3, [r3, #1]
 8009210:	2b03      	cmp	r3, #3
 8009212:	d008      	beq.n	8009226 <USBD_StdEPReq+0x9a>
 8009214:	2b03      	cmp	r3, #3
 8009216:	f300 8145 	bgt.w	80094a4 <USBD_StdEPReq+0x318>
 800921a:	2b00      	cmp	r3, #0
 800921c:	f000 809b 	beq.w	8009356 <USBD_StdEPReq+0x1ca>
 8009220:	2b01      	cmp	r3, #1
 8009222:	d03c      	beq.n	800929e <USBD_StdEPReq+0x112>
 8009224:	e13e      	b.n	80094a4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b02      	cmp	r3, #2
 8009230:	d002      	beq.n	8009238 <USBD_StdEPReq+0xac>
 8009232:	2b03      	cmp	r3, #3
 8009234:	d016      	beq.n	8009264 <USBD_StdEPReq+0xd8>
 8009236:	e02c      	b.n	8009292 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009238:	7bbb      	ldrb	r3, [r7, #14]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00d      	beq.n	800925a <USBD_StdEPReq+0xce>
 800923e:	7bbb      	ldrb	r3, [r7, #14]
 8009240:	2b80      	cmp	r3, #128	; 0x80
 8009242:	d00a      	beq.n	800925a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009244:	7bbb      	ldrb	r3, [r7, #14]
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f001 f981 	bl	800a550 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800924e:	2180      	movs	r1, #128	; 0x80
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f001 f97d 	bl	800a550 <USBD_LL_StallEP>
 8009256:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009258:	e020      	b.n	800929c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fc7a 	bl	8009b56 <USBD_CtlError>
              break;
 8009262:	e01b      	b.n	800929c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	885b      	ldrh	r3, [r3, #2]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10e      	bne.n	800928a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800926c:	7bbb      	ldrb	r3, [r7, #14]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00b      	beq.n	800928a <USBD_StdEPReq+0xfe>
 8009272:	7bbb      	ldrb	r3, [r7, #14]
 8009274:	2b80      	cmp	r3, #128	; 0x80
 8009276:	d008      	beq.n	800928a <USBD_StdEPReq+0xfe>
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	88db      	ldrh	r3, [r3, #6]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d104      	bne.n	800928a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009280:	7bbb      	ldrb	r3, [r7, #14]
 8009282:	4619      	mov	r1, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f001 f963 	bl	800a550 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 fd2e 	bl	8009cec <USBD_CtlSendStatus>

              break;
 8009290:	e004      	b.n	800929c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fc5e 	bl	8009b56 <USBD_CtlError>
              break;
 800929a:	bf00      	nop
          }
          break;
 800929c:	e107      	b.n	80094ae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d002      	beq.n	80092b0 <USBD_StdEPReq+0x124>
 80092aa:	2b03      	cmp	r3, #3
 80092ac:	d016      	beq.n	80092dc <USBD_StdEPReq+0x150>
 80092ae:	e04b      	b.n	8009348 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092b0:	7bbb      	ldrb	r3, [r7, #14]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00d      	beq.n	80092d2 <USBD_StdEPReq+0x146>
 80092b6:	7bbb      	ldrb	r3, [r7, #14]
 80092b8:	2b80      	cmp	r3, #128	; 0x80
 80092ba:	d00a      	beq.n	80092d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80092bc:	7bbb      	ldrb	r3, [r7, #14]
 80092be:	4619      	mov	r1, r3
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f001 f945 	bl	800a550 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80092c6:	2180      	movs	r1, #128	; 0x80
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 f941 	bl	800a550 <USBD_LL_StallEP>
 80092ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092d0:	e040      	b.n	8009354 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80092d2:	6839      	ldr	r1, [r7, #0]
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fc3e 	bl	8009b56 <USBD_CtlError>
              break;
 80092da:	e03b      	b.n	8009354 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	885b      	ldrh	r3, [r3, #2]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d136      	bne.n	8009352 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80092e4:	7bbb      	ldrb	r3, [r7, #14]
 80092e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d004      	beq.n	80092f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80092ee:	7bbb      	ldrb	r3, [r7, #14]
 80092f0:	4619      	mov	r1, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f001 f94b 	bl	800a58e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fcf7 	bl	8009cec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80092fe:	7bbb      	ldrb	r3, [r7, #14]
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7ff fde2 	bl	8008ecc <USBD_CoreFindEP>
 8009308:	4603      	mov	r3, r0
 800930a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800930c:	7b7b      	ldrb	r3, [r7, #13]
 800930e:	2bff      	cmp	r3, #255	; 0xff
 8009310:	d01f      	beq.n	8009352 <USBD_StdEPReq+0x1c6>
 8009312:	7b7b      	ldrb	r3, [r7, #13]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d11c      	bne.n	8009352 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009318:	7b7a      	ldrb	r2, [r7, #13]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009320:	7b7a      	ldrb	r2, [r7, #13]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	32ae      	adds	r2, #174	; 0xae
 8009326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d010      	beq.n	8009352 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009330:	7b7a      	ldrb	r2, [r7, #13]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	32ae      	adds	r2, #174	; 0xae
 8009336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	4798      	blx	r3
 8009342:	4603      	mov	r3, r0
 8009344:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009346:	e004      	b.n	8009352 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fc03 	bl	8009b56 <USBD_CtlError>
              break;
 8009350:	e000      	b.n	8009354 <USBD_StdEPReq+0x1c8>
              break;
 8009352:	bf00      	nop
          }
          break;
 8009354:	e0ab      	b.n	80094ae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800935c:	b2db      	uxtb	r3, r3
 800935e:	2b02      	cmp	r3, #2
 8009360:	d002      	beq.n	8009368 <USBD_StdEPReq+0x1dc>
 8009362:	2b03      	cmp	r3, #3
 8009364:	d032      	beq.n	80093cc <USBD_StdEPReq+0x240>
 8009366:	e097      	b.n	8009498 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009368:	7bbb      	ldrb	r3, [r7, #14]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d007      	beq.n	800937e <USBD_StdEPReq+0x1f2>
 800936e:	7bbb      	ldrb	r3, [r7, #14]
 8009370:	2b80      	cmp	r3, #128	; 0x80
 8009372:	d004      	beq.n	800937e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fbed 	bl	8009b56 <USBD_CtlError>
                break;
 800937c:	e091      	b.n	80094a2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800937e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009382:	2b00      	cmp	r3, #0
 8009384:	da0b      	bge.n	800939e <USBD_StdEPReq+0x212>
 8009386:	7bbb      	ldrb	r3, [r7, #14]
 8009388:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800938c:	4613      	mov	r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	4413      	add	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	3310      	adds	r3, #16
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	4413      	add	r3, r2
 800939a:	3304      	adds	r3, #4
 800939c:	e00b      	b.n	80093b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800939e:	7bbb      	ldrb	r3, [r7, #14]
 80093a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093a4:	4613      	mov	r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	4413      	add	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	4413      	add	r3, r2
 80093b4:	3304      	adds	r3, #4
 80093b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	2200      	movs	r2, #0
 80093bc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	2202      	movs	r2, #2
 80093c2:	4619      	mov	r1, r3
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 fc37 	bl	8009c38 <USBD_CtlSendData>
              break;
 80093ca:	e06a      	b.n	80094a2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80093cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	da11      	bge.n	80093f8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80093d4:	7bbb      	ldrb	r3, [r7, #14]
 80093d6:	f003 020f 	and.w	r2, r3, #15
 80093da:	6879      	ldr	r1, [r7, #4]
 80093dc:	4613      	mov	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4413      	add	r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	440b      	add	r3, r1
 80093e6:	3324      	adds	r3, #36	; 0x24
 80093e8:	881b      	ldrh	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d117      	bne.n	800941e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fbb0 	bl	8009b56 <USBD_CtlError>
                  break;
 80093f6:	e054      	b.n	80094a2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80093f8:	7bbb      	ldrb	r3, [r7, #14]
 80093fa:	f003 020f 	and.w	r2, r3, #15
 80093fe:	6879      	ldr	r1, [r7, #4]
 8009400:	4613      	mov	r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	440b      	add	r3, r1
 800940a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800940e:	881b      	ldrh	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d104      	bne.n	800941e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fb9d 	bl	8009b56 <USBD_CtlError>
                  break;
 800941c:	e041      	b.n	80094a2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800941e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009422:	2b00      	cmp	r3, #0
 8009424:	da0b      	bge.n	800943e <USBD_StdEPReq+0x2b2>
 8009426:	7bbb      	ldrb	r3, [r7, #14]
 8009428:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800942c:	4613      	mov	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	3310      	adds	r3, #16
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	4413      	add	r3, r2
 800943a:	3304      	adds	r3, #4
 800943c:	e00b      	b.n	8009456 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009444:	4613      	mov	r3, r2
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4413      	add	r3, r2
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	4413      	add	r3, r2
 8009454:	3304      	adds	r3, #4
 8009456:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009458:	7bbb      	ldrb	r3, [r7, #14]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d002      	beq.n	8009464 <USBD_StdEPReq+0x2d8>
 800945e:	7bbb      	ldrb	r3, [r7, #14]
 8009460:	2b80      	cmp	r3, #128	; 0x80
 8009462:	d103      	bne.n	800946c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	2200      	movs	r2, #0
 8009468:	601a      	str	r2, [r3, #0]
 800946a:	e00e      	b.n	800948a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800946c:	7bbb      	ldrb	r3, [r7, #14]
 800946e:	4619      	mov	r1, r3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f001 f8ab 	bl	800a5cc <USBD_LL_IsStallEP>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d003      	beq.n	8009484 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	2201      	movs	r2, #1
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	e002      	b.n	800948a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2200      	movs	r2, #0
 8009488:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	2202      	movs	r2, #2
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fbd1 	bl	8009c38 <USBD_CtlSendData>
              break;
 8009496:	e004      	b.n	80094a2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fb5b 	bl	8009b56 <USBD_CtlError>
              break;
 80094a0:	bf00      	nop
          }
          break;
 80094a2:	e004      	b.n	80094ae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80094a4:	6839      	ldr	r1, [r7, #0]
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 fb55 	bl	8009b56 <USBD_CtlError>
          break;
 80094ac:	bf00      	nop
      }
      break;
 80094ae:	e005      	b.n	80094bc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fb4f 	bl	8009b56 <USBD_CtlError>
      break;
 80094b8:	e000      	b.n	80094bc <USBD_StdEPReq+0x330>
      break;
 80094ba:	bf00      	nop
  }

  return ret;
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
	...

080094c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80094d2:	2300      	movs	r3, #0
 80094d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80094d6:	2300      	movs	r3, #0
 80094d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80094da:	2300      	movs	r3, #0
 80094dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	885b      	ldrh	r3, [r3, #2]
 80094e2:	0a1b      	lsrs	r3, r3, #8
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	3b01      	subs	r3, #1
 80094e8:	2b06      	cmp	r3, #6
 80094ea:	f200 8128 	bhi.w	800973e <USBD_GetDescriptor+0x276>
 80094ee:	a201      	add	r2, pc, #4	; (adr r2, 80094f4 <USBD_GetDescriptor+0x2c>)
 80094f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f4:	08009511 	.word	0x08009511
 80094f8:	08009529 	.word	0x08009529
 80094fc:	08009569 	.word	0x08009569
 8009500:	0800973f 	.word	0x0800973f
 8009504:	0800973f 	.word	0x0800973f
 8009508:	080096df 	.word	0x080096df
 800950c:	0800970b 	.word	0x0800970b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	7c12      	ldrb	r2, [r2, #16]
 800951c:	f107 0108 	add.w	r1, r7, #8
 8009520:	4610      	mov	r0, r2
 8009522:	4798      	blx	r3
 8009524:	60f8      	str	r0, [r7, #12]
      break;
 8009526:	e112      	b.n	800974e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	7c1b      	ldrb	r3, [r3, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10d      	bne.n	800954c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009538:	f107 0208 	add.w	r2, r7, #8
 800953c:	4610      	mov	r0, r2
 800953e:	4798      	blx	r3
 8009540:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	3301      	adds	r3, #1
 8009546:	2202      	movs	r2, #2
 8009548:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800954a:	e100      	b.n	800974e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009554:	f107 0208 	add.w	r2, r7, #8
 8009558:	4610      	mov	r0, r2
 800955a:	4798      	blx	r3
 800955c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	3301      	adds	r3, #1
 8009562:	2202      	movs	r2, #2
 8009564:	701a      	strb	r2, [r3, #0]
      break;
 8009566:	e0f2      	b.n	800974e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	885b      	ldrh	r3, [r3, #2]
 800956c:	b2db      	uxtb	r3, r3
 800956e:	2b05      	cmp	r3, #5
 8009570:	f200 80ac 	bhi.w	80096cc <USBD_GetDescriptor+0x204>
 8009574:	a201      	add	r2, pc, #4	; (adr r2, 800957c <USBD_GetDescriptor+0xb4>)
 8009576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957a:	bf00      	nop
 800957c:	08009595 	.word	0x08009595
 8009580:	080095c9 	.word	0x080095c9
 8009584:	080095fd 	.word	0x080095fd
 8009588:	08009631 	.word	0x08009631
 800958c:	08009665 	.word	0x08009665
 8009590:	08009699 	.word	0x08009699
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00b      	beq.n	80095b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	7c12      	ldrb	r2, [r2, #16]
 80095ac:	f107 0108 	add.w	r1, r7, #8
 80095b0:	4610      	mov	r0, r2
 80095b2:	4798      	blx	r3
 80095b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095b6:	e091      	b.n	80096dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 facb 	bl	8009b56 <USBD_CtlError>
            err++;
 80095c0:	7afb      	ldrb	r3, [r7, #11]
 80095c2:	3301      	adds	r3, #1
 80095c4:	72fb      	strb	r3, [r7, #11]
          break;
 80095c6:	e089      	b.n	80096dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00b      	beq.n	80095ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	7c12      	ldrb	r2, [r2, #16]
 80095e0:	f107 0108 	add.w	r1, r7, #8
 80095e4:	4610      	mov	r0, r2
 80095e6:	4798      	blx	r3
 80095e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095ea:	e077      	b.n	80096dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095ec:	6839      	ldr	r1, [r7, #0]
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fab1 	bl	8009b56 <USBD_CtlError>
            err++;
 80095f4:	7afb      	ldrb	r3, [r7, #11]
 80095f6:	3301      	adds	r3, #1
 80095f8:	72fb      	strb	r3, [r7, #11]
          break;
 80095fa:	e06f      	b.n	80096dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00b      	beq.n	8009620 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	7c12      	ldrb	r2, [r2, #16]
 8009614:	f107 0108 	add.w	r1, r7, #8
 8009618:	4610      	mov	r0, r2
 800961a:	4798      	blx	r3
 800961c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800961e:	e05d      	b.n	80096dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009620:	6839      	ldr	r1, [r7, #0]
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fa97 	bl	8009b56 <USBD_CtlError>
            err++;
 8009628:	7afb      	ldrb	r3, [r7, #11]
 800962a:	3301      	adds	r3, #1
 800962c:	72fb      	strb	r3, [r7, #11]
          break;
 800962e:	e055      	b.n	80096dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00b      	beq.n	8009654 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	7c12      	ldrb	r2, [r2, #16]
 8009648:	f107 0108 	add.w	r1, r7, #8
 800964c:	4610      	mov	r0, r2
 800964e:	4798      	blx	r3
 8009650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009652:	e043      	b.n	80096dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 fa7d 	bl	8009b56 <USBD_CtlError>
            err++;
 800965c:	7afb      	ldrb	r3, [r7, #11]
 800965e:	3301      	adds	r3, #1
 8009660:	72fb      	strb	r3, [r7, #11]
          break;
 8009662:	e03b      	b.n	80096dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800966a:	695b      	ldr	r3, [r3, #20]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00b      	beq.n	8009688 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009676:	695b      	ldr	r3, [r3, #20]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	7c12      	ldrb	r2, [r2, #16]
 800967c:	f107 0108 	add.w	r1, r7, #8
 8009680:	4610      	mov	r0, r2
 8009682:	4798      	blx	r3
 8009684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009686:	e029      	b.n	80096dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009688:	6839      	ldr	r1, [r7, #0]
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fa63 	bl	8009b56 <USBD_CtlError>
            err++;
 8009690:	7afb      	ldrb	r3, [r7, #11]
 8009692:	3301      	adds	r3, #1
 8009694:	72fb      	strb	r3, [r7, #11]
          break;
 8009696:	e021      	b.n	80096dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00b      	beq.n	80096bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096aa:	699b      	ldr	r3, [r3, #24]
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	7c12      	ldrb	r2, [r2, #16]
 80096b0:	f107 0108 	add.w	r1, r7, #8
 80096b4:	4610      	mov	r0, r2
 80096b6:	4798      	blx	r3
 80096b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096ba:	e00f      	b.n	80096dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096bc:	6839      	ldr	r1, [r7, #0]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 fa49 	bl	8009b56 <USBD_CtlError>
            err++;
 80096c4:	7afb      	ldrb	r3, [r7, #11]
 80096c6:	3301      	adds	r3, #1
 80096c8:	72fb      	strb	r3, [r7, #11]
          break;
 80096ca:	e007      	b.n	80096dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80096cc:	6839      	ldr	r1, [r7, #0]
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 fa41 	bl	8009b56 <USBD_CtlError>
          err++;
 80096d4:	7afb      	ldrb	r3, [r7, #11]
 80096d6:	3301      	adds	r3, #1
 80096d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80096da:	bf00      	nop
      }
      break;
 80096dc:	e037      	b.n	800974e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	7c1b      	ldrb	r3, [r3, #16]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d109      	bne.n	80096fa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ee:	f107 0208 	add.w	r2, r7, #8
 80096f2:	4610      	mov	r0, r2
 80096f4:	4798      	blx	r3
 80096f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096f8:	e029      	b.n	800974e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 fa2a 	bl	8009b56 <USBD_CtlError>
        err++;
 8009702:	7afb      	ldrb	r3, [r7, #11]
 8009704:	3301      	adds	r3, #1
 8009706:	72fb      	strb	r3, [r7, #11]
      break;
 8009708:	e021      	b.n	800974e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	7c1b      	ldrb	r3, [r3, #16]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d10d      	bne.n	800972e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800971a:	f107 0208 	add.w	r2, r7, #8
 800971e:	4610      	mov	r0, r2
 8009720:	4798      	blx	r3
 8009722:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	3301      	adds	r3, #1
 8009728:	2207      	movs	r2, #7
 800972a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800972c:	e00f      	b.n	800974e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800972e:	6839      	ldr	r1, [r7, #0]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fa10 	bl	8009b56 <USBD_CtlError>
        err++;
 8009736:	7afb      	ldrb	r3, [r7, #11]
 8009738:	3301      	adds	r3, #1
 800973a:	72fb      	strb	r3, [r7, #11]
      break;
 800973c:	e007      	b.n	800974e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800973e:	6839      	ldr	r1, [r7, #0]
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 fa08 	bl	8009b56 <USBD_CtlError>
      err++;
 8009746:	7afb      	ldrb	r3, [r7, #11]
 8009748:	3301      	adds	r3, #1
 800974a:	72fb      	strb	r3, [r7, #11]
      break;
 800974c:	bf00      	nop
  }

  if (err != 0U)
 800974e:	7afb      	ldrb	r3, [r7, #11]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d11e      	bne.n	8009792 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	88db      	ldrh	r3, [r3, #6]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d016      	beq.n	800978a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800975c:	893b      	ldrh	r3, [r7, #8]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00e      	beq.n	8009780 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	88da      	ldrh	r2, [r3, #6]
 8009766:	893b      	ldrh	r3, [r7, #8]
 8009768:	4293      	cmp	r3, r2
 800976a:	bf28      	it	cs
 800976c:	4613      	movcs	r3, r2
 800976e:	b29b      	uxth	r3, r3
 8009770:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009772:	893b      	ldrh	r3, [r7, #8]
 8009774:	461a      	mov	r2, r3
 8009776:	68f9      	ldr	r1, [r7, #12]
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 fa5d 	bl	8009c38 <USBD_CtlSendData>
 800977e:	e009      	b.n	8009794 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009780:	6839      	ldr	r1, [r7, #0]
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 f9e7 	bl	8009b56 <USBD_CtlError>
 8009788:	e004      	b.n	8009794 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 faae 	bl	8009cec <USBD_CtlSendStatus>
 8009790:	e000      	b.n	8009794 <USBD_GetDescriptor+0x2cc>
    return;
 8009792:	bf00      	nop
  }
}
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop

0800979c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	889b      	ldrh	r3, [r3, #4]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d131      	bne.n	8009812 <USBD_SetAddress+0x76>
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	88db      	ldrh	r3, [r3, #6]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d12d      	bne.n	8009812 <USBD_SetAddress+0x76>
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	885b      	ldrh	r3, [r3, #2]
 80097ba:	2b7f      	cmp	r3, #127	; 0x7f
 80097bc:	d829      	bhi.n	8009812 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	885b      	ldrh	r3, [r3, #2]
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2b03      	cmp	r3, #3
 80097d4:	d104      	bne.n	80097e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 f9bc 	bl	8009b56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097de:	e01d      	b.n	800981c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	7bfa      	ldrb	r2, [r7, #15]
 80097e4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
 80097ea:	4619      	mov	r1, r3
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 ff19 	bl	800a624 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 fa7a 	bl	8009cec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80097f8:	7bfb      	ldrb	r3, [r7, #15]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d004      	beq.n	8009808 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2202      	movs	r2, #2
 8009802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009806:	e009      	b.n	800981c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009810:	e004      	b.n	800981c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009812:	6839      	ldr	r1, [r7, #0]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 f99e 	bl	8009b56 <USBD_CtlError>
  }
}
 800981a:	bf00      	nop
 800981c:	bf00      	nop
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800982e:	2300      	movs	r3, #0
 8009830:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	885b      	ldrh	r3, [r3, #2]
 8009836:	b2da      	uxtb	r2, r3
 8009838:	4b4e      	ldr	r3, [pc, #312]	; (8009974 <USBD_SetConfig+0x150>)
 800983a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800983c:	4b4d      	ldr	r3, [pc, #308]	; (8009974 <USBD_SetConfig+0x150>)
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d905      	bls.n	8009850 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 f985 	bl	8009b56 <USBD_CtlError>
    return USBD_FAIL;
 800984c:	2303      	movs	r3, #3
 800984e:	e08c      	b.n	800996a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009856:	b2db      	uxtb	r3, r3
 8009858:	2b02      	cmp	r3, #2
 800985a:	d002      	beq.n	8009862 <USBD_SetConfig+0x3e>
 800985c:	2b03      	cmp	r3, #3
 800985e:	d029      	beq.n	80098b4 <USBD_SetConfig+0x90>
 8009860:	e075      	b.n	800994e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009862:	4b44      	ldr	r3, [pc, #272]	; (8009974 <USBD_SetConfig+0x150>)
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d020      	beq.n	80098ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800986a:	4b42      	ldr	r3, [pc, #264]	; (8009974 <USBD_SetConfig+0x150>)
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	461a      	mov	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009874:	4b3f      	ldr	r3, [pc, #252]	; (8009974 <USBD_SetConfig+0x150>)
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	4619      	mov	r1, r3
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f7fe ffe7 	bl	800884e <USBD_SetClassConfig>
 8009880:	4603      	mov	r3, r0
 8009882:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009884:	7bfb      	ldrb	r3, [r7, #15]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d008      	beq.n	800989c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800988a:	6839      	ldr	r1, [r7, #0]
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 f962 	bl	8009b56 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2202      	movs	r2, #2
 8009896:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800989a:	e065      	b.n	8009968 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 fa25 	bl	8009cec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2203      	movs	r2, #3
 80098a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80098aa:	e05d      	b.n	8009968 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fa1d 	bl	8009cec <USBD_CtlSendStatus>
      break;
 80098b2:	e059      	b.n	8009968 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80098b4:	4b2f      	ldr	r3, [pc, #188]	; (8009974 <USBD_SetConfig+0x150>)
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d112      	bne.n	80098e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2202      	movs	r2, #2
 80098c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80098c4:	4b2b      	ldr	r3, [pc, #172]	; (8009974 <USBD_SetConfig+0x150>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	461a      	mov	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80098ce:	4b29      	ldr	r3, [pc, #164]	; (8009974 <USBD_SetConfig+0x150>)
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	4619      	mov	r1, r3
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7fe ffd6 	bl	8008886 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fa06 	bl	8009cec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80098e0:	e042      	b.n	8009968 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80098e2:	4b24      	ldr	r3, [pc, #144]	; (8009974 <USBD_SetConfig+0x150>)
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	461a      	mov	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d02a      	beq.n	8009946 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7fe ffc4 	bl	8008886 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80098fe:	4b1d      	ldr	r3, [pc, #116]	; (8009974 <USBD_SetConfig+0x150>)
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	461a      	mov	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009908:	4b1a      	ldr	r3, [pc, #104]	; (8009974 <USBD_SetConfig+0x150>)
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	4619      	mov	r1, r3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f7fe ff9d 	bl	800884e <USBD_SetClassConfig>
 8009914:	4603      	mov	r3, r0
 8009916:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009918:	7bfb      	ldrb	r3, [r7, #15]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00f      	beq.n	800993e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f918 	bl	8009b56 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	b2db      	uxtb	r3, r3
 800992c:	4619      	mov	r1, r3
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f7fe ffa9 	bl	8008886 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2202      	movs	r2, #2
 8009938:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800993c:	e014      	b.n	8009968 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f9d4 	bl	8009cec <USBD_CtlSendStatus>
      break;
 8009944:	e010      	b.n	8009968 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f9d0 	bl	8009cec <USBD_CtlSendStatus>
      break;
 800994c:	e00c      	b.n	8009968 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800994e:	6839      	ldr	r1, [r7, #0]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f900 	bl	8009b56 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009956:	4b07      	ldr	r3, [pc, #28]	; (8009974 <USBD_SetConfig+0x150>)
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	4619      	mov	r1, r3
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f7fe ff92 	bl	8008886 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009962:	2303      	movs	r3, #3
 8009964:	73fb      	strb	r3, [r7, #15]
      break;
 8009966:	bf00      	nop
  }

  return ret;
 8009968:	7bfb      	ldrb	r3, [r7, #15]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	20000510 	.word	0x20000510

08009978 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	88db      	ldrh	r3, [r3, #6]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d004      	beq.n	8009994 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f8e2 	bl	8009b56 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009992:	e023      	b.n	80099dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800999a:	b2db      	uxtb	r3, r3
 800999c:	2b02      	cmp	r3, #2
 800999e:	dc02      	bgt.n	80099a6 <USBD_GetConfig+0x2e>
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	dc03      	bgt.n	80099ac <USBD_GetConfig+0x34>
 80099a4:	e015      	b.n	80099d2 <USBD_GetConfig+0x5a>
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	d00b      	beq.n	80099c2 <USBD_GetConfig+0x4a>
 80099aa:	e012      	b.n	80099d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	3308      	adds	r3, #8
 80099b6:	2201      	movs	r2, #1
 80099b8:	4619      	mov	r1, r3
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 f93c 	bl	8009c38 <USBD_CtlSendData>
        break;
 80099c0:	e00c      	b.n	80099dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	3304      	adds	r3, #4
 80099c6:	2201      	movs	r2, #1
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 f934 	bl	8009c38 <USBD_CtlSendData>
        break;
 80099d0:	e004      	b.n	80099dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 f8be 	bl	8009b56 <USBD_CtlError>
        break;
 80099da:	bf00      	nop
}
 80099dc:	bf00      	nop
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	3b01      	subs	r3, #1
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d81e      	bhi.n	8009a3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	88db      	ldrh	r3, [r3, #6]
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d004      	beq.n	8009a0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009a04:	6839      	ldr	r1, [r7, #0]
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f8a5 	bl	8009b56 <USBD_CtlError>
        break;
 8009a0c:	e01a      	b.n	8009a44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2201      	movs	r2, #1
 8009a12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d005      	beq.n	8009a2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	f043 0202 	orr.w	r2, r3, #2
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	330c      	adds	r3, #12
 8009a2e:	2202      	movs	r2, #2
 8009a30:	4619      	mov	r1, r3
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f900 	bl	8009c38 <USBD_CtlSendData>
      break;
 8009a38:	e004      	b.n	8009a44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009a3a:	6839      	ldr	r1, [r7, #0]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 f88a 	bl	8009b56 <USBD_CtlError>
      break;
 8009a42:	bf00      	nop
  }
}
 8009a44:	bf00      	nop
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	885b      	ldrh	r3, [r3, #2]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d107      	bne.n	8009a6e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2201      	movs	r2, #1
 8009a62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f940 	bl	8009cec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009a6c:	e013      	b.n	8009a96 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	885b      	ldrh	r3, [r3, #2]
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d10b      	bne.n	8009a8e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	889b      	ldrh	r3, [r3, #4]
 8009a7a:	0a1b      	lsrs	r3, r3, #8
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	b2da      	uxtb	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f930 	bl	8009cec <USBD_CtlSendStatus>
}
 8009a8c:	e003      	b.n	8009a96 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009a8e:	6839      	ldr	r1, [r7, #0]
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 f860 	bl	8009b56 <USBD_CtlError>
}
 8009a96:	bf00      	nop
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b082      	sub	sp, #8
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d80b      	bhi.n	8009ace <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	885b      	ldrh	r3, [r3, #2]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d10c      	bne.n	8009ad8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f910 	bl	8009cec <USBD_CtlSendStatus>
      }
      break;
 8009acc:	e004      	b.n	8009ad8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f840 	bl	8009b56 <USBD_CtlError>
      break;
 8009ad6:	e000      	b.n	8009ada <USBD_ClrFeature+0x3c>
      break;
 8009ad8:	bf00      	nop
  }
}
 8009ada:	bf00      	nop
 8009adc:	3708      	adds	r7, #8
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b084      	sub	sp, #16
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	781a      	ldrb	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	3301      	adds	r3, #1
 8009afc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	781a      	ldrb	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f7ff fa41 	bl	8008f94 <SWAPBYTE>
 8009b12:	4603      	mov	r3, r0
 8009b14:	461a      	mov	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	3301      	adds	r3, #1
 8009b24:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f7ff fa34 	bl	8008f94 <SWAPBYTE>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	461a      	mov	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	3301      	adds	r3, #1
 8009b38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f7ff fa27 	bl	8008f94 <SWAPBYTE>
 8009b46:	4603      	mov	r3, r0
 8009b48:	461a      	mov	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	80da      	strh	r2, [r3, #6]
}
 8009b4e:	bf00      	nop
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b082      	sub	sp, #8
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
 8009b5e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b60:	2180      	movs	r1, #128	; 0x80
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fcf4 	bl	800a550 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009b68:	2100      	movs	r1, #0
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 fcf0 	bl	800a550 <USBD_LL_StallEP>
}
 8009b70:	bf00      	nop
 8009b72:	3708      	adds	r7, #8
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b086      	sub	sp, #24
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b84:	2300      	movs	r3, #0
 8009b86:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d036      	beq.n	8009bfc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009b92:	6938      	ldr	r0, [r7, #16]
 8009b94:	f000 f836 	bl	8009c04 <USBD_GetLen>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	005b      	lsls	r3, r3, #1
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009ba6:	7dfb      	ldrb	r3, [r7, #23]
 8009ba8:	68ba      	ldr	r2, [r7, #8]
 8009baa:	4413      	add	r3, r2
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	7812      	ldrb	r2, [r2, #0]
 8009bb0:	701a      	strb	r2, [r3, #0]
  idx++;
 8009bb2:	7dfb      	ldrb	r3, [r7, #23]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009bb8:	7dfb      	ldrb	r3, [r7, #23]
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	2203      	movs	r2, #3
 8009bc0:	701a      	strb	r2, [r3, #0]
  idx++;
 8009bc2:	7dfb      	ldrb	r3, [r7, #23]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009bc8:	e013      	b.n	8009bf2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009bca:	7dfb      	ldrb	r3, [r7, #23]
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	4413      	add	r3, r2
 8009bd0:	693a      	ldr	r2, [r7, #16]
 8009bd2:	7812      	ldrb	r2, [r2, #0]
 8009bd4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	613b      	str	r3, [r7, #16]
    idx++;
 8009bdc:	7dfb      	ldrb	r3, [r7, #23]
 8009bde:	3301      	adds	r3, #1
 8009be0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009be2:	7dfb      	ldrb	r3, [r7, #23]
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	4413      	add	r3, r2
 8009be8:	2200      	movs	r2, #0
 8009bea:	701a      	strb	r2, [r3, #0]
    idx++;
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d1e7      	bne.n	8009bca <USBD_GetString+0x52>
 8009bfa:	e000      	b.n	8009bfe <USBD_GetString+0x86>
    return;
 8009bfc:	bf00      	nop
  }
}
 8009bfe:	3718      	adds	r7, #24
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009c14:	e005      	b.n	8009c22 <USBD_GetLen+0x1e>
  {
    len++;
 8009c16:	7bfb      	ldrb	r3, [r7, #15]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1f5      	bne.n	8009c16 <USBD_GetLen+0x12>
  }

  return len;
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3714      	adds	r7, #20
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2202      	movs	r2, #2
 8009c48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f000 fcff 	bl	800a662 <USBD_LL_Transmit>

  return USBD_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b084      	sub	sp, #16
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	60f8      	str	r0, [r7, #12]
 8009c76:	60b9      	str	r1, [r7, #8]
 8009c78:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	68ba      	ldr	r2, [r7, #8]
 8009c7e:	2100      	movs	r1, #0
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f000 fcee 	bl	800a662 <USBD_LL_Transmit>

  return USBD_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2203      	movs	r2, #3
 8009ca0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	68ba      	ldr	r2, [r7, #8]
 8009cb8:	2100      	movs	r1, #0
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	f000 fcf2 	bl	800a6a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b084      	sub	sp, #16
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	60f8      	str	r0, [r7, #12]
 8009cd2:	60b9      	str	r1, [r7, #8]
 8009cd4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	2100      	movs	r1, #0
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f000 fce1 	bl	800a6a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2204      	movs	r2, #4
 8009cf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	2200      	movs	r2, #0
 8009d00:	2100      	movs	r1, #0
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fcad 	bl	800a662 <USBD_LL_Transmit>

  return USBD_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b082      	sub	sp, #8
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2205      	movs	r2, #5
 8009d1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d22:	2300      	movs	r3, #0
 8009d24:	2200      	movs	r2, #0
 8009d26:	2100      	movs	r1, #0
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fcbb 	bl	800a6a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3708      	adds	r7, #8
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	4912      	ldr	r1, [pc, #72]	; (8009d88 <MX_USB_DEVICE_Init+0x50>)
 8009d40:	4812      	ldr	r0, [pc, #72]	; (8009d8c <MX_USB_DEVICE_Init+0x54>)
 8009d42:	f7fe fd07 	bl	8008754 <USBD_Init>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d4c:	f7f7 fcfa 	bl	8001744 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009d50:	490f      	ldr	r1, [pc, #60]	; (8009d90 <MX_USB_DEVICE_Init+0x58>)
 8009d52:	480e      	ldr	r0, [pc, #56]	; (8009d8c <MX_USB_DEVICE_Init+0x54>)
 8009d54:	f7fe fd2e 	bl	80087b4 <USBD_RegisterClass>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d001      	beq.n	8009d62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009d5e:	f7f7 fcf1 	bl	8001744 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009d62:	490c      	ldr	r1, [pc, #48]	; (8009d94 <MX_USB_DEVICE_Init+0x5c>)
 8009d64:	4809      	ldr	r0, [pc, #36]	; (8009d8c <MX_USB_DEVICE_Init+0x54>)
 8009d66:	f7fe fc1f 	bl	80085a8 <USBD_CDC_RegisterInterface>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d001      	beq.n	8009d74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009d70:	f7f7 fce8 	bl	8001744 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009d74:	4805      	ldr	r0, [pc, #20]	; (8009d8c <MX_USB_DEVICE_Init+0x54>)
 8009d76:	f7fe fd53 	bl	8008820 <USBD_Start>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d001      	beq.n	8009d84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009d80:	f7f7 fce0 	bl	8001744 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009d84:	bf00      	nop
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	200000b4 	.word	0x200000b4
 8009d8c:	20000514 	.word	0x20000514
 8009d90:	20000018 	.word	0x20000018
 8009d94:	200000a0 	.word	0x200000a0

08009d98 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	4905      	ldr	r1, [pc, #20]	; (8009db4 <CDC_Init_FS+0x1c>)
 8009da0:	4805      	ldr	r0, [pc, #20]	; (8009db8 <CDC_Init_FS+0x20>)
 8009da2:	f7fe fc1b 	bl	80085dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009da6:	4905      	ldr	r1, [pc, #20]	; (8009dbc <CDC_Init_FS+0x24>)
 8009da8:	4803      	ldr	r0, [pc, #12]	; (8009db8 <CDC_Init_FS+0x20>)
 8009daa:	f7fe fc39 	bl	8008620 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009dae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	20000ff0 	.word	0x20000ff0
 8009db8:	20000514 	.word	0x20000514
 8009dbc:	200007f0 	.word	0x200007f0

08009dc0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009dc4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	6039      	str	r1, [r7, #0]
 8009dda:	71fb      	strb	r3, [r7, #7]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009de0:	79fb      	ldrb	r3, [r7, #7]
 8009de2:	2b23      	cmp	r3, #35	; 0x23
 8009de4:	d85c      	bhi.n	8009ea0 <CDC_Control_FS+0xd0>
 8009de6:	a201      	add	r2, pc, #4	; (adr r2, 8009dec <CDC_Control_FS+0x1c>)
 8009de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dec:	08009ea1 	.word	0x08009ea1
 8009df0:	08009ea1 	.word	0x08009ea1
 8009df4:	08009ea1 	.word	0x08009ea1
 8009df8:	08009ea1 	.word	0x08009ea1
 8009dfc:	08009ea1 	.word	0x08009ea1
 8009e00:	08009ea1 	.word	0x08009ea1
 8009e04:	08009ea1 	.word	0x08009ea1
 8009e08:	08009ea1 	.word	0x08009ea1
 8009e0c:	08009ea1 	.word	0x08009ea1
 8009e10:	08009ea1 	.word	0x08009ea1
 8009e14:	08009ea1 	.word	0x08009ea1
 8009e18:	08009ea1 	.word	0x08009ea1
 8009e1c:	08009ea1 	.word	0x08009ea1
 8009e20:	08009ea1 	.word	0x08009ea1
 8009e24:	08009ea1 	.word	0x08009ea1
 8009e28:	08009ea1 	.word	0x08009ea1
 8009e2c:	08009ea1 	.word	0x08009ea1
 8009e30:	08009ea1 	.word	0x08009ea1
 8009e34:	08009ea1 	.word	0x08009ea1
 8009e38:	08009ea1 	.word	0x08009ea1
 8009e3c:	08009ea1 	.word	0x08009ea1
 8009e40:	08009ea1 	.word	0x08009ea1
 8009e44:	08009ea1 	.word	0x08009ea1
 8009e48:	08009ea1 	.word	0x08009ea1
 8009e4c:	08009ea1 	.word	0x08009ea1
 8009e50:	08009ea1 	.word	0x08009ea1
 8009e54:	08009ea1 	.word	0x08009ea1
 8009e58:	08009ea1 	.word	0x08009ea1
 8009e5c:	08009ea1 	.word	0x08009ea1
 8009e60:	08009ea1 	.word	0x08009ea1
 8009e64:	08009ea1 	.word	0x08009ea1
 8009e68:	08009ea1 	.word	0x08009ea1
 8009e6c:	08009e7d 	.word	0x08009e7d
 8009e70:	08009e8f 	.word	0x08009e8f
 8009e74:	08009ea1 	.word	0x08009ea1
 8009e78:	08009ea1 	.word	0x08009ea1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8009e7c:	4b0c      	ldr	r3, [pc, #48]	; (8009eb0 <CDC_Control_FS+0xe0>)
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	6810      	ldr	r0, [r2, #0]
 8009e82:	6018      	str	r0, [r3, #0]
 8009e84:	8891      	ldrh	r1, [r2, #4]
 8009e86:	7992      	ldrb	r2, [r2, #6]
 8009e88:	8099      	strh	r1, [r3, #4]
 8009e8a:	719a      	strb	r2, [r3, #6]
    break;
 8009e8c:	e009      	b.n	8009ea2 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	4a07      	ldr	r2, [pc, #28]	; (8009eb0 <CDC_Control_FS+0xe0>)
 8009e92:	6810      	ldr	r0, [r2, #0]
 8009e94:	6018      	str	r0, [r3, #0]
 8009e96:	8891      	ldrh	r1, [r2, #4]
 8009e98:	7992      	ldrb	r2, [r2, #6]
 8009e9a:	8099      	strh	r1, [r3, #4]
 8009e9c:	719a      	strb	r2, [r3, #6]
    break;
 8009e9e:	e000      	b.n	8009ea2 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009ea0:	bf00      	nop
  }

  return (USBD_OK);
 8009ea2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr
 8009eb0:	20000098 	.word	0x20000098

08009eb4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009ebe:	6879      	ldr	r1, [r7, #4]
 8009ec0:	4805      	ldr	r0, [pc, #20]	; (8009ed8 <CDC_Receive_FS+0x24>)
 8009ec2:	f7fe fbad 	bl	8008620 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009ec6:	4804      	ldr	r0, [pc, #16]	; (8009ed8 <CDC_Receive_FS+0x24>)
 8009ec8:	f7fe fc0e 	bl	80086e8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009ecc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	20000514 	.word	0x20000514

08009edc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009eec:	4b0d      	ldr	r3, [pc, #52]	; (8009f24 <CDC_Transmit_FS+0x48>)
 8009eee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ef2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d001      	beq.n	8009f02 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009efe:	2301      	movs	r3, #1
 8009f00:	e00b      	b.n	8009f1a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009f02:	887b      	ldrh	r3, [r7, #2]
 8009f04:	461a      	mov	r2, r3
 8009f06:	6879      	ldr	r1, [r7, #4]
 8009f08:	4806      	ldr	r0, [pc, #24]	; (8009f24 <CDC_Transmit_FS+0x48>)
 8009f0a:	f7fe fb67 	bl	80085dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009f0e:	4805      	ldr	r0, [pc, #20]	; (8009f24 <CDC_Transmit_FS+0x48>)
 8009f10:	f7fe fba4 	bl	800865c <USBD_CDC_TransmitPacket>
 8009f14:	4603      	mov	r3, r0
 8009f16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	20000514 	.word	0x20000514

08009f28 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b087      	sub	sp, #28
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	4613      	mov	r3, r2
 8009f34:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009f36:	2300      	movs	r3, #0
 8009f38:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009f3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	371c      	adds	r7, #28
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr
	...

08009f4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	4603      	mov	r3, r0
 8009f54:	6039      	str	r1, [r7, #0]
 8009f56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	2212      	movs	r2, #18
 8009f5c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009f5e:	4b03      	ldr	r3, [pc, #12]	; (8009f6c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr
 8009f6c:	200000d0 	.word	0x200000d0

08009f70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	4603      	mov	r3, r0
 8009f78:	6039      	str	r1, [r7, #0]
 8009f7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	2204      	movs	r2, #4
 8009f80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009f82:	4b03      	ldr	r3, [pc, #12]	; (8009f90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr
 8009f90:	200000e4 	.word	0x200000e4

08009f94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	6039      	str	r1, [r7, #0]
 8009f9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fa0:	79fb      	ldrb	r3, [r7, #7]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d105      	bne.n	8009fb2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009fa6:	683a      	ldr	r2, [r7, #0]
 8009fa8:	4907      	ldr	r1, [pc, #28]	; (8009fc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009faa:	4808      	ldr	r0, [pc, #32]	; (8009fcc <USBD_FS_ProductStrDescriptor+0x38>)
 8009fac:	f7ff fde4 	bl	8009b78 <USBD_GetString>
 8009fb0:	e004      	b.n	8009fbc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009fb2:	683a      	ldr	r2, [r7, #0]
 8009fb4:	4904      	ldr	r1, [pc, #16]	; (8009fc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009fb6:	4805      	ldr	r0, [pc, #20]	; (8009fcc <USBD_FS_ProductStrDescriptor+0x38>)
 8009fb8:	f7ff fdde 	bl	8009b78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fbc:	4b02      	ldr	r3, [pc, #8]	; (8009fc8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3708      	adds	r7, #8
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	200017f0 	.word	0x200017f0
 8009fcc:	0800d60c 	.word	0x0800d60c

08009fd0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	6039      	str	r1, [r7, #0]
 8009fda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009fdc:	683a      	ldr	r2, [r7, #0]
 8009fde:	4904      	ldr	r1, [pc, #16]	; (8009ff0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009fe0:	4804      	ldr	r0, [pc, #16]	; (8009ff4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009fe2:	f7ff fdc9 	bl	8009b78 <USBD_GetString>
  return USBD_StrDesc;
 8009fe6:	4b02      	ldr	r3, [pc, #8]	; (8009ff0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	200017f0 	.word	0x200017f0
 8009ff4:	0800d624 	.word	0x0800d624

08009ff8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	4603      	mov	r3, r0
 800a000:	6039      	str	r1, [r7, #0]
 800a002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	221a      	movs	r2, #26
 800a008:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a00a:	f000 f843 	bl	800a094 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a00e:	4b02      	ldr	r3, [pc, #8]	; (800a018 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a010:	4618      	mov	r0, r3
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	200000e8 	.word	0x200000e8

0800a01c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
 800a022:	4603      	mov	r3, r0
 800a024:	6039      	str	r1, [r7, #0]
 800a026:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a028:	79fb      	ldrb	r3, [r7, #7]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d105      	bne.n	800a03a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a02e:	683a      	ldr	r2, [r7, #0]
 800a030:	4907      	ldr	r1, [pc, #28]	; (800a050 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a032:	4808      	ldr	r0, [pc, #32]	; (800a054 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a034:	f7ff fda0 	bl	8009b78 <USBD_GetString>
 800a038:	e004      	b.n	800a044 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a03a:	683a      	ldr	r2, [r7, #0]
 800a03c:	4904      	ldr	r1, [pc, #16]	; (800a050 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a03e:	4805      	ldr	r0, [pc, #20]	; (800a054 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a040:	f7ff fd9a 	bl	8009b78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a044:	4b02      	ldr	r3, [pc, #8]	; (800a050 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a046:	4618      	mov	r0, r3
 800a048:	3708      	adds	r7, #8
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	200017f0 	.word	0x200017f0
 800a054:	0800d638 	.word	0x0800d638

0800a058 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	4603      	mov	r3, r0
 800a060:	6039      	str	r1, [r7, #0]
 800a062:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a064:	79fb      	ldrb	r3, [r7, #7]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d105      	bne.n	800a076 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a06a:	683a      	ldr	r2, [r7, #0]
 800a06c:	4907      	ldr	r1, [pc, #28]	; (800a08c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a06e:	4808      	ldr	r0, [pc, #32]	; (800a090 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a070:	f7ff fd82 	bl	8009b78 <USBD_GetString>
 800a074:	e004      	b.n	800a080 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a076:	683a      	ldr	r2, [r7, #0]
 800a078:	4904      	ldr	r1, [pc, #16]	; (800a08c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a07a:	4805      	ldr	r0, [pc, #20]	; (800a090 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a07c:	f7ff fd7c 	bl	8009b78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a080:	4b02      	ldr	r3, [pc, #8]	; (800a08c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a082:	4618      	mov	r0, r3
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	200017f0 	.word	0x200017f0
 800a090:	0800d644 	.word	0x0800d644

0800a094 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a09a:	4b0f      	ldr	r3, [pc, #60]	; (800a0d8 <Get_SerialNum+0x44>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a0a0:	4b0e      	ldr	r3, [pc, #56]	; (800a0dc <Get_SerialNum+0x48>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a0a6:	4b0e      	ldr	r3, [pc, #56]	; (800a0e0 <Get_SerialNum+0x4c>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d009      	beq.n	800a0ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a0ba:	2208      	movs	r2, #8
 800a0bc:	4909      	ldr	r1, [pc, #36]	; (800a0e4 <Get_SerialNum+0x50>)
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f000 f814 	bl	800a0ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a0c4:	2204      	movs	r2, #4
 800a0c6:	4908      	ldr	r1, [pc, #32]	; (800a0e8 <Get_SerialNum+0x54>)
 800a0c8:	68b8      	ldr	r0, [r7, #8]
 800a0ca:	f000 f80f 	bl	800a0ec <IntToUnicode>
  }
}
 800a0ce:	bf00      	nop
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	1fff7a10 	.word	0x1fff7a10
 800a0dc:	1fff7a14 	.word	0x1fff7a14
 800a0e0:	1fff7a18 	.word	0x1fff7a18
 800a0e4:	200000ea 	.word	0x200000ea
 800a0e8:	200000fa 	.word	0x200000fa

0800a0ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b087      	sub	sp, #28
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a0fe:	2300      	movs	r3, #0
 800a100:	75fb      	strb	r3, [r7, #23]
 800a102:	e027      	b.n	800a154 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	0f1b      	lsrs	r3, r3, #28
 800a108:	2b09      	cmp	r3, #9
 800a10a:	d80b      	bhi.n	800a124 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	0f1b      	lsrs	r3, r3, #28
 800a110:	b2da      	uxtb	r2, r3
 800a112:	7dfb      	ldrb	r3, [r7, #23]
 800a114:	005b      	lsls	r3, r3, #1
 800a116:	4619      	mov	r1, r3
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	440b      	add	r3, r1
 800a11c:	3230      	adds	r2, #48	; 0x30
 800a11e:	b2d2      	uxtb	r2, r2
 800a120:	701a      	strb	r2, [r3, #0]
 800a122:	e00a      	b.n	800a13a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	0f1b      	lsrs	r3, r3, #28
 800a128:	b2da      	uxtb	r2, r3
 800a12a:	7dfb      	ldrb	r3, [r7, #23]
 800a12c:	005b      	lsls	r3, r3, #1
 800a12e:	4619      	mov	r1, r3
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	440b      	add	r3, r1
 800a134:	3237      	adds	r2, #55	; 0x37
 800a136:	b2d2      	uxtb	r2, r2
 800a138:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	011b      	lsls	r3, r3, #4
 800a13e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a140:	7dfb      	ldrb	r3, [r7, #23]
 800a142:	005b      	lsls	r3, r3, #1
 800a144:	3301      	adds	r3, #1
 800a146:	68ba      	ldr	r2, [r7, #8]
 800a148:	4413      	add	r3, r2
 800a14a:	2200      	movs	r2, #0
 800a14c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a14e:	7dfb      	ldrb	r3, [r7, #23]
 800a150:	3301      	adds	r3, #1
 800a152:	75fb      	strb	r3, [r7, #23]
 800a154:	7dfa      	ldrb	r2, [r7, #23]
 800a156:	79fb      	ldrb	r3, [r7, #7]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d3d3      	bcc.n	800a104 <IntToUnicode+0x18>
  }
}
 800a15c:	bf00      	nop
 800a15e:	bf00      	nop
 800a160:	371c      	adds	r7, #28
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
	...

0800a16c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b08a      	sub	sp, #40	; 0x28
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a174:	f107 0314 	add.w	r3, r7, #20
 800a178:	2200      	movs	r2, #0
 800a17a:	601a      	str	r2, [r3, #0]
 800a17c:	605a      	str	r2, [r3, #4]
 800a17e:	609a      	str	r2, [r3, #8]
 800a180:	60da      	str	r2, [r3, #12]
 800a182:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a18c:	d13a      	bne.n	800a204 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a18e:	2300      	movs	r3, #0
 800a190:	613b      	str	r3, [r7, #16]
 800a192:	4b1e      	ldr	r3, [pc, #120]	; (800a20c <HAL_PCD_MspInit+0xa0>)
 800a194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a196:	4a1d      	ldr	r2, [pc, #116]	; (800a20c <HAL_PCD_MspInit+0xa0>)
 800a198:	f043 0301 	orr.w	r3, r3, #1
 800a19c:	6313      	str	r3, [r2, #48]	; 0x30
 800a19e:	4b1b      	ldr	r3, [pc, #108]	; (800a20c <HAL_PCD_MspInit+0xa0>)
 800a1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	613b      	str	r3, [r7, #16]
 800a1a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a1aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a1ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a1bc:	230a      	movs	r3, #10
 800a1be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1c0:	f107 0314 	add.w	r3, r7, #20
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	4812      	ldr	r0, [pc, #72]	; (800a210 <HAL_PCD_MspInit+0xa4>)
 800a1c8:	f7f7 ffe2 	bl	8002190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a1cc:	4b0f      	ldr	r3, [pc, #60]	; (800a20c <HAL_PCD_MspInit+0xa0>)
 800a1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d0:	4a0e      	ldr	r2, [pc, #56]	; (800a20c <HAL_PCD_MspInit+0xa0>)
 800a1d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d6:	6353      	str	r3, [r2, #52]	; 0x34
 800a1d8:	2300      	movs	r3, #0
 800a1da:	60fb      	str	r3, [r7, #12]
 800a1dc:	4b0b      	ldr	r3, [pc, #44]	; (800a20c <HAL_PCD_MspInit+0xa0>)
 800a1de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1e0:	4a0a      	ldr	r2, [pc, #40]	; (800a20c <HAL_PCD_MspInit+0xa0>)
 800a1e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a1e6:	6453      	str	r3, [r2, #68]	; 0x44
 800a1e8:	4b08      	ldr	r3, [pc, #32]	; (800a20c <HAL_PCD_MspInit+0xa0>)
 800a1ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1f0:	60fb      	str	r3, [r7, #12]
 800a1f2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	2043      	movs	r0, #67	; 0x43
 800a1fa:	f7f7 ff92 	bl	8002122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a1fe:	2043      	movs	r0, #67	; 0x43
 800a200:	f7f7 ffab 	bl	800215a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a204:	bf00      	nop
 800a206:	3728      	adds	r7, #40	; 0x28
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	40023800 	.word	0x40023800
 800a210:	40020000 	.word	0x40020000

0800a214 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a228:	4619      	mov	r1, r3
 800a22a:	4610      	mov	r0, r2
 800a22c:	f7fe fb45 	bl	80088ba <USBD_LL_SetupStage>
}
 800a230:	bf00      	nop
 800a232:	3708      	adds	r7, #8
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	460b      	mov	r3, r1
 800a242:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a24a:	78fa      	ldrb	r2, [r7, #3]
 800a24c:	6879      	ldr	r1, [r7, #4]
 800a24e:	4613      	mov	r3, r2
 800a250:	00db      	lsls	r3, r3, #3
 800a252:	4413      	add	r3, r2
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	440b      	add	r3, r1
 800a258:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	78fb      	ldrb	r3, [r7, #3]
 800a260:	4619      	mov	r1, r3
 800a262:	f7fe fb7f 	bl	8008964 <USBD_LL_DataOutStage>
}
 800a266:	bf00      	nop
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b082      	sub	sp, #8
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
 800a276:	460b      	mov	r3, r1
 800a278:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a280:	78fa      	ldrb	r2, [r7, #3]
 800a282:	6879      	ldr	r1, [r7, #4]
 800a284:	4613      	mov	r3, r2
 800a286:	00db      	lsls	r3, r3, #3
 800a288:	4413      	add	r3, r2
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	440b      	add	r3, r1
 800a28e:	334c      	adds	r3, #76	; 0x4c
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	78fb      	ldrb	r3, [r7, #3]
 800a294:	4619      	mov	r1, r3
 800a296:	f7fe fc18 	bl	8008aca <USBD_LL_DataInStage>
}
 800a29a:	bf00      	nop
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b082      	sub	sp, #8
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7fe fd4c 	bl	8008d4e <USBD_LL_SOF>
}
 800a2b6:	bf00      	nop
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b084      	sub	sp, #16
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d102      	bne.n	800a2d8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	73fb      	strb	r3, [r7, #15]
 800a2d6:	e008      	b.n	800a2ea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	d102      	bne.n	800a2e6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	73fb      	strb	r3, [r7, #15]
 800a2e4:	e001      	b.n	800a2ea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a2e6:	f7f7 fa2d 	bl	8001744 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a2f0:	7bfa      	ldrb	r2, [r7, #15]
 800a2f2:	4611      	mov	r1, r2
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7fe fcec 	bl	8008cd2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a300:	4618      	mov	r0, r3
 800a302:	f7fe fc94 	bl	8008c2e <USBD_LL_Reset>
}
 800a306:	bf00      	nop
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
	...

0800a310 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fe fce7 	bl	8008cf2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	6812      	ldr	r2, [r2, #0]
 800a332:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a336:	f043 0301 	orr.w	r3, r3, #1
 800a33a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a1b      	ldr	r3, [r3, #32]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d005      	beq.n	800a350 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a344:	4b04      	ldr	r3, [pc, #16]	; (800a358 <HAL_PCD_SuspendCallback+0x48>)
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	4a03      	ldr	r2, [pc, #12]	; (800a358 <HAL_PCD_SuspendCallback+0x48>)
 800a34a:	f043 0306 	orr.w	r3, r3, #6
 800a34e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a350:	bf00      	nop
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	e000ed00 	.word	0xe000ed00

0800a35c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7fe fcd7 	bl	8008d1e <USBD_LL_Resume>
}
 800a370:	bf00      	nop
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	460b      	mov	r3, r1
 800a382:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a38a:	78fa      	ldrb	r2, [r7, #3]
 800a38c:	4611      	mov	r1, r2
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fe fd2f 	bl	8008df2 <USBD_LL_IsoOUTIncomplete>
}
 800a394:	bf00      	nop
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a3ae:	78fa      	ldrb	r2, [r7, #3]
 800a3b0:	4611      	mov	r1, r2
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7fe fceb 	bl	8008d8e <USBD_LL_IsoINIncomplete>
}
 800a3b8:	bf00      	nop
 800a3ba:	3708      	adds	r7, #8
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7fe fd41 	bl	8008e56 <USBD_LL_DevConnected>
}
 800a3d4:	bf00      	nop
 800a3d6:	3708      	adds	r7, #8
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7fe fd3e 	bl	8008e6c <USBD_LL_DevDisconnected>
}
 800a3f0:	bf00      	nop
 800a3f2:	3708      	adds	r7, #8
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d13c      	bne.n	800a482 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a408:	4a20      	ldr	r2, [pc, #128]	; (800a48c <USBD_LL_Init+0x94>)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a1e      	ldr	r2, [pc, #120]	; (800a48c <USBD_LL_Init+0x94>)
 800a414:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a418:	4b1c      	ldr	r3, [pc, #112]	; (800a48c <USBD_LL_Init+0x94>)
 800a41a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a41e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a420:	4b1a      	ldr	r3, [pc, #104]	; (800a48c <USBD_LL_Init+0x94>)
 800a422:	2204      	movs	r2, #4
 800a424:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a426:	4b19      	ldr	r3, [pc, #100]	; (800a48c <USBD_LL_Init+0x94>)
 800a428:	2202      	movs	r2, #2
 800a42a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a42c:	4b17      	ldr	r3, [pc, #92]	; (800a48c <USBD_LL_Init+0x94>)
 800a42e:	2200      	movs	r2, #0
 800a430:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a432:	4b16      	ldr	r3, [pc, #88]	; (800a48c <USBD_LL_Init+0x94>)
 800a434:	2202      	movs	r2, #2
 800a436:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a438:	4b14      	ldr	r3, [pc, #80]	; (800a48c <USBD_LL_Init+0x94>)
 800a43a:	2200      	movs	r2, #0
 800a43c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a43e:	4b13      	ldr	r3, [pc, #76]	; (800a48c <USBD_LL_Init+0x94>)
 800a440:	2200      	movs	r2, #0
 800a442:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a444:	4b11      	ldr	r3, [pc, #68]	; (800a48c <USBD_LL_Init+0x94>)
 800a446:	2200      	movs	r2, #0
 800a448:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a44a:	4b10      	ldr	r3, [pc, #64]	; (800a48c <USBD_LL_Init+0x94>)
 800a44c:	2200      	movs	r2, #0
 800a44e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a450:	4b0e      	ldr	r3, [pc, #56]	; (800a48c <USBD_LL_Init+0x94>)
 800a452:	2200      	movs	r2, #0
 800a454:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a456:	480d      	ldr	r0, [pc, #52]	; (800a48c <USBD_LL_Init+0x94>)
 800a458:	f7f9 f80f 	bl	800347a <HAL_PCD_Init>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d001      	beq.n	800a466 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a462:	f7f7 f96f 	bl	8001744 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a466:	2180      	movs	r1, #128	; 0x80
 800a468:	4808      	ldr	r0, [pc, #32]	; (800a48c <USBD_LL_Init+0x94>)
 800a46a:	f7fa fa66 	bl	800493a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a46e:	2240      	movs	r2, #64	; 0x40
 800a470:	2100      	movs	r1, #0
 800a472:	4806      	ldr	r0, [pc, #24]	; (800a48c <USBD_LL_Init+0x94>)
 800a474:	f7fa fa1a 	bl	80048ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a478:	2280      	movs	r2, #128	; 0x80
 800a47a:	2101      	movs	r1, #1
 800a47c:	4803      	ldr	r0, [pc, #12]	; (800a48c <USBD_LL_Init+0x94>)
 800a47e:	f7fa fa15 	bl	80048ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	200019f0 	.word	0x200019f0

0800a490 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a498:	2300      	movs	r3, #0
 800a49a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a49c:	2300      	movs	r3, #0
 800a49e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7f9 f904 	bl	80036b4 <HAL_PCD_Start>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4b0:	7bfb      	ldrb	r3, [r7, #15]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f000 f942 	bl	800a73c <USBD_Get_USB_Status>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b084      	sub	sp, #16
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	4608      	mov	r0, r1
 800a4d0:	4611      	mov	r1, r2
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	70fb      	strb	r3, [r7, #3]
 800a4d8:	460b      	mov	r3, r1
 800a4da:	70bb      	strb	r3, [r7, #2]
 800a4dc:	4613      	mov	r3, r2
 800a4de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a4ee:	78bb      	ldrb	r3, [r7, #2]
 800a4f0:	883a      	ldrh	r2, [r7, #0]
 800a4f2:	78f9      	ldrb	r1, [r7, #3]
 800a4f4:	f7f9 fdd5 	bl	80040a2 <HAL_PCD_EP_Open>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4fc:	7bfb      	ldrb	r3, [r7, #15]
 800a4fe:	4618      	mov	r0, r3
 800a500:	f000 f91c 	bl	800a73c <USBD_Get_USB_Status>
 800a504:	4603      	mov	r3, r0
 800a506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a508:	7bbb      	ldrb	r3, [r7, #14]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b084      	sub	sp, #16
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
 800a51a:	460b      	mov	r3, r1
 800a51c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a51e:	2300      	movs	r3, #0
 800a520:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a522:	2300      	movs	r3, #0
 800a524:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a52c:	78fa      	ldrb	r2, [r7, #3]
 800a52e:	4611      	mov	r1, r2
 800a530:	4618      	mov	r0, r3
 800a532:	f7f9 fe1e 	bl	8004172 <HAL_PCD_EP_Close>
 800a536:	4603      	mov	r3, r0
 800a538:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a53a:	7bfb      	ldrb	r3, [r7, #15]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f000 f8fd 	bl	800a73c <USBD_Get_USB_Status>
 800a542:	4603      	mov	r3, r0
 800a544:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a546:	7bbb      	ldrb	r3, [r7, #14]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	460b      	mov	r3, r1
 800a55a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a55c:	2300      	movs	r3, #0
 800a55e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a560:	2300      	movs	r3, #0
 800a562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a56a:	78fa      	ldrb	r2, [r7, #3]
 800a56c:	4611      	mov	r1, r2
 800a56e:	4618      	mov	r0, r3
 800a570:	f7f9 fef6 	bl	8004360 <HAL_PCD_EP_SetStall>
 800a574:	4603      	mov	r3, r0
 800a576:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a578:	7bfb      	ldrb	r3, [r7, #15]
 800a57a:	4618      	mov	r0, r3
 800a57c:	f000 f8de 	bl	800a73c <USBD_Get_USB_Status>
 800a580:	4603      	mov	r3, r0
 800a582:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a584:	7bbb      	ldrb	r3, [r7, #14]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b084      	sub	sp, #16
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
 800a596:	460b      	mov	r3, r1
 800a598:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a59a:	2300      	movs	r3, #0
 800a59c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a5a8:	78fa      	ldrb	r2, [r7, #3]
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7f9 ff3b 	bl	8004428 <HAL_PCD_EP_ClrStall>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5b6:	7bfb      	ldrb	r3, [r7, #15]
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f000 f8bf 	bl	800a73c <USBD_Get_USB_Status>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3710      	adds	r7, #16
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a5de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a5e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	da0b      	bge.n	800a600 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a5e8:	78fb      	ldrb	r3, [r7, #3]
 800a5ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5ee:	68f9      	ldr	r1, [r7, #12]
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	00db      	lsls	r3, r3, #3
 800a5f4:	4413      	add	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	440b      	add	r3, r1
 800a5fa:	333e      	adds	r3, #62	; 0x3e
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	e00b      	b.n	800a618 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a600:	78fb      	ldrb	r3, [r7, #3]
 800a602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a606:	68f9      	ldr	r1, [r7, #12]
 800a608:	4613      	mov	r3, r2
 800a60a:	00db      	lsls	r3, r3, #3
 800a60c:	4413      	add	r3, r2
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	440b      	add	r3, r1
 800a612:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a616:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3714      	adds	r7, #20
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	460b      	mov	r3, r1
 800a62e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a630:	2300      	movs	r3, #0
 800a632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a634:	2300      	movs	r3, #0
 800a636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a63e:	78fa      	ldrb	r2, [r7, #3]
 800a640:	4611      	mov	r1, r2
 800a642:	4618      	mov	r0, r3
 800a644:	f7f9 fd08 	bl	8004058 <HAL_PCD_SetAddress>
 800a648:	4603      	mov	r3, r0
 800a64a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a64c:	7bfb      	ldrb	r3, [r7, #15]
 800a64e:	4618      	mov	r0, r3
 800a650:	f000 f874 	bl	800a73c <USBD_Get_USB_Status>
 800a654:	4603      	mov	r3, r0
 800a656:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a658:	7bbb      	ldrb	r3, [r7, #14]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b086      	sub	sp, #24
 800a666:	af00      	add	r7, sp, #0
 800a668:	60f8      	str	r0, [r7, #12]
 800a66a:	607a      	str	r2, [r7, #4]
 800a66c:	603b      	str	r3, [r7, #0]
 800a66e:	460b      	mov	r3, r1
 800a670:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a672:	2300      	movs	r3, #0
 800a674:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a676:	2300      	movs	r3, #0
 800a678:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a680:	7af9      	ldrb	r1, [r7, #11]
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	f7f9 fe21 	bl	80042cc <HAL_PCD_EP_Transmit>
 800a68a:	4603      	mov	r3, r0
 800a68c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a68e:	7dfb      	ldrb	r3, [r7, #23]
 800a690:	4618      	mov	r0, r3
 800a692:	f000 f853 	bl	800a73c <USBD_Get_USB_Status>
 800a696:	4603      	mov	r3, r0
 800a698:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a69a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3718      	adds	r7, #24
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b086      	sub	sp, #24
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	607a      	str	r2, [r7, #4]
 800a6ae:	603b      	str	r3, [r7, #0]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a6c2:	7af9      	ldrb	r1, [r7, #11]
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	f7f9 fd9d 	bl	8004206 <HAL_PCD_EP_Receive>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6d0:	7dfb      	ldrb	r3, [r7, #23]
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f000 f832 	bl	800a73c <USBD_Get_USB_Status>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a6dc:	7dbb      	ldrb	r3, [r7, #22]
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3718      	adds	r7, #24
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b082      	sub	sp, #8
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a6f8:	78fa      	ldrb	r2, [r7, #3]
 800a6fa:	4611      	mov	r1, r2
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7f9 fdcd 	bl	800429c <HAL_PCD_EP_GetRxCount>
 800a702:	4603      	mov	r3, r0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3708      	adds	r7, #8
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a714:	4b03      	ldr	r3, [pc, #12]	; (800a724 <USBD_static_malloc+0x18>)
}
 800a716:	4618      	mov	r0, r3
 800a718:	370c      	adds	r7, #12
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	20001efc 	.word	0x20001efc

0800a728 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]

}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	4603      	mov	r3, r0
 800a744:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a746:	2300      	movs	r3, #0
 800a748:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a74a:	79fb      	ldrb	r3, [r7, #7]
 800a74c:	2b03      	cmp	r3, #3
 800a74e:	d817      	bhi.n	800a780 <USBD_Get_USB_Status+0x44>
 800a750:	a201      	add	r2, pc, #4	; (adr r2, 800a758 <USBD_Get_USB_Status+0x1c>)
 800a752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a756:	bf00      	nop
 800a758:	0800a769 	.word	0x0800a769
 800a75c:	0800a76f 	.word	0x0800a76f
 800a760:	0800a775 	.word	0x0800a775
 800a764:	0800a77b 	.word	0x0800a77b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a768:	2300      	movs	r3, #0
 800a76a:	73fb      	strb	r3, [r7, #15]
    break;
 800a76c:	e00b      	b.n	800a786 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a76e:	2303      	movs	r3, #3
 800a770:	73fb      	strb	r3, [r7, #15]
    break;
 800a772:	e008      	b.n	800a786 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a774:	2301      	movs	r3, #1
 800a776:	73fb      	strb	r3, [r7, #15]
    break;
 800a778:	e005      	b.n	800a786 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a77a:	2303      	movs	r3, #3
 800a77c:	73fb      	strb	r3, [r7, #15]
    break;
 800a77e:	e002      	b.n	800a786 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a780:	2303      	movs	r3, #3
 800a782:	73fb      	strb	r3, [r7, #15]
    break;
 800a784:	bf00      	nop
  }
  return usb_status;
 800a786:	7bfb      	ldrb	r3, [r7, #15]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3714      	adds	r7, #20
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <__errno>:
 800a794:	4b01      	ldr	r3, [pc, #4]	; (800a79c <__errno+0x8>)
 800a796:	6818      	ldr	r0, [r3, #0]
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	20000104 	.word	0x20000104

0800a7a0 <__libc_init_array>:
 800a7a0:	b570      	push	{r4, r5, r6, lr}
 800a7a2:	4d0d      	ldr	r5, [pc, #52]	; (800a7d8 <__libc_init_array+0x38>)
 800a7a4:	4c0d      	ldr	r4, [pc, #52]	; (800a7dc <__libc_init_array+0x3c>)
 800a7a6:	1b64      	subs	r4, r4, r5
 800a7a8:	10a4      	asrs	r4, r4, #2
 800a7aa:	2600      	movs	r6, #0
 800a7ac:	42a6      	cmp	r6, r4
 800a7ae:	d109      	bne.n	800a7c4 <__libc_init_array+0x24>
 800a7b0:	4d0b      	ldr	r5, [pc, #44]	; (800a7e0 <__libc_init_array+0x40>)
 800a7b2:	4c0c      	ldr	r4, [pc, #48]	; (800a7e4 <__libc_init_array+0x44>)
 800a7b4:	f002 ff18 	bl	800d5e8 <_init>
 800a7b8:	1b64      	subs	r4, r4, r5
 800a7ba:	10a4      	asrs	r4, r4, #2
 800a7bc:	2600      	movs	r6, #0
 800a7be:	42a6      	cmp	r6, r4
 800a7c0:	d105      	bne.n	800a7ce <__libc_init_array+0x2e>
 800a7c2:	bd70      	pop	{r4, r5, r6, pc}
 800a7c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7c8:	4798      	blx	r3
 800a7ca:	3601      	adds	r6, #1
 800a7cc:	e7ee      	b.n	800a7ac <__libc_init_array+0xc>
 800a7ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7d2:	4798      	blx	r3
 800a7d4:	3601      	adds	r6, #1
 800a7d6:	e7f2      	b.n	800a7be <__libc_init_array+0x1e>
 800a7d8:	0800da4c 	.word	0x0800da4c
 800a7dc:	0800da4c 	.word	0x0800da4c
 800a7e0:	0800da4c 	.word	0x0800da4c
 800a7e4:	0800da50 	.word	0x0800da50

0800a7e8 <memset>:
 800a7e8:	4402      	add	r2, r0
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d100      	bne.n	800a7f2 <memset+0xa>
 800a7f0:	4770      	bx	lr
 800a7f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a7f6:	e7f9      	b.n	800a7ec <memset+0x4>

0800a7f8 <__cvt>:
 800a7f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7fc:	ec55 4b10 	vmov	r4, r5, d0
 800a800:	2d00      	cmp	r5, #0
 800a802:	460e      	mov	r6, r1
 800a804:	4619      	mov	r1, r3
 800a806:	462b      	mov	r3, r5
 800a808:	bfbb      	ittet	lt
 800a80a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a80e:	461d      	movlt	r5, r3
 800a810:	2300      	movge	r3, #0
 800a812:	232d      	movlt	r3, #45	; 0x2d
 800a814:	700b      	strb	r3, [r1, #0]
 800a816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a818:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a81c:	4691      	mov	r9, r2
 800a81e:	f023 0820 	bic.w	r8, r3, #32
 800a822:	bfbc      	itt	lt
 800a824:	4622      	movlt	r2, r4
 800a826:	4614      	movlt	r4, r2
 800a828:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a82c:	d005      	beq.n	800a83a <__cvt+0x42>
 800a82e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a832:	d100      	bne.n	800a836 <__cvt+0x3e>
 800a834:	3601      	adds	r6, #1
 800a836:	2102      	movs	r1, #2
 800a838:	e000      	b.n	800a83c <__cvt+0x44>
 800a83a:	2103      	movs	r1, #3
 800a83c:	ab03      	add	r3, sp, #12
 800a83e:	9301      	str	r3, [sp, #4]
 800a840:	ab02      	add	r3, sp, #8
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	ec45 4b10 	vmov	d0, r4, r5
 800a848:	4653      	mov	r3, sl
 800a84a:	4632      	mov	r2, r6
 800a84c:	f000 fd00 	bl	800b250 <_dtoa_r>
 800a850:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a854:	4607      	mov	r7, r0
 800a856:	d102      	bne.n	800a85e <__cvt+0x66>
 800a858:	f019 0f01 	tst.w	r9, #1
 800a85c:	d022      	beq.n	800a8a4 <__cvt+0xac>
 800a85e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a862:	eb07 0906 	add.w	r9, r7, r6
 800a866:	d110      	bne.n	800a88a <__cvt+0x92>
 800a868:	783b      	ldrb	r3, [r7, #0]
 800a86a:	2b30      	cmp	r3, #48	; 0x30
 800a86c:	d10a      	bne.n	800a884 <__cvt+0x8c>
 800a86e:	2200      	movs	r2, #0
 800a870:	2300      	movs	r3, #0
 800a872:	4620      	mov	r0, r4
 800a874:	4629      	mov	r1, r5
 800a876:	f7f6 f927 	bl	8000ac8 <__aeabi_dcmpeq>
 800a87a:	b918      	cbnz	r0, 800a884 <__cvt+0x8c>
 800a87c:	f1c6 0601 	rsb	r6, r6, #1
 800a880:	f8ca 6000 	str.w	r6, [sl]
 800a884:	f8da 3000 	ldr.w	r3, [sl]
 800a888:	4499      	add	r9, r3
 800a88a:	2200      	movs	r2, #0
 800a88c:	2300      	movs	r3, #0
 800a88e:	4620      	mov	r0, r4
 800a890:	4629      	mov	r1, r5
 800a892:	f7f6 f919 	bl	8000ac8 <__aeabi_dcmpeq>
 800a896:	b108      	cbz	r0, 800a89c <__cvt+0xa4>
 800a898:	f8cd 900c 	str.w	r9, [sp, #12]
 800a89c:	2230      	movs	r2, #48	; 0x30
 800a89e:	9b03      	ldr	r3, [sp, #12]
 800a8a0:	454b      	cmp	r3, r9
 800a8a2:	d307      	bcc.n	800a8b4 <__cvt+0xbc>
 800a8a4:	9b03      	ldr	r3, [sp, #12]
 800a8a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8a8:	1bdb      	subs	r3, r3, r7
 800a8aa:	4638      	mov	r0, r7
 800a8ac:	6013      	str	r3, [r2, #0]
 800a8ae:	b004      	add	sp, #16
 800a8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8b4:	1c59      	adds	r1, r3, #1
 800a8b6:	9103      	str	r1, [sp, #12]
 800a8b8:	701a      	strb	r2, [r3, #0]
 800a8ba:	e7f0      	b.n	800a89e <__cvt+0xa6>

0800a8bc <__exponent>:
 800a8bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2900      	cmp	r1, #0
 800a8c2:	bfb8      	it	lt
 800a8c4:	4249      	neglt	r1, r1
 800a8c6:	f803 2b02 	strb.w	r2, [r3], #2
 800a8ca:	bfb4      	ite	lt
 800a8cc:	222d      	movlt	r2, #45	; 0x2d
 800a8ce:	222b      	movge	r2, #43	; 0x2b
 800a8d0:	2909      	cmp	r1, #9
 800a8d2:	7042      	strb	r2, [r0, #1]
 800a8d4:	dd2a      	ble.n	800a92c <__exponent+0x70>
 800a8d6:	f10d 0407 	add.w	r4, sp, #7
 800a8da:	46a4      	mov	ip, r4
 800a8dc:	270a      	movs	r7, #10
 800a8de:	46a6      	mov	lr, r4
 800a8e0:	460a      	mov	r2, r1
 800a8e2:	fb91 f6f7 	sdiv	r6, r1, r7
 800a8e6:	fb07 1516 	mls	r5, r7, r6, r1
 800a8ea:	3530      	adds	r5, #48	; 0x30
 800a8ec:	2a63      	cmp	r2, #99	; 0x63
 800a8ee:	f104 34ff 	add.w	r4, r4, #4294967295
 800a8f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a8f6:	4631      	mov	r1, r6
 800a8f8:	dcf1      	bgt.n	800a8de <__exponent+0x22>
 800a8fa:	3130      	adds	r1, #48	; 0x30
 800a8fc:	f1ae 0502 	sub.w	r5, lr, #2
 800a900:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a904:	1c44      	adds	r4, r0, #1
 800a906:	4629      	mov	r1, r5
 800a908:	4561      	cmp	r1, ip
 800a90a:	d30a      	bcc.n	800a922 <__exponent+0x66>
 800a90c:	f10d 0209 	add.w	r2, sp, #9
 800a910:	eba2 020e 	sub.w	r2, r2, lr
 800a914:	4565      	cmp	r5, ip
 800a916:	bf88      	it	hi
 800a918:	2200      	movhi	r2, #0
 800a91a:	4413      	add	r3, r2
 800a91c:	1a18      	subs	r0, r3, r0
 800a91e:	b003      	add	sp, #12
 800a920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a922:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a926:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a92a:	e7ed      	b.n	800a908 <__exponent+0x4c>
 800a92c:	2330      	movs	r3, #48	; 0x30
 800a92e:	3130      	adds	r1, #48	; 0x30
 800a930:	7083      	strb	r3, [r0, #2]
 800a932:	70c1      	strb	r1, [r0, #3]
 800a934:	1d03      	adds	r3, r0, #4
 800a936:	e7f1      	b.n	800a91c <__exponent+0x60>

0800a938 <_printf_float>:
 800a938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a93c:	ed2d 8b02 	vpush	{d8}
 800a940:	b08d      	sub	sp, #52	; 0x34
 800a942:	460c      	mov	r4, r1
 800a944:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a948:	4616      	mov	r6, r2
 800a94a:	461f      	mov	r7, r3
 800a94c:	4605      	mov	r5, r0
 800a94e:	f001 fa6d 	bl	800be2c <_localeconv_r>
 800a952:	f8d0 a000 	ldr.w	sl, [r0]
 800a956:	4650      	mov	r0, sl
 800a958:	f7f5 fc3a 	bl	80001d0 <strlen>
 800a95c:	2300      	movs	r3, #0
 800a95e:	930a      	str	r3, [sp, #40]	; 0x28
 800a960:	6823      	ldr	r3, [r4, #0]
 800a962:	9305      	str	r3, [sp, #20]
 800a964:	f8d8 3000 	ldr.w	r3, [r8]
 800a968:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a96c:	3307      	adds	r3, #7
 800a96e:	f023 0307 	bic.w	r3, r3, #7
 800a972:	f103 0208 	add.w	r2, r3, #8
 800a976:	f8c8 2000 	str.w	r2, [r8]
 800a97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a982:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a986:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a98a:	9307      	str	r3, [sp, #28]
 800a98c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a990:	ee08 0a10 	vmov	s16, r0
 800a994:	4b9f      	ldr	r3, [pc, #636]	; (800ac14 <_printf_float+0x2dc>)
 800a996:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a99a:	f04f 32ff 	mov.w	r2, #4294967295
 800a99e:	f7f6 f8c5 	bl	8000b2c <__aeabi_dcmpun>
 800a9a2:	bb88      	cbnz	r0, 800aa08 <_printf_float+0xd0>
 800a9a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9a8:	4b9a      	ldr	r3, [pc, #616]	; (800ac14 <_printf_float+0x2dc>)
 800a9aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ae:	f7f6 f89f 	bl	8000af0 <__aeabi_dcmple>
 800a9b2:	bb48      	cbnz	r0, 800aa08 <_printf_float+0xd0>
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	4640      	mov	r0, r8
 800a9ba:	4649      	mov	r1, r9
 800a9bc:	f7f6 f88e 	bl	8000adc <__aeabi_dcmplt>
 800a9c0:	b110      	cbz	r0, 800a9c8 <_printf_float+0x90>
 800a9c2:	232d      	movs	r3, #45	; 0x2d
 800a9c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9c8:	4b93      	ldr	r3, [pc, #588]	; (800ac18 <_printf_float+0x2e0>)
 800a9ca:	4894      	ldr	r0, [pc, #592]	; (800ac1c <_printf_float+0x2e4>)
 800a9cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a9d0:	bf94      	ite	ls
 800a9d2:	4698      	movls	r8, r3
 800a9d4:	4680      	movhi	r8, r0
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	6123      	str	r3, [r4, #16]
 800a9da:	9b05      	ldr	r3, [sp, #20]
 800a9dc:	f023 0204 	bic.w	r2, r3, #4
 800a9e0:	6022      	str	r2, [r4, #0]
 800a9e2:	f04f 0900 	mov.w	r9, #0
 800a9e6:	9700      	str	r7, [sp, #0]
 800a9e8:	4633      	mov	r3, r6
 800a9ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800a9ec:	4621      	mov	r1, r4
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	f000 f9d8 	bl	800ada4 <_printf_common>
 800a9f4:	3001      	adds	r0, #1
 800a9f6:	f040 8090 	bne.w	800ab1a <_printf_float+0x1e2>
 800a9fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a9fe:	b00d      	add	sp, #52	; 0x34
 800aa00:	ecbd 8b02 	vpop	{d8}
 800aa04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa08:	4642      	mov	r2, r8
 800aa0a:	464b      	mov	r3, r9
 800aa0c:	4640      	mov	r0, r8
 800aa0e:	4649      	mov	r1, r9
 800aa10:	f7f6 f88c 	bl	8000b2c <__aeabi_dcmpun>
 800aa14:	b140      	cbz	r0, 800aa28 <_printf_float+0xf0>
 800aa16:	464b      	mov	r3, r9
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	bfbc      	itt	lt
 800aa1c:	232d      	movlt	r3, #45	; 0x2d
 800aa1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aa22:	487f      	ldr	r0, [pc, #508]	; (800ac20 <_printf_float+0x2e8>)
 800aa24:	4b7f      	ldr	r3, [pc, #508]	; (800ac24 <_printf_float+0x2ec>)
 800aa26:	e7d1      	b.n	800a9cc <_printf_float+0x94>
 800aa28:	6863      	ldr	r3, [r4, #4]
 800aa2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aa2e:	9206      	str	r2, [sp, #24]
 800aa30:	1c5a      	adds	r2, r3, #1
 800aa32:	d13f      	bne.n	800aab4 <_printf_float+0x17c>
 800aa34:	2306      	movs	r3, #6
 800aa36:	6063      	str	r3, [r4, #4]
 800aa38:	9b05      	ldr	r3, [sp, #20]
 800aa3a:	6861      	ldr	r1, [r4, #4]
 800aa3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aa40:	2300      	movs	r3, #0
 800aa42:	9303      	str	r3, [sp, #12]
 800aa44:	ab0a      	add	r3, sp, #40	; 0x28
 800aa46:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aa4a:	ab09      	add	r3, sp, #36	; 0x24
 800aa4c:	ec49 8b10 	vmov	d0, r8, r9
 800aa50:	9300      	str	r3, [sp, #0]
 800aa52:	6022      	str	r2, [r4, #0]
 800aa54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aa58:	4628      	mov	r0, r5
 800aa5a:	f7ff fecd 	bl	800a7f8 <__cvt>
 800aa5e:	9b06      	ldr	r3, [sp, #24]
 800aa60:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa62:	2b47      	cmp	r3, #71	; 0x47
 800aa64:	4680      	mov	r8, r0
 800aa66:	d108      	bne.n	800aa7a <_printf_float+0x142>
 800aa68:	1cc8      	adds	r0, r1, #3
 800aa6a:	db02      	blt.n	800aa72 <_printf_float+0x13a>
 800aa6c:	6863      	ldr	r3, [r4, #4]
 800aa6e:	4299      	cmp	r1, r3
 800aa70:	dd41      	ble.n	800aaf6 <_printf_float+0x1be>
 800aa72:	f1ab 0b02 	sub.w	fp, fp, #2
 800aa76:	fa5f fb8b 	uxtb.w	fp, fp
 800aa7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aa7e:	d820      	bhi.n	800aac2 <_printf_float+0x18a>
 800aa80:	3901      	subs	r1, #1
 800aa82:	465a      	mov	r2, fp
 800aa84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aa88:	9109      	str	r1, [sp, #36]	; 0x24
 800aa8a:	f7ff ff17 	bl	800a8bc <__exponent>
 800aa8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa90:	1813      	adds	r3, r2, r0
 800aa92:	2a01      	cmp	r2, #1
 800aa94:	4681      	mov	r9, r0
 800aa96:	6123      	str	r3, [r4, #16]
 800aa98:	dc02      	bgt.n	800aaa0 <_printf_float+0x168>
 800aa9a:	6822      	ldr	r2, [r4, #0]
 800aa9c:	07d2      	lsls	r2, r2, #31
 800aa9e:	d501      	bpl.n	800aaa4 <_printf_float+0x16c>
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	6123      	str	r3, [r4, #16]
 800aaa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d09c      	beq.n	800a9e6 <_printf_float+0xae>
 800aaac:	232d      	movs	r3, #45	; 0x2d
 800aaae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aab2:	e798      	b.n	800a9e6 <_printf_float+0xae>
 800aab4:	9a06      	ldr	r2, [sp, #24]
 800aab6:	2a47      	cmp	r2, #71	; 0x47
 800aab8:	d1be      	bne.n	800aa38 <_printf_float+0x100>
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1bc      	bne.n	800aa38 <_printf_float+0x100>
 800aabe:	2301      	movs	r3, #1
 800aac0:	e7b9      	b.n	800aa36 <_printf_float+0xfe>
 800aac2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800aac6:	d118      	bne.n	800aafa <_printf_float+0x1c2>
 800aac8:	2900      	cmp	r1, #0
 800aaca:	6863      	ldr	r3, [r4, #4]
 800aacc:	dd0b      	ble.n	800aae6 <_printf_float+0x1ae>
 800aace:	6121      	str	r1, [r4, #16]
 800aad0:	b913      	cbnz	r3, 800aad8 <_printf_float+0x1a0>
 800aad2:	6822      	ldr	r2, [r4, #0]
 800aad4:	07d0      	lsls	r0, r2, #31
 800aad6:	d502      	bpl.n	800aade <_printf_float+0x1a6>
 800aad8:	3301      	adds	r3, #1
 800aada:	440b      	add	r3, r1
 800aadc:	6123      	str	r3, [r4, #16]
 800aade:	65a1      	str	r1, [r4, #88]	; 0x58
 800aae0:	f04f 0900 	mov.w	r9, #0
 800aae4:	e7de      	b.n	800aaa4 <_printf_float+0x16c>
 800aae6:	b913      	cbnz	r3, 800aaee <_printf_float+0x1b6>
 800aae8:	6822      	ldr	r2, [r4, #0]
 800aaea:	07d2      	lsls	r2, r2, #31
 800aaec:	d501      	bpl.n	800aaf2 <_printf_float+0x1ba>
 800aaee:	3302      	adds	r3, #2
 800aaf0:	e7f4      	b.n	800aadc <_printf_float+0x1a4>
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e7f2      	b.n	800aadc <_printf_float+0x1a4>
 800aaf6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800aafa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aafc:	4299      	cmp	r1, r3
 800aafe:	db05      	blt.n	800ab0c <_printf_float+0x1d4>
 800ab00:	6823      	ldr	r3, [r4, #0]
 800ab02:	6121      	str	r1, [r4, #16]
 800ab04:	07d8      	lsls	r0, r3, #31
 800ab06:	d5ea      	bpl.n	800aade <_printf_float+0x1a6>
 800ab08:	1c4b      	adds	r3, r1, #1
 800ab0a:	e7e7      	b.n	800aadc <_printf_float+0x1a4>
 800ab0c:	2900      	cmp	r1, #0
 800ab0e:	bfd4      	ite	le
 800ab10:	f1c1 0202 	rsble	r2, r1, #2
 800ab14:	2201      	movgt	r2, #1
 800ab16:	4413      	add	r3, r2
 800ab18:	e7e0      	b.n	800aadc <_printf_float+0x1a4>
 800ab1a:	6823      	ldr	r3, [r4, #0]
 800ab1c:	055a      	lsls	r2, r3, #21
 800ab1e:	d407      	bmi.n	800ab30 <_printf_float+0x1f8>
 800ab20:	6923      	ldr	r3, [r4, #16]
 800ab22:	4642      	mov	r2, r8
 800ab24:	4631      	mov	r1, r6
 800ab26:	4628      	mov	r0, r5
 800ab28:	47b8      	blx	r7
 800ab2a:	3001      	adds	r0, #1
 800ab2c:	d12c      	bne.n	800ab88 <_printf_float+0x250>
 800ab2e:	e764      	b.n	800a9fa <_printf_float+0xc2>
 800ab30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab34:	f240 80e0 	bls.w	800acf8 <_printf_float+0x3c0>
 800ab38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	2300      	movs	r3, #0
 800ab40:	f7f5 ffc2 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	d034      	beq.n	800abb2 <_printf_float+0x27a>
 800ab48:	4a37      	ldr	r2, [pc, #220]	; (800ac28 <_printf_float+0x2f0>)
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	4631      	mov	r1, r6
 800ab4e:	4628      	mov	r0, r5
 800ab50:	47b8      	blx	r7
 800ab52:	3001      	adds	r0, #1
 800ab54:	f43f af51 	beq.w	800a9fa <_printf_float+0xc2>
 800ab58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	db02      	blt.n	800ab66 <_printf_float+0x22e>
 800ab60:	6823      	ldr	r3, [r4, #0]
 800ab62:	07d8      	lsls	r0, r3, #31
 800ab64:	d510      	bpl.n	800ab88 <_printf_float+0x250>
 800ab66:	ee18 3a10 	vmov	r3, s16
 800ab6a:	4652      	mov	r2, sl
 800ab6c:	4631      	mov	r1, r6
 800ab6e:	4628      	mov	r0, r5
 800ab70:	47b8      	blx	r7
 800ab72:	3001      	adds	r0, #1
 800ab74:	f43f af41 	beq.w	800a9fa <_printf_float+0xc2>
 800ab78:	f04f 0800 	mov.w	r8, #0
 800ab7c:	f104 091a 	add.w	r9, r4, #26
 800ab80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab82:	3b01      	subs	r3, #1
 800ab84:	4543      	cmp	r3, r8
 800ab86:	dc09      	bgt.n	800ab9c <_printf_float+0x264>
 800ab88:	6823      	ldr	r3, [r4, #0]
 800ab8a:	079b      	lsls	r3, r3, #30
 800ab8c:	f100 8105 	bmi.w	800ad9a <_printf_float+0x462>
 800ab90:	68e0      	ldr	r0, [r4, #12]
 800ab92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab94:	4298      	cmp	r0, r3
 800ab96:	bfb8      	it	lt
 800ab98:	4618      	movlt	r0, r3
 800ab9a:	e730      	b.n	800a9fe <_printf_float+0xc6>
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	464a      	mov	r2, r9
 800aba0:	4631      	mov	r1, r6
 800aba2:	4628      	mov	r0, r5
 800aba4:	47b8      	blx	r7
 800aba6:	3001      	adds	r0, #1
 800aba8:	f43f af27 	beq.w	800a9fa <_printf_float+0xc2>
 800abac:	f108 0801 	add.w	r8, r8, #1
 800abb0:	e7e6      	b.n	800ab80 <_printf_float+0x248>
 800abb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	dc39      	bgt.n	800ac2c <_printf_float+0x2f4>
 800abb8:	4a1b      	ldr	r2, [pc, #108]	; (800ac28 <_printf_float+0x2f0>)
 800abba:	2301      	movs	r3, #1
 800abbc:	4631      	mov	r1, r6
 800abbe:	4628      	mov	r0, r5
 800abc0:	47b8      	blx	r7
 800abc2:	3001      	adds	r0, #1
 800abc4:	f43f af19 	beq.w	800a9fa <_printf_float+0xc2>
 800abc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800abcc:	4313      	orrs	r3, r2
 800abce:	d102      	bne.n	800abd6 <_printf_float+0x29e>
 800abd0:	6823      	ldr	r3, [r4, #0]
 800abd2:	07d9      	lsls	r1, r3, #31
 800abd4:	d5d8      	bpl.n	800ab88 <_printf_float+0x250>
 800abd6:	ee18 3a10 	vmov	r3, s16
 800abda:	4652      	mov	r2, sl
 800abdc:	4631      	mov	r1, r6
 800abde:	4628      	mov	r0, r5
 800abe0:	47b8      	blx	r7
 800abe2:	3001      	adds	r0, #1
 800abe4:	f43f af09 	beq.w	800a9fa <_printf_float+0xc2>
 800abe8:	f04f 0900 	mov.w	r9, #0
 800abec:	f104 0a1a 	add.w	sl, r4, #26
 800abf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf2:	425b      	negs	r3, r3
 800abf4:	454b      	cmp	r3, r9
 800abf6:	dc01      	bgt.n	800abfc <_printf_float+0x2c4>
 800abf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abfa:	e792      	b.n	800ab22 <_printf_float+0x1ea>
 800abfc:	2301      	movs	r3, #1
 800abfe:	4652      	mov	r2, sl
 800ac00:	4631      	mov	r1, r6
 800ac02:	4628      	mov	r0, r5
 800ac04:	47b8      	blx	r7
 800ac06:	3001      	adds	r0, #1
 800ac08:	f43f aef7 	beq.w	800a9fa <_printf_float+0xc2>
 800ac0c:	f109 0901 	add.w	r9, r9, #1
 800ac10:	e7ee      	b.n	800abf0 <_printf_float+0x2b8>
 800ac12:	bf00      	nop
 800ac14:	7fefffff 	.word	0x7fefffff
 800ac18:	0800d670 	.word	0x0800d670
 800ac1c:	0800d674 	.word	0x0800d674
 800ac20:	0800d67c 	.word	0x0800d67c
 800ac24:	0800d678 	.word	0x0800d678
 800ac28:	0800d680 	.word	0x0800d680
 800ac2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac30:	429a      	cmp	r2, r3
 800ac32:	bfa8      	it	ge
 800ac34:	461a      	movge	r2, r3
 800ac36:	2a00      	cmp	r2, #0
 800ac38:	4691      	mov	r9, r2
 800ac3a:	dc37      	bgt.n	800acac <_printf_float+0x374>
 800ac3c:	f04f 0b00 	mov.w	fp, #0
 800ac40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac44:	f104 021a 	add.w	r2, r4, #26
 800ac48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac4a:	9305      	str	r3, [sp, #20]
 800ac4c:	eba3 0309 	sub.w	r3, r3, r9
 800ac50:	455b      	cmp	r3, fp
 800ac52:	dc33      	bgt.n	800acbc <_printf_float+0x384>
 800ac54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	db3b      	blt.n	800acd4 <_printf_float+0x39c>
 800ac5c:	6823      	ldr	r3, [r4, #0]
 800ac5e:	07da      	lsls	r2, r3, #31
 800ac60:	d438      	bmi.n	800acd4 <_printf_float+0x39c>
 800ac62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac64:	9a05      	ldr	r2, [sp, #20]
 800ac66:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac68:	1a9a      	subs	r2, r3, r2
 800ac6a:	eba3 0901 	sub.w	r9, r3, r1
 800ac6e:	4591      	cmp	r9, r2
 800ac70:	bfa8      	it	ge
 800ac72:	4691      	movge	r9, r2
 800ac74:	f1b9 0f00 	cmp.w	r9, #0
 800ac78:	dc35      	bgt.n	800ace6 <_printf_float+0x3ae>
 800ac7a:	f04f 0800 	mov.w	r8, #0
 800ac7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac82:	f104 0a1a 	add.w	sl, r4, #26
 800ac86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac8a:	1a9b      	subs	r3, r3, r2
 800ac8c:	eba3 0309 	sub.w	r3, r3, r9
 800ac90:	4543      	cmp	r3, r8
 800ac92:	f77f af79 	ble.w	800ab88 <_printf_float+0x250>
 800ac96:	2301      	movs	r3, #1
 800ac98:	4652      	mov	r2, sl
 800ac9a:	4631      	mov	r1, r6
 800ac9c:	4628      	mov	r0, r5
 800ac9e:	47b8      	blx	r7
 800aca0:	3001      	adds	r0, #1
 800aca2:	f43f aeaa 	beq.w	800a9fa <_printf_float+0xc2>
 800aca6:	f108 0801 	add.w	r8, r8, #1
 800acaa:	e7ec      	b.n	800ac86 <_printf_float+0x34e>
 800acac:	4613      	mov	r3, r2
 800acae:	4631      	mov	r1, r6
 800acb0:	4642      	mov	r2, r8
 800acb2:	4628      	mov	r0, r5
 800acb4:	47b8      	blx	r7
 800acb6:	3001      	adds	r0, #1
 800acb8:	d1c0      	bne.n	800ac3c <_printf_float+0x304>
 800acba:	e69e      	b.n	800a9fa <_printf_float+0xc2>
 800acbc:	2301      	movs	r3, #1
 800acbe:	4631      	mov	r1, r6
 800acc0:	4628      	mov	r0, r5
 800acc2:	9205      	str	r2, [sp, #20]
 800acc4:	47b8      	blx	r7
 800acc6:	3001      	adds	r0, #1
 800acc8:	f43f ae97 	beq.w	800a9fa <_printf_float+0xc2>
 800accc:	9a05      	ldr	r2, [sp, #20]
 800acce:	f10b 0b01 	add.w	fp, fp, #1
 800acd2:	e7b9      	b.n	800ac48 <_printf_float+0x310>
 800acd4:	ee18 3a10 	vmov	r3, s16
 800acd8:	4652      	mov	r2, sl
 800acda:	4631      	mov	r1, r6
 800acdc:	4628      	mov	r0, r5
 800acde:	47b8      	blx	r7
 800ace0:	3001      	adds	r0, #1
 800ace2:	d1be      	bne.n	800ac62 <_printf_float+0x32a>
 800ace4:	e689      	b.n	800a9fa <_printf_float+0xc2>
 800ace6:	9a05      	ldr	r2, [sp, #20]
 800ace8:	464b      	mov	r3, r9
 800acea:	4442      	add	r2, r8
 800acec:	4631      	mov	r1, r6
 800acee:	4628      	mov	r0, r5
 800acf0:	47b8      	blx	r7
 800acf2:	3001      	adds	r0, #1
 800acf4:	d1c1      	bne.n	800ac7a <_printf_float+0x342>
 800acf6:	e680      	b.n	800a9fa <_printf_float+0xc2>
 800acf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acfa:	2a01      	cmp	r2, #1
 800acfc:	dc01      	bgt.n	800ad02 <_printf_float+0x3ca>
 800acfe:	07db      	lsls	r3, r3, #31
 800ad00:	d538      	bpl.n	800ad74 <_printf_float+0x43c>
 800ad02:	2301      	movs	r3, #1
 800ad04:	4642      	mov	r2, r8
 800ad06:	4631      	mov	r1, r6
 800ad08:	4628      	mov	r0, r5
 800ad0a:	47b8      	blx	r7
 800ad0c:	3001      	adds	r0, #1
 800ad0e:	f43f ae74 	beq.w	800a9fa <_printf_float+0xc2>
 800ad12:	ee18 3a10 	vmov	r3, s16
 800ad16:	4652      	mov	r2, sl
 800ad18:	4631      	mov	r1, r6
 800ad1a:	4628      	mov	r0, r5
 800ad1c:	47b8      	blx	r7
 800ad1e:	3001      	adds	r0, #1
 800ad20:	f43f ae6b 	beq.w	800a9fa <_printf_float+0xc2>
 800ad24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad28:	2200      	movs	r2, #0
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	f7f5 fecc 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad30:	b9d8      	cbnz	r0, 800ad6a <_printf_float+0x432>
 800ad32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad34:	f108 0201 	add.w	r2, r8, #1
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	4631      	mov	r1, r6
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	47b8      	blx	r7
 800ad40:	3001      	adds	r0, #1
 800ad42:	d10e      	bne.n	800ad62 <_printf_float+0x42a>
 800ad44:	e659      	b.n	800a9fa <_printf_float+0xc2>
 800ad46:	2301      	movs	r3, #1
 800ad48:	4652      	mov	r2, sl
 800ad4a:	4631      	mov	r1, r6
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	47b8      	blx	r7
 800ad50:	3001      	adds	r0, #1
 800ad52:	f43f ae52 	beq.w	800a9fa <_printf_float+0xc2>
 800ad56:	f108 0801 	add.w	r8, r8, #1
 800ad5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad5c:	3b01      	subs	r3, #1
 800ad5e:	4543      	cmp	r3, r8
 800ad60:	dcf1      	bgt.n	800ad46 <_printf_float+0x40e>
 800ad62:	464b      	mov	r3, r9
 800ad64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ad68:	e6dc      	b.n	800ab24 <_printf_float+0x1ec>
 800ad6a:	f04f 0800 	mov.w	r8, #0
 800ad6e:	f104 0a1a 	add.w	sl, r4, #26
 800ad72:	e7f2      	b.n	800ad5a <_printf_float+0x422>
 800ad74:	2301      	movs	r3, #1
 800ad76:	4642      	mov	r2, r8
 800ad78:	e7df      	b.n	800ad3a <_printf_float+0x402>
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	464a      	mov	r2, r9
 800ad7e:	4631      	mov	r1, r6
 800ad80:	4628      	mov	r0, r5
 800ad82:	47b8      	blx	r7
 800ad84:	3001      	adds	r0, #1
 800ad86:	f43f ae38 	beq.w	800a9fa <_printf_float+0xc2>
 800ad8a:	f108 0801 	add.w	r8, r8, #1
 800ad8e:	68e3      	ldr	r3, [r4, #12]
 800ad90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad92:	1a5b      	subs	r3, r3, r1
 800ad94:	4543      	cmp	r3, r8
 800ad96:	dcf0      	bgt.n	800ad7a <_printf_float+0x442>
 800ad98:	e6fa      	b.n	800ab90 <_printf_float+0x258>
 800ad9a:	f04f 0800 	mov.w	r8, #0
 800ad9e:	f104 0919 	add.w	r9, r4, #25
 800ada2:	e7f4      	b.n	800ad8e <_printf_float+0x456>

0800ada4 <_printf_common>:
 800ada4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ada8:	4616      	mov	r6, r2
 800adaa:	4699      	mov	r9, r3
 800adac:	688a      	ldr	r2, [r1, #8]
 800adae:	690b      	ldr	r3, [r1, #16]
 800adb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800adb4:	4293      	cmp	r3, r2
 800adb6:	bfb8      	it	lt
 800adb8:	4613      	movlt	r3, r2
 800adba:	6033      	str	r3, [r6, #0]
 800adbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800adc0:	4607      	mov	r7, r0
 800adc2:	460c      	mov	r4, r1
 800adc4:	b10a      	cbz	r2, 800adca <_printf_common+0x26>
 800adc6:	3301      	adds	r3, #1
 800adc8:	6033      	str	r3, [r6, #0]
 800adca:	6823      	ldr	r3, [r4, #0]
 800adcc:	0699      	lsls	r1, r3, #26
 800adce:	bf42      	ittt	mi
 800add0:	6833      	ldrmi	r3, [r6, #0]
 800add2:	3302      	addmi	r3, #2
 800add4:	6033      	strmi	r3, [r6, #0]
 800add6:	6825      	ldr	r5, [r4, #0]
 800add8:	f015 0506 	ands.w	r5, r5, #6
 800addc:	d106      	bne.n	800adec <_printf_common+0x48>
 800adde:	f104 0a19 	add.w	sl, r4, #25
 800ade2:	68e3      	ldr	r3, [r4, #12]
 800ade4:	6832      	ldr	r2, [r6, #0]
 800ade6:	1a9b      	subs	r3, r3, r2
 800ade8:	42ab      	cmp	r3, r5
 800adea:	dc26      	bgt.n	800ae3a <_printf_common+0x96>
 800adec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800adf0:	1e13      	subs	r3, r2, #0
 800adf2:	6822      	ldr	r2, [r4, #0]
 800adf4:	bf18      	it	ne
 800adf6:	2301      	movne	r3, #1
 800adf8:	0692      	lsls	r2, r2, #26
 800adfa:	d42b      	bmi.n	800ae54 <_printf_common+0xb0>
 800adfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae00:	4649      	mov	r1, r9
 800ae02:	4638      	mov	r0, r7
 800ae04:	47c0      	blx	r8
 800ae06:	3001      	adds	r0, #1
 800ae08:	d01e      	beq.n	800ae48 <_printf_common+0xa4>
 800ae0a:	6823      	ldr	r3, [r4, #0]
 800ae0c:	68e5      	ldr	r5, [r4, #12]
 800ae0e:	6832      	ldr	r2, [r6, #0]
 800ae10:	f003 0306 	and.w	r3, r3, #6
 800ae14:	2b04      	cmp	r3, #4
 800ae16:	bf08      	it	eq
 800ae18:	1aad      	subeq	r5, r5, r2
 800ae1a:	68a3      	ldr	r3, [r4, #8]
 800ae1c:	6922      	ldr	r2, [r4, #16]
 800ae1e:	bf0c      	ite	eq
 800ae20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae24:	2500      	movne	r5, #0
 800ae26:	4293      	cmp	r3, r2
 800ae28:	bfc4      	itt	gt
 800ae2a:	1a9b      	subgt	r3, r3, r2
 800ae2c:	18ed      	addgt	r5, r5, r3
 800ae2e:	2600      	movs	r6, #0
 800ae30:	341a      	adds	r4, #26
 800ae32:	42b5      	cmp	r5, r6
 800ae34:	d11a      	bne.n	800ae6c <_printf_common+0xc8>
 800ae36:	2000      	movs	r0, #0
 800ae38:	e008      	b.n	800ae4c <_printf_common+0xa8>
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	4652      	mov	r2, sl
 800ae3e:	4649      	mov	r1, r9
 800ae40:	4638      	mov	r0, r7
 800ae42:	47c0      	blx	r8
 800ae44:	3001      	adds	r0, #1
 800ae46:	d103      	bne.n	800ae50 <_printf_common+0xac>
 800ae48:	f04f 30ff 	mov.w	r0, #4294967295
 800ae4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae50:	3501      	adds	r5, #1
 800ae52:	e7c6      	b.n	800ade2 <_printf_common+0x3e>
 800ae54:	18e1      	adds	r1, r4, r3
 800ae56:	1c5a      	adds	r2, r3, #1
 800ae58:	2030      	movs	r0, #48	; 0x30
 800ae5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae5e:	4422      	add	r2, r4
 800ae60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ae64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ae68:	3302      	adds	r3, #2
 800ae6a:	e7c7      	b.n	800adfc <_printf_common+0x58>
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	4622      	mov	r2, r4
 800ae70:	4649      	mov	r1, r9
 800ae72:	4638      	mov	r0, r7
 800ae74:	47c0      	blx	r8
 800ae76:	3001      	adds	r0, #1
 800ae78:	d0e6      	beq.n	800ae48 <_printf_common+0xa4>
 800ae7a:	3601      	adds	r6, #1
 800ae7c:	e7d9      	b.n	800ae32 <_printf_common+0x8e>
	...

0800ae80 <_printf_i>:
 800ae80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae84:	7e0f      	ldrb	r7, [r1, #24]
 800ae86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ae88:	2f78      	cmp	r7, #120	; 0x78
 800ae8a:	4691      	mov	r9, r2
 800ae8c:	4680      	mov	r8, r0
 800ae8e:	460c      	mov	r4, r1
 800ae90:	469a      	mov	sl, r3
 800ae92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ae96:	d807      	bhi.n	800aea8 <_printf_i+0x28>
 800ae98:	2f62      	cmp	r7, #98	; 0x62
 800ae9a:	d80a      	bhi.n	800aeb2 <_printf_i+0x32>
 800ae9c:	2f00      	cmp	r7, #0
 800ae9e:	f000 80d8 	beq.w	800b052 <_printf_i+0x1d2>
 800aea2:	2f58      	cmp	r7, #88	; 0x58
 800aea4:	f000 80a3 	beq.w	800afee <_printf_i+0x16e>
 800aea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aeac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aeb0:	e03a      	b.n	800af28 <_printf_i+0xa8>
 800aeb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aeb6:	2b15      	cmp	r3, #21
 800aeb8:	d8f6      	bhi.n	800aea8 <_printf_i+0x28>
 800aeba:	a101      	add	r1, pc, #4	; (adr r1, 800aec0 <_printf_i+0x40>)
 800aebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aec0:	0800af19 	.word	0x0800af19
 800aec4:	0800af2d 	.word	0x0800af2d
 800aec8:	0800aea9 	.word	0x0800aea9
 800aecc:	0800aea9 	.word	0x0800aea9
 800aed0:	0800aea9 	.word	0x0800aea9
 800aed4:	0800aea9 	.word	0x0800aea9
 800aed8:	0800af2d 	.word	0x0800af2d
 800aedc:	0800aea9 	.word	0x0800aea9
 800aee0:	0800aea9 	.word	0x0800aea9
 800aee4:	0800aea9 	.word	0x0800aea9
 800aee8:	0800aea9 	.word	0x0800aea9
 800aeec:	0800b039 	.word	0x0800b039
 800aef0:	0800af5d 	.word	0x0800af5d
 800aef4:	0800b01b 	.word	0x0800b01b
 800aef8:	0800aea9 	.word	0x0800aea9
 800aefc:	0800aea9 	.word	0x0800aea9
 800af00:	0800b05b 	.word	0x0800b05b
 800af04:	0800aea9 	.word	0x0800aea9
 800af08:	0800af5d 	.word	0x0800af5d
 800af0c:	0800aea9 	.word	0x0800aea9
 800af10:	0800aea9 	.word	0x0800aea9
 800af14:	0800b023 	.word	0x0800b023
 800af18:	682b      	ldr	r3, [r5, #0]
 800af1a:	1d1a      	adds	r2, r3, #4
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	602a      	str	r2, [r5, #0]
 800af20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af28:	2301      	movs	r3, #1
 800af2a:	e0a3      	b.n	800b074 <_printf_i+0x1f4>
 800af2c:	6820      	ldr	r0, [r4, #0]
 800af2e:	6829      	ldr	r1, [r5, #0]
 800af30:	0606      	lsls	r6, r0, #24
 800af32:	f101 0304 	add.w	r3, r1, #4
 800af36:	d50a      	bpl.n	800af4e <_printf_i+0xce>
 800af38:	680e      	ldr	r6, [r1, #0]
 800af3a:	602b      	str	r3, [r5, #0]
 800af3c:	2e00      	cmp	r6, #0
 800af3e:	da03      	bge.n	800af48 <_printf_i+0xc8>
 800af40:	232d      	movs	r3, #45	; 0x2d
 800af42:	4276      	negs	r6, r6
 800af44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af48:	485e      	ldr	r0, [pc, #376]	; (800b0c4 <_printf_i+0x244>)
 800af4a:	230a      	movs	r3, #10
 800af4c:	e019      	b.n	800af82 <_printf_i+0x102>
 800af4e:	680e      	ldr	r6, [r1, #0]
 800af50:	602b      	str	r3, [r5, #0]
 800af52:	f010 0f40 	tst.w	r0, #64	; 0x40
 800af56:	bf18      	it	ne
 800af58:	b236      	sxthne	r6, r6
 800af5a:	e7ef      	b.n	800af3c <_printf_i+0xbc>
 800af5c:	682b      	ldr	r3, [r5, #0]
 800af5e:	6820      	ldr	r0, [r4, #0]
 800af60:	1d19      	adds	r1, r3, #4
 800af62:	6029      	str	r1, [r5, #0]
 800af64:	0601      	lsls	r1, r0, #24
 800af66:	d501      	bpl.n	800af6c <_printf_i+0xec>
 800af68:	681e      	ldr	r6, [r3, #0]
 800af6a:	e002      	b.n	800af72 <_printf_i+0xf2>
 800af6c:	0646      	lsls	r6, r0, #25
 800af6e:	d5fb      	bpl.n	800af68 <_printf_i+0xe8>
 800af70:	881e      	ldrh	r6, [r3, #0]
 800af72:	4854      	ldr	r0, [pc, #336]	; (800b0c4 <_printf_i+0x244>)
 800af74:	2f6f      	cmp	r7, #111	; 0x6f
 800af76:	bf0c      	ite	eq
 800af78:	2308      	moveq	r3, #8
 800af7a:	230a      	movne	r3, #10
 800af7c:	2100      	movs	r1, #0
 800af7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af82:	6865      	ldr	r5, [r4, #4]
 800af84:	60a5      	str	r5, [r4, #8]
 800af86:	2d00      	cmp	r5, #0
 800af88:	bfa2      	ittt	ge
 800af8a:	6821      	ldrge	r1, [r4, #0]
 800af8c:	f021 0104 	bicge.w	r1, r1, #4
 800af90:	6021      	strge	r1, [r4, #0]
 800af92:	b90e      	cbnz	r6, 800af98 <_printf_i+0x118>
 800af94:	2d00      	cmp	r5, #0
 800af96:	d04d      	beq.n	800b034 <_printf_i+0x1b4>
 800af98:	4615      	mov	r5, r2
 800af9a:	fbb6 f1f3 	udiv	r1, r6, r3
 800af9e:	fb03 6711 	mls	r7, r3, r1, r6
 800afa2:	5dc7      	ldrb	r7, [r0, r7]
 800afa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800afa8:	4637      	mov	r7, r6
 800afaa:	42bb      	cmp	r3, r7
 800afac:	460e      	mov	r6, r1
 800afae:	d9f4      	bls.n	800af9a <_printf_i+0x11a>
 800afb0:	2b08      	cmp	r3, #8
 800afb2:	d10b      	bne.n	800afcc <_printf_i+0x14c>
 800afb4:	6823      	ldr	r3, [r4, #0]
 800afb6:	07de      	lsls	r6, r3, #31
 800afb8:	d508      	bpl.n	800afcc <_printf_i+0x14c>
 800afba:	6923      	ldr	r3, [r4, #16]
 800afbc:	6861      	ldr	r1, [r4, #4]
 800afbe:	4299      	cmp	r1, r3
 800afc0:	bfde      	ittt	le
 800afc2:	2330      	movle	r3, #48	; 0x30
 800afc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800afc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800afcc:	1b52      	subs	r2, r2, r5
 800afce:	6122      	str	r2, [r4, #16]
 800afd0:	f8cd a000 	str.w	sl, [sp]
 800afd4:	464b      	mov	r3, r9
 800afd6:	aa03      	add	r2, sp, #12
 800afd8:	4621      	mov	r1, r4
 800afda:	4640      	mov	r0, r8
 800afdc:	f7ff fee2 	bl	800ada4 <_printf_common>
 800afe0:	3001      	adds	r0, #1
 800afe2:	d14c      	bne.n	800b07e <_printf_i+0x1fe>
 800afe4:	f04f 30ff 	mov.w	r0, #4294967295
 800afe8:	b004      	add	sp, #16
 800afea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afee:	4835      	ldr	r0, [pc, #212]	; (800b0c4 <_printf_i+0x244>)
 800aff0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aff4:	6829      	ldr	r1, [r5, #0]
 800aff6:	6823      	ldr	r3, [r4, #0]
 800aff8:	f851 6b04 	ldr.w	r6, [r1], #4
 800affc:	6029      	str	r1, [r5, #0]
 800affe:	061d      	lsls	r5, r3, #24
 800b000:	d514      	bpl.n	800b02c <_printf_i+0x1ac>
 800b002:	07df      	lsls	r7, r3, #31
 800b004:	bf44      	itt	mi
 800b006:	f043 0320 	orrmi.w	r3, r3, #32
 800b00a:	6023      	strmi	r3, [r4, #0]
 800b00c:	b91e      	cbnz	r6, 800b016 <_printf_i+0x196>
 800b00e:	6823      	ldr	r3, [r4, #0]
 800b010:	f023 0320 	bic.w	r3, r3, #32
 800b014:	6023      	str	r3, [r4, #0]
 800b016:	2310      	movs	r3, #16
 800b018:	e7b0      	b.n	800af7c <_printf_i+0xfc>
 800b01a:	6823      	ldr	r3, [r4, #0]
 800b01c:	f043 0320 	orr.w	r3, r3, #32
 800b020:	6023      	str	r3, [r4, #0]
 800b022:	2378      	movs	r3, #120	; 0x78
 800b024:	4828      	ldr	r0, [pc, #160]	; (800b0c8 <_printf_i+0x248>)
 800b026:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b02a:	e7e3      	b.n	800aff4 <_printf_i+0x174>
 800b02c:	0659      	lsls	r1, r3, #25
 800b02e:	bf48      	it	mi
 800b030:	b2b6      	uxthmi	r6, r6
 800b032:	e7e6      	b.n	800b002 <_printf_i+0x182>
 800b034:	4615      	mov	r5, r2
 800b036:	e7bb      	b.n	800afb0 <_printf_i+0x130>
 800b038:	682b      	ldr	r3, [r5, #0]
 800b03a:	6826      	ldr	r6, [r4, #0]
 800b03c:	6961      	ldr	r1, [r4, #20]
 800b03e:	1d18      	adds	r0, r3, #4
 800b040:	6028      	str	r0, [r5, #0]
 800b042:	0635      	lsls	r5, r6, #24
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	d501      	bpl.n	800b04c <_printf_i+0x1cc>
 800b048:	6019      	str	r1, [r3, #0]
 800b04a:	e002      	b.n	800b052 <_printf_i+0x1d2>
 800b04c:	0670      	lsls	r0, r6, #25
 800b04e:	d5fb      	bpl.n	800b048 <_printf_i+0x1c8>
 800b050:	8019      	strh	r1, [r3, #0]
 800b052:	2300      	movs	r3, #0
 800b054:	6123      	str	r3, [r4, #16]
 800b056:	4615      	mov	r5, r2
 800b058:	e7ba      	b.n	800afd0 <_printf_i+0x150>
 800b05a:	682b      	ldr	r3, [r5, #0]
 800b05c:	1d1a      	adds	r2, r3, #4
 800b05e:	602a      	str	r2, [r5, #0]
 800b060:	681d      	ldr	r5, [r3, #0]
 800b062:	6862      	ldr	r2, [r4, #4]
 800b064:	2100      	movs	r1, #0
 800b066:	4628      	mov	r0, r5
 800b068:	f7f5 f8ba 	bl	80001e0 <memchr>
 800b06c:	b108      	cbz	r0, 800b072 <_printf_i+0x1f2>
 800b06e:	1b40      	subs	r0, r0, r5
 800b070:	6060      	str	r0, [r4, #4]
 800b072:	6863      	ldr	r3, [r4, #4]
 800b074:	6123      	str	r3, [r4, #16]
 800b076:	2300      	movs	r3, #0
 800b078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b07c:	e7a8      	b.n	800afd0 <_printf_i+0x150>
 800b07e:	6923      	ldr	r3, [r4, #16]
 800b080:	462a      	mov	r2, r5
 800b082:	4649      	mov	r1, r9
 800b084:	4640      	mov	r0, r8
 800b086:	47d0      	blx	sl
 800b088:	3001      	adds	r0, #1
 800b08a:	d0ab      	beq.n	800afe4 <_printf_i+0x164>
 800b08c:	6823      	ldr	r3, [r4, #0]
 800b08e:	079b      	lsls	r3, r3, #30
 800b090:	d413      	bmi.n	800b0ba <_printf_i+0x23a>
 800b092:	68e0      	ldr	r0, [r4, #12]
 800b094:	9b03      	ldr	r3, [sp, #12]
 800b096:	4298      	cmp	r0, r3
 800b098:	bfb8      	it	lt
 800b09a:	4618      	movlt	r0, r3
 800b09c:	e7a4      	b.n	800afe8 <_printf_i+0x168>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	4632      	mov	r2, r6
 800b0a2:	4649      	mov	r1, r9
 800b0a4:	4640      	mov	r0, r8
 800b0a6:	47d0      	blx	sl
 800b0a8:	3001      	adds	r0, #1
 800b0aa:	d09b      	beq.n	800afe4 <_printf_i+0x164>
 800b0ac:	3501      	adds	r5, #1
 800b0ae:	68e3      	ldr	r3, [r4, #12]
 800b0b0:	9903      	ldr	r1, [sp, #12]
 800b0b2:	1a5b      	subs	r3, r3, r1
 800b0b4:	42ab      	cmp	r3, r5
 800b0b6:	dcf2      	bgt.n	800b09e <_printf_i+0x21e>
 800b0b8:	e7eb      	b.n	800b092 <_printf_i+0x212>
 800b0ba:	2500      	movs	r5, #0
 800b0bc:	f104 0619 	add.w	r6, r4, #25
 800b0c0:	e7f5      	b.n	800b0ae <_printf_i+0x22e>
 800b0c2:	bf00      	nop
 800b0c4:	0800d682 	.word	0x0800d682
 800b0c8:	0800d693 	.word	0x0800d693

0800b0cc <sniprintf>:
 800b0cc:	b40c      	push	{r2, r3}
 800b0ce:	b530      	push	{r4, r5, lr}
 800b0d0:	4b17      	ldr	r3, [pc, #92]	; (800b130 <sniprintf+0x64>)
 800b0d2:	1e0c      	subs	r4, r1, #0
 800b0d4:	681d      	ldr	r5, [r3, #0]
 800b0d6:	b09d      	sub	sp, #116	; 0x74
 800b0d8:	da08      	bge.n	800b0ec <sniprintf+0x20>
 800b0da:	238b      	movs	r3, #139	; 0x8b
 800b0dc:	602b      	str	r3, [r5, #0]
 800b0de:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e2:	b01d      	add	sp, #116	; 0x74
 800b0e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0e8:	b002      	add	sp, #8
 800b0ea:	4770      	bx	lr
 800b0ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b0f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b0f4:	bf14      	ite	ne
 800b0f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b0fa:	4623      	moveq	r3, r4
 800b0fc:	9304      	str	r3, [sp, #16]
 800b0fe:	9307      	str	r3, [sp, #28]
 800b100:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b104:	9002      	str	r0, [sp, #8]
 800b106:	9006      	str	r0, [sp, #24]
 800b108:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b10c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b10e:	ab21      	add	r3, sp, #132	; 0x84
 800b110:	a902      	add	r1, sp, #8
 800b112:	4628      	mov	r0, r5
 800b114:	9301      	str	r3, [sp, #4]
 800b116:	f001 fb79 	bl	800c80c <_svfiprintf_r>
 800b11a:	1c43      	adds	r3, r0, #1
 800b11c:	bfbc      	itt	lt
 800b11e:	238b      	movlt	r3, #139	; 0x8b
 800b120:	602b      	strlt	r3, [r5, #0]
 800b122:	2c00      	cmp	r4, #0
 800b124:	d0dd      	beq.n	800b0e2 <sniprintf+0x16>
 800b126:	9b02      	ldr	r3, [sp, #8]
 800b128:	2200      	movs	r2, #0
 800b12a:	701a      	strb	r2, [r3, #0]
 800b12c:	e7d9      	b.n	800b0e2 <sniprintf+0x16>
 800b12e:	bf00      	nop
 800b130:	20000104 	.word	0x20000104

0800b134 <quorem>:
 800b134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b138:	6903      	ldr	r3, [r0, #16]
 800b13a:	690c      	ldr	r4, [r1, #16]
 800b13c:	42a3      	cmp	r3, r4
 800b13e:	4607      	mov	r7, r0
 800b140:	f2c0 8081 	blt.w	800b246 <quorem+0x112>
 800b144:	3c01      	subs	r4, #1
 800b146:	f101 0814 	add.w	r8, r1, #20
 800b14a:	f100 0514 	add.w	r5, r0, #20
 800b14e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b152:	9301      	str	r3, [sp, #4]
 800b154:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b158:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b15c:	3301      	adds	r3, #1
 800b15e:	429a      	cmp	r2, r3
 800b160:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b164:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b168:	fbb2 f6f3 	udiv	r6, r2, r3
 800b16c:	d331      	bcc.n	800b1d2 <quorem+0x9e>
 800b16e:	f04f 0e00 	mov.w	lr, #0
 800b172:	4640      	mov	r0, r8
 800b174:	46ac      	mov	ip, r5
 800b176:	46f2      	mov	sl, lr
 800b178:	f850 2b04 	ldr.w	r2, [r0], #4
 800b17c:	b293      	uxth	r3, r2
 800b17e:	fb06 e303 	mla	r3, r6, r3, lr
 800b182:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b186:	b29b      	uxth	r3, r3
 800b188:	ebaa 0303 	sub.w	r3, sl, r3
 800b18c:	f8dc a000 	ldr.w	sl, [ip]
 800b190:	0c12      	lsrs	r2, r2, #16
 800b192:	fa13 f38a 	uxtah	r3, r3, sl
 800b196:	fb06 e202 	mla	r2, r6, r2, lr
 800b19a:	9300      	str	r3, [sp, #0]
 800b19c:	9b00      	ldr	r3, [sp, #0]
 800b19e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b1a2:	b292      	uxth	r2, r2
 800b1a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b1a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b1ac:	f8bd 3000 	ldrh.w	r3, [sp]
 800b1b0:	4581      	cmp	r9, r0
 800b1b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1b6:	f84c 3b04 	str.w	r3, [ip], #4
 800b1ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b1be:	d2db      	bcs.n	800b178 <quorem+0x44>
 800b1c0:	f855 300b 	ldr.w	r3, [r5, fp]
 800b1c4:	b92b      	cbnz	r3, 800b1d2 <quorem+0x9e>
 800b1c6:	9b01      	ldr	r3, [sp, #4]
 800b1c8:	3b04      	subs	r3, #4
 800b1ca:	429d      	cmp	r5, r3
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	d32e      	bcc.n	800b22e <quorem+0xfa>
 800b1d0:	613c      	str	r4, [r7, #16]
 800b1d2:	4638      	mov	r0, r7
 800b1d4:	f001 f8c6 	bl	800c364 <__mcmp>
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	db24      	blt.n	800b226 <quorem+0xf2>
 800b1dc:	3601      	adds	r6, #1
 800b1de:	4628      	mov	r0, r5
 800b1e0:	f04f 0c00 	mov.w	ip, #0
 800b1e4:	f858 2b04 	ldr.w	r2, [r8], #4
 800b1e8:	f8d0 e000 	ldr.w	lr, [r0]
 800b1ec:	b293      	uxth	r3, r2
 800b1ee:	ebac 0303 	sub.w	r3, ip, r3
 800b1f2:	0c12      	lsrs	r2, r2, #16
 800b1f4:	fa13 f38e 	uxtah	r3, r3, lr
 800b1f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b1fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b200:	b29b      	uxth	r3, r3
 800b202:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b206:	45c1      	cmp	r9, r8
 800b208:	f840 3b04 	str.w	r3, [r0], #4
 800b20c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b210:	d2e8      	bcs.n	800b1e4 <quorem+0xb0>
 800b212:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b216:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b21a:	b922      	cbnz	r2, 800b226 <quorem+0xf2>
 800b21c:	3b04      	subs	r3, #4
 800b21e:	429d      	cmp	r5, r3
 800b220:	461a      	mov	r2, r3
 800b222:	d30a      	bcc.n	800b23a <quorem+0x106>
 800b224:	613c      	str	r4, [r7, #16]
 800b226:	4630      	mov	r0, r6
 800b228:	b003      	add	sp, #12
 800b22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b22e:	6812      	ldr	r2, [r2, #0]
 800b230:	3b04      	subs	r3, #4
 800b232:	2a00      	cmp	r2, #0
 800b234:	d1cc      	bne.n	800b1d0 <quorem+0x9c>
 800b236:	3c01      	subs	r4, #1
 800b238:	e7c7      	b.n	800b1ca <quorem+0x96>
 800b23a:	6812      	ldr	r2, [r2, #0]
 800b23c:	3b04      	subs	r3, #4
 800b23e:	2a00      	cmp	r2, #0
 800b240:	d1f0      	bne.n	800b224 <quorem+0xf0>
 800b242:	3c01      	subs	r4, #1
 800b244:	e7eb      	b.n	800b21e <quorem+0xea>
 800b246:	2000      	movs	r0, #0
 800b248:	e7ee      	b.n	800b228 <quorem+0xf4>
 800b24a:	0000      	movs	r0, r0
 800b24c:	0000      	movs	r0, r0
	...

0800b250 <_dtoa_r>:
 800b250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b254:	ed2d 8b04 	vpush	{d8-d9}
 800b258:	ec57 6b10 	vmov	r6, r7, d0
 800b25c:	b093      	sub	sp, #76	; 0x4c
 800b25e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b260:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b264:	9106      	str	r1, [sp, #24]
 800b266:	ee10 aa10 	vmov	sl, s0
 800b26a:	4604      	mov	r4, r0
 800b26c:	9209      	str	r2, [sp, #36]	; 0x24
 800b26e:	930c      	str	r3, [sp, #48]	; 0x30
 800b270:	46bb      	mov	fp, r7
 800b272:	b975      	cbnz	r5, 800b292 <_dtoa_r+0x42>
 800b274:	2010      	movs	r0, #16
 800b276:	f000 fddd 	bl	800be34 <malloc>
 800b27a:	4602      	mov	r2, r0
 800b27c:	6260      	str	r0, [r4, #36]	; 0x24
 800b27e:	b920      	cbnz	r0, 800b28a <_dtoa_r+0x3a>
 800b280:	4ba7      	ldr	r3, [pc, #668]	; (800b520 <_dtoa_r+0x2d0>)
 800b282:	21ea      	movs	r1, #234	; 0xea
 800b284:	48a7      	ldr	r0, [pc, #668]	; (800b524 <_dtoa_r+0x2d4>)
 800b286:	f001 fbd1 	bl	800ca2c <__assert_func>
 800b28a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b28e:	6005      	str	r5, [r0, #0]
 800b290:	60c5      	str	r5, [r0, #12]
 800b292:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b294:	6819      	ldr	r1, [r3, #0]
 800b296:	b151      	cbz	r1, 800b2ae <_dtoa_r+0x5e>
 800b298:	685a      	ldr	r2, [r3, #4]
 800b29a:	604a      	str	r2, [r1, #4]
 800b29c:	2301      	movs	r3, #1
 800b29e:	4093      	lsls	r3, r2
 800b2a0:	608b      	str	r3, [r1, #8]
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	f000 fe1c 	bl	800bee0 <_Bfree>
 800b2a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	601a      	str	r2, [r3, #0]
 800b2ae:	1e3b      	subs	r3, r7, #0
 800b2b0:	bfaa      	itet	ge
 800b2b2:	2300      	movge	r3, #0
 800b2b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b2b8:	f8c8 3000 	strge.w	r3, [r8]
 800b2bc:	4b9a      	ldr	r3, [pc, #616]	; (800b528 <_dtoa_r+0x2d8>)
 800b2be:	bfbc      	itt	lt
 800b2c0:	2201      	movlt	r2, #1
 800b2c2:	f8c8 2000 	strlt.w	r2, [r8]
 800b2c6:	ea33 030b 	bics.w	r3, r3, fp
 800b2ca:	d11b      	bne.n	800b304 <_dtoa_r+0xb4>
 800b2cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800b2d2:	6013      	str	r3, [r2, #0]
 800b2d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2d8:	4333      	orrs	r3, r6
 800b2da:	f000 8592 	beq.w	800be02 <_dtoa_r+0xbb2>
 800b2de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2e0:	b963      	cbnz	r3, 800b2fc <_dtoa_r+0xac>
 800b2e2:	4b92      	ldr	r3, [pc, #584]	; (800b52c <_dtoa_r+0x2dc>)
 800b2e4:	e022      	b.n	800b32c <_dtoa_r+0xdc>
 800b2e6:	4b92      	ldr	r3, [pc, #584]	; (800b530 <_dtoa_r+0x2e0>)
 800b2e8:	9301      	str	r3, [sp, #4]
 800b2ea:	3308      	adds	r3, #8
 800b2ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b2ee:	6013      	str	r3, [r2, #0]
 800b2f0:	9801      	ldr	r0, [sp, #4]
 800b2f2:	b013      	add	sp, #76	; 0x4c
 800b2f4:	ecbd 8b04 	vpop	{d8-d9}
 800b2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2fc:	4b8b      	ldr	r3, [pc, #556]	; (800b52c <_dtoa_r+0x2dc>)
 800b2fe:	9301      	str	r3, [sp, #4]
 800b300:	3303      	adds	r3, #3
 800b302:	e7f3      	b.n	800b2ec <_dtoa_r+0x9c>
 800b304:	2200      	movs	r2, #0
 800b306:	2300      	movs	r3, #0
 800b308:	4650      	mov	r0, sl
 800b30a:	4659      	mov	r1, fp
 800b30c:	f7f5 fbdc 	bl	8000ac8 <__aeabi_dcmpeq>
 800b310:	ec4b ab19 	vmov	d9, sl, fp
 800b314:	4680      	mov	r8, r0
 800b316:	b158      	cbz	r0, 800b330 <_dtoa_r+0xe0>
 800b318:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b31a:	2301      	movs	r3, #1
 800b31c:	6013      	str	r3, [r2, #0]
 800b31e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b320:	2b00      	cmp	r3, #0
 800b322:	f000 856b 	beq.w	800bdfc <_dtoa_r+0xbac>
 800b326:	4883      	ldr	r0, [pc, #524]	; (800b534 <_dtoa_r+0x2e4>)
 800b328:	6018      	str	r0, [r3, #0]
 800b32a:	1e43      	subs	r3, r0, #1
 800b32c:	9301      	str	r3, [sp, #4]
 800b32e:	e7df      	b.n	800b2f0 <_dtoa_r+0xa0>
 800b330:	ec4b ab10 	vmov	d0, sl, fp
 800b334:	aa10      	add	r2, sp, #64	; 0x40
 800b336:	a911      	add	r1, sp, #68	; 0x44
 800b338:	4620      	mov	r0, r4
 800b33a:	f001 f8b9 	bl	800c4b0 <__d2b>
 800b33e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b342:	ee08 0a10 	vmov	s16, r0
 800b346:	2d00      	cmp	r5, #0
 800b348:	f000 8084 	beq.w	800b454 <_dtoa_r+0x204>
 800b34c:	ee19 3a90 	vmov	r3, s19
 800b350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b354:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b358:	4656      	mov	r6, sl
 800b35a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b35e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b362:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b366:	4b74      	ldr	r3, [pc, #464]	; (800b538 <_dtoa_r+0x2e8>)
 800b368:	2200      	movs	r2, #0
 800b36a:	4630      	mov	r0, r6
 800b36c:	4639      	mov	r1, r7
 800b36e:	f7f4 ff8b 	bl	8000288 <__aeabi_dsub>
 800b372:	a365      	add	r3, pc, #404	; (adr r3, 800b508 <_dtoa_r+0x2b8>)
 800b374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b378:	f7f5 f93e 	bl	80005f8 <__aeabi_dmul>
 800b37c:	a364      	add	r3, pc, #400	; (adr r3, 800b510 <_dtoa_r+0x2c0>)
 800b37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b382:	f7f4 ff83 	bl	800028c <__adddf3>
 800b386:	4606      	mov	r6, r0
 800b388:	4628      	mov	r0, r5
 800b38a:	460f      	mov	r7, r1
 800b38c:	f7f5 f8ca 	bl	8000524 <__aeabi_i2d>
 800b390:	a361      	add	r3, pc, #388	; (adr r3, 800b518 <_dtoa_r+0x2c8>)
 800b392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b396:	f7f5 f92f 	bl	80005f8 <__aeabi_dmul>
 800b39a:	4602      	mov	r2, r0
 800b39c:	460b      	mov	r3, r1
 800b39e:	4630      	mov	r0, r6
 800b3a0:	4639      	mov	r1, r7
 800b3a2:	f7f4 ff73 	bl	800028c <__adddf3>
 800b3a6:	4606      	mov	r6, r0
 800b3a8:	460f      	mov	r7, r1
 800b3aa:	f7f5 fbd5 	bl	8000b58 <__aeabi_d2iz>
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	9000      	str	r0, [sp, #0]
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	4630      	mov	r0, r6
 800b3b6:	4639      	mov	r1, r7
 800b3b8:	f7f5 fb90 	bl	8000adc <__aeabi_dcmplt>
 800b3bc:	b150      	cbz	r0, 800b3d4 <_dtoa_r+0x184>
 800b3be:	9800      	ldr	r0, [sp, #0]
 800b3c0:	f7f5 f8b0 	bl	8000524 <__aeabi_i2d>
 800b3c4:	4632      	mov	r2, r6
 800b3c6:	463b      	mov	r3, r7
 800b3c8:	f7f5 fb7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3cc:	b910      	cbnz	r0, 800b3d4 <_dtoa_r+0x184>
 800b3ce:	9b00      	ldr	r3, [sp, #0]
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	9300      	str	r3, [sp, #0]
 800b3d4:	9b00      	ldr	r3, [sp, #0]
 800b3d6:	2b16      	cmp	r3, #22
 800b3d8:	d85a      	bhi.n	800b490 <_dtoa_r+0x240>
 800b3da:	9a00      	ldr	r2, [sp, #0]
 800b3dc:	4b57      	ldr	r3, [pc, #348]	; (800b53c <_dtoa_r+0x2ec>)
 800b3de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e6:	ec51 0b19 	vmov	r0, r1, d9
 800b3ea:	f7f5 fb77 	bl	8000adc <__aeabi_dcmplt>
 800b3ee:	2800      	cmp	r0, #0
 800b3f0:	d050      	beq.n	800b494 <_dtoa_r+0x244>
 800b3f2:	9b00      	ldr	r3, [sp, #0]
 800b3f4:	3b01      	subs	r3, #1
 800b3f6:	9300      	str	r3, [sp, #0]
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3fe:	1b5d      	subs	r5, r3, r5
 800b400:	1e6b      	subs	r3, r5, #1
 800b402:	9305      	str	r3, [sp, #20]
 800b404:	bf45      	ittet	mi
 800b406:	f1c5 0301 	rsbmi	r3, r5, #1
 800b40a:	9304      	strmi	r3, [sp, #16]
 800b40c:	2300      	movpl	r3, #0
 800b40e:	2300      	movmi	r3, #0
 800b410:	bf4c      	ite	mi
 800b412:	9305      	strmi	r3, [sp, #20]
 800b414:	9304      	strpl	r3, [sp, #16]
 800b416:	9b00      	ldr	r3, [sp, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	db3d      	blt.n	800b498 <_dtoa_r+0x248>
 800b41c:	9b05      	ldr	r3, [sp, #20]
 800b41e:	9a00      	ldr	r2, [sp, #0]
 800b420:	920a      	str	r2, [sp, #40]	; 0x28
 800b422:	4413      	add	r3, r2
 800b424:	9305      	str	r3, [sp, #20]
 800b426:	2300      	movs	r3, #0
 800b428:	9307      	str	r3, [sp, #28]
 800b42a:	9b06      	ldr	r3, [sp, #24]
 800b42c:	2b09      	cmp	r3, #9
 800b42e:	f200 8089 	bhi.w	800b544 <_dtoa_r+0x2f4>
 800b432:	2b05      	cmp	r3, #5
 800b434:	bfc4      	itt	gt
 800b436:	3b04      	subgt	r3, #4
 800b438:	9306      	strgt	r3, [sp, #24]
 800b43a:	9b06      	ldr	r3, [sp, #24]
 800b43c:	f1a3 0302 	sub.w	r3, r3, #2
 800b440:	bfcc      	ite	gt
 800b442:	2500      	movgt	r5, #0
 800b444:	2501      	movle	r5, #1
 800b446:	2b03      	cmp	r3, #3
 800b448:	f200 8087 	bhi.w	800b55a <_dtoa_r+0x30a>
 800b44c:	e8df f003 	tbb	[pc, r3]
 800b450:	59383a2d 	.word	0x59383a2d
 800b454:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b458:	441d      	add	r5, r3
 800b45a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b45e:	2b20      	cmp	r3, #32
 800b460:	bfc1      	itttt	gt
 800b462:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b466:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b46a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b46e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b472:	bfda      	itte	le
 800b474:	f1c3 0320 	rsble	r3, r3, #32
 800b478:	fa06 f003 	lslle.w	r0, r6, r3
 800b47c:	4318      	orrgt	r0, r3
 800b47e:	f7f5 f841 	bl	8000504 <__aeabi_ui2d>
 800b482:	2301      	movs	r3, #1
 800b484:	4606      	mov	r6, r0
 800b486:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b48a:	3d01      	subs	r5, #1
 800b48c:	930e      	str	r3, [sp, #56]	; 0x38
 800b48e:	e76a      	b.n	800b366 <_dtoa_r+0x116>
 800b490:	2301      	movs	r3, #1
 800b492:	e7b2      	b.n	800b3fa <_dtoa_r+0x1aa>
 800b494:	900b      	str	r0, [sp, #44]	; 0x2c
 800b496:	e7b1      	b.n	800b3fc <_dtoa_r+0x1ac>
 800b498:	9b04      	ldr	r3, [sp, #16]
 800b49a:	9a00      	ldr	r2, [sp, #0]
 800b49c:	1a9b      	subs	r3, r3, r2
 800b49e:	9304      	str	r3, [sp, #16]
 800b4a0:	4253      	negs	r3, r2
 800b4a2:	9307      	str	r3, [sp, #28]
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b4a8:	e7bf      	b.n	800b42a <_dtoa_r+0x1da>
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	9308      	str	r3, [sp, #32]
 800b4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	dc55      	bgt.n	800b560 <_dtoa_r+0x310>
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	9209      	str	r2, [sp, #36]	; 0x24
 800b4be:	e00c      	b.n	800b4da <_dtoa_r+0x28a>
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e7f3      	b.n	800b4ac <_dtoa_r+0x25c>
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4c8:	9308      	str	r3, [sp, #32]
 800b4ca:	9b00      	ldr	r3, [sp, #0]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	9302      	str	r3, [sp, #8]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	9303      	str	r3, [sp, #12]
 800b4d6:	bfb8      	it	lt
 800b4d8:	2301      	movlt	r3, #1
 800b4da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b4dc:	2200      	movs	r2, #0
 800b4de:	6042      	str	r2, [r0, #4]
 800b4e0:	2204      	movs	r2, #4
 800b4e2:	f102 0614 	add.w	r6, r2, #20
 800b4e6:	429e      	cmp	r6, r3
 800b4e8:	6841      	ldr	r1, [r0, #4]
 800b4ea:	d93d      	bls.n	800b568 <_dtoa_r+0x318>
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f000 fcb7 	bl	800be60 <_Balloc>
 800b4f2:	9001      	str	r0, [sp, #4]
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d13b      	bne.n	800b570 <_dtoa_r+0x320>
 800b4f8:	4b11      	ldr	r3, [pc, #68]	; (800b540 <_dtoa_r+0x2f0>)
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b500:	e6c0      	b.n	800b284 <_dtoa_r+0x34>
 800b502:	2301      	movs	r3, #1
 800b504:	e7df      	b.n	800b4c6 <_dtoa_r+0x276>
 800b506:	bf00      	nop
 800b508:	636f4361 	.word	0x636f4361
 800b50c:	3fd287a7 	.word	0x3fd287a7
 800b510:	8b60c8b3 	.word	0x8b60c8b3
 800b514:	3fc68a28 	.word	0x3fc68a28
 800b518:	509f79fb 	.word	0x509f79fb
 800b51c:	3fd34413 	.word	0x3fd34413
 800b520:	0800d6b1 	.word	0x0800d6b1
 800b524:	0800d6c8 	.word	0x0800d6c8
 800b528:	7ff00000 	.word	0x7ff00000
 800b52c:	0800d6ad 	.word	0x0800d6ad
 800b530:	0800d6a4 	.word	0x0800d6a4
 800b534:	0800d681 	.word	0x0800d681
 800b538:	3ff80000 	.word	0x3ff80000
 800b53c:	0800d7b8 	.word	0x0800d7b8
 800b540:	0800d723 	.word	0x0800d723
 800b544:	2501      	movs	r5, #1
 800b546:	2300      	movs	r3, #0
 800b548:	9306      	str	r3, [sp, #24]
 800b54a:	9508      	str	r5, [sp, #32]
 800b54c:	f04f 33ff 	mov.w	r3, #4294967295
 800b550:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b554:	2200      	movs	r2, #0
 800b556:	2312      	movs	r3, #18
 800b558:	e7b0      	b.n	800b4bc <_dtoa_r+0x26c>
 800b55a:	2301      	movs	r3, #1
 800b55c:	9308      	str	r3, [sp, #32]
 800b55e:	e7f5      	b.n	800b54c <_dtoa_r+0x2fc>
 800b560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b562:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b566:	e7b8      	b.n	800b4da <_dtoa_r+0x28a>
 800b568:	3101      	adds	r1, #1
 800b56a:	6041      	str	r1, [r0, #4]
 800b56c:	0052      	lsls	r2, r2, #1
 800b56e:	e7b8      	b.n	800b4e2 <_dtoa_r+0x292>
 800b570:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b572:	9a01      	ldr	r2, [sp, #4]
 800b574:	601a      	str	r2, [r3, #0]
 800b576:	9b03      	ldr	r3, [sp, #12]
 800b578:	2b0e      	cmp	r3, #14
 800b57a:	f200 809d 	bhi.w	800b6b8 <_dtoa_r+0x468>
 800b57e:	2d00      	cmp	r5, #0
 800b580:	f000 809a 	beq.w	800b6b8 <_dtoa_r+0x468>
 800b584:	9b00      	ldr	r3, [sp, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	dd32      	ble.n	800b5f0 <_dtoa_r+0x3a0>
 800b58a:	4ab7      	ldr	r2, [pc, #732]	; (800b868 <_dtoa_r+0x618>)
 800b58c:	f003 030f 	and.w	r3, r3, #15
 800b590:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b594:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b598:	9b00      	ldr	r3, [sp, #0]
 800b59a:	05d8      	lsls	r0, r3, #23
 800b59c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b5a0:	d516      	bpl.n	800b5d0 <_dtoa_r+0x380>
 800b5a2:	4bb2      	ldr	r3, [pc, #712]	; (800b86c <_dtoa_r+0x61c>)
 800b5a4:	ec51 0b19 	vmov	r0, r1, d9
 800b5a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b5ac:	f7f5 f94e 	bl	800084c <__aeabi_ddiv>
 800b5b0:	f007 070f 	and.w	r7, r7, #15
 800b5b4:	4682      	mov	sl, r0
 800b5b6:	468b      	mov	fp, r1
 800b5b8:	2503      	movs	r5, #3
 800b5ba:	4eac      	ldr	r6, [pc, #688]	; (800b86c <_dtoa_r+0x61c>)
 800b5bc:	b957      	cbnz	r7, 800b5d4 <_dtoa_r+0x384>
 800b5be:	4642      	mov	r2, r8
 800b5c0:	464b      	mov	r3, r9
 800b5c2:	4650      	mov	r0, sl
 800b5c4:	4659      	mov	r1, fp
 800b5c6:	f7f5 f941 	bl	800084c <__aeabi_ddiv>
 800b5ca:	4682      	mov	sl, r0
 800b5cc:	468b      	mov	fp, r1
 800b5ce:	e028      	b.n	800b622 <_dtoa_r+0x3d2>
 800b5d0:	2502      	movs	r5, #2
 800b5d2:	e7f2      	b.n	800b5ba <_dtoa_r+0x36a>
 800b5d4:	07f9      	lsls	r1, r7, #31
 800b5d6:	d508      	bpl.n	800b5ea <_dtoa_r+0x39a>
 800b5d8:	4640      	mov	r0, r8
 800b5da:	4649      	mov	r1, r9
 800b5dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b5e0:	f7f5 f80a 	bl	80005f8 <__aeabi_dmul>
 800b5e4:	3501      	adds	r5, #1
 800b5e6:	4680      	mov	r8, r0
 800b5e8:	4689      	mov	r9, r1
 800b5ea:	107f      	asrs	r7, r7, #1
 800b5ec:	3608      	adds	r6, #8
 800b5ee:	e7e5      	b.n	800b5bc <_dtoa_r+0x36c>
 800b5f0:	f000 809b 	beq.w	800b72a <_dtoa_r+0x4da>
 800b5f4:	9b00      	ldr	r3, [sp, #0]
 800b5f6:	4f9d      	ldr	r7, [pc, #628]	; (800b86c <_dtoa_r+0x61c>)
 800b5f8:	425e      	negs	r6, r3
 800b5fa:	4b9b      	ldr	r3, [pc, #620]	; (800b868 <_dtoa_r+0x618>)
 800b5fc:	f006 020f 	and.w	r2, r6, #15
 800b600:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b608:	ec51 0b19 	vmov	r0, r1, d9
 800b60c:	f7f4 fff4 	bl	80005f8 <__aeabi_dmul>
 800b610:	1136      	asrs	r6, r6, #4
 800b612:	4682      	mov	sl, r0
 800b614:	468b      	mov	fp, r1
 800b616:	2300      	movs	r3, #0
 800b618:	2502      	movs	r5, #2
 800b61a:	2e00      	cmp	r6, #0
 800b61c:	d17a      	bne.n	800b714 <_dtoa_r+0x4c4>
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d1d3      	bne.n	800b5ca <_dtoa_r+0x37a>
 800b622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b624:	2b00      	cmp	r3, #0
 800b626:	f000 8082 	beq.w	800b72e <_dtoa_r+0x4de>
 800b62a:	4b91      	ldr	r3, [pc, #580]	; (800b870 <_dtoa_r+0x620>)
 800b62c:	2200      	movs	r2, #0
 800b62e:	4650      	mov	r0, sl
 800b630:	4659      	mov	r1, fp
 800b632:	f7f5 fa53 	bl	8000adc <__aeabi_dcmplt>
 800b636:	2800      	cmp	r0, #0
 800b638:	d079      	beq.n	800b72e <_dtoa_r+0x4de>
 800b63a:	9b03      	ldr	r3, [sp, #12]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d076      	beq.n	800b72e <_dtoa_r+0x4de>
 800b640:	9b02      	ldr	r3, [sp, #8]
 800b642:	2b00      	cmp	r3, #0
 800b644:	dd36      	ble.n	800b6b4 <_dtoa_r+0x464>
 800b646:	9b00      	ldr	r3, [sp, #0]
 800b648:	4650      	mov	r0, sl
 800b64a:	4659      	mov	r1, fp
 800b64c:	1e5f      	subs	r7, r3, #1
 800b64e:	2200      	movs	r2, #0
 800b650:	4b88      	ldr	r3, [pc, #544]	; (800b874 <_dtoa_r+0x624>)
 800b652:	f7f4 ffd1 	bl	80005f8 <__aeabi_dmul>
 800b656:	9e02      	ldr	r6, [sp, #8]
 800b658:	4682      	mov	sl, r0
 800b65a:	468b      	mov	fp, r1
 800b65c:	3501      	adds	r5, #1
 800b65e:	4628      	mov	r0, r5
 800b660:	f7f4 ff60 	bl	8000524 <__aeabi_i2d>
 800b664:	4652      	mov	r2, sl
 800b666:	465b      	mov	r3, fp
 800b668:	f7f4 ffc6 	bl	80005f8 <__aeabi_dmul>
 800b66c:	4b82      	ldr	r3, [pc, #520]	; (800b878 <_dtoa_r+0x628>)
 800b66e:	2200      	movs	r2, #0
 800b670:	f7f4 fe0c 	bl	800028c <__adddf3>
 800b674:	46d0      	mov	r8, sl
 800b676:	46d9      	mov	r9, fp
 800b678:	4682      	mov	sl, r0
 800b67a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b67e:	2e00      	cmp	r6, #0
 800b680:	d158      	bne.n	800b734 <_dtoa_r+0x4e4>
 800b682:	4b7e      	ldr	r3, [pc, #504]	; (800b87c <_dtoa_r+0x62c>)
 800b684:	2200      	movs	r2, #0
 800b686:	4640      	mov	r0, r8
 800b688:	4649      	mov	r1, r9
 800b68a:	f7f4 fdfd 	bl	8000288 <__aeabi_dsub>
 800b68e:	4652      	mov	r2, sl
 800b690:	465b      	mov	r3, fp
 800b692:	4680      	mov	r8, r0
 800b694:	4689      	mov	r9, r1
 800b696:	f7f5 fa3f 	bl	8000b18 <__aeabi_dcmpgt>
 800b69a:	2800      	cmp	r0, #0
 800b69c:	f040 8295 	bne.w	800bbca <_dtoa_r+0x97a>
 800b6a0:	4652      	mov	r2, sl
 800b6a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b6a6:	4640      	mov	r0, r8
 800b6a8:	4649      	mov	r1, r9
 800b6aa:	f7f5 fa17 	bl	8000adc <__aeabi_dcmplt>
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	f040 8289 	bne.w	800bbc6 <_dtoa_r+0x976>
 800b6b4:	ec5b ab19 	vmov	sl, fp, d9
 800b6b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	f2c0 8148 	blt.w	800b950 <_dtoa_r+0x700>
 800b6c0:	9a00      	ldr	r2, [sp, #0]
 800b6c2:	2a0e      	cmp	r2, #14
 800b6c4:	f300 8144 	bgt.w	800b950 <_dtoa_r+0x700>
 800b6c8:	4b67      	ldr	r3, [pc, #412]	; (800b868 <_dtoa_r+0x618>)
 800b6ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f280 80d5 	bge.w	800b884 <_dtoa_r+0x634>
 800b6da:	9b03      	ldr	r3, [sp, #12]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f300 80d1 	bgt.w	800b884 <_dtoa_r+0x634>
 800b6e2:	f040 826f 	bne.w	800bbc4 <_dtoa_r+0x974>
 800b6e6:	4b65      	ldr	r3, [pc, #404]	; (800b87c <_dtoa_r+0x62c>)
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	4640      	mov	r0, r8
 800b6ec:	4649      	mov	r1, r9
 800b6ee:	f7f4 ff83 	bl	80005f8 <__aeabi_dmul>
 800b6f2:	4652      	mov	r2, sl
 800b6f4:	465b      	mov	r3, fp
 800b6f6:	f7f5 fa05 	bl	8000b04 <__aeabi_dcmpge>
 800b6fa:	9e03      	ldr	r6, [sp, #12]
 800b6fc:	4637      	mov	r7, r6
 800b6fe:	2800      	cmp	r0, #0
 800b700:	f040 8245 	bne.w	800bb8e <_dtoa_r+0x93e>
 800b704:	9d01      	ldr	r5, [sp, #4]
 800b706:	2331      	movs	r3, #49	; 0x31
 800b708:	f805 3b01 	strb.w	r3, [r5], #1
 800b70c:	9b00      	ldr	r3, [sp, #0]
 800b70e:	3301      	adds	r3, #1
 800b710:	9300      	str	r3, [sp, #0]
 800b712:	e240      	b.n	800bb96 <_dtoa_r+0x946>
 800b714:	07f2      	lsls	r2, r6, #31
 800b716:	d505      	bpl.n	800b724 <_dtoa_r+0x4d4>
 800b718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b71c:	f7f4 ff6c 	bl	80005f8 <__aeabi_dmul>
 800b720:	3501      	adds	r5, #1
 800b722:	2301      	movs	r3, #1
 800b724:	1076      	asrs	r6, r6, #1
 800b726:	3708      	adds	r7, #8
 800b728:	e777      	b.n	800b61a <_dtoa_r+0x3ca>
 800b72a:	2502      	movs	r5, #2
 800b72c:	e779      	b.n	800b622 <_dtoa_r+0x3d2>
 800b72e:	9f00      	ldr	r7, [sp, #0]
 800b730:	9e03      	ldr	r6, [sp, #12]
 800b732:	e794      	b.n	800b65e <_dtoa_r+0x40e>
 800b734:	9901      	ldr	r1, [sp, #4]
 800b736:	4b4c      	ldr	r3, [pc, #304]	; (800b868 <_dtoa_r+0x618>)
 800b738:	4431      	add	r1, r6
 800b73a:	910d      	str	r1, [sp, #52]	; 0x34
 800b73c:	9908      	ldr	r1, [sp, #32]
 800b73e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b742:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b746:	2900      	cmp	r1, #0
 800b748:	d043      	beq.n	800b7d2 <_dtoa_r+0x582>
 800b74a:	494d      	ldr	r1, [pc, #308]	; (800b880 <_dtoa_r+0x630>)
 800b74c:	2000      	movs	r0, #0
 800b74e:	f7f5 f87d 	bl	800084c <__aeabi_ddiv>
 800b752:	4652      	mov	r2, sl
 800b754:	465b      	mov	r3, fp
 800b756:	f7f4 fd97 	bl	8000288 <__aeabi_dsub>
 800b75a:	9d01      	ldr	r5, [sp, #4]
 800b75c:	4682      	mov	sl, r0
 800b75e:	468b      	mov	fp, r1
 800b760:	4649      	mov	r1, r9
 800b762:	4640      	mov	r0, r8
 800b764:	f7f5 f9f8 	bl	8000b58 <__aeabi_d2iz>
 800b768:	4606      	mov	r6, r0
 800b76a:	f7f4 fedb 	bl	8000524 <__aeabi_i2d>
 800b76e:	4602      	mov	r2, r0
 800b770:	460b      	mov	r3, r1
 800b772:	4640      	mov	r0, r8
 800b774:	4649      	mov	r1, r9
 800b776:	f7f4 fd87 	bl	8000288 <__aeabi_dsub>
 800b77a:	3630      	adds	r6, #48	; 0x30
 800b77c:	f805 6b01 	strb.w	r6, [r5], #1
 800b780:	4652      	mov	r2, sl
 800b782:	465b      	mov	r3, fp
 800b784:	4680      	mov	r8, r0
 800b786:	4689      	mov	r9, r1
 800b788:	f7f5 f9a8 	bl	8000adc <__aeabi_dcmplt>
 800b78c:	2800      	cmp	r0, #0
 800b78e:	d163      	bne.n	800b858 <_dtoa_r+0x608>
 800b790:	4642      	mov	r2, r8
 800b792:	464b      	mov	r3, r9
 800b794:	4936      	ldr	r1, [pc, #216]	; (800b870 <_dtoa_r+0x620>)
 800b796:	2000      	movs	r0, #0
 800b798:	f7f4 fd76 	bl	8000288 <__aeabi_dsub>
 800b79c:	4652      	mov	r2, sl
 800b79e:	465b      	mov	r3, fp
 800b7a0:	f7f5 f99c 	bl	8000adc <__aeabi_dcmplt>
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	f040 80b5 	bne.w	800b914 <_dtoa_r+0x6c4>
 800b7aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7ac:	429d      	cmp	r5, r3
 800b7ae:	d081      	beq.n	800b6b4 <_dtoa_r+0x464>
 800b7b0:	4b30      	ldr	r3, [pc, #192]	; (800b874 <_dtoa_r+0x624>)
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	4650      	mov	r0, sl
 800b7b6:	4659      	mov	r1, fp
 800b7b8:	f7f4 ff1e 	bl	80005f8 <__aeabi_dmul>
 800b7bc:	4b2d      	ldr	r3, [pc, #180]	; (800b874 <_dtoa_r+0x624>)
 800b7be:	4682      	mov	sl, r0
 800b7c0:	468b      	mov	fp, r1
 800b7c2:	4640      	mov	r0, r8
 800b7c4:	4649      	mov	r1, r9
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f7f4 ff16 	bl	80005f8 <__aeabi_dmul>
 800b7cc:	4680      	mov	r8, r0
 800b7ce:	4689      	mov	r9, r1
 800b7d0:	e7c6      	b.n	800b760 <_dtoa_r+0x510>
 800b7d2:	4650      	mov	r0, sl
 800b7d4:	4659      	mov	r1, fp
 800b7d6:	f7f4 ff0f 	bl	80005f8 <__aeabi_dmul>
 800b7da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7dc:	9d01      	ldr	r5, [sp, #4]
 800b7de:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7e0:	4682      	mov	sl, r0
 800b7e2:	468b      	mov	fp, r1
 800b7e4:	4649      	mov	r1, r9
 800b7e6:	4640      	mov	r0, r8
 800b7e8:	f7f5 f9b6 	bl	8000b58 <__aeabi_d2iz>
 800b7ec:	4606      	mov	r6, r0
 800b7ee:	f7f4 fe99 	bl	8000524 <__aeabi_i2d>
 800b7f2:	3630      	adds	r6, #48	; 0x30
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	4640      	mov	r0, r8
 800b7fa:	4649      	mov	r1, r9
 800b7fc:	f7f4 fd44 	bl	8000288 <__aeabi_dsub>
 800b800:	f805 6b01 	strb.w	r6, [r5], #1
 800b804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b806:	429d      	cmp	r5, r3
 800b808:	4680      	mov	r8, r0
 800b80a:	4689      	mov	r9, r1
 800b80c:	f04f 0200 	mov.w	r2, #0
 800b810:	d124      	bne.n	800b85c <_dtoa_r+0x60c>
 800b812:	4b1b      	ldr	r3, [pc, #108]	; (800b880 <_dtoa_r+0x630>)
 800b814:	4650      	mov	r0, sl
 800b816:	4659      	mov	r1, fp
 800b818:	f7f4 fd38 	bl	800028c <__adddf3>
 800b81c:	4602      	mov	r2, r0
 800b81e:	460b      	mov	r3, r1
 800b820:	4640      	mov	r0, r8
 800b822:	4649      	mov	r1, r9
 800b824:	f7f5 f978 	bl	8000b18 <__aeabi_dcmpgt>
 800b828:	2800      	cmp	r0, #0
 800b82a:	d173      	bne.n	800b914 <_dtoa_r+0x6c4>
 800b82c:	4652      	mov	r2, sl
 800b82e:	465b      	mov	r3, fp
 800b830:	4913      	ldr	r1, [pc, #76]	; (800b880 <_dtoa_r+0x630>)
 800b832:	2000      	movs	r0, #0
 800b834:	f7f4 fd28 	bl	8000288 <__aeabi_dsub>
 800b838:	4602      	mov	r2, r0
 800b83a:	460b      	mov	r3, r1
 800b83c:	4640      	mov	r0, r8
 800b83e:	4649      	mov	r1, r9
 800b840:	f7f5 f94c 	bl	8000adc <__aeabi_dcmplt>
 800b844:	2800      	cmp	r0, #0
 800b846:	f43f af35 	beq.w	800b6b4 <_dtoa_r+0x464>
 800b84a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b84c:	1e6b      	subs	r3, r5, #1
 800b84e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b850:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b854:	2b30      	cmp	r3, #48	; 0x30
 800b856:	d0f8      	beq.n	800b84a <_dtoa_r+0x5fa>
 800b858:	9700      	str	r7, [sp, #0]
 800b85a:	e049      	b.n	800b8f0 <_dtoa_r+0x6a0>
 800b85c:	4b05      	ldr	r3, [pc, #20]	; (800b874 <_dtoa_r+0x624>)
 800b85e:	f7f4 fecb 	bl	80005f8 <__aeabi_dmul>
 800b862:	4680      	mov	r8, r0
 800b864:	4689      	mov	r9, r1
 800b866:	e7bd      	b.n	800b7e4 <_dtoa_r+0x594>
 800b868:	0800d7b8 	.word	0x0800d7b8
 800b86c:	0800d790 	.word	0x0800d790
 800b870:	3ff00000 	.word	0x3ff00000
 800b874:	40240000 	.word	0x40240000
 800b878:	401c0000 	.word	0x401c0000
 800b87c:	40140000 	.word	0x40140000
 800b880:	3fe00000 	.word	0x3fe00000
 800b884:	9d01      	ldr	r5, [sp, #4]
 800b886:	4656      	mov	r6, sl
 800b888:	465f      	mov	r7, fp
 800b88a:	4642      	mov	r2, r8
 800b88c:	464b      	mov	r3, r9
 800b88e:	4630      	mov	r0, r6
 800b890:	4639      	mov	r1, r7
 800b892:	f7f4 ffdb 	bl	800084c <__aeabi_ddiv>
 800b896:	f7f5 f95f 	bl	8000b58 <__aeabi_d2iz>
 800b89a:	4682      	mov	sl, r0
 800b89c:	f7f4 fe42 	bl	8000524 <__aeabi_i2d>
 800b8a0:	4642      	mov	r2, r8
 800b8a2:	464b      	mov	r3, r9
 800b8a4:	f7f4 fea8 	bl	80005f8 <__aeabi_dmul>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	4639      	mov	r1, r7
 800b8b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b8b4:	f7f4 fce8 	bl	8000288 <__aeabi_dsub>
 800b8b8:	f805 6b01 	strb.w	r6, [r5], #1
 800b8bc:	9e01      	ldr	r6, [sp, #4]
 800b8be:	9f03      	ldr	r7, [sp, #12]
 800b8c0:	1bae      	subs	r6, r5, r6
 800b8c2:	42b7      	cmp	r7, r6
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	d135      	bne.n	800b936 <_dtoa_r+0x6e6>
 800b8ca:	f7f4 fcdf 	bl	800028c <__adddf3>
 800b8ce:	4642      	mov	r2, r8
 800b8d0:	464b      	mov	r3, r9
 800b8d2:	4606      	mov	r6, r0
 800b8d4:	460f      	mov	r7, r1
 800b8d6:	f7f5 f91f 	bl	8000b18 <__aeabi_dcmpgt>
 800b8da:	b9d0      	cbnz	r0, 800b912 <_dtoa_r+0x6c2>
 800b8dc:	4642      	mov	r2, r8
 800b8de:	464b      	mov	r3, r9
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	4639      	mov	r1, r7
 800b8e4:	f7f5 f8f0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8e8:	b110      	cbz	r0, 800b8f0 <_dtoa_r+0x6a0>
 800b8ea:	f01a 0f01 	tst.w	sl, #1
 800b8ee:	d110      	bne.n	800b912 <_dtoa_r+0x6c2>
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	ee18 1a10 	vmov	r1, s16
 800b8f6:	f000 faf3 	bl	800bee0 <_Bfree>
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	9800      	ldr	r0, [sp, #0]
 800b8fe:	702b      	strb	r3, [r5, #0]
 800b900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b902:	3001      	adds	r0, #1
 800b904:	6018      	str	r0, [r3, #0]
 800b906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b908:	2b00      	cmp	r3, #0
 800b90a:	f43f acf1 	beq.w	800b2f0 <_dtoa_r+0xa0>
 800b90e:	601d      	str	r5, [r3, #0]
 800b910:	e4ee      	b.n	800b2f0 <_dtoa_r+0xa0>
 800b912:	9f00      	ldr	r7, [sp, #0]
 800b914:	462b      	mov	r3, r5
 800b916:	461d      	mov	r5, r3
 800b918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b91c:	2a39      	cmp	r2, #57	; 0x39
 800b91e:	d106      	bne.n	800b92e <_dtoa_r+0x6de>
 800b920:	9a01      	ldr	r2, [sp, #4]
 800b922:	429a      	cmp	r2, r3
 800b924:	d1f7      	bne.n	800b916 <_dtoa_r+0x6c6>
 800b926:	9901      	ldr	r1, [sp, #4]
 800b928:	2230      	movs	r2, #48	; 0x30
 800b92a:	3701      	adds	r7, #1
 800b92c:	700a      	strb	r2, [r1, #0]
 800b92e:	781a      	ldrb	r2, [r3, #0]
 800b930:	3201      	adds	r2, #1
 800b932:	701a      	strb	r2, [r3, #0]
 800b934:	e790      	b.n	800b858 <_dtoa_r+0x608>
 800b936:	4ba6      	ldr	r3, [pc, #664]	; (800bbd0 <_dtoa_r+0x980>)
 800b938:	2200      	movs	r2, #0
 800b93a:	f7f4 fe5d 	bl	80005f8 <__aeabi_dmul>
 800b93e:	2200      	movs	r2, #0
 800b940:	2300      	movs	r3, #0
 800b942:	4606      	mov	r6, r0
 800b944:	460f      	mov	r7, r1
 800b946:	f7f5 f8bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800b94a:	2800      	cmp	r0, #0
 800b94c:	d09d      	beq.n	800b88a <_dtoa_r+0x63a>
 800b94e:	e7cf      	b.n	800b8f0 <_dtoa_r+0x6a0>
 800b950:	9a08      	ldr	r2, [sp, #32]
 800b952:	2a00      	cmp	r2, #0
 800b954:	f000 80d7 	beq.w	800bb06 <_dtoa_r+0x8b6>
 800b958:	9a06      	ldr	r2, [sp, #24]
 800b95a:	2a01      	cmp	r2, #1
 800b95c:	f300 80ba 	bgt.w	800bad4 <_dtoa_r+0x884>
 800b960:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b962:	2a00      	cmp	r2, #0
 800b964:	f000 80b2 	beq.w	800bacc <_dtoa_r+0x87c>
 800b968:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b96c:	9e07      	ldr	r6, [sp, #28]
 800b96e:	9d04      	ldr	r5, [sp, #16]
 800b970:	9a04      	ldr	r2, [sp, #16]
 800b972:	441a      	add	r2, r3
 800b974:	9204      	str	r2, [sp, #16]
 800b976:	9a05      	ldr	r2, [sp, #20]
 800b978:	2101      	movs	r1, #1
 800b97a:	441a      	add	r2, r3
 800b97c:	4620      	mov	r0, r4
 800b97e:	9205      	str	r2, [sp, #20]
 800b980:	f000 fb66 	bl	800c050 <__i2b>
 800b984:	4607      	mov	r7, r0
 800b986:	2d00      	cmp	r5, #0
 800b988:	dd0c      	ble.n	800b9a4 <_dtoa_r+0x754>
 800b98a:	9b05      	ldr	r3, [sp, #20]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	dd09      	ble.n	800b9a4 <_dtoa_r+0x754>
 800b990:	42ab      	cmp	r3, r5
 800b992:	9a04      	ldr	r2, [sp, #16]
 800b994:	bfa8      	it	ge
 800b996:	462b      	movge	r3, r5
 800b998:	1ad2      	subs	r2, r2, r3
 800b99a:	9204      	str	r2, [sp, #16]
 800b99c:	9a05      	ldr	r2, [sp, #20]
 800b99e:	1aed      	subs	r5, r5, r3
 800b9a0:	1ad3      	subs	r3, r2, r3
 800b9a2:	9305      	str	r3, [sp, #20]
 800b9a4:	9b07      	ldr	r3, [sp, #28]
 800b9a6:	b31b      	cbz	r3, 800b9f0 <_dtoa_r+0x7a0>
 800b9a8:	9b08      	ldr	r3, [sp, #32]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	f000 80af 	beq.w	800bb0e <_dtoa_r+0x8be>
 800b9b0:	2e00      	cmp	r6, #0
 800b9b2:	dd13      	ble.n	800b9dc <_dtoa_r+0x78c>
 800b9b4:	4639      	mov	r1, r7
 800b9b6:	4632      	mov	r2, r6
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f000 fc09 	bl	800c1d0 <__pow5mult>
 800b9be:	ee18 2a10 	vmov	r2, s16
 800b9c2:	4601      	mov	r1, r0
 800b9c4:	4607      	mov	r7, r0
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	f000 fb58 	bl	800c07c <__multiply>
 800b9cc:	ee18 1a10 	vmov	r1, s16
 800b9d0:	4680      	mov	r8, r0
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	f000 fa84 	bl	800bee0 <_Bfree>
 800b9d8:	ee08 8a10 	vmov	s16, r8
 800b9dc:	9b07      	ldr	r3, [sp, #28]
 800b9de:	1b9a      	subs	r2, r3, r6
 800b9e0:	d006      	beq.n	800b9f0 <_dtoa_r+0x7a0>
 800b9e2:	ee18 1a10 	vmov	r1, s16
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	f000 fbf2 	bl	800c1d0 <__pow5mult>
 800b9ec:	ee08 0a10 	vmov	s16, r0
 800b9f0:	2101      	movs	r1, #1
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	f000 fb2c 	bl	800c050 <__i2b>
 800b9f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	4606      	mov	r6, r0
 800b9fe:	f340 8088 	ble.w	800bb12 <_dtoa_r+0x8c2>
 800ba02:	461a      	mov	r2, r3
 800ba04:	4601      	mov	r1, r0
 800ba06:	4620      	mov	r0, r4
 800ba08:	f000 fbe2 	bl	800c1d0 <__pow5mult>
 800ba0c:	9b06      	ldr	r3, [sp, #24]
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	4606      	mov	r6, r0
 800ba12:	f340 8081 	ble.w	800bb18 <_dtoa_r+0x8c8>
 800ba16:	f04f 0800 	mov.w	r8, #0
 800ba1a:	6933      	ldr	r3, [r6, #16]
 800ba1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ba20:	6918      	ldr	r0, [r3, #16]
 800ba22:	f000 fac5 	bl	800bfb0 <__hi0bits>
 800ba26:	f1c0 0020 	rsb	r0, r0, #32
 800ba2a:	9b05      	ldr	r3, [sp, #20]
 800ba2c:	4418      	add	r0, r3
 800ba2e:	f010 001f 	ands.w	r0, r0, #31
 800ba32:	f000 8092 	beq.w	800bb5a <_dtoa_r+0x90a>
 800ba36:	f1c0 0320 	rsb	r3, r0, #32
 800ba3a:	2b04      	cmp	r3, #4
 800ba3c:	f340 808a 	ble.w	800bb54 <_dtoa_r+0x904>
 800ba40:	f1c0 001c 	rsb	r0, r0, #28
 800ba44:	9b04      	ldr	r3, [sp, #16]
 800ba46:	4403      	add	r3, r0
 800ba48:	9304      	str	r3, [sp, #16]
 800ba4a:	9b05      	ldr	r3, [sp, #20]
 800ba4c:	4403      	add	r3, r0
 800ba4e:	4405      	add	r5, r0
 800ba50:	9305      	str	r3, [sp, #20]
 800ba52:	9b04      	ldr	r3, [sp, #16]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	dd07      	ble.n	800ba68 <_dtoa_r+0x818>
 800ba58:	ee18 1a10 	vmov	r1, s16
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f000 fc10 	bl	800c284 <__lshift>
 800ba64:	ee08 0a10 	vmov	s16, r0
 800ba68:	9b05      	ldr	r3, [sp, #20]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	dd05      	ble.n	800ba7a <_dtoa_r+0x82a>
 800ba6e:	4631      	mov	r1, r6
 800ba70:	461a      	mov	r2, r3
 800ba72:	4620      	mov	r0, r4
 800ba74:	f000 fc06 	bl	800c284 <__lshift>
 800ba78:	4606      	mov	r6, r0
 800ba7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d06e      	beq.n	800bb5e <_dtoa_r+0x90e>
 800ba80:	ee18 0a10 	vmov	r0, s16
 800ba84:	4631      	mov	r1, r6
 800ba86:	f000 fc6d 	bl	800c364 <__mcmp>
 800ba8a:	2800      	cmp	r0, #0
 800ba8c:	da67      	bge.n	800bb5e <_dtoa_r+0x90e>
 800ba8e:	9b00      	ldr	r3, [sp, #0]
 800ba90:	3b01      	subs	r3, #1
 800ba92:	ee18 1a10 	vmov	r1, s16
 800ba96:	9300      	str	r3, [sp, #0]
 800ba98:	220a      	movs	r2, #10
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	f000 fa41 	bl	800bf24 <__multadd>
 800baa2:	9b08      	ldr	r3, [sp, #32]
 800baa4:	ee08 0a10 	vmov	s16, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f000 81b1 	beq.w	800be10 <_dtoa_r+0xbc0>
 800baae:	2300      	movs	r3, #0
 800bab0:	4639      	mov	r1, r7
 800bab2:	220a      	movs	r2, #10
 800bab4:	4620      	mov	r0, r4
 800bab6:	f000 fa35 	bl	800bf24 <__multadd>
 800baba:	9b02      	ldr	r3, [sp, #8]
 800babc:	2b00      	cmp	r3, #0
 800babe:	4607      	mov	r7, r0
 800bac0:	f300 808e 	bgt.w	800bbe0 <_dtoa_r+0x990>
 800bac4:	9b06      	ldr	r3, [sp, #24]
 800bac6:	2b02      	cmp	r3, #2
 800bac8:	dc51      	bgt.n	800bb6e <_dtoa_r+0x91e>
 800baca:	e089      	b.n	800bbe0 <_dtoa_r+0x990>
 800bacc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bace:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bad2:	e74b      	b.n	800b96c <_dtoa_r+0x71c>
 800bad4:	9b03      	ldr	r3, [sp, #12]
 800bad6:	1e5e      	subs	r6, r3, #1
 800bad8:	9b07      	ldr	r3, [sp, #28]
 800bada:	42b3      	cmp	r3, r6
 800badc:	bfbf      	itttt	lt
 800bade:	9b07      	ldrlt	r3, [sp, #28]
 800bae0:	9607      	strlt	r6, [sp, #28]
 800bae2:	1af2      	sublt	r2, r6, r3
 800bae4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bae6:	bfb6      	itet	lt
 800bae8:	189b      	addlt	r3, r3, r2
 800baea:	1b9e      	subge	r6, r3, r6
 800baec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800baee:	9b03      	ldr	r3, [sp, #12]
 800baf0:	bfb8      	it	lt
 800baf2:	2600      	movlt	r6, #0
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	bfb7      	itett	lt
 800baf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bafc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bb00:	1a9d      	sublt	r5, r3, r2
 800bb02:	2300      	movlt	r3, #0
 800bb04:	e734      	b.n	800b970 <_dtoa_r+0x720>
 800bb06:	9e07      	ldr	r6, [sp, #28]
 800bb08:	9d04      	ldr	r5, [sp, #16]
 800bb0a:	9f08      	ldr	r7, [sp, #32]
 800bb0c:	e73b      	b.n	800b986 <_dtoa_r+0x736>
 800bb0e:	9a07      	ldr	r2, [sp, #28]
 800bb10:	e767      	b.n	800b9e2 <_dtoa_r+0x792>
 800bb12:	9b06      	ldr	r3, [sp, #24]
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	dc18      	bgt.n	800bb4a <_dtoa_r+0x8fa>
 800bb18:	f1ba 0f00 	cmp.w	sl, #0
 800bb1c:	d115      	bne.n	800bb4a <_dtoa_r+0x8fa>
 800bb1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb22:	b993      	cbnz	r3, 800bb4a <_dtoa_r+0x8fa>
 800bb24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bb28:	0d1b      	lsrs	r3, r3, #20
 800bb2a:	051b      	lsls	r3, r3, #20
 800bb2c:	b183      	cbz	r3, 800bb50 <_dtoa_r+0x900>
 800bb2e:	9b04      	ldr	r3, [sp, #16]
 800bb30:	3301      	adds	r3, #1
 800bb32:	9304      	str	r3, [sp, #16]
 800bb34:	9b05      	ldr	r3, [sp, #20]
 800bb36:	3301      	adds	r3, #1
 800bb38:	9305      	str	r3, [sp, #20]
 800bb3a:	f04f 0801 	mov.w	r8, #1
 800bb3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f47f af6a 	bne.w	800ba1a <_dtoa_r+0x7ca>
 800bb46:	2001      	movs	r0, #1
 800bb48:	e76f      	b.n	800ba2a <_dtoa_r+0x7da>
 800bb4a:	f04f 0800 	mov.w	r8, #0
 800bb4e:	e7f6      	b.n	800bb3e <_dtoa_r+0x8ee>
 800bb50:	4698      	mov	r8, r3
 800bb52:	e7f4      	b.n	800bb3e <_dtoa_r+0x8ee>
 800bb54:	f43f af7d 	beq.w	800ba52 <_dtoa_r+0x802>
 800bb58:	4618      	mov	r0, r3
 800bb5a:	301c      	adds	r0, #28
 800bb5c:	e772      	b.n	800ba44 <_dtoa_r+0x7f4>
 800bb5e:	9b03      	ldr	r3, [sp, #12]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	dc37      	bgt.n	800bbd4 <_dtoa_r+0x984>
 800bb64:	9b06      	ldr	r3, [sp, #24]
 800bb66:	2b02      	cmp	r3, #2
 800bb68:	dd34      	ble.n	800bbd4 <_dtoa_r+0x984>
 800bb6a:	9b03      	ldr	r3, [sp, #12]
 800bb6c:	9302      	str	r3, [sp, #8]
 800bb6e:	9b02      	ldr	r3, [sp, #8]
 800bb70:	b96b      	cbnz	r3, 800bb8e <_dtoa_r+0x93e>
 800bb72:	4631      	mov	r1, r6
 800bb74:	2205      	movs	r2, #5
 800bb76:	4620      	mov	r0, r4
 800bb78:	f000 f9d4 	bl	800bf24 <__multadd>
 800bb7c:	4601      	mov	r1, r0
 800bb7e:	4606      	mov	r6, r0
 800bb80:	ee18 0a10 	vmov	r0, s16
 800bb84:	f000 fbee 	bl	800c364 <__mcmp>
 800bb88:	2800      	cmp	r0, #0
 800bb8a:	f73f adbb 	bgt.w	800b704 <_dtoa_r+0x4b4>
 800bb8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb90:	9d01      	ldr	r5, [sp, #4]
 800bb92:	43db      	mvns	r3, r3
 800bb94:	9300      	str	r3, [sp, #0]
 800bb96:	f04f 0800 	mov.w	r8, #0
 800bb9a:	4631      	mov	r1, r6
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	f000 f99f 	bl	800bee0 <_Bfree>
 800bba2:	2f00      	cmp	r7, #0
 800bba4:	f43f aea4 	beq.w	800b8f0 <_dtoa_r+0x6a0>
 800bba8:	f1b8 0f00 	cmp.w	r8, #0
 800bbac:	d005      	beq.n	800bbba <_dtoa_r+0x96a>
 800bbae:	45b8      	cmp	r8, r7
 800bbb0:	d003      	beq.n	800bbba <_dtoa_r+0x96a>
 800bbb2:	4641      	mov	r1, r8
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	f000 f993 	bl	800bee0 <_Bfree>
 800bbba:	4639      	mov	r1, r7
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f000 f98f 	bl	800bee0 <_Bfree>
 800bbc2:	e695      	b.n	800b8f0 <_dtoa_r+0x6a0>
 800bbc4:	2600      	movs	r6, #0
 800bbc6:	4637      	mov	r7, r6
 800bbc8:	e7e1      	b.n	800bb8e <_dtoa_r+0x93e>
 800bbca:	9700      	str	r7, [sp, #0]
 800bbcc:	4637      	mov	r7, r6
 800bbce:	e599      	b.n	800b704 <_dtoa_r+0x4b4>
 800bbd0:	40240000 	.word	0x40240000
 800bbd4:	9b08      	ldr	r3, [sp, #32]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	f000 80ca 	beq.w	800bd70 <_dtoa_r+0xb20>
 800bbdc:	9b03      	ldr	r3, [sp, #12]
 800bbde:	9302      	str	r3, [sp, #8]
 800bbe0:	2d00      	cmp	r5, #0
 800bbe2:	dd05      	ble.n	800bbf0 <_dtoa_r+0x9a0>
 800bbe4:	4639      	mov	r1, r7
 800bbe6:	462a      	mov	r2, r5
 800bbe8:	4620      	mov	r0, r4
 800bbea:	f000 fb4b 	bl	800c284 <__lshift>
 800bbee:	4607      	mov	r7, r0
 800bbf0:	f1b8 0f00 	cmp.w	r8, #0
 800bbf4:	d05b      	beq.n	800bcae <_dtoa_r+0xa5e>
 800bbf6:	6879      	ldr	r1, [r7, #4]
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	f000 f931 	bl	800be60 <_Balloc>
 800bbfe:	4605      	mov	r5, r0
 800bc00:	b928      	cbnz	r0, 800bc0e <_dtoa_r+0x9be>
 800bc02:	4b87      	ldr	r3, [pc, #540]	; (800be20 <_dtoa_r+0xbd0>)
 800bc04:	4602      	mov	r2, r0
 800bc06:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bc0a:	f7ff bb3b 	b.w	800b284 <_dtoa_r+0x34>
 800bc0e:	693a      	ldr	r2, [r7, #16]
 800bc10:	3202      	adds	r2, #2
 800bc12:	0092      	lsls	r2, r2, #2
 800bc14:	f107 010c 	add.w	r1, r7, #12
 800bc18:	300c      	adds	r0, #12
 800bc1a:	f000 f913 	bl	800be44 <memcpy>
 800bc1e:	2201      	movs	r2, #1
 800bc20:	4629      	mov	r1, r5
 800bc22:	4620      	mov	r0, r4
 800bc24:	f000 fb2e 	bl	800c284 <__lshift>
 800bc28:	9b01      	ldr	r3, [sp, #4]
 800bc2a:	f103 0901 	add.w	r9, r3, #1
 800bc2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bc32:	4413      	add	r3, r2
 800bc34:	9305      	str	r3, [sp, #20]
 800bc36:	f00a 0301 	and.w	r3, sl, #1
 800bc3a:	46b8      	mov	r8, r7
 800bc3c:	9304      	str	r3, [sp, #16]
 800bc3e:	4607      	mov	r7, r0
 800bc40:	4631      	mov	r1, r6
 800bc42:	ee18 0a10 	vmov	r0, s16
 800bc46:	f7ff fa75 	bl	800b134 <quorem>
 800bc4a:	4641      	mov	r1, r8
 800bc4c:	9002      	str	r0, [sp, #8]
 800bc4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bc52:	ee18 0a10 	vmov	r0, s16
 800bc56:	f000 fb85 	bl	800c364 <__mcmp>
 800bc5a:	463a      	mov	r2, r7
 800bc5c:	9003      	str	r0, [sp, #12]
 800bc5e:	4631      	mov	r1, r6
 800bc60:	4620      	mov	r0, r4
 800bc62:	f000 fb9b 	bl	800c39c <__mdiff>
 800bc66:	68c2      	ldr	r2, [r0, #12]
 800bc68:	f109 3bff 	add.w	fp, r9, #4294967295
 800bc6c:	4605      	mov	r5, r0
 800bc6e:	bb02      	cbnz	r2, 800bcb2 <_dtoa_r+0xa62>
 800bc70:	4601      	mov	r1, r0
 800bc72:	ee18 0a10 	vmov	r0, s16
 800bc76:	f000 fb75 	bl	800c364 <__mcmp>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	4629      	mov	r1, r5
 800bc7e:	4620      	mov	r0, r4
 800bc80:	9207      	str	r2, [sp, #28]
 800bc82:	f000 f92d 	bl	800bee0 <_Bfree>
 800bc86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bc8a:	ea43 0102 	orr.w	r1, r3, r2
 800bc8e:	9b04      	ldr	r3, [sp, #16]
 800bc90:	430b      	orrs	r3, r1
 800bc92:	464d      	mov	r5, r9
 800bc94:	d10f      	bne.n	800bcb6 <_dtoa_r+0xa66>
 800bc96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bc9a:	d02a      	beq.n	800bcf2 <_dtoa_r+0xaa2>
 800bc9c:	9b03      	ldr	r3, [sp, #12]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	dd02      	ble.n	800bca8 <_dtoa_r+0xa58>
 800bca2:	9b02      	ldr	r3, [sp, #8]
 800bca4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bca8:	f88b a000 	strb.w	sl, [fp]
 800bcac:	e775      	b.n	800bb9a <_dtoa_r+0x94a>
 800bcae:	4638      	mov	r0, r7
 800bcb0:	e7ba      	b.n	800bc28 <_dtoa_r+0x9d8>
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	e7e2      	b.n	800bc7c <_dtoa_r+0xa2c>
 800bcb6:	9b03      	ldr	r3, [sp, #12]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	db04      	blt.n	800bcc6 <_dtoa_r+0xa76>
 800bcbc:	9906      	ldr	r1, [sp, #24]
 800bcbe:	430b      	orrs	r3, r1
 800bcc0:	9904      	ldr	r1, [sp, #16]
 800bcc2:	430b      	orrs	r3, r1
 800bcc4:	d122      	bne.n	800bd0c <_dtoa_r+0xabc>
 800bcc6:	2a00      	cmp	r2, #0
 800bcc8:	ddee      	ble.n	800bca8 <_dtoa_r+0xa58>
 800bcca:	ee18 1a10 	vmov	r1, s16
 800bcce:	2201      	movs	r2, #1
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	f000 fad7 	bl	800c284 <__lshift>
 800bcd6:	4631      	mov	r1, r6
 800bcd8:	ee08 0a10 	vmov	s16, r0
 800bcdc:	f000 fb42 	bl	800c364 <__mcmp>
 800bce0:	2800      	cmp	r0, #0
 800bce2:	dc03      	bgt.n	800bcec <_dtoa_r+0xa9c>
 800bce4:	d1e0      	bne.n	800bca8 <_dtoa_r+0xa58>
 800bce6:	f01a 0f01 	tst.w	sl, #1
 800bcea:	d0dd      	beq.n	800bca8 <_dtoa_r+0xa58>
 800bcec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bcf0:	d1d7      	bne.n	800bca2 <_dtoa_r+0xa52>
 800bcf2:	2339      	movs	r3, #57	; 0x39
 800bcf4:	f88b 3000 	strb.w	r3, [fp]
 800bcf8:	462b      	mov	r3, r5
 800bcfa:	461d      	mov	r5, r3
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bd02:	2a39      	cmp	r2, #57	; 0x39
 800bd04:	d071      	beq.n	800bdea <_dtoa_r+0xb9a>
 800bd06:	3201      	adds	r2, #1
 800bd08:	701a      	strb	r2, [r3, #0]
 800bd0a:	e746      	b.n	800bb9a <_dtoa_r+0x94a>
 800bd0c:	2a00      	cmp	r2, #0
 800bd0e:	dd07      	ble.n	800bd20 <_dtoa_r+0xad0>
 800bd10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bd14:	d0ed      	beq.n	800bcf2 <_dtoa_r+0xaa2>
 800bd16:	f10a 0301 	add.w	r3, sl, #1
 800bd1a:	f88b 3000 	strb.w	r3, [fp]
 800bd1e:	e73c      	b.n	800bb9a <_dtoa_r+0x94a>
 800bd20:	9b05      	ldr	r3, [sp, #20]
 800bd22:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bd26:	4599      	cmp	r9, r3
 800bd28:	d047      	beq.n	800bdba <_dtoa_r+0xb6a>
 800bd2a:	ee18 1a10 	vmov	r1, s16
 800bd2e:	2300      	movs	r3, #0
 800bd30:	220a      	movs	r2, #10
 800bd32:	4620      	mov	r0, r4
 800bd34:	f000 f8f6 	bl	800bf24 <__multadd>
 800bd38:	45b8      	cmp	r8, r7
 800bd3a:	ee08 0a10 	vmov	s16, r0
 800bd3e:	f04f 0300 	mov.w	r3, #0
 800bd42:	f04f 020a 	mov.w	r2, #10
 800bd46:	4641      	mov	r1, r8
 800bd48:	4620      	mov	r0, r4
 800bd4a:	d106      	bne.n	800bd5a <_dtoa_r+0xb0a>
 800bd4c:	f000 f8ea 	bl	800bf24 <__multadd>
 800bd50:	4680      	mov	r8, r0
 800bd52:	4607      	mov	r7, r0
 800bd54:	f109 0901 	add.w	r9, r9, #1
 800bd58:	e772      	b.n	800bc40 <_dtoa_r+0x9f0>
 800bd5a:	f000 f8e3 	bl	800bf24 <__multadd>
 800bd5e:	4639      	mov	r1, r7
 800bd60:	4680      	mov	r8, r0
 800bd62:	2300      	movs	r3, #0
 800bd64:	220a      	movs	r2, #10
 800bd66:	4620      	mov	r0, r4
 800bd68:	f000 f8dc 	bl	800bf24 <__multadd>
 800bd6c:	4607      	mov	r7, r0
 800bd6e:	e7f1      	b.n	800bd54 <_dtoa_r+0xb04>
 800bd70:	9b03      	ldr	r3, [sp, #12]
 800bd72:	9302      	str	r3, [sp, #8]
 800bd74:	9d01      	ldr	r5, [sp, #4]
 800bd76:	ee18 0a10 	vmov	r0, s16
 800bd7a:	4631      	mov	r1, r6
 800bd7c:	f7ff f9da 	bl	800b134 <quorem>
 800bd80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bd84:	9b01      	ldr	r3, [sp, #4]
 800bd86:	f805 ab01 	strb.w	sl, [r5], #1
 800bd8a:	1aea      	subs	r2, r5, r3
 800bd8c:	9b02      	ldr	r3, [sp, #8]
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	dd09      	ble.n	800bda6 <_dtoa_r+0xb56>
 800bd92:	ee18 1a10 	vmov	r1, s16
 800bd96:	2300      	movs	r3, #0
 800bd98:	220a      	movs	r2, #10
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	f000 f8c2 	bl	800bf24 <__multadd>
 800bda0:	ee08 0a10 	vmov	s16, r0
 800bda4:	e7e7      	b.n	800bd76 <_dtoa_r+0xb26>
 800bda6:	9b02      	ldr	r3, [sp, #8]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	bfc8      	it	gt
 800bdac:	461d      	movgt	r5, r3
 800bdae:	9b01      	ldr	r3, [sp, #4]
 800bdb0:	bfd8      	it	le
 800bdb2:	2501      	movle	r5, #1
 800bdb4:	441d      	add	r5, r3
 800bdb6:	f04f 0800 	mov.w	r8, #0
 800bdba:	ee18 1a10 	vmov	r1, s16
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	f000 fa5f 	bl	800c284 <__lshift>
 800bdc6:	4631      	mov	r1, r6
 800bdc8:	ee08 0a10 	vmov	s16, r0
 800bdcc:	f000 faca 	bl	800c364 <__mcmp>
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	dc91      	bgt.n	800bcf8 <_dtoa_r+0xaa8>
 800bdd4:	d102      	bne.n	800bddc <_dtoa_r+0xb8c>
 800bdd6:	f01a 0f01 	tst.w	sl, #1
 800bdda:	d18d      	bne.n	800bcf8 <_dtoa_r+0xaa8>
 800bddc:	462b      	mov	r3, r5
 800bdde:	461d      	mov	r5, r3
 800bde0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bde4:	2a30      	cmp	r2, #48	; 0x30
 800bde6:	d0fa      	beq.n	800bdde <_dtoa_r+0xb8e>
 800bde8:	e6d7      	b.n	800bb9a <_dtoa_r+0x94a>
 800bdea:	9a01      	ldr	r2, [sp, #4]
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d184      	bne.n	800bcfa <_dtoa_r+0xaaa>
 800bdf0:	9b00      	ldr	r3, [sp, #0]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	9300      	str	r3, [sp, #0]
 800bdf6:	2331      	movs	r3, #49	; 0x31
 800bdf8:	7013      	strb	r3, [r2, #0]
 800bdfa:	e6ce      	b.n	800bb9a <_dtoa_r+0x94a>
 800bdfc:	4b09      	ldr	r3, [pc, #36]	; (800be24 <_dtoa_r+0xbd4>)
 800bdfe:	f7ff ba95 	b.w	800b32c <_dtoa_r+0xdc>
 800be02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be04:	2b00      	cmp	r3, #0
 800be06:	f47f aa6e 	bne.w	800b2e6 <_dtoa_r+0x96>
 800be0a:	4b07      	ldr	r3, [pc, #28]	; (800be28 <_dtoa_r+0xbd8>)
 800be0c:	f7ff ba8e 	b.w	800b32c <_dtoa_r+0xdc>
 800be10:	9b02      	ldr	r3, [sp, #8]
 800be12:	2b00      	cmp	r3, #0
 800be14:	dcae      	bgt.n	800bd74 <_dtoa_r+0xb24>
 800be16:	9b06      	ldr	r3, [sp, #24]
 800be18:	2b02      	cmp	r3, #2
 800be1a:	f73f aea8 	bgt.w	800bb6e <_dtoa_r+0x91e>
 800be1e:	e7a9      	b.n	800bd74 <_dtoa_r+0xb24>
 800be20:	0800d723 	.word	0x0800d723
 800be24:	0800d680 	.word	0x0800d680
 800be28:	0800d6a4 	.word	0x0800d6a4

0800be2c <_localeconv_r>:
 800be2c:	4800      	ldr	r0, [pc, #0]	; (800be30 <_localeconv_r+0x4>)
 800be2e:	4770      	bx	lr
 800be30:	20000258 	.word	0x20000258

0800be34 <malloc>:
 800be34:	4b02      	ldr	r3, [pc, #8]	; (800be40 <malloc+0xc>)
 800be36:	4601      	mov	r1, r0
 800be38:	6818      	ldr	r0, [r3, #0]
 800be3a:	f000 bc17 	b.w	800c66c <_malloc_r>
 800be3e:	bf00      	nop
 800be40:	20000104 	.word	0x20000104

0800be44 <memcpy>:
 800be44:	440a      	add	r2, r1
 800be46:	4291      	cmp	r1, r2
 800be48:	f100 33ff 	add.w	r3, r0, #4294967295
 800be4c:	d100      	bne.n	800be50 <memcpy+0xc>
 800be4e:	4770      	bx	lr
 800be50:	b510      	push	{r4, lr}
 800be52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be5a:	4291      	cmp	r1, r2
 800be5c:	d1f9      	bne.n	800be52 <memcpy+0xe>
 800be5e:	bd10      	pop	{r4, pc}

0800be60 <_Balloc>:
 800be60:	b570      	push	{r4, r5, r6, lr}
 800be62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be64:	4604      	mov	r4, r0
 800be66:	460d      	mov	r5, r1
 800be68:	b976      	cbnz	r6, 800be88 <_Balloc+0x28>
 800be6a:	2010      	movs	r0, #16
 800be6c:	f7ff ffe2 	bl	800be34 <malloc>
 800be70:	4602      	mov	r2, r0
 800be72:	6260      	str	r0, [r4, #36]	; 0x24
 800be74:	b920      	cbnz	r0, 800be80 <_Balloc+0x20>
 800be76:	4b18      	ldr	r3, [pc, #96]	; (800bed8 <_Balloc+0x78>)
 800be78:	4818      	ldr	r0, [pc, #96]	; (800bedc <_Balloc+0x7c>)
 800be7a:	2166      	movs	r1, #102	; 0x66
 800be7c:	f000 fdd6 	bl	800ca2c <__assert_func>
 800be80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be84:	6006      	str	r6, [r0, #0]
 800be86:	60c6      	str	r6, [r0, #12]
 800be88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800be8a:	68f3      	ldr	r3, [r6, #12]
 800be8c:	b183      	cbz	r3, 800beb0 <_Balloc+0x50>
 800be8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be96:	b9b8      	cbnz	r0, 800bec8 <_Balloc+0x68>
 800be98:	2101      	movs	r1, #1
 800be9a:	fa01 f605 	lsl.w	r6, r1, r5
 800be9e:	1d72      	adds	r2, r6, #5
 800bea0:	0092      	lsls	r2, r2, #2
 800bea2:	4620      	mov	r0, r4
 800bea4:	f000 fb60 	bl	800c568 <_calloc_r>
 800bea8:	b160      	cbz	r0, 800bec4 <_Balloc+0x64>
 800beaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800beae:	e00e      	b.n	800bece <_Balloc+0x6e>
 800beb0:	2221      	movs	r2, #33	; 0x21
 800beb2:	2104      	movs	r1, #4
 800beb4:	4620      	mov	r0, r4
 800beb6:	f000 fb57 	bl	800c568 <_calloc_r>
 800beba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bebc:	60f0      	str	r0, [r6, #12]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1e4      	bne.n	800be8e <_Balloc+0x2e>
 800bec4:	2000      	movs	r0, #0
 800bec6:	bd70      	pop	{r4, r5, r6, pc}
 800bec8:	6802      	ldr	r2, [r0, #0]
 800beca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bece:	2300      	movs	r3, #0
 800bed0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bed4:	e7f7      	b.n	800bec6 <_Balloc+0x66>
 800bed6:	bf00      	nop
 800bed8:	0800d6b1 	.word	0x0800d6b1
 800bedc:	0800d734 	.word	0x0800d734

0800bee0 <_Bfree>:
 800bee0:	b570      	push	{r4, r5, r6, lr}
 800bee2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bee4:	4605      	mov	r5, r0
 800bee6:	460c      	mov	r4, r1
 800bee8:	b976      	cbnz	r6, 800bf08 <_Bfree+0x28>
 800beea:	2010      	movs	r0, #16
 800beec:	f7ff ffa2 	bl	800be34 <malloc>
 800bef0:	4602      	mov	r2, r0
 800bef2:	6268      	str	r0, [r5, #36]	; 0x24
 800bef4:	b920      	cbnz	r0, 800bf00 <_Bfree+0x20>
 800bef6:	4b09      	ldr	r3, [pc, #36]	; (800bf1c <_Bfree+0x3c>)
 800bef8:	4809      	ldr	r0, [pc, #36]	; (800bf20 <_Bfree+0x40>)
 800befa:	218a      	movs	r1, #138	; 0x8a
 800befc:	f000 fd96 	bl	800ca2c <__assert_func>
 800bf00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf04:	6006      	str	r6, [r0, #0]
 800bf06:	60c6      	str	r6, [r0, #12]
 800bf08:	b13c      	cbz	r4, 800bf1a <_Bfree+0x3a>
 800bf0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf0c:	6862      	ldr	r2, [r4, #4]
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf14:	6021      	str	r1, [r4, #0]
 800bf16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf1a:	bd70      	pop	{r4, r5, r6, pc}
 800bf1c:	0800d6b1 	.word	0x0800d6b1
 800bf20:	0800d734 	.word	0x0800d734

0800bf24 <__multadd>:
 800bf24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf28:	690d      	ldr	r5, [r1, #16]
 800bf2a:	4607      	mov	r7, r0
 800bf2c:	460c      	mov	r4, r1
 800bf2e:	461e      	mov	r6, r3
 800bf30:	f101 0c14 	add.w	ip, r1, #20
 800bf34:	2000      	movs	r0, #0
 800bf36:	f8dc 3000 	ldr.w	r3, [ip]
 800bf3a:	b299      	uxth	r1, r3
 800bf3c:	fb02 6101 	mla	r1, r2, r1, r6
 800bf40:	0c1e      	lsrs	r6, r3, #16
 800bf42:	0c0b      	lsrs	r3, r1, #16
 800bf44:	fb02 3306 	mla	r3, r2, r6, r3
 800bf48:	b289      	uxth	r1, r1
 800bf4a:	3001      	adds	r0, #1
 800bf4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf50:	4285      	cmp	r5, r0
 800bf52:	f84c 1b04 	str.w	r1, [ip], #4
 800bf56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf5a:	dcec      	bgt.n	800bf36 <__multadd+0x12>
 800bf5c:	b30e      	cbz	r6, 800bfa2 <__multadd+0x7e>
 800bf5e:	68a3      	ldr	r3, [r4, #8]
 800bf60:	42ab      	cmp	r3, r5
 800bf62:	dc19      	bgt.n	800bf98 <__multadd+0x74>
 800bf64:	6861      	ldr	r1, [r4, #4]
 800bf66:	4638      	mov	r0, r7
 800bf68:	3101      	adds	r1, #1
 800bf6a:	f7ff ff79 	bl	800be60 <_Balloc>
 800bf6e:	4680      	mov	r8, r0
 800bf70:	b928      	cbnz	r0, 800bf7e <__multadd+0x5a>
 800bf72:	4602      	mov	r2, r0
 800bf74:	4b0c      	ldr	r3, [pc, #48]	; (800bfa8 <__multadd+0x84>)
 800bf76:	480d      	ldr	r0, [pc, #52]	; (800bfac <__multadd+0x88>)
 800bf78:	21b5      	movs	r1, #181	; 0xb5
 800bf7a:	f000 fd57 	bl	800ca2c <__assert_func>
 800bf7e:	6922      	ldr	r2, [r4, #16]
 800bf80:	3202      	adds	r2, #2
 800bf82:	f104 010c 	add.w	r1, r4, #12
 800bf86:	0092      	lsls	r2, r2, #2
 800bf88:	300c      	adds	r0, #12
 800bf8a:	f7ff ff5b 	bl	800be44 <memcpy>
 800bf8e:	4621      	mov	r1, r4
 800bf90:	4638      	mov	r0, r7
 800bf92:	f7ff ffa5 	bl	800bee0 <_Bfree>
 800bf96:	4644      	mov	r4, r8
 800bf98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf9c:	3501      	adds	r5, #1
 800bf9e:	615e      	str	r6, [r3, #20]
 800bfa0:	6125      	str	r5, [r4, #16]
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfa8:	0800d723 	.word	0x0800d723
 800bfac:	0800d734 	.word	0x0800d734

0800bfb0 <__hi0bits>:
 800bfb0:	0c03      	lsrs	r3, r0, #16
 800bfb2:	041b      	lsls	r3, r3, #16
 800bfb4:	b9d3      	cbnz	r3, 800bfec <__hi0bits+0x3c>
 800bfb6:	0400      	lsls	r0, r0, #16
 800bfb8:	2310      	movs	r3, #16
 800bfba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bfbe:	bf04      	itt	eq
 800bfc0:	0200      	lsleq	r0, r0, #8
 800bfc2:	3308      	addeq	r3, #8
 800bfc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bfc8:	bf04      	itt	eq
 800bfca:	0100      	lsleq	r0, r0, #4
 800bfcc:	3304      	addeq	r3, #4
 800bfce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bfd2:	bf04      	itt	eq
 800bfd4:	0080      	lsleq	r0, r0, #2
 800bfd6:	3302      	addeq	r3, #2
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	db05      	blt.n	800bfe8 <__hi0bits+0x38>
 800bfdc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bfe0:	f103 0301 	add.w	r3, r3, #1
 800bfe4:	bf08      	it	eq
 800bfe6:	2320      	moveq	r3, #32
 800bfe8:	4618      	mov	r0, r3
 800bfea:	4770      	bx	lr
 800bfec:	2300      	movs	r3, #0
 800bfee:	e7e4      	b.n	800bfba <__hi0bits+0xa>

0800bff0 <__lo0bits>:
 800bff0:	6803      	ldr	r3, [r0, #0]
 800bff2:	f013 0207 	ands.w	r2, r3, #7
 800bff6:	4601      	mov	r1, r0
 800bff8:	d00b      	beq.n	800c012 <__lo0bits+0x22>
 800bffa:	07da      	lsls	r2, r3, #31
 800bffc:	d423      	bmi.n	800c046 <__lo0bits+0x56>
 800bffe:	0798      	lsls	r0, r3, #30
 800c000:	bf49      	itett	mi
 800c002:	085b      	lsrmi	r3, r3, #1
 800c004:	089b      	lsrpl	r3, r3, #2
 800c006:	2001      	movmi	r0, #1
 800c008:	600b      	strmi	r3, [r1, #0]
 800c00a:	bf5c      	itt	pl
 800c00c:	600b      	strpl	r3, [r1, #0]
 800c00e:	2002      	movpl	r0, #2
 800c010:	4770      	bx	lr
 800c012:	b298      	uxth	r0, r3
 800c014:	b9a8      	cbnz	r0, 800c042 <__lo0bits+0x52>
 800c016:	0c1b      	lsrs	r3, r3, #16
 800c018:	2010      	movs	r0, #16
 800c01a:	b2da      	uxtb	r2, r3
 800c01c:	b90a      	cbnz	r2, 800c022 <__lo0bits+0x32>
 800c01e:	3008      	adds	r0, #8
 800c020:	0a1b      	lsrs	r3, r3, #8
 800c022:	071a      	lsls	r2, r3, #28
 800c024:	bf04      	itt	eq
 800c026:	091b      	lsreq	r3, r3, #4
 800c028:	3004      	addeq	r0, #4
 800c02a:	079a      	lsls	r2, r3, #30
 800c02c:	bf04      	itt	eq
 800c02e:	089b      	lsreq	r3, r3, #2
 800c030:	3002      	addeq	r0, #2
 800c032:	07da      	lsls	r2, r3, #31
 800c034:	d403      	bmi.n	800c03e <__lo0bits+0x4e>
 800c036:	085b      	lsrs	r3, r3, #1
 800c038:	f100 0001 	add.w	r0, r0, #1
 800c03c:	d005      	beq.n	800c04a <__lo0bits+0x5a>
 800c03e:	600b      	str	r3, [r1, #0]
 800c040:	4770      	bx	lr
 800c042:	4610      	mov	r0, r2
 800c044:	e7e9      	b.n	800c01a <__lo0bits+0x2a>
 800c046:	2000      	movs	r0, #0
 800c048:	4770      	bx	lr
 800c04a:	2020      	movs	r0, #32
 800c04c:	4770      	bx	lr
	...

0800c050 <__i2b>:
 800c050:	b510      	push	{r4, lr}
 800c052:	460c      	mov	r4, r1
 800c054:	2101      	movs	r1, #1
 800c056:	f7ff ff03 	bl	800be60 <_Balloc>
 800c05a:	4602      	mov	r2, r0
 800c05c:	b928      	cbnz	r0, 800c06a <__i2b+0x1a>
 800c05e:	4b05      	ldr	r3, [pc, #20]	; (800c074 <__i2b+0x24>)
 800c060:	4805      	ldr	r0, [pc, #20]	; (800c078 <__i2b+0x28>)
 800c062:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c066:	f000 fce1 	bl	800ca2c <__assert_func>
 800c06a:	2301      	movs	r3, #1
 800c06c:	6144      	str	r4, [r0, #20]
 800c06e:	6103      	str	r3, [r0, #16]
 800c070:	bd10      	pop	{r4, pc}
 800c072:	bf00      	nop
 800c074:	0800d723 	.word	0x0800d723
 800c078:	0800d734 	.word	0x0800d734

0800c07c <__multiply>:
 800c07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c080:	4691      	mov	r9, r2
 800c082:	690a      	ldr	r2, [r1, #16]
 800c084:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c088:	429a      	cmp	r2, r3
 800c08a:	bfb8      	it	lt
 800c08c:	460b      	movlt	r3, r1
 800c08e:	460c      	mov	r4, r1
 800c090:	bfbc      	itt	lt
 800c092:	464c      	movlt	r4, r9
 800c094:	4699      	movlt	r9, r3
 800c096:	6927      	ldr	r7, [r4, #16]
 800c098:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c09c:	68a3      	ldr	r3, [r4, #8]
 800c09e:	6861      	ldr	r1, [r4, #4]
 800c0a0:	eb07 060a 	add.w	r6, r7, sl
 800c0a4:	42b3      	cmp	r3, r6
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	bfb8      	it	lt
 800c0aa:	3101      	addlt	r1, #1
 800c0ac:	f7ff fed8 	bl	800be60 <_Balloc>
 800c0b0:	b930      	cbnz	r0, 800c0c0 <__multiply+0x44>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	4b44      	ldr	r3, [pc, #272]	; (800c1c8 <__multiply+0x14c>)
 800c0b6:	4845      	ldr	r0, [pc, #276]	; (800c1cc <__multiply+0x150>)
 800c0b8:	f240 115d 	movw	r1, #349	; 0x15d
 800c0bc:	f000 fcb6 	bl	800ca2c <__assert_func>
 800c0c0:	f100 0514 	add.w	r5, r0, #20
 800c0c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c0c8:	462b      	mov	r3, r5
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	4543      	cmp	r3, r8
 800c0ce:	d321      	bcc.n	800c114 <__multiply+0x98>
 800c0d0:	f104 0314 	add.w	r3, r4, #20
 800c0d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c0d8:	f109 0314 	add.w	r3, r9, #20
 800c0dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c0e0:	9202      	str	r2, [sp, #8]
 800c0e2:	1b3a      	subs	r2, r7, r4
 800c0e4:	3a15      	subs	r2, #21
 800c0e6:	f022 0203 	bic.w	r2, r2, #3
 800c0ea:	3204      	adds	r2, #4
 800c0ec:	f104 0115 	add.w	r1, r4, #21
 800c0f0:	428f      	cmp	r7, r1
 800c0f2:	bf38      	it	cc
 800c0f4:	2204      	movcc	r2, #4
 800c0f6:	9201      	str	r2, [sp, #4]
 800c0f8:	9a02      	ldr	r2, [sp, #8]
 800c0fa:	9303      	str	r3, [sp, #12]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d80c      	bhi.n	800c11a <__multiply+0x9e>
 800c100:	2e00      	cmp	r6, #0
 800c102:	dd03      	ble.n	800c10c <__multiply+0x90>
 800c104:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d05a      	beq.n	800c1c2 <__multiply+0x146>
 800c10c:	6106      	str	r6, [r0, #16]
 800c10e:	b005      	add	sp, #20
 800c110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c114:	f843 2b04 	str.w	r2, [r3], #4
 800c118:	e7d8      	b.n	800c0cc <__multiply+0x50>
 800c11a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c11e:	f1ba 0f00 	cmp.w	sl, #0
 800c122:	d024      	beq.n	800c16e <__multiply+0xf2>
 800c124:	f104 0e14 	add.w	lr, r4, #20
 800c128:	46a9      	mov	r9, r5
 800c12a:	f04f 0c00 	mov.w	ip, #0
 800c12e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c132:	f8d9 1000 	ldr.w	r1, [r9]
 800c136:	fa1f fb82 	uxth.w	fp, r2
 800c13a:	b289      	uxth	r1, r1
 800c13c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c140:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c144:	f8d9 2000 	ldr.w	r2, [r9]
 800c148:	4461      	add	r1, ip
 800c14a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c14e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c152:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c156:	b289      	uxth	r1, r1
 800c158:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c15c:	4577      	cmp	r7, lr
 800c15e:	f849 1b04 	str.w	r1, [r9], #4
 800c162:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c166:	d8e2      	bhi.n	800c12e <__multiply+0xb2>
 800c168:	9a01      	ldr	r2, [sp, #4]
 800c16a:	f845 c002 	str.w	ip, [r5, r2]
 800c16e:	9a03      	ldr	r2, [sp, #12]
 800c170:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c174:	3304      	adds	r3, #4
 800c176:	f1b9 0f00 	cmp.w	r9, #0
 800c17a:	d020      	beq.n	800c1be <__multiply+0x142>
 800c17c:	6829      	ldr	r1, [r5, #0]
 800c17e:	f104 0c14 	add.w	ip, r4, #20
 800c182:	46ae      	mov	lr, r5
 800c184:	f04f 0a00 	mov.w	sl, #0
 800c188:	f8bc b000 	ldrh.w	fp, [ip]
 800c18c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c190:	fb09 220b 	mla	r2, r9, fp, r2
 800c194:	4492      	add	sl, r2
 800c196:	b289      	uxth	r1, r1
 800c198:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c19c:	f84e 1b04 	str.w	r1, [lr], #4
 800c1a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c1a4:	f8be 1000 	ldrh.w	r1, [lr]
 800c1a8:	0c12      	lsrs	r2, r2, #16
 800c1aa:	fb09 1102 	mla	r1, r9, r2, r1
 800c1ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c1b2:	4567      	cmp	r7, ip
 800c1b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c1b8:	d8e6      	bhi.n	800c188 <__multiply+0x10c>
 800c1ba:	9a01      	ldr	r2, [sp, #4]
 800c1bc:	50a9      	str	r1, [r5, r2]
 800c1be:	3504      	adds	r5, #4
 800c1c0:	e79a      	b.n	800c0f8 <__multiply+0x7c>
 800c1c2:	3e01      	subs	r6, #1
 800c1c4:	e79c      	b.n	800c100 <__multiply+0x84>
 800c1c6:	bf00      	nop
 800c1c8:	0800d723 	.word	0x0800d723
 800c1cc:	0800d734 	.word	0x0800d734

0800c1d0 <__pow5mult>:
 800c1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1d4:	4615      	mov	r5, r2
 800c1d6:	f012 0203 	ands.w	r2, r2, #3
 800c1da:	4606      	mov	r6, r0
 800c1dc:	460f      	mov	r7, r1
 800c1de:	d007      	beq.n	800c1f0 <__pow5mult+0x20>
 800c1e0:	4c25      	ldr	r4, [pc, #148]	; (800c278 <__pow5mult+0xa8>)
 800c1e2:	3a01      	subs	r2, #1
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c1ea:	f7ff fe9b 	bl	800bf24 <__multadd>
 800c1ee:	4607      	mov	r7, r0
 800c1f0:	10ad      	asrs	r5, r5, #2
 800c1f2:	d03d      	beq.n	800c270 <__pow5mult+0xa0>
 800c1f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c1f6:	b97c      	cbnz	r4, 800c218 <__pow5mult+0x48>
 800c1f8:	2010      	movs	r0, #16
 800c1fa:	f7ff fe1b 	bl	800be34 <malloc>
 800c1fe:	4602      	mov	r2, r0
 800c200:	6270      	str	r0, [r6, #36]	; 0x24
 800c202:	b928      	cbnz	r0, 800c210 <__pow5mult+0x40>
 800c204:	4b1d      	ldr	r3, [pc, #116]	; (800c27c <__pow5mult+0xac>)
 800c206:	481e      	ldr	r0, [pc, #120]	; (800c280 <__pow5mult+0xb0>)
 800c208:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c20c:	f000 fc0e 	bl	800ca2c <__assert_func>
 800c210:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c214:	6004      	str	r4, [r0, #0]
 800c216:	60c4      	str	r4, [r0, #12]
 800c218:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c21c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c220:	b94c      	cbnz	r4, 800c236 <__pow5mult+0x66>
 800c222:	f240 2171 	movw	r1, #625	; 0x271
 800c226:	4630      	mov	r0, r6
 800c228:	f7ff ff12 	bl	800c050 <__i2b>
 800c22c:	2300      	movs	r3, #0
 800c22e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c232:	4604      	mov	r4, r0
 800c234:	6003      	str	r3, [r0, #0]
 800c236:	f04f 0900 	mov.w	r9, #0
 800c23a:	07eb      	lsls	r3, r5, #31
 800c23c:	d50a      	bpl.n	800c254 <__pow5mult+0x84>
 800c23e:	4639      	mov	r1, r7
 800c240:	4622      	mov	r2, r4
 800c242:	4630      	mov	r0, r6
 800c244:	f7ff ff1a 	bl	800c07c <__multiply>
 800c248:	4639      	mov	r1, r7
 800c24a:	4680      	mov	r8, r0
 800c24c:	4630      	mov	r0, r6
 800c24e:	f7ff fe47 	bl	800bee0 <_Bfree>
 800c252:	4647      	mov	r7, r8
 800c254:	106d      	asrs	r5, r5, #1
 800c256:	d00b      	beq.n	800c270 <__pow5mult+0xa0>
 800c258:	6820      	ldr	r0, [r4, #0]
 800c25a:	b938      	cbnz	r0, 800c26c <__pow5mult+0x9c>
 800c25c:	4622      	mov	r2, r4
 800c25e:	4621      	mov	r1, r4
 800c260:	4630      	mov	r0, r6
 800c262:	f7ff ff0b 	bl	800c07c <__multiply>
 800c266:	6020      	str	r0, [r4, #0]
 800c268:	f8c0 9000 	str.w	r9, [r0]
 800c26c:	4604      	mov	r4, r0
 800c26e:	e7e4      	b.n	800c23a <__pow5mult+0x6a>
 800c270:	4638      	mov	r0, r7
 800c272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c276:	bf00      	nop
 800c278:	0800d880 	.word	0x0800d880
 800c27c:	0800d6b1 	.word	0x0800d6b1
 800c280:	0800d734 	.word	0x0800d734

0800c284 <__lshift>:
 800c284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c288:	460c      	mov	r4, r1
 800c28a:	6849      	ldr	r1, [r1, #4]
 800c28c:	6923      	ldr	r3, [r4, #16]
 800c28e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c292:	68a3      	ldr	r3, [r4, #8]
 800c294:	4607      	mov	r7, r0
 800c296:	4691      	mov	r9, r2
 800c298:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c29c:	f108 0601 	add.w	r6, r8, #1
 800c2a0:	42b3      	cmp	r3, r6
 800c2a2:	db0b      	blt.n	800c2bc <__lshift+0x38>
 800c2a4:	4638      	mov	r0, r7
 800c2a6:	f7ff fddb 	bl	800be60 <_Balloc>
 800c2aa:	4605      	mov	r5, r0
 800c2ac:	b948      	cbnz	r0, 800c2c2 <__lshift+0x3e>
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	4b2a      	ldr	r3, [pc, #168]	; (800c35c <__lshift+0xd8>)
 800c2b2:	482b      	ldr	r0, [pc, #172]	; (800c360 <__lshift+0xdc>)
 800c2b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c2b8:	f000 fbb8 	bl	800ca2c <__assert_func>
 800c2bc:	3101      	adds	r1, #1
 800c2be:	005b      	lsls	r3, r3, #1
 800c2c0:	e7ee      	b.n	800c2a0 <__lshift+0x1c>
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	f100 0114 	add.w	r1, r0, #20
 800c2c8:	f100 0210 	add.w	r2, r0, #16
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	4553      	cmp	r3, sl
 800c2d0:	db37      	blt.n	800c342 <__lshift+0xbe>
 800c2d2:	6920      	ldr	r0, [r4, #16]
 800c2d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c2d8:	f104 0314 	add.w	r3, r4, #20
 800c2dc:	f019 091f 	ands.w	r9, r9, #31
 800c2e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c2e8:	d02f      	beq.n	800c34a <__lshift+0xc6>
 800c2ea:	f1c9 0e20 	rsb	lr, r9, #32
 800c2ee:	468a      	mov	sl, r1
 800c2f0:	f04f 0c00 	mov.w	ip, #0
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	fa02 f209 	lsl.w	r2, r2, r9
 800c2fa:	ea42 020c 	orr.w	r2, r2, ip
 800c2fe:	f84a 2b04 	str.w	r2, [sl], #4
 800c302:	f853 2b04 	ldr.w	r2, [r3], #4
 800c306:	4298      	cmp	r0, r3
 800c308:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c30c:	d8f2      	bhi.n	800c2f4 <__lshift+0x70>
 800c30e:	1b03      	subs	r3, r0, r4
 800c310:	3b15      	subs	r3, #21
 800c312:	f023 0303 	bic.w	r3, r3, #3
 800c316:	3304      	adds	r3, #4
 800c318:	f104 0215 	add.w	r2, r4, #21
 800c31c:	4290      	cmp	r0, r2
 800c31e:	bf38      	it	cc
 800c320:	2304      	movcc	r3, #4
 800c322:	f841 c003 	str.w	ip, [r1, r3]
 800c326:	f1bc 0f00 	cmp.w	ip, #0
 800c32a:	d001      	beq.n	800c330 <__lshift+0xac>
 800c32c:	f108 0602 	add.w	r6, r8, #2
 800c330:	3e01      	subs	r6, #1
 800c332:	4638      	mov	r0, r7
 800c334:	612e      	str	r6, [r5, #16]
 800c336:	4621      	mov	r1, r4
 800c338:	f7ff fdd2 	bl	800bee0 <_Bfree>
 800c33c:	4628      	mov	r0, r5
 800c33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c342:	f842 0f04 	str.w	r0, [r2, #4]!
 800c346:	3301      	adds	r3, #1
 800c348:	e7c1      	b.n	800c2ce <__lshift+0x4a>
 800c34a:	3904      	subs	r1, #4
 800c34c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c350:	f841 2f04 	str.w	r2, [r1, #4]!
 800c354:	4298      	cmp	r0, r3
 800c356:	d8f9      	bhi.n	800c34c <__lshift+0xc8>
 800c358:	e7ea      	b.n	800c330 <__lshift+0xac>
 800c35a:	bf00      	nop
 800c35c:	0800d723 	.word	0x0800d723
 800c360:	0800d734 	.word	0x0800d734

0800c364 <__mcmp>:
 800c364:	b530      	push	{r4, r5, lr}
 800c366:	6902      	ldr	r2, [r0, #16]
 800c368:	690c      	ldr	r4, [r1, #16]
 800c36a:	1b12      	subs	r2, r2, r4
 800c36c:	d10e      	bne.n	800c38c <__mcmp+0x28>
 800c36e:	f100 0314 	add.w	r3, r0, #20
 800c372:	3114      	adds	r1, #20
 800c374:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c378:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c37c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c380:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c384:	42a5      	cmp	r5, r4
 800c386:	d003      	beq.n	800c390 <__mcmp+0x2c>
 800c388:	d305      	bcc.n	800c396 <__mcmp+0x32>
 800c38a:	2201      	movs	r2, #1
 800c38c:	4610      	mov	r0, r2
 800c38e:	bd30      	pop	{r4, r5, pc}
 800c390:	4283      	cmp	r3, r0
 800c392:	d3f3      	bcc.n	800c37c <__mcmp+0x18>
 800c394:	e7fa      	b.n	800c38c <__mcmp+0x28>
 800c396:	f04f 32ff 	mov.w	r2, #4294967295
 800c39a:	e7f7      	b.n	800c38c <__mcmp+0x28>

0800c39c <__mdiff>:
 800c39c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a0:	460c      	mov	r4, r1
 800c3a2:	4606      	mov	r6, r0
 800c3a4:	4611      	mov	r1, r2
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	4690      	mov	r8, r2
 800c3aa:	f7ff ffdb 	bl	800c364 <__mcmp>
 800c3ae:	1e05      	subs	r5, r0, #0
 800c3b0:	d110      	bne.n	800c3d4 <__mdiff+0x38>
 800c3b2:	4629      	mov	r1, r5
 800c3b4:	4630      	mov	r0, r6
 800c3b6:	f7ff fd53 	bl	800be60 <_Balloc>
 800c3ba:	b930      	cbnz	r0, 800c3ca <__mdiff+0x2e>
 800c3bc:	4b3a      	ldr	r3, [pc, #232]	; (800c4a8 <__mdiff+0x10c>)
 800c3be:	4602      	mov	r2, r0
 800c3c0:	f240 2132 	movw	r1, #562	; 0x232
 800c3c4:	4839      	ldr	r0, [pc, #228]	; (800c4ac <__mdiff+0x110>)
 800c3c6:	f000 fb31 	bl	800ca2c <__assert_func>
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c3d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3d4:	bfa4      	itt	ge
 800c3d6:	4643      	movge	r3, r8
 800c3d8:	46a0      	movge	r8, r4
 800c3da:	4630      	mov	r0, r6
 800c3dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c3e0:	bfa6      	itte	ge
 800c3e2:	461c      	movge	r4, r3
 800c3e4:	2500      	movge	r5, #0
 800c3e6:	2501      	movlt	r5, #1
 800c3e8:	f7ff fd3a 	bl	800be60 <_Balloc>
 800c3ec:	b920      	cbnz	r0, 800c3f8 <__mdiff+0x5c>
 800c3ee:	4b2e      	ldr	r3, [pc, #184]	; (800c4a8 <__mdiff+0x10c>)
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c3f6:	e7e5      	b.n	800c3c4 <__mdiff+0x28>
 800c3f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c3fc:	6926      	ldr	r6, [r4, #16]
 800c3fe:	60c5      	str	r5, [r0, #12]
 800c400:	f104 0914 	add.w	r9, r4, #20
 800c404:	f108 0514 	add.w	r5, r8, #20
 800c408:	f100 0e14 	add.w	lr, r0, #20
 800c40c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c410:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c414:	f108 0210 	add.w	r2, r8, #16
 800c418:	46f2      	mov	sl, lr
 800c41a:	2100      	movs	r1, #0
 800c41c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c420:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c424:	fa1f f883 	uxth.w	r8, r3
 800c428:	fa11 f18b 	uxtah	r1, r1, fp
 800c42c:	0c1b      	lsrs	r3, r3, #16
 800c42e:	eba1 0808 	sub.w	r8, r1, r8
 800c432:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c436:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c43a:	fa1f f888 	uxth.w	r8, r8
 800c43e:	1419      	asrs	r1, r3, #16
 800c440:	454e      	cmp	r6, r9
 800c442:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c446:	f84a 3b04 	str.w	r3, [sl], #4
 800c44a:	d8e7      	bhi.n	800c41c <__mdiff+0x80>
 800c44c:	1b33      	subs	r3, r6, r4
 800c44e:	3b15      	subs	r3, #21
 800c450:	f023 0303 	bic.w	r3, r3, #3
 800c454:	3304      	adds	r3, #4
 800c456:	3415      	adds	r4, #21
 800c458:	42a6      	cmp	r6, r4
 800c45a:	bf38      	it	cc
 800c45c:	2304      	movcc	r3, #4
 800c45e:	441d      	add	r5, r3
 800c460:	4473      	add	r3, lr
 800c462:	469e      	mov	lr, r3
 800c464:	462e      	mov	r6, r5
 800c466:	4566      	cmp	r6, ip
 800c468:	d30e      	bcc.n	800c488 <__mdiff+0xec>
 800c46a:	f10c 0203 	add.w	r2, ip, #3
 800c46e:	1b52      	subs	r2, r2, r5
 800c470:	f022 0203 	bic.w	r2, r2, #3
 800c474:	3d03      	subs	r5, #3
 800c476:	45ac      	cmp	ip, r5
 800c478:	bf38      	it	cc
 800c47a:	2200      	movcc	r2, #0
 800c47c:	441a      	add	r2, r3
 800c47e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c482:	b17b      	cbz	r3, 800c4a4 <__mdiff+0x108>
 800c484:	6107      	str	r7, [r0, #16]
 800c486:	e7a3      	b.n	800c3d0 <__mdiff+0x34>
 800c488:	f856 8b04 	ldr.w	r8, [r6], #4
 800c48c:	fa11 f288 	uxtah	r2, r1, r8
 800c490:	1414      	asrs	r4, r2, #16
 800c492:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c496:	b292      	uxth	r2, r2
 800c498:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c49c:	f84e 2b04 	str.w	r2, [lr], #4
 800c4a0:	1421      	asrs	r1, r4, #16
 800c4a2:	e7e0      	b.n	800c466 <__mdiff+0xca>
 800c4a4:	3f01      	subs	r7, #1
 800c4a6:	e7ea      	b.n	800c47e <__mdiff+0xe2>
 800c4a8:	0800d723 	.word	0x0800d723
 800c4ac:	0800d734 	.word	0x0800d734

0800c4b0 <__d2b>:
 800c4b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c4b4:	4689      	mov	r9, r1
 800c4b6:	2101      	movs	r1, #1
 800c4b8:	ec57 6b10 	vmov	r6, r7, d0
 800c4bc:	4690      	mov	r8, r2
 800c4be:	f7ff fccf 	bl	800be60 <_Balloc>
 800c4c2:	4604      	mov	r4, r0
 800c4c4:	b930      	cbnz	r0, 800c4d4 <__d2b+0x24>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	4b25      	ldr	r3, [pc, #148]	; (800c560 <__d2b+0xb0>)
 800c4ca:	4826      	ldr	r0, [pc, #152]	; (800c564 <__d2b+0xb4>)
 800c4cc:	f240 310a 	movw	r1, #778	; 0x30a
 800c4d0:	f000 faac 	bl	800ca2c <__assert_func>
 800c4d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c4d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c4dc:	bb35      	cbnz	r5, 800c52c <__d2b+0x7c>
 800c4de:	2e00      	cmp	r6, #0
 800c4e0:	9301      	str	r3, [sp, #4]
 800c4e2:	d028      	beq.n	800c536 <__d2b+0x86>
 800c4e4:	4668      	mov	r0, sp
 800c4e6:	9600      	str	r6, [sp, #0]
 800c4e8:	f7ff fd82 	bl	800bff0 <__lo0bits>
 800c4ec:	9900      	ldr	r1, [sp, #0]
 800c4ee:	b300      	cbz	r0, 800c532 <__d2b+0x82>
 800c4f0:	9a01      	ldr	r2, [sp, #4]
 800c4f2:	f1c0 0320 	rsb	r3, r0, #32
 800c4f6:	fa02 f303 	lsl.w	r3, r2, r3
 800c4fa:	430b      	orrs	r3, r1
 800c4fc:	40c2      	lsrs	r2, r0
 800c4fe:	6163      	str	r3, [r4, #20]
 800c500:	9201      	str	r2, [sp, #4]
 800c502:	9b01      	ldr	r3, [sp, #4]
 800c504:	61a3      	str	r3, [r4, #24]
 800c506:	2b00      	cmp	r3, #0
 800c508:	bf14      	ite	ne
 800c50a:	2202      	movne	r2, #2
 800c50c:	2201      	moveq	r2, #1
 800c50e:	6122      	str	r2, [r4, #16]
 800c510:	b1d5      	cbz	r5, 800c548 <__d2b+0x98>
 800c512:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c516:	4405      	add	r5, r0
 800c518:	f8c9 5000 	str.w	r5, [r9]
 800c51c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c520:	f8c8 0000 	str.w	r0, [r8]
 800c524:	4620      	mov	r0, r4
 800c526:	b003      	add	sp, #12
 800c528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c52c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c530:	e7d5      	b.n	800c4de <__d2b+0x2e>
 800c532:	6161      	str	r1, [r4, #20]
 800c534:	e7e5      	b.n	800c502 <__d2b+0x52>
 800c536:	a801      	add	r0, sp, #4
 800c538:	f7ff fd5a 	bl	800bff0 <__lo0bits>
 800c53c:	9b01      	ldr	r3, [sp, #4]
 800c53e:	6163      	str	r3, [r4, #20]
 800c540:	2201      	movs	r2, #1
 800c542:	6122      	str	r2, [r4, #16]
 800c544:	3020      	adds	r0, #32
 800c546:	e7e3      	b.n	800c510 <__d2b+0x60>
 800c548:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c54c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c550:	f8c9 0000 	str.w	r0, [r9]
 800c554:	6918      	ldr	r0, [r3, #16]
 800c556:	f7ff fd2b 	bl	800bfb0 <__hi0bits>
 800c55a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c55e:	e7df      	b.n	800c520 <__d2b+0x70>
 800c560:	0800d723 	.word	0x0800d723
 800c564:	0800d734 	.word	0x0800d734

0800c568 <_calloc_r>:
 800c568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c56a:	fba1 2402 	umull	r2, r4, r1, r2
 800c56e:	b94c      	cbnz	r4, 800c584 <_calloc_r+0x1c>
 800c570:	4611      	mov	r1, r2
 800c572:	9201      	str	r2, [sp, #4]
 800c574:	f000 f87a 	bl	800c66c <_malloc_r>
 800c578:	9a01      	ldr	r2, [sp, #4]
 800c57a:	4605      	mov	r5, r0
 800c57c:	b930      	cbnz	r0, 800c58c <_calloc_r+0x24>
 800c57e:	4628      	mov	r0, r5
 800c580:	b003      	add	sp, #12
 800c582:	bd30      	pop	{r4, r5, pc}
 800c584:	220c      	movs	r2, #12
 800c586:	6002      	str	r2, [r0, #0]
 800c588:	2500      	movs	r5, #0
 800c58a:	e7f8      	b.n	800c57e <_calloc_r+0x16>
 800c58c:	4621      	mov	r1, r4
 800c58e:	f7fe f92b 	bl	800a7e8 <memset>
 800c592:	e7f4      	b.n	800c57e <_calloc_r+0x16>

0800c594 <_free_r>:
 800c594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c596:	2900      	cmp	r1, #0
 800c598:	d044      	beq.n	800c624 <_free_r+0x90>
 800c59a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c59e:	9001      	str	r0, [sp, #4]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	f1a1 0404 	sub.w	r4, r1, #4
 800c5a6:	bfb8      	it	lt
 800c5a8:	18e4      	addlt	r4, r4, r3
 800c5aa:	f000 fa9b 	bl	800cae4 <__malloc_lock>
 800c5ae:	4a1e      	ldr	r2, [pc, #120]	; (800c628 <_free_r+0x94>)
 800c5b0:	9801      	ldr	r0, [sp, #4]
 800c5b2:	6813      	ldr	r3, [r2, #0]
 800c5b4:	b933      	cbnz	r3, 800c5c4 <_free_r+0x30>
 800c5b6:	6063      	str	r3, [r4, #4]
 800c5b8:	6014      	str	r4, [r2, #0]
 800c5ba:	b003      	add	sp, #12
 800c5bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c5c0:	f000 ba96 	b.w	800caf0 <__malloc_unlock>
 800c5c4:	42a3      	cmp	r3, r4
 800c5c6:	d908      	bls.n	800c5da <_free_r+0x46>
 800c5c8:	6825      	ldr	r5, [r4, #0]
 800c5ca:	1961      	adds	r1, r4, r5
 800c5cc:	428b      	cmp	r3, r1
 800c5ce:	bf01      	itttt	eq
 800c5d0:	6819      	ldreq	r1, [r3, #0]
 800c5d2:	685b      	ldreq	r3, [r3, #4]
 800c5d4:	1949      	addeq	r1, r1, r5
 800c5d6:	6021      	streq	r1, [r4, #0]
 800c5d8:	e7ed      	b.n	800c5b6 <_free_r+0x22>
 800c5da:	461a      	mov	r2, r3
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	b10b      	cbz	r3, 800c5e4 <_free_r+0x50>
 800c5e0:	42a3      	cmp	r3, r4
 800c5e2:	d9fa      	bls.n	800c5da <_free_r+0x46>
 800c5e4:	6811      	ldr	r1, [r2, #0]
 800c5e6:	1855      	adds	r5, r2, r1
 800c5e8:	42a5      	cmp	r5, r4
 800c5ea:	d10b      	bne.n	800c604 <_free_r+0x70>
 800c5ec:	6824      	ldr	r4, [r4, #0]
 800c5ee:	4421      	add	r1, r4
 800c5f0:	1854      	adds	r4, r2, r1
 800c5f2:	42a3      	cmp	r3, r4
 800c5f4:	6011      	str	r1, [r2, #0]
 800c5f6:	d1e0      	bne.n	800c5ba <_free_r+0x26>
 800c5f8:	681c      	ldr	r4, [r3, #0]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	6053      	str	r3, [r2, #4]
 800c5fe:	4421      	add	r1, r4
 800c600:	6011      	str	r1, [r2, #0]
 800c602:	e7da      	b.n	800c5ba <_free_r+0x26>
 800c604:	d902      	bls.n	800c60c <_free_r+0x78>
 800c606:	230c      	movs	r3, #12
 800c608:	6003      	str	r3, [r0, #0]
 800c60a:	e7d6      	b.n	800c5ba <_free_r+0x26>
 800c60c:	6825      	ldr	r5, [r4, #0]
 800c60e:	1961      	adds	r1, r4, r5
 800c610:	428b      	cmp	r3, r1
 800c612:	bf04      	itt	eq
 800c614:	6819      	ldreq	r1, [r3, #0]
 800c616:	685b      	ldreq	r3, [r3, #4]
 800c618:	6063      	str	r3, [r4, #4]
 800c61a:	bf04      	itt	eq
 800c61c:	1949      	addeq	r1, r1, r5
 800c61e:	6021      	streq	r1, [r4, #0]
 800c620:	6054      	str	r4, [r2, #4]
 800c622:	e7ca      	b.n	800c5ba <_free_r+0x26>
 800c624:	b003      	add	sp, #12
 800c626:	bd30      	pop	{r4, r5, pc}
 800c628:	2000211c 	.word	0x2000211c

0800c62c <sbrk_aligned>:
 800c62c:	b570      	push	{r4, r5, r6, lr}
 800c62e:	4e0e      	ldr	r6, [pc, #56]	; (800c668 <sbrk_aligned+0x3c>)
 800c630:	460c      	mov	r4, r1
 800c632:	6831      	ldr	r1, [r6, #0]
 800c634:	4605      	mov	r5, r0
 800c636:	b911      	cbnz	r1, 800c63e <sbrk_aligned+0x12>
 800c638:	f000 f9e8 	bl	800ca0c <_sbrk_r>
 800c63c:	6030      	str	r0, [r6, #0]
 800c63e:	4621      	mov	r1, r4
 800c640:	4628      	mov	r0, r5
 800c642:	f000 f9e3 	bl	800ca0c <_sbrk_r>
 800c646:	1c43      	adds	r3, r0, #1
 800c648:	d00a      	beq.n	800c660 <sbrk_aligned+0x34>
 800c64a:	1cc4      	adds	r4, r0, #3
 800c64c:	f024 0403 	bic.w	r4, r4, #3
 800c650:	42a0      	cmp	r0, r4
 800c652:	d007      	beq.n	800c664 <sbrk_aligned+0x38>
 800c654:	1a21      	subs	r1, r4, r0
 800c656:	4628      	mov	r0, r5
 800c658:	f000 f9d8 	bl	800ca0c <_sbrk_r>
 800c65c:	3001      	adds	r0, #1
 800c65e:	d101      	bne.n	800c664 <sbrk_aligned+0x38>
 800c660:	f04f 34ff 	mov.w	r4, #4294967295
 800c664:	4620      	mov	r0, r4
 800c666:	bd70      	pop	{r4, r5, r6, pc}
 800c668:	20002120 	.word	0x20002120

0800c66c <_malloc_r>:
 800c66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c670:	1ccd      	adds	r5, r1, #3
 800c672:	f025 0503 	bic.w	r5, r5, #3
 800c676:	3508      	adds	r5, #8
 800c678:	2d0c      	cmp	r5, #12
 800c67a:	bf38      	it	cc
 800c67c:	250c      	movcc	r5, #12
 800c67e:	2d00      	cmp	r5, #0
 800c680:	4607      	mov	r7, r0
 800c682:	db01      	blt.n	800c688 <_malloc_r+0x1c>
 800c684:	42a9      	cmp	r1, r5
 800c686:	d905      	bls.n	800c694 <_malloc_r+0x28>
 800c688:	230c      	movs	r3, #12
 800c68a:	603b      	str	r3, [r7, #0]
 800c68c:	2600      	movs	r6, #0
 800c68e:	4630      	mov	r0, r6
 800c690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c694:	4e2e      	ldr	r6, [pc, #184]	; (800c750 <_malloc_r+0xe4>)
 800c696:	f000 fa25 	bl	800cae4 <__malloc_lock>
 800c69a:	6833      	ldr	r3, [r6, #0]
 800c69c:	461c      	mov	r4, r3
 800c69e:	bb34      	cbnz	r4, 800c6ee <_malloc_r+0x82>
 800c6a0:	4629      	mov	r1, r5
 800c6a2:	4638      	mov	r0, r7
 800c6a4:	f7ff ffc2 	bl	800c62c <sbrk_aligned>
 800c6a8:	1c43      	adds	r3, r0, #1
 800c6aa:	4604      	mov	r4, r0
 800c6ac:	d14d      	bne.n	800c74a <_malloc_r+0xde>
 800c6ae:	6834      	ldr	r4, [r6, #0]
 800c6b0:	4626      	mov	r6, r4
 800c6b2:	2e00      	cmp	r6, #0
 800c6b4:	d140      	bne.n	800c738 <_malloc_r+0xcc>
 800c6b6:	6823      	ldr	r3, [r4, #0]
 800c6b8:	4631      	mov	r1, r6
 800c6ba:	4638      	mov	r0, r7
 800c6bc:	eb04 0803 	add.w	r8, r4, r3
 800c6c0:	f000 f9a4 	bl	800ca0c <_sbrk_r>
 800c6c4:	4580      	cmp	r8, r0
 800c6c6:	d13a      	bne.n	800c73e <_malloc_r+0xd2>
 800c6c8:	6821      	ldr	r1, [r4, #0]
 800c6ca:	3503      	adds	r5, #3
 800c6cc:	1a6d      	subs	r5, r5, r1
 800c6ce:	f025 0503 	bic.w	r5, r5, #3
 800c6d2:	3508      	adds	r5, #8
 800c6d4:	2d0c      	cmp	r5, #12
 800c6d6:	bf38      	it	cc
 800c6d8:	250c      	movcc	r5, #12
 800c6da:	4629      	mov	r1, r5
 800c6dc:	4638      	mov	r0, r7
 800c6de:	f7ff ffa5 	bl	800c62c <sbrk_aligned>
 800c6e2:	3001      	adds	r0, #1
 800c6e4:	d02b      	beq.n	800c73e <_malloc_r+0xd2>
 800c6e6:	6823      	ldr	r3, [r4, #0]
 800c6e8:	442b      	add	r3, r5
 800c6ea:	6023      	str	r3, [r4, #0]
 800c6ec:	e00e      	b.n	800c70c <_malloc_r+0xa0>
 800c6ee:	6822      	ldr	r2, [r4, #0]
 800c6f0:	1b52      	subs	r2, r2, r5
 800c6f2:	d41e      	bmi.n	800c732 <_malloc_r+0xc6>
 800c6f4:	2a0b      	cmp	r2, #11
 800c6f6:	d916      	bls.n	800c726 <_malloc_r+0xba>
 800c6f8:	1961      	adds	r1, r4, r5
 800c6fa:	42a3      	cmp	r3, r4
 800c6fc:	6025      	str	r5, [r4, #0]
 800c6fe:	bf18      	it	ne
 800c700:	6059      	strne	r1, [r3, #4]
 800c702:	6863      	ldr	r3, [r4, #4]
 800c704:	bf08      	it	eq
 800c706:	6031      	streq	r1, [r6, #0]
 800c708:	5162      	str	r2, [r4, r5]
 800c70a:	604b      	str	r3, [r1, #4]
 800c70c:	4638      	mov	r0, r7
 800c70e:	f104 060b 	add.w	r6, r4, #11
 800c712:	f000 f9ed 	bl	800caf0 <__malloc_unlock>
 800c716:	f026 0607 	bic.w	r6, r6, #7
 800c71a:	1d23      	adds	r3, r4, #4
 800c71c:	1af2      	subs	r2, r6, r3
 800c71e:	d0b6      	beq.n	800c68e <_malloc_r+0x22>
 800c720:	1b9b      	subs	r3, r3, r6
 800c722:	50a3      	str	r3, [r4, r2]
 800c724:	e7b3      	b.n	800c68e <_malloc_r+0x22>
 800c726:	6862      	ldr	r2, [r4, #4]
 800c728:	42a3      	cmp	r3, r4
 800c72a:	bf0c      	ite	eq
 800c72c:	6032      	streq	r2, [r6, #0]
 800c72e:	605a      	strne	r2, [r3, #4]
 800c730:	e7ec      	b.n	800c70c <_malloc_r+0xa0>
 800c732:	4623      	mov	r3, r4
 800c734:	6864      	ldr	r4, [r4, #4]
 800c736:	e7b2      	b.n	800c69e <_malloc_r+0x32>
 800c738:	4634      	mov	r4, r6
 800c73a:	6876      	ldr	r6, [r6, #4]
 800c73c:	e7b9      	b.n	800c6b2 <_malloc_r+0x46>
 800c73e:	230c      	movs	r3, #12
 800c740:	603b      	str	r3, [r7, #0]
 800c742:	4638      	mov	r0, r7
 800c744:	f000 f9d4 	bl	800caf0 <__malloc_unlock>
 800c748:	e7a1      	b.n	800c68e <_malloc_r+0x22>
 800c74a:	6025      	str	r5, [r4, #0]
 800c74c:	e7de      	b.n	800c70c <_malloc_r+0xa0>
 800c74e:	bf00      	nop
 800c750:	2000211c 	.word	0x2000211c

0800c754 <__ssputs_r>:
 800c754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c758:	688e      	ldr	r6, [r1, #8]
 800c75a:	429e      	cmp	r6, r3
 800c75c:	4682      	mov	sl, r0
 800c75e:	460c      	mov	r4, r1
 800c760:	4690      	mov	r8, r2
 800c762:	461f      	mov	r7, r3
 800c764:	d838      	bhi.n	800c7d8 <__ssputs_r+0x84>
 800c766:	898a      	ldrh	r2, [r1, #12]
 800c768:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c76c:	d032      	beq.n	800c7d4 <__ssputs_r+0x80>
 800c76e:	6825      	ldr	r5, [r4, #0]
 800c770:	6909      	ldr	r1, [r1, #16]
 800c772:	eba5 0901 	sub.w	r9, r5, r1
 800c776:	6965      	ldr	r5, [r4, #20]
 800c778:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c77c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c780:	3301      	adds	r3, #1
 800c782:	444b      	add	r3, r9
 800c784:	106d      	asrs	r5, r5, #1
 800c786:	429d      	cmp	r5, r3
 800c788:	bf38      	it	cc
 800c78a:	461d      	movcc	r5, r3
 800c78c:	0553      	lsls	r3, r2, #21
 800c78e:	d531      	bpl.n	800c7f4 <__ssputs_r+0xa0>
 800c790:	4629      	mov	r1, r5
 800c792:	f7ff ff6b 	bl	800c66c <_malloc_r>
 800c796:	4606      	mov	r6, r0
 800c798:	b950      	cbnz	r0, 800c7b0 <__ssputs_r+0x5c>
 800c79a:	230c      	movs	r3, #12
 800c79c:	f8ca 3000 	str.w	r3, [sl]
 800c7a0:	89a3      	ldrh	r3, [r4, #12]
 800c7a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7a6:	81a3      	strh	r3, [r4, #12]
 800c7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7b0:	6921      	ldr	r1, [r4, #16]
 800c7b2:	464a      	mov	r2, r9
 800c7b4:	f7ff fb46 	bl	800be44 <memcpy>
 800c7b8:	89a3      	ldrh	r3, [r4, #12]
 800c7ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c7be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7c2:	81a3      	strh	r3, [r4, #12]
 800c7c4:	6126      	str	r6, [r4, #16]
 800c7c6:	6165      	str	r5, [r4, #20]
 800c7c8:	444e      	add	r6, r9
 800c7ca:	eba5 0509 	sub.w	r5, r5, r9
 800c7ce:	6026      	str	r6, [r4, #0]
 800c7d0:	60a5      	str	r5, [r4, #8]
 800c7d2:	463e      	mov	r6, r7
 800c7d4:	42be      	cmp	r6, r7
 800c7d6:	d900      	bls.n	800c7da <__ssputs_r+0x86>
 800c7d8:	463e      	mov	r6, r7
 800c7da:	6820      	ldr	r0, [r4, #0]
 800c7dc:	4632      	mov	r2, r6
 800c7de:	4641      	mov	r1, r8
 800c7e0:	f000 f966 	bl	800cab0 <memmove>
 800c7e4:	68a3      	ldr	r3, [r4, #8]
 800c7e6:	1b9b      	subs	r3, r3, r6
 800c7e8:	60a3      	str	r3, [r4, #8]
 800c7ea:	6823      	ldr	r3, [r4, #0]
 800c7ec:	4433      	add	r3, r6
 800c7ee:	6023      	str	r3, [r4, #0]
 800c7f0:	2000      	movs	r0, #0
 800c7f2:	e7db      	b.n	800c7ac <__ssputs_r+0x58>
 800c7f4:	462a      	mov	r2, r5
 800c7f6:	f000 f981 	bl	800cafc <_realloc_r>
 800c7fa:	4606      	mov	r6, r0
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	d1e1      	bne.n	800c7c4 <__ssputs_r+0x70>
 800c800:	6921      	ldr	r1, [r4, #16]
 800c802:	4650      	mov	r0, sl
 800c804:	f7ff fec6 	bl	800c594 <_free_r>
 800c808:	e7c7      	b.n	800c79a <__ssputs_r+0x46>
	...

0800c80c <_svfiprintf_r>:
 800c80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c810:	4698      	mov	r8, r3
 800c812:	898b      	ldrh	r3, [r1, #12]
 800c814:	061b      	lsls	r3, r3, #24
 800c816:	b09d      	sub	sp, #116	; 0x74
 800c818:	4607      	mov	r7, r0
 800c81a:	460d      	mov	r5, r1
 800c81c:	4614      	mov	r4, r2
 800c81e:	d50e      	bpl.n	800c83e <_svfiprintf_r+0x32>
 800c820:	690b      	ldr	r3, [r1, #16]
 800c822:	b963      	cbnz	r3, 800c83e <_svfiprintf_r+0x32>
 800c824:	2140      	movs	r1, #64	; 0x40
 800c826:	f7ff ff21 	bl	800c66c <_malloc_r>
 800c82a:	6028      	str	r0, [r5, #0]
 800c82c:	6128      	str	r0, [r5, #16]
 800c82e:	b920      	cbnz	r0, 800c83a <_svfiprintf_r+0x2e>
 800c830:	230c      	movs	r3, #12
 800c832:	603b      	str	r3, [r7, #0]
 800c834:	f04f 30ff 	mov.w	r0, #4294967295
 800c838:	e0d1      	b.n	800c9de <_svfiprintf_r+0x1d2>
 800c83a:	2340      	movs	r3, #64	; 0x40
 800c83c:	616b      	str	r3, [r5, #20]
 800c83e:	2300      	movs	r3, #0
 800c840:	9309      	str	r3, [sp, #36]	; 0x24
 800c842:	2320      	movs	r3, #32
 800c844:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c848:	f8cd 800c 	str.w	r8, [sp, #12]
 800c84c:	2330      	movs	r3, #48	; 0x30
 800c84e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c9f8 <_svfiprintf_r+0x1ec>
 800c852:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c856:	f04f 0901 	mov.w	r9, #1
 800c85a:	4623      	mov	r3, r4
 800c85c:	469a      	mov	sl, r3
 800c85e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c862:	b10a      	cbz	r2, 800c868 <_svfiprintf_r+0x5c>
 800c864:	2a25      	cmp	r2, #37	; 0x25
 800c866:	d1f9      	bne.n	800c85c <_svfiprintf_r+0x50>
 800c868:	ebba 0b04 	subs.w	fp, sl, r4
 800c86c:	d00b      	beq.n	800c886 <_svfiprintf_r+0x7a>
 800c86e:	465b      	mov	r3, fp
 800c870:	4622      	mov	r2, r4
 800c872:	4629      	mov	r1, r5
 800c874:	4638      	mov	r0, r7
 800c876:	f7ff ff6d 	bl	800c754 <__ssputs_r>
 800c87a:	3001      	adds	r0, #1
 800c87c:	f000 80aa 	beq.w	800c9d4 <_svfiprintf_r+0x1c8>
 800c880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c882:	445a      	add	r2, fp
 800c884:	9209      	str	r2, [sp, #36]	; 0x24
 800c886:	f89a 3000 	ldrb.w	r3, [sl]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	f000 80a2 	beq.w	800c9d4 <_svfiprintf_r+0x1c8>
 800c890:	2300      	movs	r3, #0
 800c892:	f04f 32ff 	mov.w	r2, #4294967295
 800c896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c89a:	f10a 0a01 	add.w	sl, sl, #1
 800c89e:	9304      	str	r3, [sp, #16]
 800c8a0:	9307      	str	r3, [sp, #28]
 800c8a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8a6:	931a      	str	r3, [sp, #104]	; 0x68
 800c8a8:	4654      	mov	r4, sl
 800c8aa:	2205      	movs	r2, #5
 800c8ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8b0:	4851      	ldr	r0, [pc, #324]	; (800c9f8 <_svfiprintf_r+0x1ec>)
 800c8b2:	f7f3 fc95 	bl	80001e0 <memchr>
 800c8b6:	9a04      	ldr	r2, [sp, #16]
 800c8b8:	b9d8      	cbnz	r0, 800c8f2 <_svfiprintf_r+0xe6>
 800c8ba:	06d0      	lsls	r0, r2, #27
 800c8bc:	bf44      	itt	mi
 800c8be:	2320      	movmi	r3, #32
 800c8c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8c4:	0711      	lsls	r1, r2, #28
 800c8c6:	bf44      	itt	mi
 800c8c8:	232b      	movmi	r3, #43	; 0x2b
 800c8ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8ce:	f89a 3000 	ldrb.w	r3, [sl]
 800c8d2:	2b2a      	cmp	r3, #42	; 0x2a
 800c8d4:	d015      	beq.n	800c902 <_svfiprintf_r+0xf6>
 800c8d6:	9a07      	ldr	r2, [sp, #28]
 800c8d8:	4654      	mov	r4, sl
 800c8da:	2000      	movs	r0, #0
 800c8dc:	f04f 0c0a 	mov.w	ip, #10
 800c8e0:	4621      	mov	r1, r4
 800c8e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8e6:	3b30      	subs	r3, #48	; 0x30
 800c8e8:	2b09      	cmp	r3, #9
 800c8ea:	d94e      	bls.n	800c98a <_svfiprintf_r+0x17e>
 800c8ec:	b1b0      	cbz	r0, 800c91c <_svfiprintf_r+0x110>
 800c8ee:	9207      	str	r2, [sp, #28]
 800c8f0:	e014      	b.n	800c91c <_svfiprintf_r+0x110>
 800c8f2:	eba0 0308 	sub.w	r3, r0, r8
 800c8f6:	fa09 f303 	lsl.w	r3, r9, r3
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	9304      	str	r3, [sp, #16]
 800c8fe:	46a2      	mov	sl, r4
 800c900:	e7d2      	b.n	800c8a8 <_svfiprintf_r+0x9c>
 800c902:	9b03      	ldr	r3, [sp, #12]
 800c904:	1d19      	adds	r1, r3, #4
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	9103      	str	r1, [sp, #12]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	bfbb      	ittet	lt
 800c90e:	425b      	neglt	r3, r3
 800c910:	f042 0202 	orrlt.w	r2, r2, #2
 800c914:	9307      	strge	r3, [sp, #28]
 800c916:	9307      	strlt	r3, [sp, #28]
 800c918:	bfb8      	it	lt
 800c91a:	9204      	strlt	r2, [sp, #16]
 800c91c:	7823      	ldrb	r3, [r4, #0]
 800c91e:	2b2e      	cmp	r3, #46	; 0x2e
 800c920:	d10c      	bne.n	800c93c <_svfiprintf_r+0x130>
 800c922:	7863      	ldrb	r3, [r4, #1]
 800c924:	2b2a      	cmp	r3, #42	; 0x2a
 800c926:	d135      	bne.n	800c994 <_svfiprintf_r+0x188>
 800c928:	9b03      	ldr	r3, [sp, #12]
 800c92a:	1d1a      	adds	r2, r3, #4
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	9203      	str	r2, [sp, #12]
 800c930:	2b00      	cmp	r3, #0
 800c932:	bfb8      	it	lt
 800c934:	f04f 33ff 	movlt.w	r3, #4294967295
 800c938:	3402      	adds	r4, #2
 800c93a:	9305      	str	r3, [sp, #20]
 800c93c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ca08 <_svfiprintf_r+0x1fc>
 800c940:	7821      	ldrb	r1, [r4, #0]
 800c942:	2203      	movs	r2, #3
 800c944:	4650      	mov	r0, sl
 800c946:	f7f3 fc4b 	bl	80001e0 <memchr>
 800c94a:	b140      	cbz	r0, 800c95e <_svfiprintf_r+0x152>
 800c94c:	2340      	movs	r3, #64	; 0x40
 800c94e:	eba0 000a 	sub.w	r0, r0, sl
 800c952:	fa03 f000 	lsl.w	r0, r3, r0
 800c956:	9b04      	ldr	r3, [sp, #16]
 800c958:	4303      	orrs	r3, r0
 800c95a:	3401      	adds	r4, #1
 800c95c:	9304      	str	r3, [sp, #16]
 800c95e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c962:	4826      	ldr	r0, [pc, #152]	; (800c9fc <_svfiprintf_r+0x1f0>)
 800c964:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c968:	2206      	movs	r2, #6
 800c96a:	f7f3 fc39 	bl	80001e0 <memchr>
 800c96e:	2800      	cmp	r0, #0
 800c970:	d038      	beq.n	800c9e4 <_svfiprintf_r+0x1d8>
 800c972:	4b23      	ldr	r3, [pc, #140]	; (800ca00 <_svfiprintf_r+0x1f4>)
 800c974:	bb1b      	cbnz	r3, 800c9be <_svfiprintf_r+0x1b2>
 800c976:	9b03      	ldr	r3, [sp, #12]
 800c978:	3307      	adds	r3, #7
 800c97a:	f023 0307 	bic.w	r3, r3, #7
 800c97e:	3308      	adds	r3, #8
 800c980:	9303      	str	r3, [sp, #12]
 800c982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c984:	4433      	add	r3, r6
 800c986:	9309      	str	r3, [sp, #36]	; 0x24
 800c988:	e767      	b.n	800c85a <_svfiprintf_r+0x4e>
 800c98a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c98e:	460c      	mov	r4, r1
 800c990:	2001      	movs	r0, #1
 800c992:	e7a5      	b.n	800c8e0 <_svfiprintf_r+0xd4>
 800c994:	2300      	movs	r3, #0
 800c996:	3401      	adds	r4, #1
 800c998:	9305      	str	r3, [sp, #20]
 800c99a:	4619      	mov	r1, r3
 800c99c:	f04f 0c0a 	mov.w	ip, #10
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9a6:	3a30      	subs	r2, #48	; 0x30
 800c9a8:	2a09      	cmp	r2, #9
 800c9aa:	d903      	bls.n	800c9b4 <_svfiprintf_r+0x1a8>
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d0c5      	beq.n	800c93c <_svfiprintf_r+0x130>
 800c9b0:	9105      	str	r1, [sp, #20]
 800c9b2:	e7c3      	b.n	800c93c <_svfiprintf_r+0x130>
 800c9b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9b8:	4604      	mov	r4, r0
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e7f0      	b.n	800c9a0 <_svfiprintf_r+0x194>
 800c9be:	ab03      	add	r3, sp, #12
 800c9c0:	9300      	str	r3, [sp, #0]
 800c9c2:	462a      	mov	r2, r5
 800c9c4:	4b0f      	ldr	r3, [pc, #60]	; (800ca04 <_svfiprintf_r+0x1f8>)
 800c9c6:	a904      	add	r1, sp, #16
 800c9c8:	4638      	mov	r0, r7
 800c9ca:	f7fd ffb5 	bl	800a938 <_printf_float>
 800c9ce:	1c42      	adds	r2, r0, #1
 800c9d0:	4606      	mov	r6, r0
 800c9d2:	d1d6      	bne.n	800c982 <_svfiprintf_r+0x176>
 800c9d4:	89ab      	ldrh	r3, [r5, #12]
 800c9d6:	065b      	lsls	r3, r3, #25
 800c9d8:	f53f af2c 	bmi.w	800c834 <_svfiprintf_r+0x28>
 800c9dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9de:	b01d      	add	sp, #116	; 0x74
 800c9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9e4:	ab03      	add	r3, sp, #12
 800c9e6:	9300      	str	r3, [sp, #0]
 800c9e8:	462a      	mov	r2, r5
 800c9ea:	4b06      	ldr	r3, [pc, #24]	; (800ca04 <_svfiprintf_r+0x1f8>)
 800c9ec:	a904      	add	r1, sp, #16
 800c9ee:	4638      	mov	r0, r7
 800c9f0:	f7fe fa46 	bl	800ae80 <_printf_i>
 800c9f4:	e7eb      	b.n	800c9ce <_svfiprintf_r+0x1c2>
 800c9f6:	bf00      	nop
 800c9f8:	0800d88c 	.word	0x0800d88c
 800c9fc:	0800d896 	.word	0x0800d896
 800ca00:	0800a939 	.word	0x0800a939
 800ca04:	0800c755 	.word	0x0800c755
 800ca08:	0800d892 	.word	0x0800d892

0800ca0c <_sbrk_r>:
 800ca0c:	b538      	push	{r3, r4, r5, lr}
 800ca0e:	4d06      	ldr	r5, [pc, #24]	; (800ca28 <_sbrk_r+0x1c>)
 800ca10:	2300      	movs	r3, #0
 800ca12:	4604      	mov	r4, r0
 800ca14:	4608      	mov	r0, r1
 800ca16:	602b      	str	r3, [r5, #0]
 800ca18:	f7f5 f9a0 	bl	8001d5c <_sbrk>
 800ca1c:	1c43      	adds	r3, r0, #1
 800ca1e:	d102      	bne.n	800ca26 <_sbrk_r+0x1a>
 800ca20:	682b      	ldr	r3, [r5, #0]
 800ca22:	b103      	cbz	r3, 800ca26 <_sbrk_r+0x1a>
 800ca24:	6023      	str	r3, [r4, #0]
 800ca26:	bd38      	pop	{r3, r4, r5, pc}
 800ca28:	20002124 	.word	0x20002124

0800ca2c <__assert_func>:
 800ca2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca2e:	4614      	mov	r4, r2
 800ca30:	461a      	mov	r2, r3
 800ca32:	4b09      	ldr	r3, [pc, #36]	; (800ca58 <__assert_func+0x2c>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4605      	mov	r5, r0
 800ca38:	68d8      	ldr	r0, [r3, #12]
 800ca3a:	b14c      	cbz	r4, 800ca50 <__assert_func+0x24>
 800ca3c:	4b07      	ldr	r3, [pc, #28]	; (800ca5c <__assert_func+0x30>)
 800ca3e:	9100      	str	r1, [sp, #0]
 800ca40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca44:	4906      	ldr	r1, [pc, #24]	; (800ca60 <__assert_func+0x34>)
 800ca46:	462b      	mov	r3, r5
 800ca48:	f000 f80e 	bl	800ca68 <fiprintf>
 800ca4c:	f000 faac 	bl	800cfa8 <abort>
 800ca50:	4b04      	ldr	r3, [pc, #16]	; (800ca64 <__assert_func+0x38>)
 800ca52:	461c      	mov	r4, r3
 800ca54:	e7f3      	b.n	800ca3e <__assert_func+0x12>
 800ca56:	bf00      	nop
 800ca58:	20000104 	.word	0x20000104
 800ca5c:	0800d89d 	.word	0x0800d89d
 800ca60:	0800d8aa 	.word	0x0800d8aa
 800ca64:	0800d8d8 	.word	0x0800d8d8

0800ca68 <fiprintf>:
 800ca68:	b40e      	push	{r1, r2, r3}
 800ca6a:	b503      	push	{r0, r1, lr}
 800ca6c:	4601      	mov	r1, r0
 800ca6e:	ab03      	add	r3, sp, #12
 800ca70:	4805      	ldr	r0, [pc, #20]	; (800ca88 <fiprintf+0x20>)
 800ca72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca76:	6800      	ldr	r0, [r0, #0]
 800ca78:	9301      	str	r3, [sp, #4]
 800ca7a:	f000 f897 	bl	800cbac <_vfiprintf_r>
 800ca7e:	b002      	add	sp, #8
 800ca80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca84:	b003      	add	sp, #12
 800ca86:	4770      	bx	lr
 800ca88:	20000104 	.word	0x20000104

0800ca8c <__ascii_mbtowc>:
 800ca8c:	b082      	sub	sp, #8
 800ca8e:	b901      	cbnz	r1, 800ca92 <__ascii_mbtowc+0x6>
 800ca90:	a901      	add	r1, sp, #4
 800ca92:	b142      	cbz	r2, 800caa6 <__ascii_mbtowc+0x1a>
 800ca94:	b14b      	cbz	r3, 800caaa <__ascii_mbtowc+0x1e>
 800ca96:	7813      	ldrb	r3, [r2, #0]
 800ca98:	600b      	str	r3, [r1, #0]
 800ca9a:	7812      	ldrb	r2, [r2, #0]
 800ca9c:	1e10      	subs	r0, r2, #0
 800ca9e:	bf18      	it	ne
 800caa0:	2001      	movne	r0, #1
 800caa2:	b002      	add	sp, #8
 800caa4:	4770      	bx	lr
 800caa6:	4610      	mov	r0, r2
 800caa8:	e7fb      	b.n	800caa2 <__ascii_mbtowc+0x16>
 800caaa:	f06f 0001 	mvn.w	r0, #1
 800caae:	e7f8      	b.n	800caa2 <__ascii_mbtowc+0x16>

0800cab0 <memmove>:
 800cab0:	4288      	cmp	r0, r1
 800cab2:	b510      	push	{r4, lr}
 800cab4:	eb01 0402 	add.w	r4, r1, r2
 800cab8:	d902      	bls.n	800cac0 <memmove+0x10>
 800caba:	4284      	cmp	r4, r0
 800cabc:	4623      	mov	r3, r4
 800cabe:	d807      	bhi.n	800cad0 <memmove+0x20>
 800cac0:	1e43      	subs	r3, r0, #1
 800cac2:	42a1      	cmp	r1, r4
 800cac4:	d008      	beq.n	800cad8 <memmove+0x28>
 800cac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800caca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cace:	e7f8      	b.n	800cac2 <memmove+0x12>
 800cad0:	4402      	add	r2, r0
 800cad2:	4601      	mov	r1, r0
 800cad4:	428a      	cmp	r2, r1
 800cad6:	d100      	bne.n	800cada <memmove+0x2a>
 800cad8:	bd10      	pop	{r4, pc}
 800cada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cae2:	e7f7      	b.n	800cad4 <memmove+0x24>

0800cae4 <__malloc_lock>:
 800cae4:	4801      	ldr	r0, [pc, #4]	; (800caec <__malloc_lock+0x8>)
 800cae6:	f000 bc1f 	b.w	800d328 <__retarget_lock_acquire_recursive>
 800caea:	bf00      	nop
 800caec:	20002128 	.word	0x20002128

0800caf0 <__malloc_unlock>:
 800caf0:	4801      	ldr	r0, [pc, #4]	; (800caf8 <__malloc_unlock+0x8>)
 800caf2:	f000 bc1a 	b.w	800d32a <__retarget_lock_release_recursive>
 800caf6:	bf00      	nop
 800caf8:	20002128 	.word	0x20002128

0800cafc <_realloc_r>:
 800cafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb00:	4680      	mov	r8, r0
 800cb02:	4614      	mov	r4, r2
 800cb04:	460e      	mov	r6, r1
 800cb06:	b921      	cbnz	r1, 800cb12 <_realloc_r+0x16>
 800cb08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb0c:	4611      	mov	r1, r2
 800cb0e:	f7ff bdad 	b.w	800c66c <_malloc_r>
 800cb12:	b92a      	cbnz	r2, 800cb20 <_realloc_r+0x24>
 800cb14:	f7ff fd3e 	bl	800c594 <_free_r>
 800cb18:	4625      	mov	r5, r4
 800cb1a:	4628      	mov	r0, r5
 800cb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb20:	f000 fc6a 	bl	800d3f8 <_malloc_usable_size_r>
 800cb24:	4284      	cmp	r4, r0
 800cb26:	4607      	mov	r7, r0
 800cb28:	d802      	bhi.n	800cb30 <_realloc_r+0x34>
 800cb2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb2e:	d812      	bhi.n	800cb56 <_realloc_r+0x5a>
 800cb30:	4621      	mov	r1, r4
 800cb32:	4640      	mov	r0, r8
 800cb34:	f7ff fd9a 	bl	800c66c <_malloc_r>
 800cb38:	4605      	mov	r5, r0
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	d0ed      	beq.n	800cb1a <_realloc_r+0x1e>
 800cb3e:	42bc      	cmp	r4, r7
 800cb40:	4622      	mov	r2, r4
 800cb42:	4631      	mov	r1, r6
 800cb44:	bf28      	it	cs
 800cb46:	463a      	movcs	r2, r7
 800cb48:	f7ff f97c 	bl	800be44 <memcpy>
 800cb4c:	4631      	mov	r1, r6
 800cb4e:	4640      	mov	r0, r8
 800cb50:	f7ff fd20 	bl	800c594 <_free_r>
 800cb54:	e7e1      	b.n	800cb1a <_realloc_r+0x1e>
 800cb56:	4635      	mov	r5, r6
 800cb58:	e7df      	b.n	800cb1a <_realloc_r+0x1e>

0800cb5a <__sfputc_r>:
 800cb5a:	6893      	ldr	r3, [r2, #8]
 800cb5c:	3b01      	subs	r3, #1
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	b410      	push	{r4}
 800cb62:	6093      	str	r3, [r2, #8]
 800cb64:	da08      	bge.n	800cb78 <__sfputc_r+0x1e>
 800cb66:	6994      	ldr	r4, [r2, #24]
 800cb68:	42a3      	cmp	r3, r4
 800cb6a:	db01      	blt.n	800cb70 <__sfputc_r+0x16>
 800cb6c:	290a      	cmp	r1, #10
 800cb6e:	d103      	bne.n	800cb78 <__sfputc_r+0x1e>
 800cb70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb74:	f000 b94a 	b.w	800ce0c <__swbuf_r>
 800cb78:	6813      	ldr	r3, [r2, #0]
 800cb7a:	1c58      	adds	r0, r3, #1
 800cb7c:	6010      	str	r0, [r2, #0]
 800cb7e:	7019      	strb	r1, [r3, #0]
 800cb80:	4608      	mov	r0, r1
 800cb82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <__sfputs_r>:
 800cb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb8a:	4606      	mov	r6, r0
 800cb8c:	460f      	mov	r7, r1
 800cb8e:	4614      	mov	r4, r2
 800cb90:	18d5      	adds	r5, r2, r3
 800cb92:	42ac      	cmp	r4, r5
 800cb94:	d101      	bne.n	800cb9a <__sfputs_r+0x12>
 800cb96:	2000      	movs	r0, #0
 800cb98:	e007      	b.n	800cbaa <__sfputs_r+0x22>
 800cb9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb9e:	463a      	mov	r2, r7
 800cba0:	4630      	mov	r0, r6
 800cba2:	f7ff ffda 	bl	800cb5a <__sfputc_r>
 800cba6:	1c43      	adds	r3, r0, #1
 800cba8:	d1f3      	bne.n	800cb92 <__sfputs_r+0xa>
 800cbaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cbac <_vfiprintf_r>:
 800cbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb0:	460d      	mov	r5, r1
 800cbb2:	b09d      	sub	sp, #116	; 0x74
 800cbb4:	4614      	mov	r4, r2
 800cbb6:	4698      	mov	r8, r3
 800cbb8:	4606      	mov	r6, r0
 800cbba:	b118      	cbz	r0, 800cbc4 <_vfiprintf_r+0x18>
 800cbbc:	6983      	ldr	r3, [r0, #24]
 800cbbe:	b90b      	cbnz	r3, 800cbc4 <_vfiprintf_r+0x18>
 800cbc0:	f000 fb14 	bl	800d1ec <__sinit>
 800cbc4:	4b89      	ldr	r3, [pc, #548]	; (800cdec <_vfiprintf_r+0x240>)
 800cbc6:	429d      	cmp	r5, r3
 800cbc8:	d11b      	bne.n	800cc02 <_vfiprintf_r+0x56>
 800cbca:	6875      	ldr	r5, [r6, #4]
 800cbcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbce:	07d9      	lsls	r1, r3, #31
 800cbd0:	d405      	bmi.n	800cbde <_vfiprintf_r+0x32>
 800cbd2:	89ab      	ldrh	r3, [r5, #12]
 800cbd4:	059a      	lsls	r2, r3, #22
 800cbd6:	d402      	bmi.n	800cbde <_vfiprintf_r+0x32>
 800cbd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbda:	f000 fba5 	bl	800d328 <__retarget_lock_acquire_recursive>
 800cbde:	89ab      	ldrh	r3, [r5, #12]
 800cbe0:	071b      	lsls	r3, r3, #28
 800cbe2:	d501      	bpl.n	800cbe8 <_vfiprintf_r+0x3c>
 800cbe4:	692b      	ldr	r3, [r5, #16]
 800cbe6:	b9eb      	cbnz	r3, 800cc24 <_vfiprintf_r+0x78>
 800cbe8:	4629      	mov	r1, r5
 800cbea:	4630      	mov	r0, r6
 800cbec:	f000 f96e 	bl	800cecc <__swsetup_r>
 800cbf0:	b1c0      	cbz	r0, 800cc24 <_vfiprintf_r+0x78>
 800cbf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbf4:	07dc      	lsls	r4, r3, #31
 800cbf6:	d50e      	bpl.n	800cc16 <_vfiprintf_r+0x6a>
 800cbf8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbfc:	b01d      	add	sp, #116	; 0x74
 800cbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc02:	4b7b      	ldr	r3, [pc, #492]	; (800cdf0 <_vfiprintf_r+0x244>)
 800cc04:	429d      	cmp	r5, r3
 800cc06:	d101      	bne.n	800cc0c <_vfiprintf_r+0x60>
 800cc08:	68b5      	ldr	r5, [r6, #8]
 800cc0a:	e7df      	b.n	800cbcc <_vfiprintf_r+0x20>
 800cc0c:	4b79      	ldr	r3, [pc, #484]	; (800cdf4 <_vfiprintf_r+0x248>)
 800cc0e:	429d      	cmp	r5, r3
 800cc10:	bf08      	it	eq
 800cc12:	68f5      	ldreq	r5, [r6, #12]
 800cc14:	e7da      	b.n	800cbcc <_vfiprintf_r+0x20>
 800cc16:	89ab      	ldrh	r3, [r5, #12]
 800cc18:	0598      	lsls	r0, r3, #22
 800cc1a:	d4ed      	bmi.n	800cbf8 <_vfiprintf_r+0x4c>
 800cc1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc1e:	f000 fb84 	bl	800d32a <__retarget_lock_release_recursive>
 800cc22:	e7e9      	b.n	800cbf8 <_vfiprintf_r+0x4c>
 800cc24:	2300      	movs	r3, #0
 800cc26:	9309      	str	r3, [sp, #36]	; 0x24
 800cc28:	2320      	movs	r3, #32
 800cc2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc32:	2330      	movs	r3, #48	; 0x30
 800cc34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cdf8 <_vfiprintf_r+0x24c>
 800cc38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc3c:	f04f 0901 	mov.w	r9, #1
 800cc40:	4623      	mov	r3, r4
 800cc42:	469a      	mov	sl, r3
 800cc44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc48:	b10a      	cbz	r2, 800cc4e <_vfiprintf_r+0xa2>
 800cc4a:	2a25      	cmp	r2, #37	; 0x25
 800cc4c:	d1f9      	bne.n	800cc42 <_vfiprintf_r+0x96>
 800cc4e:	ebba 0b04 	subs.w	fp, sl, r4
 800cc52:	d00b      	beq.n	800cc6c <_vfiprintf_r+0xc0>
 800cc54:	465b      	mov	r3, fp
 800cc56:	4622      	mov	r2, r4
 800cc58:	4629      	mov	r1, r5
 800cc5a:	4630      	mov	r0, r6
 800cc5c:	f7ff ff94 	bl	800cb88 <__sfputs_r>
 800cc60:	3001      	adds	r0, #1
 800cc62:	f000 80aa 	beq.w	800cdba <_vfiprintf_r+0x20e>
 800cc66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc68:	445a      	add	r2, fp
 800cc6a:	9209      	str	r2, [sp, #36]	; 0x24
 800cc6c:	f89a 3000 	ldrb.w	r3, [sl]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	f000 80a2 	beq.w	800cdba <_vfiprintf_r+0x20e>
 800cc76:	2300      	movs	r3, #0
 800cc78:	f04f 32ff 	mov.w	r2, #4294967295
 800cc7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc80:	f10a 0a01 	add.w	sl, sl, #1
 800cc84:	9304      	str	r3, [sp, #16]
 800cc86:	9307      	str	r3, [sp, #28]
 800cc88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc8c:	931a      	str	r3, [sp, #104]	; 0x68
 800cc8e:	4654      	mov	r4, sl
 800cc90:	2205      	movs	r2, #5
 800cc92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc96:	4858      	ldr	r0, [pc, #352]	; (800cdf8 <_vfiprintf_r+0x24c>)
 800cc98:	f7f3 faa2 	bl	80001e0 <memchr>
 800cc9c:	9a04      	ldr	r2, [sp, #16]
 800cc9e:	b9d8      	cbnz	r0, 800ccd8 <_vfiprintf_r+0x12c>
 800cca0:	06d1      	lsls	r1, r2, #27
 800cca2:	bf44      	itt	mi
 800cca4:	2320      	movmi	r3, #32
 800cca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccaa:	0713      	lsls	r3, r2, #28
 800ccac:	bf44      	itt	mi
 800ccae:	232b      	movmi	r3, #43	; 0x2b
 800ccb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccb4:	f89a 3000 	ldrb.w	r3, [sl]
 800ccb8:	2b2a      	cmp	r3, #42	; 0x2a
 800ccba:	d015      	beq.n	800cce8 <_vfiprintf_r+0x13c>
 800ccbc:	9a07      	ldr	r2, [sp, #28]
 800ccbe:	4654      	mov	r4, sl
 800ccc0:	2000      	movs	r0, #0
 800ccc2:	f04f 0c0a 	mov.w	ip, #10
 800ccc6:	4621      	mov	r1, r4
 800ccc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cccc:	3b30      	subs	r3, #48	; 0x30
 800ccce:	2b09      	cmp	r3, #9
 800ccd0:	d94e      	bls.n	800cd70 <_vfiprintf_r+0x1c4>
 800ccd2:	b1b0      	cbz	r0, 800cd02 <_vfiprintf_r+0x156>
 800ccd4:	9207      	str	r2, [sp, #28]
 800ccd6:	e014      	b.n	800cd02 <_vfiprintf_r+0x156>
 800ccd8:	eba0 0308 	sub.w	r3, r0, r8
 800ccdc:	fa09 f303 	lsl.w	r3, r9, r3
 800cce0:	4313      	orrs	r3, r2
 800cce2:	9304      	str	r3, [sp, #16]
 800cce4:	46a2      	mov	sl, r4
 800cce6:	e7d2      	b.n	800cc8e <_vfiprintf_r+0xe2>
 800cce8:	9b03      	ldr	r3, [sp, #12]
 800ccea:	1d19      	adds	r1, r3, #4
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	9103      	str	r1, [sp, #12]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	bfbb      	ittet	lt
 800ccf4:	425b      	neglt	r3, r3
 800ccf6:	f042 0202 	orrlt.w	r2, r2, #2
 800ccfa:	9307      	strge	r3, [sp, #28]
 800ccfc:	9307      	strlt	r3, [sp, #28]
 800ccfe:	bfb8      	it	lt
 800cd00:	9204      	strlt	r2, [sp, #16]
 800cd02:	7823      	ldrb	r3, [r4, #0]
 800cd04:	2b2e      	cmp	r3, #46	; 0x2e
 800cd06:	d10c      	bne.n	800cd22 <_vfiprintf_r+0x176>
 800cd08:	7863      	ldrb	r3, [r4, #1]
 800cd0a:	2b2a      	cmp	r3, #42	; 0x2a
 800cd0c:	d135      	bne.n	800cd7a <_vfiprintf_r+0x1ce>
 800cd0e:	9b03      	ldr	r3, [sp, #12]
 800cd10:	1d1a      	adds	r2, r3, #4
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	9203      	str	r2, [sp, #12]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	bfb8      	it	lt
 800cd1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd1e:	3402      	adds	r4, #2
 800cd20:	9305      	str	r3, [sp, #20]
 800cd22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ce08 <_vfiprintf_r+0x25c>
 800cd26:	7821      	ldrb	r1, [r4, #0]
 800cd28:	2203      	movs	r2, #3
 800cd2a:	4650      	mov	r0, sl
 800cd2c:	f7f3 fa58 	bl	80001e0 <memchr>
 800cd30:	b140      	cbz	r0, 800cd44 <_vfiprintf_r+0x198>
 800cd32:	2340      	movs	r3, #64	; 0x40
 800cd34:	eba0 000a 	sub.w	r0, r0, sl
 800cd38:	fa03 f000 	lsl.w	r0, r3, r0
 800cd3c:	9b04      	ldr	r3, [sp, #16]
 800cd3e:	4303      	orrs	r3, r0
 800cd40:	3401      	adds	r4, #1
 800cd42:	9304      	str	r3, [sp, #16]
 800cd44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd48:	482c      	ldr	r0, [pc, #176]	; (800cdfc <_vfiprintf_r+0x250>)
 800cd4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd4e:	2206      	movs	r2, #6
 800cd50:	f7f3 fa46 	bl	80001e0 <memchr>
 800cd54:	2800      	cmp	r0, #0
 800cd56:	d03f      	beq.n	800cdd8 <_vfiprintf_r+0x22c>
 800cd58:	4b29      	ldr	r3, [pc, #164]	; (800ce00 <_vfiprintf_r+0x254>)
 800cd5a:	bb1b      	cbnz	r3, 800cda4 <_vfiprintf_r+0x1f8>
 800cd5c:	9b03      	ldr	r3, [sp, #12]
 800cd5e:	3307      	adds	r3, #7
 800cd60:	f023 0307 	bic.w	r3, r3, #7
 800cd64:	3308      	adds	r3, #8
 800cd66:	9303      	str	r3, [sp, #12]
 800cd68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd6a:	443b      	add	r3, r7
 800cd6c:	9309      	str	r3, [sp, #36]	; 0x24
 800cd6e:	e767      	b.n	800cc40 <_vfiprintf_r+0x94>
 800cd70:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd74:	460c      	mov	r4, r1
 800cd76:	2001      	movs	r0, #1
 800cd78:	e7a5      	b.n	800ccc6 <_vfiprintf_r+0x11a>
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	3401      	adds	r4, #1
 800cd7e:	9305      	str	r3, [sp, #20]
 800cd80:	4619      	mov	r1, r3
 800cd82:	f04f 0c0a 	mov.w	ip, #10
 800cd86:	4620      	mov	r0, r4
 800cd88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd8c:	3a30      	subs	r2, #48	; 0x30
 800cd8e:	2a09      	cmp	r2, #9
 800cd90:	d903      	bls.n	800cd9a <_vfiprintf_r+0x1ee>
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d0c5      	beq.n	800cd22 <_vfiprintf_r+0x176>
 800cd96:	9105      	str	r1, [sp, #20]
 800cd98:	e7c3      	b.n	800cd22 <_vfiprintf_r+0x176>
 800cd9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd9e:	4604      	mov	r4, r0
 800cda0:	2301      	movs	r3, #1
 800cda2:	e7f0      	b.n	800cd86 <_vfiprintf_r+0x1da>
 800cda4:	ab03      	add	r3, sp, #12
 800cda6:	9300      	str	r3, [sp, #0]
 800cda8:	462a      	mov	r2, r5
 800cdaa:	4b16      	ldr	r3, [pc, #88]	; (800ce04 <_vfiprintf_r+0x258>)
 800cdac:	a904      	add	r1, sp, #16
 800cdae:	4630      	mov	r0, r6
 800cdb0:	f7fd fdc2 	bl	800a938 <_printf_float>
 800cdb4:	4607      	mov	r7, r0
 800cdb6:	1c78      	adds	r0, r7, #1
 800cdb8:	d1d6      	bne.n	800cd68 <_vfiprintf_r+0x1bc>
 800cdba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdbc:	07d9      	lsls	r1, r3, #31
 800cdbe:	d405      	bmi.n	800cdcc <_vfiprintf_r+0x220>
 800cdc0:	89ab      	ldrh	r3, [r5, #12]
 800cdc2:	059a      	lsls	r2, r3, #22
 800cdc4:	d402      	bmi.n	800cdcc <_vfiprintf_r+0x220>
 800cdc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cdc8:	f000 faaf 	bl	800d32a <__retarget_lock_release_recursive>
 800cdcc:	89ab      	ldrh	r3, [r5, #12]
 800cdce:	065b      	lsls	r3, r3, #25
 800cdd0:	f53f af12 	bmi.w	800cbf8 <_vfiprintf_r+0x4c>
 800cdd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdd6:	e711      	b.n	800cbfc <_vfiprintf_r+0x50>
 800cdd8:	ab03      	add	r3, sp, #12
 800cdda:	9300      	str	r3, [sp, #0]
 800cddc:	462a      	mov	r2, r5
 800cdde:	4b09      	ldr	r3, [pc, #36]	; (800ce04 <_vfiprintf_r+0x258>)
 800cde0:	a904      	add	r1, sp, #16
 800cde2:	4630      	mov	r0, r6
 800cde4:	f7fe f84c 	bl	800ae80 <_printf_i>
 800cde8:	e7e4      	b.n	800cdb4 <_vfiprintf_r+0x208>
 800cdea:	bf00      	nop
 800cdec:	0800da04 	.word	0x0800da04
 800cdf0:	0800da24 	.word	0x0800da24
 800cdf4:	0800d9e4 	.word	0x0800d9e4
 800cdf8:	0800d88c 	.word	0x0800d88c
 800cdfc:	0800d896 	.word	0x0800d896
 800ce00:	0800a939 	.word	0x0800a939
 800ce04:	0800cb89 	.word	0x0800cb89
 800ce08:	0800d892 	.word	0x0800d892

0800ce0c <__swbuf_r>:
 800ce0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce0e:	460e      	mov	r6, r1
 800ce10:	4614      	mov	r4, r2
 800ce12:	4605      	mov	r5, r0
 800ce14:	b118      	cbz	r0, 800ce1e <__swbuf_r+0x12>
 800ce16:	6983      	ldr	r3, [r0, #24]
 800ce18:	b90b      	cbnz	r3, 800ce1e <__swbuf_r+0x12>
 800ce1a:	f000 f9e7 	bl	800d1ec <__sinit>
 800ce1e:	4b21      	ldr	r3, [pc, #132]	; (800cea4 <__swbuf_r+0x98>)
 800ce20:	429c      	cmp	r4, r3
 800ce22:	d12b      	bne.n	800ce7c <__swbuf_r+0x70>
 800ce24:	686c      	ldr	r4, [r5, #4]
 800ce26:	69a3      	ldr	r3, [r4, #24]
 800ce28:	60a3      	str	r3, [r4, #8]
 800ce2a:	89a3      	ldrh	r3, [r4, #12]
 800ce2c:	071a      	lsls	r2, r3, #28
 800ce2e:	d52f      	bpl.n	800ce90 <__swbuf_r+0x84>
 800ce30:	6923      	ldr	r3, [r4, #16]
 800ce32:	b36b      	cbz	r3, 800ce90 <__swbuf_r+0x84>
 800ce34:	6923      	ldr	r3, [r4, #16]
 800ce36:	6820      	ldr	r0, [r4, #0]
 800ce38:	1ac0      	subs	r0, r0, r3
 800ce3a:	6963      	ldr	r3, [r4, #20]
 800ce3c:	b2f6      	uxtb	r6, r6
 800ce3e:	4283      	cmp	r3, r0
 800ce40:	4637      	mov	r7, r6
 800ce42:	dc04      	bgt.n	800ce4e <__swbuf_r+0x42>
 800ce44:	4621      	mov	r1, r4
 800ce46:	4628      	mov	r0, r5
 800ce48:	f000 f93c 	bl	800d0c4 <_fflush_r>
 800ce4c:	bb30      	cbnz	r0, 800ce9c <__swbuf_r+0x90>
 800ce4e:	68a3      	ldr	r3, [r4, #8]
 800ce50:	3b01      	subs	r3, #1
 800ce52:	60a3      	str	r3, [r4, #8]
 800ce54:	6823      	ldr	r3, [r4, #0]
 800ce56:	1c5a      	adds	r2, r3, #1
 800ce58:	6022      	str	r2, [r4, #0]
 800ce5a:	701e      	strb	r6, [r3, #0]
 800ce5c:	6963      	ldr	r3, [r4, #20]
 800ce5e:	3001      	adds	r0, #1
 800ce60:	4283      	cmp	r3, r0
 800ce62:	d004      	beq.n	800ce6e <__swbuf_r+0x62>
 800ce64:	89a3      	ldrh	r3, [r4, #12]
 800ce66:	07db      	lsls	r3, r3, #31
 800ce68:	d506      	bpl.n	800ce78 <__swbuf_r+0x6c>
 800ce6a:	2e0a      	cmp	r6, #10
 800ce6c:	d104      	bne.n	800ce78 <__swbuf_r+0x6c>
 800ce6e:	4621      	mov	r1, r4
 800ce70:	4628      	mov	r0, r5
 800ce72:	f000 f927 	bl	800d0c4 <_fflush_r>
 800ce76:	b988      	cbnz	r0, 800ce9c <__swbuf_r+0x90>
 800ce78:	4638      	mov	r0, r7
 800ce7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce7c:	4b0a      	ldr	r3, [pc, #40]	; (800cea8 <__swbuf_r+0x9c>)
 800ce7e:	429c      	cmp	r4, r3
 800ce80:	d101      	bne.n	800ce86 <__swbuf_r+0x7a>
 800ce82:	68ac      	ldr	r4, [r5, #8]
 800ce84:	e7cf      	b.n	800ce26 <__swbuf_r+0x1a>
 800ce86:	4b09      	ldr	r3, [pc, #36]	; (800ceac <__swbuf_r+0xa0>)
 800ce88:	429c      	cmp	r4, r3
 800ce8a:	bf08      	it	eq
 800ce8c:	68ec      	ldreq	r4, [r5, #12]
 800ce8e:	e7ca      	b.n	800ce26 <__swbuf_r+0x1a>
 800ce90:	4621      	mov	r1, r4
 800ce92:	4628      	mov	r0, r5
 800ce94:	f000 f81a 	bl	800cecc <__swsetup_r>
 800ce98:	2800      	cmp	r0, #0
 800ce9a:	d0cb      	beq.n	800ce34 <__swbuf_r+0x28>
 800ce9c:	f04f 37ff 	mov.w	r7, #4294967295
 800cea0:	e7ea      	b.n	800ce78 <__swbuf_r+0x6c>
 800cea2:	bf00      	nop
 800cea4:	0800da04 	.word	0x0800da04
 800cea8:	0800da24 	.word	0x0800da24
 800ceac:	0800d9e4 	.word	0x0800d9e4

0800ceb0 <__ascii_wctomb>:
 800ceb0:	b149      	cbz	r1, 800cec6 <__ascii_wctomb+0x16>
 800ceb2:	2aff      	cmp	r2, #255	; 0xff
 800ceb4:	bf85      	ittet	hi
 800ceb6:	238a      	movhi	r3, #138	; 0x8a
 800ceb8:	6003      	strhi	r3, [r0, #0]
 800ceba:	700a      	strbls	r2, [r1, #0]
 800cebc:	f04f 30ff 	movhi.w	r0, #4294967295
 800cec0:	bf98      	it	ls
 800cec2:	2001      	movls	r0, #1
 800cec4:	4770      	bx	lr
 800cec6:	4608      	mov	r0, r1
 800cec8:	4770      	bx	lr
	...

0800cecc <__swsetup_r>:
 800cecc:	4b32      	ldr	r3, [pc, #200]	; (800cf98 <__swsetup_r+0xcc>)
 800cece:	b570      	push	{r4, r5, r6, lr}
 800ced0:	681d      	ldr	r5, [r3, #0]
 800ced2:	4606      	mov	r6, r0
 800ced4:	460c      	mov	r4, r1
 800ced6:	b125      	cbz	r5, 800cee2 <__swsetup_r+0x16>
 800ced8:	69ab      	ldr	r3, [r5, #24]
 800ceda:	b913      	cbnz	r3, 800cee2 <__swsetup_r+0x16>
 800cedc:	4628      	mov	r0, r5
 800cede:	f000 f985 	bl	800d1ec <__sinit>
 800cee2:	4b2e      	ldr	r3, [pc, #184]	; (800cf9c <__swsetup_r+0xd0>)
 800cee4:	429c      	cmp	r4, r3
 800cee6:	d10f      	bne.n	800cf08 <__swsetup_r+0x3c>
 800cee8:	686c      	ldr	r4, [r5, #4]
 800ceea:	89a3      	ldrh	r3, [r4, #12]
 800ceec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cef0:	0719      	lsls	r1, r3, #28
 800cef2:	d42c      	bmi.n	800cf4e <__swsetup_r+0x82>
 800cef4:	06dd      	lsls	r5, r3, #27
 800cef6:	d411      	bmi.n	800cf1c <__swsetup_r+0x50>
 800cef8:	2309      	movs	r3, #9
 800cefa:	6033      	str	r3, [r6, #0]
 800cefc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cf00:	81a3      	strh	r3, [r4, #12]
 800cf02:	f04f 30ff 	mov.w	r0, #4294967295
 800cf06:	e03e      	b.n	800cf86 <__swsetup_r+0xba>
 800cf08:	4b25      	ldr	r3, [pc, #148]	; (800cfa0 <__swsetup_r+0xd4>)
 800cf0a:	429c      	cmp	r4, r3
 800cf0c:	d101      	bne.n	800cf12 <__swsetup_r+0x46>
 800cf0e:	68ac      	ldr	r4, [r5, #8]
 800cf10:	e7eb      	b.n	800ceea <__swsetup_r+0x1e>
 800cf12:	4b24      	ldr	r3, [pc, #144]	; (800cfa4 <__swsetup_r+0xd8>)
 800cf14:	429c      	cmp	r4, r3
 800cf16:	bf08      	it	eq
 800cf18:	68ec      	ldreq	r4, [r5, #12]
 800cf1a:	e7e6      	b.n	800ceea <__swsetup_r+0x1e>
 800cf1c:	0758      	lsls	r0, r3, #29
 800cf1e:	d512      	bpl.n	800cf46 <__swsetup_r+0x7a>
 800cf20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf22:	b141      	cbz	r1, 800cf36 <__swsetup_r+0x6a>
 800cf24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf28:	4299      	cmp	r1, r3
 800cf2a:	d002      	beq.n	800cf32 <__swsetup_r+0x66>
 800cf2c:	4630      	mov	r0, r6
 800cf2e:	f7ff fb31 	bl	800c594 <_free_r>
 800cf32:	2300      	movs	r3, #0
 800cf34:	6363      	str	r3, [r4, #52]	; 0x34
 800cf36:	89a3      	ldrh	r3, [r4, #12]
 800cf38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cf3c:	81a3      	strh	r3, [r4, #12]
 800cf3e:	2300      	movs	r3, #0
 800cf40:	6063      	str	r3, [r4, #4]
 800cf42:	6923      	ldr	r3, [r4, #16]
 800cf44:	6023      	str	r3, [r4, #0]
 800cf46:	89a3      	ldrh	r3, [r4, #12]
 800cf48:	f043 0308 	orr.w	r3, r3, #8
 800cf4c:	81a3      	strh	r3, [r4, #12]
 800cf4e:	6923      	ldr	r3, [r4, #16]
 800cf50:	b94b      	cbnz	r3, 800cf66 <__swsetup_r+0x9a>
 800cf52:	89a3      	ldrh	r3, [r4, #12]
 800cf54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cf58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf5c:	d003      	beq.n	800cf66 <__swsetup_r+0x9a>
 800cf5e:	4621      	mov	r1, r4
 800cf60:	4630      	mov	r0, r6
 800cf62:	f000 fa09 	bl	800d378 <__smakebuf_r>
 800cf66:	89a0      	ldrh	r0, [r4, #12]
 800cf68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf6c:	f010 0301 	ands.w	r3, r0, #1
 800cf70:	d00a      	beq.n	800cf88 <__swsetup_r+0xbc>
 800cf72:	2300      	movs	r3, #0
 800cf74:	60a3      	str	r3, [r4, #8]
 800cf76:	6963      	ldr	r3, [r4, #20]
 800cf78:	425b      	negs	r3, r3
 800cf7a:	61a3      	str	r3, [r4, #24]
 800cf7c:	6923      	ldr	r3, [r4, #16]
 800cf7e:	b943      	cbnz	r3, 800cf92 <__swsetup_r+0xc6>
 800cf80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cf84:	d1ba      	bne.n	800cefc <__swsetup_r+0x30>
 800cf86:	bd70      	pop	{r4, r5, r6, pc}
 800cf88:	0781      	lsls	r1, r0, #30
 800cf8a:	bf58      	it	pl
 800cf8c:	6963      	ldrpl	r3, [r4, #20]
 800cf8e:	60a3      	str	r3, [r4, #8]
 800cf90:	e7f4      	b.n	800cf7c <__swsetup_r+0xb0>
 800cf92:	2000      	movs	r0, #0
 800cf94:	e7f7      	b.n	800cf86 <__swsetup_r+0xba>
 800cf96:	bf00      	nop
 800cf98:	20000104 	.word	0x20000104
 800cf9c:	0800da04 	.word	0x0800da04
 800cfa0:	0800da24 	.word	0x0800da24
 800cfa4:	0800d9e4 	.word	0x0800d9e4

0800cfa8 <abort>:
 800cfa8:	b508      	push	{r3, lr}
 800cfaa:	2006      	movs	r0, #6
 800cfac:	f000 fa54 	bl	800d458 <raise>
 800cfb0:	2001      	movs	r0, #1
 800cfb2:	f7f4 fe5b 	bl	8001c6c <_exit>
	...

0800cfb8 <__sflush_r>:
 800cfb8:	898a      	ldrh	r2, [r1, #12]
 800cfba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfbe:	4605      	mov	r5, r0
 800cfc0:	0710      	lsls	r0, r2, #28
 800cfc2:	460c      	mov	r4, r1
 800cfc4:	d458      	bmi.n	800d078 <__sflush_r+0xc0>
 800cfc6:	684b      	ldr	r3, [r1, #4]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	dc05      	bgt.n	800cfd8 <__sflush_r+0x20>
 800cfcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	dc02      	bgt.n	800cfd8 <__sflush_r+0x20>
 800cfd2:	2000      	movs	r0, #0
 800cfd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cfda:	2e00      	cmp	r6, #0
 800cfdc:	d0f9      	beq.n	800cfd2 <__sflush_r+0x1a>
 800cfde:	2300      	movs	r3, #0
 800cfe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cfe4:	682f      	ldr	r7, [r5, #0]
 800cfe6:	602b      	str	r3, [r5, #0]
 800cfe8:	d032      	beq.n	800d050 <__sflush_r+0x98>
 800cfea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cfec:	89a3      	ldrh	r3, [r4, #12]
 800cfee:	075a      	lsls	r2, r3, #29
 800cff0:	d505      	bpl.n	800cffe <__sflush_r+0x46>
 800cff2:	6863      	ldr	r3, [r4, #4]
 800cff4:	1ac0      	subs	r0, r0, r3
 800cff6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cff8:	b10b      	cbz	r3, 800cffe <__sflush_r+0x46>
 800cffa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cffc:	1ac0      	subs	r0, r0, r3
 800cffe:	2300      	movs	r3, #0
 800d000:	4602      	mov	r2, r0
 800d002:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d004:	6a21      	ldr	r1, [r4, #32]
 800d006:	4628      	mov	r0, r5
 800d008:	47b0      	blx	r6
 800d00a:	1c43      	adds	r3, r0, #1
 800d00c:	89a3      	ldrh	r3, [r4, #12]
 800d00e:	d106      	bne.n	800d01e <__sflush_r+0x66>
 800d010:	6829      	ldr	r1, [r5, #0]
 800d012:	291d      	cmp	r1, #29
 800d014:	d82c      	bhi.n	800d070 <__sflush_r+0xb8>
 800d016:	4a2a      	ldr	r2, [pc, #168]	; (800d0c0 <__sflush_r+0x108>)
 800d018:	40ca      	lsrs	r2, r1
 800d01a:	07d6      	lsls	r6, r2, #31
 800d01c:	d528      	bpl.n	800d070 <__sflush_r+0xb8>
 800d01e:	2200      	movs	r2, #0
 800d020:	6062      	str	r2, [r4, #4]
 800d022:	04d9      	lsls	r1, r3, #19
 800d024:	6922      	ldr	r2, [r4, #16]
 800d026:	6022      	str	r2, [r4, #0]
 800d028:	d504      	bpl.n	800d034 <__sflush_r+0x7c>
 800d02a:	1c42      	adds	r2, r0, #1
 800d02c:	d101      	bne.n	800d032 <__sflush_r+0x7a>
 800d02e:	682b      	ldr	r3, [r5, #0]
 800d030:	b903      	cbnz	r3, 800d034 <__sflush_r+0x7c>
 800d032:	6560      	str	r0, [r4, #84]	; 0x54
 800d034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d036:	602f      	str	r7, [r5, #0]
 800d038:	2900      	cmp	r1, #0
 800d03a:	d0ca      	beq.n	800cfd2 <__sflush_r+0x1a>
 800d03c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d040:	4299      	cmp	r1, r3
 800d042:	d002      	beq.n	800d04a <__sflush_r+0x92>
 800d044:	4628      	mov	r0, r5
 800d046:	f7ff faa5 	bl	800c594 <_free_r>
 800d04a:	2000      	movs	r0, #0
 800d04c:	6360      	str	r0, [r4, #52]	; 0x34
 800d04e:	e7c1      	b.n	800cfd4 <__sflush_r+0x1c>
 800d050:	6a21      	ldr	r1, [r4, #32]
 800d052:	2301      	movs	r3, #1
 800d054:	4628      	mov	r0, r5
 800d056:	47b0      	blx	r6
 800d058:	1c41      	adds	r1, r0, #1
 800d05a:	d1c7      	bne.n	800cfec <__sflush_r+0x34>
 800d05c:	682b      	ldr	r3, [r5, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d0c4      	beq.n	800cfec <__sflush_r+0x34>
 800d062:	2b1d      	cmp	r3, #29
 800d064:	d001      	beq.n	800d06a <__sflush_r+0xb2>
 800d066:	2b16      	cmp	r3, #22
 800d068:	d101      	bne.n	800d06e <__sflush_r+0xb6>
 800d06a:	602f      	str	r7, [r5, #0]
 800d06c:	e7b1      	b.n	800cfd2 <__sflush_r+0x1a>
 800d06e:	89a3      	ldrh	r3, [r4, #12]
 800d070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d074:	81a3      	strh	r3, [r4, #12]
 800d076:	e7ad      	b.n	800cfd4 <__sflush_r+0x1c>
 800d078:	690f      	ldr	r7, [r1, #16]
 800d07a:	2f00      	cmp	r7, #0
 800d07c:	d0a9      	beq.n	800cfd2 <__sflush_r+0x1a>
 800d07e:	0793      	lsls	r3, r2, #30
 800d080:	680e      	ldr	r6, [r1, #0]
 800d082:	bf08      	it	eq
 800d084:	694b      	ldreq	r3, [r1, #20]
 800d086:	600f      	str	r7, [r1, #0]
 800d088:	bf18      	it	ne
 800d08a:	2300      	movne	r3, #0
 800d08c:	eba6 0807 	sub.w	r8, r6, r7
 800d090:	608b      	str	r3, [r1, #8]
 800d092:	f1b8 0f00 	cmp.w	r8, #0
 800d096:	dd9c      	ble.n	800cfd2 <__sflush_r+0x1a>
 800d098:	6a21      	ldr	r1, [r4, #32]
 800d09a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d09c:	4643      	mov	r3, r8
 800d09e:	463a      	mov	r2, r7
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	47b0      	blx	r6
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	dc06      	bgt.n	800d0b6 <__sflush_r+0xfe>
 800d0a8:	89a3      	ldrh	r3, [r4, #12]
 800d0aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0ae:	81a3      	strh	r3, [r4, #12]
 800d0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0b4:	e78e      	b.n	800cfd4 <__sflush_r+0x1c>
 800d0b6:	4407      	add	r7, r0
 800d0b8:	eba8 0800 	sub.w	r8, r8, r0
 800d0bc:	e7e9      	b.n	800d092 <__sflush_r+0xda>
 800d0be:	bf00      	nop
 800d0c0:	20400001 	.word	0x20400001

0800d0c4 <_fflush_r>:
 800d0c4:	b538      	push	{r3, r4, r5, lr}
 800d0c6:	690b      	ldr	r3, [r1, #16]
 800d0c8:	4605      	mov	r5, r0
 800d0ca:	460c      	mov	r4, r1
 800d0cc:	b913      	cbnz	r3, 800d0d4 <_fflush_r+0x10>
 800d0ce:	2500      	movs	r5, #0
 800d0d0:	4628      	mov	r0, r5
 800d0d2:	bd38      	pop	{r3, r4, r5, pc}
 800d0d4:	b118      	cbz	r0, 800d0de <_fflush_r+0x1a>
 800d0d6:	6983      	ldr	r3, [r0, #24]
 800d0d8:	b90b      	cbnz	r3, 800d0de <_fflush_r+0x1a>
 800d0da:	f000 f887 	bl	800d1ec <__sinit>
 800d0de:	4b14      	ldr	r3, [pc, #80]	; (800d130 <_fflush_r+0x6c>)
 800d0e0:	429c      	cmp	r4, r3
 800d0e2:	d11b      	bne.n	800d11c <_fflush_r+0x58>
 800d0e4:	686c      	ldr	r4, [r5, #4]
 800d0e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d0ef      	beq.n	800d0ce <_fflush_r+0xa>
 800d0ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d0f0:	07d0      	lsls	r0, r2, #31
 800d0f2:	d404      	bmi.n	800d0fe <_fflush_r+0x3a>
 800d0f4:	0599      	lsls	r1, r3, #22
 800d0f6:	d402      	bmi.n	800d0fe <_fflush_r+0x3a>
 800d0f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0fa:	f000 f915 	bl	800d328 <__retarget_lock_acquire_recursive>
 800d0fe:	4628      	mov	r0, r5
 800d100:	4621      	mov	r1, r4
 800d102:	f7ff ff59 	bl	800cfb8 <__sflush_r>
 800d106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d108:	07da      	lsls	r2, r3, #31
 800d10a:	4605      	mov	r5, r0
 800d10c:	d4e0      	bmi.n	800d0d0 <_fflush_r+0xc>
 800d10e:	89a3      	ldrh	r3, [r4, #12]
 800d110:	059b      	lsls	r3, r3, #22
 800d112:	d4dd      	bmi.n	800d0d0 <_fflush_r+0xc>
 800d114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d116:	f000 f908 	bl	800d32a <__retarget_lock_release_recursive>
 800d11a:	e7d9      	b.n	800d0d0 <_fflush_r+0xc>
 800d11c:	4b05      	ldr	r3, [pc, #20]	; (800d134 <_fflush_r+0x70>)
 800d11e:	429c      	cmp	r4, r3
 800d120:	d101      	bne.n	800d126 <_fflush_r+0x62>
 800d122:	68ac      	ldr	r4, [r5, #8]
 800d124:	e7df      	b.n	800d0e6 <_fflush_r+0x22>
 800d126:	4b04      	ldr	r3, [pc, #16]	; (800d138 <_fflush_r+0x74>)
 800d128:	429c      	cmp	r4, r3
 800d12a:	bf08      	it	eq
 800d12c:	68ec      	ldreq	r4, [r5, #12]
 800d12e:	e7da      	b.n	800d0e6 <_fflush_r+0x22>
 800d130:	0800da04 	.word	0x0800da04
 800d134:	0800da24 	.word	0x0800da24
 800d138:	0800d9e4 	.word	0x0800d9e4

0800d13c <std>:
 800d13c:	2300      	movs	r3, #0
 800d13e:	b510      	push	{r4, lr}
 800d140:	4604      	mov	r4, r0
 800d142:	e9c0 3300 	strd	r3, r3, [r0]
 800d146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d14a:	6083      	str	r3, [r0, #8]
 800d14c:	8181      	strh	r1, [r0, #12]
 800d14e:	6643      	str	r3, [r0, #100]	; 0x64
 800d150:	81c2      	strh	r2, [r0, #14]
 800d152:	6183      	str	r3, [r0, #24]
 800d154:	4619      	mov	r1, r3
 800d156:	2208      	movs	r2, #8
 800d158:	305c      	adds	r0, #92	; 0x5c
 800d15a:	f7fd fb45 	bl	800a7e8 <memset>
 800d15e:	4b05      	ldr	r3, [pc, #20]	; (800d174 <std+0x38>)
 800d160:	6263      	str	r3, [r4, #36]	; 0x24
 800d162:	4b05      	ldr	r3, [pc, #20]	; (800d178 <std+0x3c>)
 800d164:	62a3      	str	r3, [r4, #40]	; 0x28
 800d166:	4b05      	ldr	r3, [pc, #20]	; (800d17c <std+0x40>)
 800d168:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d16a:	4b05      	ldr	r3, [pc, #20]	; (800d180 <std+0x44>)
 800d16c:	6224      	str	r4, [r4, #32]
 800d16e:	6323      	str	r3, [r4, #48]	; 0x30
 800d170:	bd10      	pop	{r4, pc}
 800d172:	bf00      	nop
 800d174:	0800d491 	.word	0x0800d491
 800d178:	0800d4b3 	.word	0x0800d4b3
 800d17c:	0800d4eb 	.word	0x0800d4eb
 800d180:	0800d50f 	.word	0x0800d50f

0800d184 <_cleanup_r>:
 800d184:	4901      	ldr	r1, [pc, #4]	; (800d18c <_cleanup_r+0x8>)
 800d186:	f000 b8af 	b.w	800d2e8 <_fwalk_reent>
 800d18a:	bf00      	nop
 800d18c:	0800d0c5 	.word	0x0800d0c5

0800d190 <__sfmoreglue>:
 800d190:	b570      	push	{r4, r5, r6, lr}
 800d192:	2268      	movs	r2, #104	; 0x68
 800d194:	1e4d      	subs	r5, r1, #1
 800d196:	4355      	muls	r5, r2
 800d198:	460e      	mov	r6, r1
 800d19a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d19e:	f7ff fa65 	bl	800c66c <_malloc_r>
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	b140      	cbz	r0, 800d1b8 <__sfmoreglue+0x28>
 800d1a6:	2100      	movs	r1, #0
 800d1a8:	e9c0 1600 	strd	r1, r6, [r0]
 800d1ac:	300c      	adds	r0, #12
 800d1ae:	60a0      	str	r0, [r4, #8]
 800d1b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d1b4:	f7fd fb18 	bl	800a7e8 <memset>
 800d1b8:	4620      	mov	r0, r4
 800d1ba:	bd70      	pop	{r4, r5, r6, pc}

0800d1bc <__sfp_lock_acquire>:
 800d1bc:	4801      	ldr	r0, [pc, #4]	; (800d1c4 <__sfp_lock_acquire+0x8>)
 800d1be:	f000 b8b3 	b.w	800d328 <__retarget_lock_acquire_recursive>
 800d1c2:	bf00      	nop
 800d1c4:	20002129 	.word	0x20002129

0800d1c8 <__sfp_lock_release>:
 800d1c8:	4801      	ldr	r0, [pc, #4]	; (800d1d0 <__sfp_lock_release+0x8>)
 800d1ca:	f000 b8ae 	b.w	800d32a <__retarget_lock_release_recursive>
 800d1ce:	bf00      	nop
 800d1d0:	20002129 	.word	0x20002129

0800d1d4 <__sinit_lock_acquire>:
 800d1d4:	4801      	ldr	r0, [pc, #4]	; (800d1dc <__sinit_lock_acquire+0x8>)
 800d1d6:	f000 b8a7 	b.w	800d328 <__retarget_lock_acquire_recursive>
 800d1da:	bf00      	nop
 800d1dc:	2000212a 	.word	0x2000212a

0800d1e0 <__sinit_lock_release>:
 800d1e0:	4801      	ldr	r0, [pc, #4]	; (800d1e8 <__sinit_lock_release+0x8>)
 800d1e2:	f000 b8a2 	b.w	800d32a <__retarget_lock_release_recursive>
 800d1e6:	bf00      	nop
 800d1e8:	2000212a 	.word	0x2000212a

0800d1ec <__sinit>:
 800d1ec:	b510      	push	{r4, lr}
 800d1ee:	4604      	mov	r4, r0
 800d1f0:	f7ff fff0 	bl	800d1d4 <__sinit_lock_acquire>
 800d1f4:	69a3      	ldr	r3, [r4, #24]
 800d1f6:	b11b      	cbz	r3, 800d200 <__sinit+0x14>
 800d1f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1fc:	f7ff bff0 	b.w	800d1e0 <__sinit_lock_release>
 800d200:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d204:	6523      	str	r3, [r4, #80]	; 0x50
 800d206:	4b13      	ldr	r3, [pc, #76]	; (800d254 <__sinit+0x68>)
 800d208:	4a13      	ldr	r2, [pc, #76]	; (800d258 <__sinit+0x6c>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d20e:	42a3      	cmp	r3, r4
 800d210:	bf04      	itt	eq
 800d212:	2301      	moveq	r3, #1
 800d214:	61a3      	streq	r3, [r4, #24]
 800d216:	4620      	mov	r0, r4
 800d218:	f000 f820 	bl	800d25c <__sfp>
 800d21c:	6060      	str	r0, [r4, #4]
 800d21e:	4620      	mov	r0, r4
 800d220:	f000 f81c 	bl	800d25c <__sfp>
 800d224:	60a0      	str	r0, [r4, #8]
 800d226:	4620      	mov	r0, r4
 800d228:	f000 f818 	bl	800d25c <__sfp>
 800d22c:	2200      	movs	r2, #0
 800d22e:	60e0      	str	r0, [r4, #12]
 800d230:	2104      	movs	r1, #4
 800d232:	6860      	ldr	r0, [r4, #4]
 800d234:	f7ff ff82 	bl	800d13c <std>
 800d238:	68a0      	ldr	r0, [r4, #8]
 800d23a:	2201      	movs	r2, #1
 800d23c:	2109      	movs	r1, #9
 800d23e:	f7ff ff7d 	bl	800d13c <std>
 800d242:	68e0      	ldr	r0, [r4, #12]
 800d244:	2202      	movs	r2, #2
 800d246:	2112      	movs	r1, #18
 800d248:	f7ff ff78 	bl	800d13c <std>
 800d24c:	2301      	movs	r3, #1
 800d24e:	61a3      	str	r3, [r4, #24]
 800d250:	e7d2      	b.n	800d1f8 <__sinit+0xc>
 800d252:	bf00      	nop
 800d254:	0800d66c 	.word	0x0800d66c
 800d258:	0800d185 	.word	0x0800d185

0800d25c <__sfp>:
 800d25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d25e:	4607      	mov	r7, r0
 800d260:	f7ff ffac 	bl	800d1bc <__sfp_lock_acquire>
 800d264:	4b1e      	ldr	r3, [pc, #120]	; (800d2e0 <__sfp+0x84>)
 800d266:	681e      	ldr	r6, [r3, #0]
 800d268:	69b3      	ldr	r3, [r6, #24]
 800d26a:	b913      	cbnz	r3, 800d272 <__sfp+0x16>
 800d26c:	4630      	mov	r0, r6
 800d26e:	f7ff ffbd 	bl	800d1ec <__sinit>
 800d272:	3648      	adds	r6, #72	; 0x48
 800d274:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d278:	3b01      	subs	r3, #1
 800d27a:	d503      	bpl.n	800d284 <__sfp+0x28>
 800d27c:	6833      	ldr	r3, [r6, #0]
 800d27e:	b30b      	cbz	r3, 800d2c4 <__sfp+0x68>
 800d280:	6836      	ldr	r6, [r6, #0]
 800d282:	e7f7      	b.n	800d274 <__sfp+0x18>
 800d284:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d288:	b9d5      	cbnz	r5, 800d2c0 <__sfp+0x64>
 800d28a:	4b16      	ldr	r3, [pc, #88]	; (800d2e4 <__sfp+0x88>)
 800d28c:	60e3      	str	r3, [r4, #12]
 800d28e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d292:	6665      	str	r5, [r4, #100]	; 0x64
 800d294:	f000 f847 	bl	800d326 <__retarget_lock_init_recursive>
 800d298:	f7ff ff96 	bl	800d1c8 <__sfp_lock_release>
 800d29c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d2a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d2a4:	6025      	str	r5, [r4, #0]
 800d2a6:	61a5      	str	r5, [r4, #24]
 800d2a8:	2208      	movs	r2, #8
 800d2aa:	4629      	mov	r1, r5
 800d2ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d2b0:	f7fd fa9a 	bl	800a7e8 <memset>
 800d2b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d2b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d2bc:	4620      	mov	r0, r4
 800d2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2c0:	3468      	adds	r4, #104	; 0x68
 800d2c2:	e7d9      	b.n	800d278 <__sfp+0x1c>
 800d2c4:	2104      	movs	r1, #4
 800d2c6:	4638      	mov	r0, r7
 800d2c8:	f7ff ff62 	bl	800d190 <__sfmoreglue>
 800d2cc:	4604      	mov	r4, r0
 800d2ce:	6030      	str	r0, [r6, #0]
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	d1d5      	bne.n	800d280 <__sfp+0x24>
 800d2d4:	f7ff ff78 	bl	800d1c8 <__sfp_lock_release>
 800d2d8:	230c      	movs	r3, #12
 800d2da:	603b      	str	r3, [r7, #0]
 800d2dc:	e7ee      	b.n	800d2bc <__sfp+0x60>
 800d2de:	bf00      	nop
 800d2e0:	0800d66c 	.word	0x0800d66c
 800d2e4:	ffff0001 	.word	0xffff0001

0800d2e8 <_fwalk_reent>:
 800d2e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2ec:	4606      	mov	r6, r0
 800d2ee:	4688      	mov	r8, r1
 800d2f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d2f4:	2700      	movs	r7, #0
 800d2f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d2fa:	f1b9 0901 	subs.w	r9, r9, #1
 800d2fe:	d505      	bpl.n	800d30c <_fwalk_reent+0x24>
 800d300:	6824      	ldr	r4, [r4, #0]
 800d302:	2c00      	cmp	r4, #0
 800d304:	d1f7      	bne.n	800d2f6 <_fwalk_reent+0xe>
 800d306:	4638      	mov	r0, r7
 800d308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d30c:	89ab      	ldrh	r3, [r5, #12]
 800d30e:	2b01      	cmp	r3, #1
 800d310:	d907      	bls.n	800d322 <_fwalk_reent+0x3a>
 800d312:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d316:	3301      	adds	r3, #1
 800d318:	d003      	beq.n	800d322 <_fwalk_reent+0x3a>
 800d31a:	4629      	mov	r1, r5
 800d31c:	4630      	mov	r0, r6
 800d31e:	47c0      	blx	r8
 800d320:	4307      	orrs	r7, r0
 800d322:	3568      	adds	r5, #104	; 0x68
 800d324:	e7e9      	b.n	800d2fa <_fwalk_reent+0x12>

0800d326 <__retarget_lock_init_recursive>:
 800d326:	4770      	bx	lr

0800d328 <__retarget_lock_acquire_recursive>:
 800d328:	4770      	bx	lr

0800d32a <__retarget_lock_release_recursive>:
 800d32a:	4770      	bx	lr

0800d32c <__swhatbuf_r>:
 800d32c:	b570      	push	{r4, r5, r6, lr}
 800d32e:	460e      	mov	r6, r1
 800d330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d334:	2900      	cmp	r1, #0
 800d336:	b096      	sub	sp, #88	; 0x58
 800d338:	4614      	mov	r4, r2
 800d33a:	461d      	mov	r5, r3
 800d33c:	da08      	bge.n	800d350 <__swhatbuf_r+0x24>
 800d33e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d342:	2200      	movs	r2, #0
 800d344:	602a      	str	r2, [r5, #0]
 800d346:	061a      	lsls	r2, r3, #24
 800d348:	d410      	bmi.n	800d36c <__swhatbuf_r+0x40>
 800d34a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d34e:	e00e      	b.n	800d36e <__swhatbuf_r+0x42>
 800d350:	466a      	mov	r2, sp
 800d352:	f000 f903 	bl	800d55c <_fstat_r>
 800d356:	2800      	cmp	r0, #0
 800d358:	dbf1      	blt.n	800d33e <__swhatbuf_r+0x12>
 800d35a:	9a01      	ldr	r2, [sp, #4]
 800d35c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d360:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d364:	425a      	negs	r2, r3
 800d366:	415a      	adcs	r2, r3
 800d368:	602a      	str	r2, [r5, #0]
 800d36a:	e7ee      	b.n	800d34a <__swhatbuf_r+0x1e>
 800d36c:	2340      	movs	r3, #64	; 0x40
 800d36e:	2000      	movs	r0, #0
 800d370:	6023      	str	r3, [r4, #0]
 800d372:	b016      	add	sp, #88	; 0x58
 800d374:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d378 <__smakebuf_r>:
 800d378:	898b      	ldrh	r3, [r1, #12]
 800d37a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d37c:	079d      	lsls	r5, r3, #30
 800d37e:	4606      	mov	r6, r0
 800d380:	460c      	mov	r4, r1
 800d382:	d507      	bpl.n	800d394 <__smakebuf_r+0x1c>
 800d384:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d388:	6023      	str	r3, [r4, #0]
 800d38a:	6123      	str	r3, [r4, #16]
 800d38c:	2301      	movs	r3, #1
 800d38e:	6163      	str	r3, [r4, #20]
 800d390:	b002      	add	sp, #8
 800d392:	bd70      	pop	{r4, r5, r6, pc}
 800d394:	ab01      	add	r3, sp, #4
 800d396:	466a      	mov	r2, sp
 800d398:	f7ff ffc8 	bl	800d32c <__swhatbuf_r>
 800d39c:	9900      	ldr	r1, [sp, #0]
 800d39e:	4605      	mov	r5, r0
 800d3a0:	4630      	mov	r0, r6
 800d3a2:	f7ff f963 	bl	800c66c <_malloc_r>
 800d3a6:	b948      	cbnz	r0, 800d3bc <__smakebuf_r+0x44>
 800d3a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3ac:	059a      	lsls	r2, r3, #22
 800d3ae:	d4ef      	bmi.n	800d390 <__smakebuf_r+0x18>
 800d3b0:	f023 0303 	bic.w	r3, r3, #3
 800d3b4:	f043 0302 	orr.w	r3, r3, #2
 800d3b8:	81a3      	strh	r3, [r4, #12]
 800d3ba:	e7e3      	b.n	800d384 <__smakebuf_r+0xc>
 800d3bc:	4b0d      	ldr	r3, [pc, #52]	; (800d3f4 <__smakebuf_r+0x7c>)
 800d3be:	62b3      	str	r3, [r6, #40]	; 0x28
 800d3c0:	89a3      	ldrh	r3, [r4, #12]
 800d3c2:	6020      	str	r0, [r4, #0]
 800d3c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3c8:	81a3      	strh	r3, [r4, #12]
 800d3ca:	9b00      	ldr	r3, [sp, #0]
 800d3cc:	6163      	str	r3, [r4, #20]
 800d3ce:	9b01      	ldr	r3, [sp, #4]
 800d3d0:	6120      	str	r0, [r4, #16]
 800d3d2:	b15b      	cbz	r3, 800d3ec <__smakebuf_r+0x74>
 800d3d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3d8:	4630      	mov	r0, r6
 800d3da:	f000 f8d1 	bl	800d580 <_isatty_r>
 800d3de:	b128      	cbz	r0, 800d3ec <__smakebuf_r+0x74>
 800d3e0:	89a3      	ldrh	r3, [r4, #12]
 800d3e2:	f023 0303 	bic.w	r3, r3, #3
 800d3e6:	f043 0301 	orr.w	r3, r3, #1
 800d3ea:	81a3      	strh	r3, [r4, #12]
 800d3ec:	89a0      	ldrh	r0, [r4, #12]
 800d3ee:	4305      	orrs	r5, r0
 800d3f0:	81a5      	strh	r5, [r4, #12]
 800d3f2:	e7cd      	b.n	800d390 <__smakebuf_r+0x18>
 800d3f4:	0800d185 	.word	0x0800d185

0800d3f8 <_malloc_usable_size_r>:
 800d3f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3fc:	1f18      	subs	r0, r3, #4
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	bfbc      	itt	lt
 800d402:	580b      	ldrlt	r3, [r1, r0]
 800d404:	18c0      	addlt	r0, r0, r3
 800d406:	4770      	bx	lr

0800d408 <_raise_r>:
 800d408:	291f      	cmp	r1, #31
 800d40a:	b538      	push	{r3, r4, r5, lr}
 800d40c:	4604      	mov	r4, r0
 800d40e:	460d      	mov	r5, r1
 800d410:	d904      	bls.n	800d41c <_raise_r+0x14>
 800d412:	2316      	movs	r3, #22
 800d414:	6003      	str	r3, [r0, #0]
 800d416:	f04f 30ff 	mov.w	r0, #4294967295
 800d41a:	bd38      	pop	{r3, r4, r5, pc}
 800d41c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d41e:	b112      	cbz	r2, 800d426 <_raise_r+0x1e>
 800d420:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d424:	b94b      	cbnz	r3, 800d43a <_raise_r+0x32>
 800d426:	4620      	mov	r0, r4
 800d428:	f000 f830 	bl	800d48c <_getpid_r>
 800d42c:	462a      	mov	r2, r5
 800d42e:	4601      	mov	r1, r0
 800d430:	4620      	mov	r0, r4
 800d432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d436:	f000 b817 	b.w	800d468 <_kill_r>
 800d43a:	2b01      	cmp	r3, #1
 800d43c:	d00a      	beq.n	800d454 <_raise_r+0x4c>
 800d43e:	1c59      	adds	r1, r3, #1
 800d440:	d103      	bne.n	800d44a <_raise_r+0x42>
 800d442:	2316      	movs	r3, #22
 800d444:	6003      	str	r3, [r0, #0]
 800d446:	2001      	movs	r0, #1
 800d448:	e7e7      	b.n	800d41a <_raise_r+0x12>
 800d44a:	2400      	movs	r4, #0
 800d44c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d450:	4628      	mov	r0, r5
 800d452:	4798      	blx	r3
 800d454:	2000      	movs	r0, #0
 800d456:	e7e0      	b.n	800d41a <_raise_r+0x12>

0800d458 <raise>:
 800d458:	4b02      	ldr	r3, [pc, #8]	; (800d464 <raise+0xc>)
 800d45a:	4601      	mov	r1, r0
 800d45c:	6818      	ldr	r0, [r3, #0]
 800d45e:	f7ff bfd3 	b.w	800d408 <_raise_r>
 800d462:	bf00      	nop
 800d464:	20000104 	.word	0x20000104

0800d468 <_kill_r>:
 800d468:	b538      	push	{r3, r4, r5, lr}
 800d46a:	4d07      	ldr	r5, [pc, #28]	; (800d488 <_kill_r+0x20>)
 800d46c:	2300      	movs	r3, #0
 800d46e:	4604      	mov	r4, r0
 800d470:	4608      	mov	r0, r1
 800d472:	4611      	mov	r1, r2
 800d474:	602b      	str	r3, [r5, #0]
 800d476:	f7f4 fbe9 	bl	8001c4c <_kill>
 800d47a:	1c43      	adds	r3, r0, #1
 800d47c:	d102      	bne.n	800d484 <_kill_r+0x1c>
 800d47e:	682b      	ldr	r3, [r5, #0]
 800d480:	b103      	cbz	r3, 800d484 <_kill_r+0x1c>
 800d482:	6023      	str	r3, [r4, #0]
 800d484:	bd38      	pop	{r3, r4, r5, pc}
 800d486:	bf00      	nop
 800d488:	20002124 	.word	0x20002124

0800d48c <_getpid_r>:
 800d48c:	f7f4 bbd6 	b.w	8001c3c <_getpid>

0800d490 <__sread>:
 800d490:	b510      	push	{r4, lr}
 800d492:	460c      	mov	r4, r1
 800d494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d498:	f000 f894 	bl	800d5c4 <_read_r>
 800d49c:	2800      	cmp	r0, #0
 800d49e:	bfab      	itete	ge
 800d4a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d4a2:	89a3      	ldrhlt	r3, [r4, #12]
 800d4a4:	181b      	addge	r3, r3, r0
 800d4a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d4aa:	bfac      	ite	ge
 800d4ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800d4ae:	81a3      	strhlt	r3, [r4, #12]
 800d4b0:	bd10      	pop	{r4, pc}

0800d4b2 <__swrite>:
 800d4b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4b6:	461f      	mov	r7, r3
 800d4b8:	898b      	ldrh	r3, [r1, #12]
 800d4ba:	05db      	lsls	r3, r3, #23
 800d4bc:	4605      	mov	r5, r0
 800d4be:	460c      	mov	r4, r1
 800d4c0:	4616      	mov	r6, r2
 800d4c2:	d505      	bpl.n	800d4d0 <__swrite+0x1e>
 800d4c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4c8:	2302      	movs	r3, #2
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	f000 f868 	bl	800d5a0 <_lseek_r>
 800d4d0:	89a3      	ldrh	r3, [r4, #12]
 800d4d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4da:	81a3      	strh	r3, [r4, #12]
 800d4dc:	4632      	mov	r2, r6
 800d4de:	463b      	mov	r3, r7
 800d4e0:	4628      	mov	r0, r5
 800d4e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4e6:	f000 b817 	b.w	800d518 <_write_r>

0800d4ea <__sseek>:
 800d4ea:	b510      	push	{r4, lr}
 800d4ec:	460c      	mov	r4, r1
 800d4ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4f2:	f000 f855 	bl	800d5a0 <_lseek_r>
 800d4f6:	1c43      	adds	r3, r0, #1
 800d4f8:	89a3      	ldrh	r3, [r4, #12]
 800d4fa:	bf15      	itete	ne
 800d4fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d4fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d502:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d506:	81a3      	strheq	r3, [r4, #12]
 800d508:	bf18      	it	ne
 800d50a:	81a3      	strhne	r3, [r4, #12]
 800d50c:	bd10      	pop	{r4, pc}

0800d50e <__sclose>:
 800d50e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d512:	f000 b813 	b.w	800d53c <_close_r>
	...

0800d518 <_write_r>:
 800d518:	b538      	push	{r3, r4, r5, lr}
 800d51a:	4d07      	ldr	r5, [pc, #28]	; (800d538 <_write_r+0x20>)
 800d51c:	4604      	mov	r4, r0
 800d51e:	4608      	mov	r0, r1
 800d520:	4611      	mov	r1, r2
 800d522:	2200      	movs	r2, #0
 800d524:	602a      	str	r2, [r5, #0]
 800d526:	461a      	mov	r2, r3
 800d528:	f7f4 fbc7 	bl	8001cba <_write>
 800d52c:	1c43      	adds	r3, r0, #1
 800d52e:	d102      	bne.n	800d536 <_write_r+0x1e>
 800d530:	682b      	ldr	r3, [r5, #0]
 800d532:	b103      	cbz	r3, 800d536 <_write_r+0x1e>
 800d534:	6023      	str	r3, [r4, #0]
 800d536:	bd38      	pop	{r3, r4, r5, pc}
 800d538:	20002124 	.word	0x20002124

0800d53c <_close_r>:
 800d53c:	b538      	push	{r3, r4, r5, lr}
 800d53e:	4d06      	ldr	r5, [pc, #24]	; (800d558 <_close_r+0x1c>)
 800d540:	2300      	movs	r3, #0
 800d542:	4604      	mov	r4, r0
 800d544:	4608      	mov	r0, r1
 800d546:	602b      	str	r3, [r5, #0]
 800d548:	f7f4 fbd3 	bl	8001cf2 <_close>
 800d54c:	1c43      	adds	r3, r0, #1
 800d54e:	d102      	bne.n	800d556 <_close_r+0x1a>
 800d550:	682b      	ldr	r3, [r5, #0]
 800d552:	b103      	cbz	r3, 800d556 <_close_r+0x1a>
 800d554:	6023      	str	r3, [r4, #0]
 800d556:	bd38      	pop	{r3, r4, r5, pc}
 800d558:	20002124 	.word	0x20002124

0800d55c <_fstat_r>:
 800d55c:	b538      	push	{r3, r4, r5, lr}
 800d55e:	4d07      	ldr	r5, [pc, #28]	; (800d57c <_fstat_r+0x20>)
 800d560:	2300      	movs	r3, #0
 800d562:	4604      	mov	r4, r0
 800d564:	4608      	mov	r0, r1
 800d566:	4611      	mov	r1, r2
 800d568:	602b      	str	r3, [r5, #0]
 800d56a:	f7f4 fbce 	bl	8001d0a <_fstat>
 800d56e:	1c43      	adds	r3, r0, #1
 800d570:	d102      	bne.n	800d578 <_fstat_r+0x1c>
 800d572:	682b      	ldr	r3, [r5, #0]
 800d574:	b103      	cbz	r3, 800d578 <_fstat_r+0x1c>
 800d576:	6023      	str	r3, [r4, #0]
 800d578:	bd38      	pop	{r3, r4, r5, pc}
 800d57a:	bf00      	nop
 800d57c:	20002124 	.word	0x20002124

0800d580 <_isatty_r>:
 800d580:	b538      	push	{r3, r4, r5, lr}
 800d582:	4d06      	ldr	r5, [pc, #24]	; (800d59c <_isatty_r+0x1c>)
 800d584:	2300      	movs	r3, #0
 800d586:	4604      	mov	r4, r0
 800d588:	4608      	mov	r0, r1
 800d58a:	602b      	str	r3, [r5, #0]
 800d58c:	f7f4 fbcd 	bl	8001d2a <_isatty>
 800d590:	1c43      	adds	r3, r0, #1
 800d592:	d102      	bne.n	800d59a <_isatty_r+0x1a>
 800d594:	682b      	ldr	r3, [r5, #0]
 800d596:	b103      	cbz	r3, 800d59a <_isatty_r+0x1a>
 800d598:	6023      	str	r3, [r4, #0]
 800d59a:	bd38      	pop	{r3, r4, r5, pc}
 800d59c:	20002124 	.word	0x20002124

0800d5a0 <_lseek_r>:
 800d5a0:	b538      	push	{r3, r4, r5, lr}
 800d5a2:	4d07      	ldr	r5, [pc, #28]	; (800d5c0 <_lseek_r+0x20>)
 800d5a4:	4604      	mov	r4, r0
 800d5a6:	4608      	mov	r0, r1
 800d5a8:	4611      	mov	r1, r2
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	602a      	str	r2, [r5, #0]
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	f7f4 fbc6 	bl	8001d40 <_lseek>
 800d5b4:	1c43      	adds	r3, r0, #1
 800d5b6:	d102      	bne.n	800d5be <_lseek_r+0x1e>
 800d5b8:	682b      	ldr	r3, [r5, #0]
 800d5ba:	b103      	cbz	r3, 800d5be <_lseek_r+0x1e>
 800d5bc:	6023      	str	r3, [r4, #0]
 800d5be:	bd38      	pop	{r3, r4, r5, pc}
 800d5c0:	20002124 	.word	0x20002124

0800d5c4 <_read_r>:
 800d5c4:	b538      	push	{r3, r4, r5, lr}
 800d5c6:	4d07      	ldr	r5, [pc, #28]	; (800d5e4 <_read_r+0x20>)
 800d5c8:	4604      	mov	r4, r0
 800d5ca:	4608      	mov	r0, r1
 800d5cc:	4611      	mov	r1, r2
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	602a      	str	r2, [r5, #0]
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	f7f4 fb54 	bl	8001c80 <_read>
 800d5d8:	1c43      	adds	r3, r0, #1
 800d5da:	d102      	bne.n	800d5e2 <_read_r+0x1e>
 800d5dc:	682b      	ldr	r3, [r5, #0]
 800d5de:	b103      	cbz	r3, 800d5e2 <_read_r+0x1e>
 800d5e0:	6023      	str	r3, [r4, #0]
 800d5e2:	bd38      	pop	{r3, r4, r5, pc}
 800d5e4:	20002124 	.word	0x20002124

0800d5e8 <_init>:
 800d5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ea:	bf00      	nop
 800d5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ee:	bc08      	pop	{r3}
 800d5f0:	469e      	mov	lr, r3
 800d5f2:	4770      	bx	lr

0800d5f4 <_fini>:
 800d5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5f6:	bf00      	nop
 800d5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5fa:	bc08      	pop	{r3}
 800d5fc:	469e      	mov	lr, r3
 800d5fe:	4770      	bx	lr
